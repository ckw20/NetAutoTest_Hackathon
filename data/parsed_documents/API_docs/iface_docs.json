{
  "TesterLibrary.Overall.common.reset_tester": "重置测试仪表环境至初始状态，清除所有现有配置并重新初始化系统。\n\n该函数通过调用内部 `_reset()` 方法来清除所有映射、缓存和硬件引用，并执行一系列关键操作以确保测试环境被正确重置。此外，它还会执行 ROM 级别的复位命令，更新系统条目为当前产品类型，并初始化 IMix 流量仿真配置。\n\n执行步骤：\n1. 调用 `_reset()` 方法以清除内部映射并重置 API 状态。\n2. 执行 `ResetROMCommand` 以进行底层系统复位。\n3. 从 `cl_instance` 获取并存储新的系统条目引用。\n4. 将当前产品类型赋值给系统条目。\n5. 通过 `init_imix()` 初始化默认的 IMix 流量模板。\n\n参数：\n    self (RenixAPI): 调用此方法的 RenixAPI 实例。\n\n返回值：\n    bool: 布尔值，表示函数执行是否成功（True/False）。\n\n注意：\n    - 此函数假定在调用前 `self.cl_instance` 和 `self.product` 已经被正确设置且有效。若未设置，可能会导致执行失败。\n    - 若返回值为 False，将抛出一个可继续执行的异常（ContinuableFailure），提示当前函数执行失败。",
  "TesterLibrary.Overall.common.init_tester": "初始化测试仪表环境并建立必要的连接与配置。\n\n该函数用于为网络测试准备测试仪表环境，包括设置日志、连接RTSM或CL实例（根据参数）、初始化系统组件（如ROM管理器和IMix流量模板），以及配置产品相关设置。函数会重置内部状态并创建所需的对象，以便后续测试使用。\n\nParameters:\n-----------\nProduct : str, optional\n    测试产品类型，支持 'BIGTAO' 和 'DARYU'。默认值：'BIGTAO'\n\nMode : str, optional\n    系统操作模式，通常用于指定数据库交互模式。支持 'Performance' 和 'DB'。默认值：'performance'\n\nLog : bool, optional\n    是否启用全局日志记录。如果为 True，则使用全局 LOGGER；否则使用标准 logging 模块。也会影响 Config.save() 的行为。默认值：True\n\nRtsm : str or None, optional\n    远端 RTSM 服务器地址。如果提供此值，则通过 RTSM 建立连接。默认值：None\n\nRtsmPort : int, optional\n    RTSM 服务器端口号（当 Rtsm 不为 None 时有效）。默认值：10001\n\nCL : str or None, optional\n    已存在的 CL（命令层）地址。若提供此值且未指定 Rtsm，则直接连接到该 CL 实例。默认值：None\n\nCLPort : int, optional\n    CL 服务器端口号（当 CL 不为 None 时有效）。默认值：9001\n\nTimeOut : int, optional\n    连接 RTSM 或 CL 实例的超时时间（单位：秒）。默认值：30\n\nStartApp : bool, optional\n    若通过 RTSM 连接，是否自动启动 Renix 应用界面。默认值：True\n\nShow : bool, optional\n    在启用日志的情况下，若 Show=True，则打印函数执行时间。默认值：False\n\nCheck : bool, optional\n    是否启用异常检测机制。若为 True，函数内部出现异常不会导致程序退出。默认值：True\n\nReturns:\n--------\nsys_entry : object\n    返回测试仪表根节点对象，用于访问系统核心功能以进行后续操作。\n\nExamples:\n---------\nRobotFramework 示例:\n\n.. code:: robotframework\n\n    | ${result} | init tester | Product=DARYU | Mode=Performance |\n\nFunction Behavior Overview:\n---------------------------\n- 根据 Log 参数设置日志记录方式。\n- 使用提供的参数保存配置（Config.save）。\n- 根据参数选择通过 RTSM 或直接连接 CL 实例：\n    - 若提供了 Rtsm 地址，则创建 RTSM 实例，连接 CL，并可选地启动应用。\n    - 若仅提供 CL 地址，则直接连接 CL。\n    - 若均未提供，则不建立连接，仅初始化本地资源。\n- 初始化 ROM 管理器和系统入口点。\n- 调用 `_reset()` 方法重置所有内部 API 状态。\n- 设置产品类型并获取系统入口数据。\n- 调用 `init_imix()` 初始化 IMix 流量模板。\n- 存储当前的 Mode 和 Product 类型供后续调用使用。\n\nSide Effects:\n-------------\n- 可能启动或连接 RTSM 会话。\n- 可能建立直接的 CL 连接。\n- 初始化 ROM 管理器和系统入口点。\n- 重置所有内部 API 状态。\n- 配置并保存日志/显示设置。\n- 初始化多个 IMix 流量模板。",
  "TesterLibrary.Overall.common.shutdown_tester": "关闭测试仪表测试进程\n\n此函数用于终止与当前 `RenixAPI` 实例关联的测试仪表会话。它通过调用底层 API 执行关闭操作，并在失败时抛出 `ContinuableFailure` 异常以允许测试框架继续执行后续步骤。\n\n参数:\n    无\n\n返回值:\n    bool: 如果关闭操作成功，则返回 True；如果失败，抛出 ContinuableFailure 异常，但异常处理允许测试流程继续。\n\n行为描述:\n    - 调用 `renix.shutdown_tester()` 执行实际的关闭逻辑。\n    - 如果返回值为 `False`，表示关闭失败，抛出 `ContinuableFailure` 异常，并附带函数名作为错误信息的一部分。\n    - 如果返回值为 `True`，表示关闭操作成功完成，直接返回该结果。\n\n注意事项:\n    - 此函数设计用于 Robot Framework 等自动化测试环境中，确保即使发生错误也能继续执行测试套件。\n    - 底层实现中无论是否成功都会返回 True，因此本函数的返回值始终为 True（除非抛出异常）。\n\n示例:\n\nRobotFramework 示例:\n\n.. code:: robotframework\n\n    | Shutdown Tester |\n\nPython 示例:\n\n.. code:: python\n\n    result = TesterLibrary.Overall.common.shutdown_tester()\n    print(result)  # 输出: True (除非抛出异常)",
  "TesterLibrary.Overall.common.start_app": "启动Renix客户端界面程序并连接RTSM的CL。\n\n该方法用于启动Renix客户端，并通过默认的主机地址和端口连接到RTSM（Remote Test Service Manager）的服务。内部调用了`renix.start_app()`来执行实际的连接操作。如果连接失败，将抛出一个可继续失败类型的异常；若成功，则返回表示连接状态的布尔值。\n\n返回值：\n    bool: 连接结果，True 表示成功，False 表示失败。\n\n注意事项：\n- 实际连接所使用的主机地址和端口由类实例属性 `self.host` 和 `self.cl_port` 提供。\n- 若需要使用非默认端口，应在调用此方法前设置 `self.cl_port`。\n- 若启动或连接过程中发生错误，会抛出 `ContinuableFailure` 异常并附带相关错误信息。\n\n示例：\n    robotframework:\n\n.. code:: robotframework\n\n    | Shutdown Tester |",
  "TesterLibrary.Overall.common.load_case": "加载测试仪表的配置文件并初始化相关内部结构。\n\n此函数用于从指定路径加载测试用例配置文件，执行后会初始化与测试用例相关的内部映射和流信息，并确保系统为后续操作做好准备。\n\nArgs:\n    Path (str): 配置文件路径，类型为字符串。\n                示例格式：\"C:/test.xcfg\"\n                该路径应指向一个与系统兼容的有效测试用例配置文件。\n\nReturns:\n    bool: 布尔值，表示操作是否成功。\n          成功时返回 True（或等效值），失败时抛出异常。\n\nRaises:\n    Failure: 如果加载配置文件失败，则抛出此异常，并附带相应的错误信息。\n\nSide Effects:\n    - 清除多个内部映射结构，包括 map_stream_header、map_stream_imix、map_protocol_object 和 MAP_HANDLE_OBJECT。\n    - 调用 LoadTestCaseCommand 来与 cl_instance 交互，以加载测试用例。\n    - 调用 self.sys_entry.get()，可能在加载后等待或获取系统的状态。\n\nDependencies:\n    - 依赖于 self.cl_instance 提供上下文以执行 LoadTestCaseCommand。\n    - 使用 EnumBase.TRUE.value 表示成功状态。\n    - 使用 @abnormal_check 装饰器处理异常情况。\n\nExamples:\n    robotframework:\n\n.. code:: robotframework\n\n    | ${result} | Load Case | Path=='C:/test.xcfg' |",
  "TesterLibrary.Overall.common.save_case": "保存指定的测试用例配置文件。\n\n该函数用于通过 Renix API 保存测试用例，其内部调用 `SaveTestCaseCommand` 来实际执行保存操作。函数使用 `cl_instance` 属性与底层命令引擎进行交互，完成测试用例的持久化存储。\n\n参数:\n    Path (str): 测试用例配置文件的路径或标识符。应指向一个有效的测试用例资源，例如：\"C:/test.xcfg\"。\n\n返回值:\n    bool: 如果保存操作成功，则返回 True；如果保存失败，则返回 False 并抛出 `ContinuableFailure` 异常。\n\n示例:\n    robotframework:\n\n    .. code:: robotframework\n\n        | ${result} | Save Case | Path=='C:/test.xcfg' |\n\n说明:\n    此函数是对底层 Renix 命令的封装，简化了直接调用底层接口的复杂性。若保存失败（即返回值为 False），会抛出可继续执行的异常，便于在自动化测试框架中进行错误处理和流程控制。",
  "TesterLibrary.Overall.common.connect_chassis": "连接测试仪表机箱后台。\n\n    该函数用于与一个或多个测试仪表机箱建立连接。支持传入单个IP地址或主机名，也支持以列表形式传入多个IP地址或主机名。\n    若输入为单个字符串，则会被自动封装为列表。函数内部通过 ConnectChassisCommand 命令对象执行实际连接操作，\n    并对连接过程中可能出现的异常进行处理，包括产品类型不匹配错误的特殊处理和连接失败时抛出 TesterException 异常。\n\n    Args:\n        Chassis (str or list of str): 要连接的一个或多个机箱的主机名或IP地址。如果是一个字符串，则将其转换为包含一个元素的列表。\n\n    Returns:\n        list: 连接成功的 Chassis 对象列表，每个对象可用于后续与对应机箱的交互操作。\n\n    Raises:\n        TesterException: 如果成功连接的机箱数量少于请求连接的机箱数量，表明部分连接失败。\n\n    Behavior:\n        - 将输入参数 Chassis 转换为列表格式（如输入为单个字符串）。\n        - 调用底层命令类 ConnectChassisCommand 执行连接操作。\n        - 处理连接过程中的异常，特别是产品类型不匹配的情况。\n        - 验证实际连接的机箱数量是否与预期一致。\n        - 返回通过 rom_manager 获取的已连接机箱对象列表。\n\n    Examples:\n        robotframework:\n\n    .. code:: robotframework\n\n        | ${Hosts} | Create List | 192.168.0.10 | 192.168.0.11 |\n        | ${Chassis} | Connect Chassis | Chassis=${Hosts} |",
  "TesterLibrary.Overall.common.del_objects": "删除一个或多个测试仪表相关对象\n\nArgs:\n\n    Objects (object or list): 单个对象或需要删除的对象列表。每个对象必须实现`delete()`方法，否则删除操作会失败。\n\nReturns:\n\n    bool: 操作执行结果，成功返回True，失败抛出ContinuableFailure异常\n\nRaises:\n\n    ContinuableFailure: 当删除操作失败时抛出该异常，包含失败方法名和错误信息\n\nFunctionality:\n    调用底层renix.del_objects方法执行删除操作，通过将测试仪表对象（或对象列表）传递给底层API，依次调用每个对象的`delete()`方法完成资源释放。若删除过程中出现错误，会抛出可继续执行的异常；若删除成功，则返回True。\n\nExamples:\n    robotframework示例:\n\n.. code:: robotframework\n\n    | ${Port} | Get Ports |\n    | Del Objects | Port=${Port} |\n\nNote:\n    1. 所有传入对象必须包含delete()方法\n    2. 返回True仅代表操作完成，不保证所有对象删除成功\n    3. 若需单独删除一个对象，无需封装成列表直接传入即可",
  "TesterLibrary.Overall.common.get_configs": "获取测试仪表中指定的配置对象，并以字典形式返回，可按名称或句柄作为键进行检索，支持层级过滤。\n\nArgs:\n    Configs (str, list, set, tuple, optional): 指定要获取的配置对象名称。如果为 None（默认值），则返回所有配置对象。\n        如果是字符串，则将其视为单个配置名称进行匹配；如果是可迭代对象（如列表、集合、元组），则其中每个元素都被视为一个配置名称进行匹配。\n        匹配过程对大小写不敏感，默认匹配依据为配置对象 'handle' 属性的第一部分（即下划线 '_' 分隔前的部分）。\n\n    KeyType (str, optional): 返回字典中使用的键类型，默认值：'handle'。支持以下选项：\n        'handle': 使用配置对象的 'handle' 属性作为字典的键。\n        'name': 使用配置对象的 'Name' 属性作为字典的键。\n\n    Upper (str 或 object, optional): 如果提供此参数，则仅返回具有指定上层节点的配置对象。使用 check_upper_exist() 方法检查层级关系是否匹配。\n        如果为 None（默认值），则不进行层级过滤。\n\nReturns:\n    dict: 包含符合筛选条件的配置对象的字典，格式为 {'handle': object} 或 {'name': object}，具体取决于 KeyType 参数。\n        如果没有找到符合条件的配置对象，则返回 False。\n\nRaises:\n    ContinuableFailure: 如果调用底层接口失败（即返回值为 False 时），将抛出此异常。\n\nExamples:\n    robotframework:\n\n.. code:: robotframework\n\n    | ${Result} | Get Configs | KeyType=name |\n    | ${Result} | Get Configs | Configs=StreamTemplate | KeyType=handle |\n    | ${Result} | Get Configs | Configs=BgpProtocolConfig | KeyType=name |\n    | ${Result} | Get Configs | Configs=StreamTemplate | KeyType=handle | Upper=${Port_1} |\n    | ${Result} | Get Configs | Configs=BgpProtocolConfig | KeyType=name | Upper=${Port_1} |",
  "TesterLibrary.Overall.common.edit_overall_setting": "编辑测试仪表全局参数\n\n该函数用于根据提供的关键字参数编辑测试仪表的全局配置。支持更新多个配置部分，包括流全局配置、二层学习配置、ARP/ND选项和Y.1731 LM全局配置。每个配置部分包含一组特定的可配置参数。如果提供了属于这些配置之一的参数，则会将其应用到相应的系统对象上；不匹配任何已知配置字段的参数将被忽略。\n\nSupported configuration sections and their parameters:\n\n- StreamGlobalConfig:\n    - PortSendMode (str): 端口发送模式，默认值：SYNCHRONOUS，取值范围：SYNCHRONOUS, ASYNCHRONOUS\n    - MeshCreationMode (str): 拓扑创建模式，默认值：PortBased，取值范围：PortBased, EndpointBased\n\n- L2LearningConfig:\n    - Rate (int): 学习速率（帧/秒），默认值：100，取值范围：1-4294967295\n    - RepeatCount (int): 重复次数，默认值：3，取值范围：0-4294967295\n    - DelayTime (int): 学习前延迟时间（毫秒），默认值：1，取值范围：0-4294967295\n    - RxLearningEncapsulation (str): 接收学习时使用的封装类型，默认值：TX_ENCAPSULATION，取值范围：NO_ENCAPSULATION, TX_ENCAPSULATION\n\n- ArpOption:\n    - EnableAutoArp (bool): 是否启用自动ARP/ND，默认值：True\n    - StopOnArpFail (bool): ARP/ND失败是否停止测试，默认值：False\n    - AutoArpWaitTime (int): 自动ARP/ND等待时间（毫秒），默认值：30，取值范围：0-4294967295\n\n- Y1731Option:\n    - TestModeType (str): Y.1731测试模式，默认值：TYPE_NORMAL，取值范围：TYPE_NORMAL, TYPE_CC_SCALE_MODE, TYPE_CC_SCALE_MODE_WITHOUT_RX\n    - LmmTxFCfOffset (int): LMM帧的TxFCF偏移值，默认值：0，取值范围：0-32767\n    - LmrRxFCfOffset (int): LMR帧的RxFCF偏移值，默认值：0，取值范围：0-32767\n    - LmrRxFCfStart (int): LMR帧的RxFCF初始值，默认值：1，取值范围：0-4294967295\n    - LmrRxFCfStep (int): LMR帧的RxFCF更新步长，默认值：1，取值范围：0-65535\n    - LmrTxFCbOffset (int): LMR帧的TxFCB偏移值，默认值：0，取值范围：0-32767\n    - LmrTxFCbStep (int): LMR帧的TxFCB更新步长，默认值：9，取值范围：1-65535\n    - DmTimeUnit (str): DM时间统计单位，默认值：TIME_MS，取值范围：TIME_MS, TIME_NS\n\nKeyword Args:\n    **kwargs: 表示配置参数的任意关键字参数。这些应该对应于上述支持的配置段中的一个或多个。\n\nReturns:\n    bool: 如果所有提供的有效参数都成功应用，则返回True；否则返回False。注意无效参数会被忽略，不会导致函数返回False。\n\nExamples:\n    robotframework:\n\n.. code:: robotframework\n\n    | edit_overall_setting | PortSendMode=ASYNCHRONOUS | RxLearningEncapsulation=TX_ENCAPSULATION | EnableAutoArp=False | TestModeType=TYPE_CC_SCALE_MODE |",
  "TesterLibrary.Overall.common.create_peclsp_for_srte": "从Excel表格创建SRTE性能测试PCE LSP\n\nDescription:\n该函数用于根据Excel文件中的数据创建指定数量的SR-TE（Segment Routing Traffic Engineering）性能测试所需的PCE LSP（Path Computation Element Label Switched Path）配置。每个LSP配置包括源IP地址、目的IP地址，以及包含特定SID（Segment Identifier）值的段路由ERO（Explicit Route Object）子对象。\n\nArgs:\n\n    Excel (str): Excel文件完整路径。该Excel文件至少应包含5列数据：\n        - 第1列：源IP地址（Source IP）\n        - 第2列：目的IP地址（Destination IP）\n        - 第3列：AdjSID（Adjacency Segment Identifier）\n        - 第4列：NodeSID（Node Segment Identifier）\n\n    Session (object): 会话对象，表示创建PceLspConfig对象的父上下文。\n\n    TunnelCount (int, optional): 要分配给对等体的隧道总数，默认为16000。\n\n    PcelspCount (int, optional): 要创建的PCE LSP数量，决定生成配置时循环的次数，默认为4000。\n\n    SymbolicNameIdentification (str, optional): 用于生成每个LSP唯一符号名称的基础字符串，默认为'Tunnel'。\n\nReturns:\n\n    bool: 成功完成配置过程后返回True，表示所有请求的PCE LSP均按照输入参数和数据成功创建。\n\nExamples:\n\n    >>> create_peclsp_for_srte(Excel='C:/config/srte_config.xlsx', Session=session_obj)\n\nRaises:\n\n    ContinuableFailure: 如果内部调用的create_peclsp_for_srte方法返回False，则抛出ContinuableFailure异常，表示操作失败但测试可继续执行。",
  "TesterLibrary.Overall.common.create_bgp_ipv4_flowspec_performance": "创建 BGP IPv4 Flow Specification 性能测试条目\n\n该函数用于生成一组 BGP IPv4 Flow Specification 配置，以在不同条件下测试其性能表现。通过将源前缀和目的前缀划分为两部分，并结合 DSCP 值的多种组合，创建多个 FlowSpec 条目，每个条目包含匹配条件（目的前缀、源前缀、DSCP）以及对流量进行标记的动作。\n\n参数:\n    Session (object): 会话对象，表示当前连接或上下文环境，所有 FlowSpec 实例将在此会话中创建。\n    MaxRouteCount (int): 要生成的最大路由数量，决定创建多少个 FlowSpec 条目。\n    SourcePrefix (list of str): IPv4 源地址前缀列表，用于构建 FlowSpec Type 2 组件。\n                                列表会被均分为两部分以交替使用。\n    DestPrefix (list of str): IPv4 目的地址前缀列表，用于构建 FlowSpec Type 1 组件。\n                              列表会被均分为两部分以实现规则集分布。\n\n返回值:\n    bool: 成功创建所有配置后返回 True；若失败则返回 False。\n\n行为说明:\n    - 将 `DestPrefix` 和 `SourcePrefix` 各自分为两半，分别用于不同阶段的路由配置。\n    - 根据 `MaxRouteCount` 和前缀数量计算每组组合应生成的路由数。\n    - 针对每一个目的前缀和 DSCP 值 [8, 16, 24, 40, 56] 的组合：\n        - 创建包含以下组件的 BGP IPv4 FlowSpec 配置：\n            - 类型 1 组件：目的地址前缀\n            - 类型 2 组件：源地址前缀\n            - 类型 11 组件：DSCP 匹配\n            - 动作组件：流量标记（DSCP 重写）\n    - 通过两个主要循环处理所有目的前缀与 DSCP 的组合。\n    \n副作用:\n    - 在提供的 Session 对象内创建多个实例，包括：\n        - BgpIpv4FlowSpecConfig\n        - BgpIpv4FlowSpecType1Component\n        - BgpIpv4FlowSpecType2Component\n        - BgpIpv4FlowSpecType11Component\n        - BgpIpv4FlowSpecAction\n    - 在匹配与动作阶段修改 DSCP 值，模拟流量分类与再标记行为。\n\n备注:\n    - 函数假设 Session 对象支持必要的方法如 `get_children()` 和 `edit()`。\n    - 使用固定的前缀长度（目的为 /16，源为 /24），并采用步长为 1 进行路由生成。\n    - 动作中的 DSCP 映射是硬编码的（例如，匹配 DSCP 8 的流量被重新标记为 DSCP 56）。",
  "TesterLibrary.Overall.common.smart_scripter_global_group": "获取智能脚本的全局组对象\n\n该函数用于获取 Renix 环境中 SmartScripter 的全局组对象。它是一个封装函数，内部调用 `get_smart_scripter_global_group()` 来获取全局组对象，通常用于访问在多个脚本或会话之间共享的配置或上下文。\n\n返回值为 SmartScripter 管理的全局组对象，可能包含跨多个脚本或会话的共享设置、配置或工具。\n\n如果执行过程中检测到异常情况（由 @abnormal_check 装饰器处理），将抛出异常。\n\n返回:\n    (:obj:`GroupCommand`): 智能脚本的全局组对象\n\n示例:\n    robotframework:\n\n.. code:: robotframework\n\n    | Smart Scripter Global Group |",
  "TesterLibrary.Overall.common.smart_scripter_command": "Executes a SmartScripter command by creating and configuring a command object within the specified parent group.\n\nThis function facilitates interaction with the SmartScripter interface by abstracting the command creation and configuration process. It creates a command object using the provided command type under the given parent group, applies optional renaming for identification, and configures the command using keyword arguments.\n\nParameters:\n- ParentGroup (:obj:`GroupCommand`): The parent group object under which the command will be created. This defines the context or grouping for the command execution.\n- Command (str): The name of the SmartScripter command to create, corresponding to a command class in the Renix API (e.g., \"StartProtocolCommand\"). Valid command names are documented in the Renix English manual.\n- Rename (str, optional): An optional custom name for the command instance to aid in identification. Defaults to an empty string.\n- **kwargs: Arbitrary keyword arguments used to configure the command. These correspond to the parameters supported by the specific command and are passed directly to the command's `edit` method.\n\nReturns:\n- object: The configured SmartScripter command object after successful creation and parameter application. This object can be further manipulated or used for querying command status.\n\nRaises:\n- ContinuableFailure: If the command creation fails, a `ContinuableFailure` exception is raised with a descriptive error message.\n\nExample Usage:\n.. code:: robotframework\n\n    | Smart Scripter Command | ParentGroup=${GlobalGroup} | Command=StartProtocolCommand | ProtocolList=${bgp} |\n\nThis example starts a protocol command via SmartScripter, targeting the protocols listed in `${bgp}` under the global group context.",
  "TesterLibrary.Overall.common.smart_scripter_control_condition": "创建智能脚本控制命令的条件对象，用于配置和应用条件逻辑（如 If、Else If、While 等）到指定的命令上。\n\n此函数根据提供的条件类型创建条件对象，并将其与给定的控制命令关联。同时支持设置条件判断结果以及附加参数，以实现复杂的测试或自动化流程控制。\n\nArgs:\n\n    ControlCommand (obj): 智能脚本命令对象，该对象必须支持 `set_relatives` 和 `edit` 方法，以便与条件对象建立关系并设置其属性。当前支持的命令包括：\n\n        IfCommand\n\n        ElseIfCommand\n\n        ElseCommand\n\n        LoopCommand\n\n        ContinueCommand\n\n        BreakCommand\n\n        GotoCommand\n\n        WhileCommand\n\n    ControlConditionName (str): 要创建的条件类型名称，表示该条件的用途或触发时机。例如：\n\n        StartStreamCommand\n\n        有效值请参照 renix 英文手册中各命令对应的 Condition Name。\n\n    ConditionResult (str, optional): 条件判断的预期结果，默认为 \"PASS\"。仅在使用以下命令时有效：\n\n        IfCommand\n\n        ElseIfCommand\n\n        WhileCommand\n\n        可选值包括：\n\n            PASS - 表示条件成立\n\n            FALSE - 表示条件不成立\n\nKeyword Args:\n\n    **kwargs (dict): 用于进一步配置条件对象的额外参数。这些参数将直接传递给条件对象的 `edit` 方法，具体可用参数取决于所使用的 ControlConditionName，请参考 renix 英文手册中的对应 command 参数说明。\n\nReturns:\n\n    object: 新创建并配置完成的条件对象，已与传入的 ControlCommand 关联。\n\nRaises:\n\n    ContinuableFailure: 如果底层调用失败（返回 False），则抛出可继续执行的失败异常。\n\nExample:\n    在 Robot Framework 中使用示例：\n\n.. code:: robotframework\n\n    | ${IfCommand} | Smart Scripter Command | ParentGroup=${GlobalGroup} | Command=IfCommand |\n    | Smart Scripter Control Condition | ControlCommand=${IfCommand} | ControlConditionName=StartStreamCommand | ConditionResult=FALSE | ProtocolList=${bgps} |",
  "TesterLibrary.Port.capture.start_capture": "启动测试仪表端口数据抓包\n\n该函数用于在指定的测试仪端口或其关联的捕获配置上启动数据包捕获操作。它通过调用 Renix API 实现底层功能，支持多种启动捕获的方式：根据端口对象列表、根据捕获配置对象列表，或者若未指定任何参数，则在所有可用端口上启动捕获。\n\nArgs:\n\n    Ports (list, optional): 测试仪端口Port对象列表。每个Port对象应包含`get_children('CaptureConfig')`方法以获取相关联的捕获配置。\n                           如果为 None，默认将在所有可用端口上启动捕获。\n    \nReturns:\n\n    bool: 操作结果布尔值。成功返回 True，失败抛出异常 ContinuableFailure。\n\nRaises:\n\n    ContinuableFailure: 如果底层API调用返回 False，表示启动捕获失败。\n\nExamples:\n    robotframework:\n\n.. code:: robotframework\n\n    | ${Locations} | Create List | //192.168.0.1/1/1 | //192.168.0.1/1/2 |\n    | ${Ports} | Reserve Ports | ${Ports} | ${Locations} |\n    | Start Capture | Ports=${Ports} |\n\nDescription:\n    - 若提供了 Ports 参数，则会在这些端口的关联 CaptureConfig 上启动捕获。\n    - 若未提供 Ports（即为 None），则默认调用 StartAllCaptureCommand 在所有可用端口上启动捕获。\n    - 本函数内部封装了对底层命令（StartCaptureCommand / StartAllCaptureCommand）的调用逻辑，并交由 cl_instance 执行。",
  "TesterLibrary.Port.capture.stop_capture": "停止测试仪表端口数据抓包。\n\n该函数用于停止在指定测试仪端口上进行的数据包捕获操作。如果未提供具体端口，则会停止所有正在进行的捕获任务。它封装了底层的 `renix.stop_capture` 方法，并对返回结果进行了判断，若失败则抛出异常。\n\n### 参数\n\n- **Ports** (list, optional): 测试仪端口对象（Port）的列表，表示需要停止抓包的端口。如果为 None，则停止所有端口的数据包捕获。默认值为 None。\n\n### 返回值\n\n- **bool**: 操作是否成功。返回 `True` 表示成功，`False` 表示失败。若失败，会抛出 `ContinuableFailure` 异常。\n\n### 支持的调用方式\n\n- 通过指定端口对象列表来停止对应端口的数据包捕获。\n- 若不传入任何端口对象，则停止所有端口的抓包操作。\n\n### 示例\n\nRobotFramework 示例：\n\n```robotframework\n| ${Locations} | Create List | //192.168.0.1/1/1 | //192.168.0.1/1/2 |\n| ${Ports} | Reserve Ports | ${Locations} |\n| Start Capture | Ports=${Ports} |\n| Sleep | 30 |\n| Stop Capture | Ports=${Ports} |\n```\n\nPython 示例：\n\n```python\nlocations = [\"//192.168.0.1/1/1\", \"//192.168.0.1/1/2\"]\nports = reserve_ports(locations)\nstart_capture(ports=ports)\ntime.sleep(30)\nstop_capture(ports=ports)\n```\n\n### 注意事项\n\n- 如果提供了无效的端口对象或端口未进行过抓包操作，可能导致操作无效果或返回失败。\n- 此函数内部依赖 Renix API 的 `stop_capture` 实现实际功能。",
  "TesterLibrary.Port.capture.edit_capture": "编辑指定端口的数据捕获配置参数。\n\n该函数用于修改一个或多个测试仪表端口的数据捕获配置。每个端口必须具有关联的 CaptureConfig 子对象，配置参数通过关键字参数传递，并直接应用于 CaptureConfig 的 edit 方法。\n\nArgs:\n\n    Ports: 测试仪表端口对象，可以是单个对象或包含多个端口对象的集合（列表、元组或集合）\n\nKeyword Args:\n\n    Name (str): 端口捕获名称\n\n    CaptureMode (str): 捕获模式，默认值：ALL，支持参数：\n\n        ALL - 捕获所有流量\n\n        CTRL_PLANE - 仅控制平面流量\n\n        RealTime_All - 实时捕获，包括控制平面和数据平面接收流量\n\n    CacheCapacity (str): 缓存容量大小，默认值：Cache_Max，支持选项：\n\n        Cache_Max, Cache_32KB, Cache_64KB, Cache_128KB, Cache_256KB, Cache_512KB,\n\n        Cache_1MB, Cache_2MB, Cache_4MB, Cache_8MB, Cache_16MB, Cache_32MB,\n\n        Cache_64MB, Cache_128MB, Cache_256MB, Cache_512MB, Cache_1GB\n\n    FilterMode (str): 过滤模式，默认值：BYTE，支持选项：\n\n        BYTE - 按字节过滤\n\n        PDU - 按协议数据单元过滤\n\n    BufferFullAction (str): 缓冲区满时的操作，默认值：STOP，支持选项：\n\n        STOP - 停止捕获\n\n        WRAP - 覆盖最早的数据\n\n    StartingFrameIndex (int): 开始下载的帧索引，默认值：1\n\n    AttemptDownloadPacketCount (int): 尝试下载的报文数量，默认值：0（表示下载所有报文）\n\n    FcsError (bool): 是否启用FCS错误检测，默认值：False\n\n    Ipv4ChecksumError (bool): 是否启用IPv4校验和错误检测，默认值：False\n\n    PayloadError (bool): 是否启用载荷错误检测，默认值：False\n\n    EnableRealtimeCapture (bool): 是否启用实时捕获模式，默认值：False\n\n    SliceMode (str): 切片模式，默认值：DISABLE，支持选项：\n\n        DISABLE - 禁用切片\n\n        ENABLE - 启用切片\n\n    SliceByteSize (int): 切片大小（字节），取值范围：32-16383，默认值：128\n\nReturns:\n\n    bool: 如果所有指定端口的捕获配置都成功修改则返回 True，否则返回 False\n\nRaises:\n\n    ContinuableFailure: 如果执行过程中发生异常（如端口缺少 CaptureConfig 对象等）\n\nExamples:\n\n    robotframework 示例：\n\n    .. code:: robotframework\n\n        | Edit Capture | Ports=${Ports} | CaptureMode=CTRL_PLANE |",
  "TesterLibrary.Port.capture.create_capture_byte_pattern": "创建捕获字节模式以过滤指定端口上的数据包。\n\n此函数在给定端口的捕获配置中设置一个 CaptureBytePattern 对象，用于根据特定的字节级条件过滤捕获的数据包。如果端口尚未配置 CapturePduFilter，则自动创建该对象，以支持基于字节模式的数据包匹配和捕获。\n\n参数：\n----------\nPort : Port 对象或 Port 对象的列表/集合/元组\n    需要配置捕获的物理端口。若传入的是多个端口（如列表、集合或元组），则仅使用第一个端口。\n    该端口必须已经包含一个 CaptureConfig 子对象。\n\n**kwargs : dict\n    可选的关键字参数，用于配置 CaptureBytePattern 的属性。包括但不限于以下参数：\n\n    - CustomCapturePatternOperator (str): 表达式位运算符，可选 AND、OR、XOR，默认为 AND。\n    - CustomCapturePatternNot (bool): 是否对表达式取反，默认为 False。\n    - UseFrameLength (bool): 是否启用帧长度作为过滤条件，默认为 False。\n    - Data (hex): 匹配数据的最小值，十六进制字符串形式，默认为 0x0。\n    - MaxData (hex): 匹配数据的最大值，十六进制字符串形式，默认为 0xff。\n    - Mask (hex): 掩码，用于屏蔽部分字节进行匹配，默认为 0xff。\n    - Offset (int): 在数据包中的偏移量（从0开始），用于定位匹配位置，默认为 0。\n    - MinFrameLength (int): 当 UseFrameLength 为 True 时，表示最小帧长度，默认为 64。\n    - MaxFrameLength (int): 当 UseFrameLength 为 True 时，表示最大帧长度，默认为 16383。\n\n返回值：\n--------\nhandle : str\n    创建的 CaptureBytePattern 对象的唯一标识符（句柄），可用于后续操作，例如修改或删除该字节模式。\n\n描述：\n------------\n此函数用于配置基于字节级规则的数据包捕获过滤机制。它确保端口具备必要的捕获结构（如 CapturePduFilter），然后创建一个字节模式规则，定义哪些数据包应被匹配并捕获。通过指定掩码、偏移量、数据范围等参数，可以精确控制捕获行为。\n\n示例：\n-------\n>>> port = get_port('myPort')\n>>> pattern_handle = create_capture_byte_pattern(port, Data='0x1234', Mask='0xFFFF', Offset=0, CustomCapturePatternOperator='OR')",
  "TesterLibrary.Port.capture.create_capture_pdu_pattern": "创建并配置用于报文捕获过滤的Capture PDU（Protocol Data Unit）模式。\n\n该函数在指定端口的捕获配置（CaptureConfig）下创建一个CapturePduPattern对象。它允许通过指定协议头类型、字段名或层级、以及各种参数如值（Value）、掩码（Mask）、偏移量（Offset）等，来定义在抓包过程中如何匹配数据包。\n\nArgs:\n\n    Port (:obj:`Port` or list/set/tuple of objects): 测试仪表端口对象或其集合，若传入多个端口，则只使用第一个。\n    HeaderTypes (str or list of str): 指定参与匹配的协议头部类型。支持的协议包括：\n\n        ethernetii\n        vlan\n        vxlan\n        arp\n        ipv4\n        ipv6\n        tcp\n        udp\n        l2tpv2data\n        l2tpv3controloverip\n        ppp\n        pppoe\n        icmpv4echorequest\n        destunreach\n        icmpv4echoreply\n        informationreply\n        informationrequest\n        icmpv4parameterproblem\n        icmpv4redirect\n        sourcequench\n        timeexceeded\n        timestampreply\n        timestamprequest\n        icmpmaskrequest\n        icmpmaskreply\n        destinationunreachable\n        icmpv6echoreply\n        icmpv6echorequest\n        packettoobig\n        icmpv6parameterproblem\n        timeexceed\n        routersolicit\n        routeradvertise\n        icmpv6redirect\n        neighborsolicit\n        neighboradvertise\n        mldv1query\n        mldv1report\n        mldv1done\n        mldv2query\n        mldv2report\n        igmpv1\n        igmpv1query\n        igmpv2\n        igmpv2query\n        igmpv3report\n        igmpv3query\n        custom\n        ospfv2linkstateupdate\n        ospfv2linkstaterequest\n        ospfv2databasedescription\n        ospfv2linkstateacknowledge\n        ospfv2unknown\n        ospfv2hello\n        mpls\n\nKeyword Args:\n\n    TemplateString (str, optional): 定义PDU结构的模板字符串。\n    Value (any): 匹配字段的精确值。\n    MaxValue (any): 基于范围匹配的最大可接受值。\n    Mask (str): 在匹配时应用于字段的位掩码。\n    Offset (int): 字段从头部起始位置的字节偏移量。\n    Level (str or int): 当处理分层头部（例如嵌套协议）时，表示层级索引（以点分隔的层次结构），用于动态提取字段名称。\n    Attribute (str): 与Level一起使用，指定指定头部层级中的属性名称。\n    FieldName (str): 直接指定过滤字段名称的替代方式（当不使用Level和Attribute时使用）。每个段的第一个字母会自动转换为小写。\n    CustomCapturePatternOperator (str): 表达式位运算符，默认值：AND，支持：\n\n        AND\n\n        OR\n\n        XOR\n\n    CustomCapturePatternNot (bool): 是否对表达式取反，默认值：False。\n\nReturns:\n\n    str: 创建的CapturePduPattern实例的句柄，可用于后续引用或操作，例如在过滤或分析操作中。\n\nExamples:\n    robotframework:\n\n.. code:: robotframework\n\n    | Init Tester |\n    | ${Port} | reserve_port | Locations=//192.168.0.180/1/1 |\n    | ${HeaderTypes} | Create List | EthernetII | IPv4 |\n    | ${Stream} | Add Stream | Ports=${Port} |\n    | Create Stream Header |Stream=${Stream} | HeaderTypes=${HeaderTypes} |\n    | &{Attribute} | Edit Header Ipv4 |Stream=${Stream} | Level=0 | TTL=200 | Source=10.1.1.2 |\n    # 使用Level和Attribute参数设置Pdu Pattern\n    | ${Pattern_1} | Create Capture Pdu Pattern | Port=${Port} | HeaderTypes=${HeaderTypes} |  Level=1  | Attribute=${Attribute}[TTL] | Value=200 | MaxValue=200 |\n    # 等价于：使用FieldName参数设置Pdu Pattern\n    | ${Pattern_2} | Create Capture Pdu Pattern | Port=${Port} | HeaderTypes=${HeaderTypes} | FieldName=ipv4_1.ttl | Value=200 | MaxValue=200 |",
  "TesterLibrary.Port.capture.edit_capture_pattern": "修改Capture Pattern参数\n\n该函数用于编辑已存在的捕获模式（Capture Pattern），支持对Byte Pattern和Pdu Pattern两种类型的捕获模式进行参数修改。\n\nArgs:\n\n    Pattern (str): Capture Pattern的标识符，类型为字符串。例如：CaptureBytePattern_1或CapturePduPattern_1，表示要修改的具体捕获模式对象。\n\nKeyword Args:\n\n    支持的通用参数：\n\n        TemplateString (str): 用于直接更新捕获模式的模板字符串。\n\n        HeaderTypes (list): 报文头部类型列表，用于构建字段名称并进行结构化更新。\n\n    Byte Pattern特有参数（当使用TemplateString时适用）：\n\n        CustomCapturePatternOperator (str): 表达式位运算符，默认值为AND，可选值包括：\n\n            AND\n\n            OR\n\n            XOR\n\n        CustomCapturePatternNot (bool): 是否对表达式取反，默认值为False。\n\n        UseFrameLength (bool): 是否启用帧长度过滤，默认值为False。\n\n        Data (str): 匹配数据的最小值，十六进制字符串格式，默认值为0x0。\n\n        MaxData (str): 匹配数据的最大值，十六进制字符串格式，默认值为0xff。\n\n        Mask (str): 数据掩码，十六进制字符串格式，默认值为0xff。\n\n        Offset (int): 数据偏移量，取值范围0-16378，默认值为0。\n\n        MinFrameLength (int): 帧最小长度（当UseFrameLength为True时有效），默认值为64。\n\n        MaxFrameLength (int): 帧最大长度（当UseFrameLength为True时有效），默认值为16383。\n\n    Pdu Pattern特有参数（当使用HeaderTypes、Level/Attribute或FieldName时适用）：\n\n        Level (int): 报文头部在流量模板中的层级编号，需与Attribute一同使用以构造字段名。\n\n        Attribute (str): 报文头部字段名称，需与Level一同使用。\n\n        FieldName (str): 指定具体的过滤字段名称，不能与Level和Attribute同时使用。\n\n        CustomCapturePatternOperator (str): 表达式位运算符，默认值为AND，可选值包括：\n\n            AND\n\n            OR\n\n            XOR\n\n        CustomCapturePatternNot (bool): 是否对表达式取反，默认值为False。\n\n        Value (str): 字段匹配的最小值。\n\n        MaxValue (str): 字段匹配的最大值。\n\n        Mask (str): 字段掩码。\n\nReturns:\n\n    bool: 返回布尔值表示操作是否成功，True为成功，False为失败。\n\nBehavior:\n\n    - 如果提供了TemplateString，则直接更新捕获模式的模板字符串。\n    - 如果提供了HeaderTypes以及相关参数（如Level、Attribute或FieldName），则通过构造字段名称并使用UpdateCapturePduPatternCommand进行结构化更新。\n    - 其余参数将通过edit方法应用到捕获模式对象上。\n\nNotes:\n\n    - 内部使用trans_first_letter_to_lower函数处理字段名称格式。\n    - 使用UpdateCapturePduPatternCommand来执行结构化的PDU模式更新。\n    - 通过cl_instance属性访问内部状态以确保封装性。\n\nExamples:\n    robotframework:\n\n.. code:: robotframework\n\n    | ${BytePattern} | Create Capture Byte Pattern | Port=${Port} | CustomCapturePatternOperator=OR | CustomCapturePatternNot=True |\n    | ${HeaderTypes} | Create List | EthernetII | IPv4 | Icmpv4EchoReply |\n    | ${PduPattern} | Create Capture Pdu Pattern | Port=${Port} | HeaderTypes=${HeaderTypes} | FieldName=Icmpv4EchoReply_1.code | Value=4 | MaxValue=5 | CustomCapturePatternOperator=OR | CustomCapturePatternNot=True |\n    | Edit Capture Pattern | Pattern=${BytePattern} | CustomCapturePatternOperator=XOR|\n    | Edit Capture Pattern | Pattern=${PduPattern} | CustomCapturePatternOperator=XOR|",
  "TesterLibrary.Port.capture.edit_capture_filter": "Edits the capture filter for a given port using the specified logic expression.\n\n    Parameters:\n    -----------\n    Port : object or iterable\n        A port object (or an iterable containing a single port object). If an iterable is provided,\n        only the first element will be used. The port must have an existing 'CaptureConfig' child \n        object to hold the capture filter configuration.\n    \n    Expression : str\n        A string representing the logic expression that defines the new capture filter. This \n        expression can combine byte patterns and PDU patterns using logical operators like && (AND) \n        and || (OR), and may include negation (!) for pattern inversion.\n\n    Returns:\n    --------\n    bool\n        Returns True if the capture filter was successfully updated. If the operation fails, \n        a ContinuableFailure exception is raised.\n\n    Description:\n    ------------\n    This function modifies the capture filter associated with a given port by either updating an \n    existing CapturePduFilter object under the port's CaptureConfig or creating a new one if it does not exist.\n    The function ensures that the capture filter reflects the provided logic expression which determines \n    what packets should be captured during network testing.\n\n    The capture filter allows selective packet capture based on complex matching rules defined through \n    byte patterns and header field conditions. Logical operators are used to combine multiple patterns \n    into a single filtering rule.\n\n    Examples:\n    ---------\n    robotframework:\n\n    .. code:: robotframework\n\n        | ${BytePattern} | Create Capture Byte Pattern | Port=${Port} | CustomCapturePatternOperator=OR | CustomCapturePatternNot=True |\n        | ${HeaderTypes} | Create List | EthernetII | IPv4 | Icmpv4EchoReply |\n        | ${PduPattern} | Create Capture Pdu Pattern | Port=${Port} | HeaderTypes=${HeaderTypes} | FieldName=Icmpv4EchoReply_1.code | Value=4 | MaxValue=5 | CustomCapturePatternOperator=OR | CustomCapturePatternNot=True |\n        | Edit Capture Filter | Port=${Port} | Expression=${BytePattern} && ${PduPattern} |",
  "TesterLibrary.Port.capture.edit_capture_event": "编辑指定端口上的帧捕获事件配置\n\n该函数用于修改指定测试端口上的帧捕获事件设置。通过 EventType 参数确定要配置的捕获事件类型（QUALIFY/START/STOP），并使用关键字参数设置相关的过滤和触发条件。\n\nArgs:\n\n    Port (:obj:`Port`): 测试仪表端口对象，表示需要配置捕获事件的物理或逻辑端口\n\n    EventType (str): 捕获事件类型，支持以下三种：\n        'QUALIFY' - 符合特定条件时才捕获帧\n        'START'   - 开始捕获帧\n        'STOP'    - 停止帧捕获\n\nKeyword Args:\n\n    LogicRelation (str): 定义多个捕获条件之间的逻辑关系，可选 'AND' 或 'OR'\n\n    PatternMatch (str): 是否包含/排除符合预定义模式的帧，可选 'INCLUDE' 或 'EXCLUDE'\n\n    FcsError (str): 是否处理带有FCS错误的帧，可选 'IGNORE' 或 'CAPTURE'\n\n    PrbsError (str): 是否处理PRBS错误帧，可选 'IGNORE' 或 'CAPTURE'\n\n    Ipv4ChecksumError (str): 是否处理IPv4校验和错误帧，可选 'IGNORE' 或 'CAPTURE'\n\n    TcpChecksumError (str): 是否处理TCP校验和错误帧，可选 'IGNORE' 或 'CAPTURE'\n\n    UdpChecksumError (str): 是否处理UDP校验和错误帧，可选 'IGNORE' 或 'CAPTURE'\n\n    IgmpChecksumError (str): 是否处理IGMP校验和错误帧，可选 'IGNORE' 或 'CAPTURE'\n\n    IcmpChecksumError (str): 是否处理ICMP校验和错误帧，可选 'IGNORE' 或 'CAPTURE'\n\n    SequenceError (str): 是否处理序列号错误帧，可选 'IGNORE' 或 'CAPTURE'\n\n    UndersizedFrame (str): 是否处理超短帧（小于最小以太网帧大小），可选 'IGNORE' 或 'CAPTURE'\n\n    OversizedFrame (str): 是否处理超长帧（大于最大以太网帧大小），可选 'IGNORE' 或 'CAPTURE'\n\n    JumboFrame (str): 是否处理Jumbo帧（大于标准MTU的帧），可选 'IGNORE' 或 'CAPTURE'\n\n    FrameLength (str): 是否根据帧长度进行过滤，可选 'IGNORE' 或 'MATCH'\n\n    FrameLengthValue (int): 当 FrameLength 设置为 'MATCH' 时，指定要匹配的确切帧长度（字节）\n\n    SignaturePresent (str): 是否处理包含签名的帧，可选 'IGNORE' 或 'CAPTURE'\n\n    StreamIdMatch (str): 是否根据流ID进行过滤，可选 'IGNORE' 或 'MATCH'\n\n    StreamId (int): 当 StreamIdMatch 设置为 'MATCH' 时，指定要匹配的流ID\n\n    Ipv4Packets (str): 是否捕获IPv4数据包，可选 'IGNORE' 或 'CAPTURE'\n\n    TcpPackets (str): 是否捕获TCP数据包，可选 'IGNORE' 或 'CAPTURE'\n\n    UdpPackets (str): 是否捕获UDP数据报，可选 'IGNORE' 或 'CAPTURE'\n\n    Ipv6Packets (str): 是否捕获IPv6数据包，可选 'IGNORE' 或 'CAPTURE'\n\n    IgmpPackets (str): 是否捕获IGMP消息，可选 'IGNORE' 或 'CAPTURE'\n\n    PayloadError (str): 是否捕获负载错误帧，可选 'IGNORE' 或 'CAPTURE'\n\nReturns:\n\n    bool: 如果成功找到并编辑了捕获事件返回 True，如果发生错误（如无法找到正确的事件）返回 False\n\nExamples:\n    robotframework:\n\n.. code:: robotframework\n\n    | Edit Capture Event | Port=${Port} | EventType=QUALIFY | LogicRelation=Or | PrbsError=INCLUDE | FrameLength=INCLUDE | FrameLengthValue=128 |",
  "TesterLibrary.Port.capture.download_packages": "Downloads captured data packets from a specified test instrument port and saves them to a file.\n\nThis function initiates the download of captured packets using the provided port configuration. The downloaded data is saved in the specified directory with the given filename. If the target directory does not exist, it will be created. The function waits for the download operation to complete within the given timeout period and raises an exception if it times out.\n\nArgs:\n    Port (:obj:`Port`): A test instrument port object that contains capture configuration and handle information. It must have a method `get_children` to retrieve associated CaptureConfig objects, and a `handle` attribute representing the port identifier.\n    FileDir (str): The directory path where the downloaded file will be saved. If `AppendPortHandle` is True, the port's handle will be appended to this path to create a unique subdirectory for the port. Example: \"D:/test\".\n    FileName (str): The name of the file where the downloaded capture data will be stored. Example: \"download.pcap\".\n    MaxCount (int, optional): Maximum number of packets to download. Defaults to 0, which indicates that all captured packets should be downloaded.\n    TimeOut (int, optional): Maximum time in seconds to wait for the download to complete. Defaults to 30. If the download doesn't finish within this time, a TesterException will be raised.\n    AppendPortHandle (bool, optional): Whether to append the port's handle to the FileDir path. Defaults to True, ensuring separate directories for different ports.\n\nReturns:\n    str: The absolute normalized path to the downloaded capture data file. For example: \"D:\\\\test\\\\10.0.5.10_1_1\\\\download.pcap\".\n\nRaises:\n    TesterException: If the download operation does not complete within the specified timeout period.\n\nExamples:\n    robotframework:\n\n.. code:: robotframework\n\n     | ${Port} | Get Ports |\n     | &{File} | Download Packages | Port=${Port} | FileDir=D:/test | FileName=download |\n\nDescription:\n    - Creates the target directory if it doesn't exist.\n    - Initiates the download command using the port's CaptureConfig.\n    - Waits for the capture state to return to IDLE, indicating completion.\n    - Returns the path to the downloaded file upon success, or raises an error on timeout.\n    - If the internal backend call returns False, a ContinuableFailure exception is raised to indicate a failure in the download process.",
  "TesterLibrary.Port.capture.get_capture_info": "获取指定端口的报文捕获相关信息。\n\n该函数用于从给定的测试仪表端口对象中检索与报文捕获相关的指定信息项。若未指定具体信息项，则默认返回所有常见的捕获属性。\n\n参数:\n\n    Port (:obj:`Port` 或 list/set/tuple): 测试仪表端口对象，或包含单个端口对象的列表/集合/元组。如果传入的是集合类型，则仅使用其中的第一个元素。\n\n    Items (str 或 list/set/tuple, 可选): 指定需要获取的捕获信息项。可以是单个字符串或多个字符串组成的列表、集合或元组。支持的信息项包括：\n\n        - 'CaptureState': 当前捕获状态\n        - 'ElapsedTime': 已经过的捕获时间\n        - 'CapturedPacketCount': 已捕获的数据包数量\n        - 'BufferFull': 缓冲区是否已满\n        - 'DownloadedPacketCount': 已下载的数据包数量\n        - 'CurrentDataFile': 当前数据文件路径\n\n        如果未提供此参数，则默认获取上述所有信息项。\n\n返回值:\n\n    dict: 包含请求信息项及其对应值的字典。若值为枚举类型，则会被转换为对应的名称字符串以增强可读性。\n\n示例（Robot Framework）:\n\n.. code:: robotframework\n\n    | Get Capture Info | Port=${Port} |",
  "TesterLibrary.Port.capture.get_capture_data": "获取指定端口捕获的报文数据\n\n该函数用于从指定端口的捕获缓冲区中获取特定索引位置的报文数据，包括时间戳、报文长度和原始数据。若输入的 Port 为列表、元组或集合类型，则只会使用其中的第一个元素进行捕获数据的获取。索引默认值为1，符合Renix API 的索引习惯。\n\n参数:\n    Port (:obj:`Port` 或 list/tuple/set of :obj:`Port`): 测试仪表端口对象或其集合。如果是集合类型，则只取第一个端口对象进行处理。\n    Index (int, optional): 报文在捕获缓冲区中的索引位置，默认为1。\n\n返回:\n    dict: 包含以下键值对的字典：\n        - 'Timestamp' (float): 报文捕获的时间戳（自纪元以来的秒数）\n        - 'Length' (int): 报文长度（以字节为单位）\n        - 'Data' (str 或 bytes): 报文的原始数据，通常为十六进制字符串或字节流\n\n异常:\n    如果当前没有可用的捕获配置，或者索引超出已捕获的报文数量，则会抛出异常（由 @abnormal_check 装饰器处理）。\n\n示例:\n    robotframework:\n\n    .. code:: robotframework\n\n        | Get Capture Data | Port=${Port} | Index=2 |",
  "TesterLibrary.Port.common.relocate_ports": "Relocates the specified ports to new physical locations on chassis.\n\n    This function updates the location of one or more ports and optionally brings them online\n    at their new locations. If not in debug mode, it connects to the target chassis, relocates\n    the ports, and ensures they are online. If a port fails to come online, an exception is raised.\n\n    Parameters:\n        Ports (RenixPort or list of RenixPort): A single port or a list of ports to be relocated.\n            Each port must be an object with attributes 'Location' and 'Online', and a property 'handle'.\n            \n        Locations (str or list of str): A single location or a list of new physical locations for the ports.\n            Each location should be a string formatted as '//<chassis-ip>/shelf=<shelf_id>/slot=<slot_id>'.\n            If a location does not start with '//', it will be prefixed automatically.\n\n        Force (bool, optional): If True, forces release of the port if it is already in use before relocation.\n            Default is False.\n\n        Debug (bool, optional): If True, skips the actual relocation steps (connecting to chassis,\n            releasing ports, bringing ports online). Useful for testing or dry runs. Default is False.\n\n    Returns:\n        int: The value of EnumBase.TRUE.value indicating successful execution.\n            (This typically signifies that all operations completed without error.)\n\n    Raises:\n        TesterException: If connecting to the chassis fails during relocation process.\n        ValueError: If any of the relocated ports fail to come online and Debug mode is not enabled.",
  "TesterLibrary.Port.common.reserve_port": "预约测试仪表的端口\n\n该方法用于连接指定的测试仪表机箱并预约其中的物理端口以供测试使用。如果某个端口已被其他用户或会话占用，可以通过设置 Force 参数为 True 来强制释放已有预约。在预约过程中，方法会检查每个机箱所需的许可，并在必要时建立连接。默认情况下，方法会在预约后等待所有端口状态变为 'up'。\n\n参数:\n    Locations (str or list-like): 端口在测试仪表机箱中的位置标识，格式为 //$(机箱IP地址)/$(板卡序号)/$(端口序号)。\n        可以是单个字符串或多个端口的列表，例如：'//192.168.1.1/1/1' 或 ['//192.168.1.1/1/1', '//192.168.1.2/2/1']。\n\n    Force (bool, optional): 是否强制释放已被占用的端口，默认值: False。\n\n    Debug (bool, optional): 是否启用调试模式，若启用则不会实际预约端口而是创建模拟对象，默认值: False。\n\n    WaitForStatusUp (bool, optional): 是否等待所有预约端口的状态变为 'up'，默认值: True。\n\n返回值:\n    list: 包含成功预约的端口对象的列表。如果没有成功预约任何端口，则返回空列表。\n\n异常:\n    TesterException: 在以下情况中抛出异常：\n        - 指定的机箱缺少必要的许可证。\n        - 预约失败或部分失败（如连接失败、授权不足等）。\n        - 实际预约成功的在线端口数量与请求的数量不一致。\n\n副作用:\n    - 根据需要连接到测试仪表机箱设备。\n    - 如果 Force 参数为 True，可能会释放已有的端口预约。\n    - 验证并应用相关的许可要求。\n    - 如果启用了捕获功能，则为每个预约的端口创建 CaptureEvent 实例。\n    - 更新内部状态以反映当前的端口预约情况。",
  "TesterLibrary.Port.common.release_port": "释放指定的测试仪表端口，使其可以被重新使用。\n\n该函数用于释放一个或多个物理端口位置（通过指定其路径）或特定的 Port 对象。如果不在 Debug 模式下，它将执行必要的命令来释放端口，并在执行后引入 5 秒钟的延迟以确保操作完成。\n\nParameters:\n    Locations (list of str, optional): 要释放的物理端口位置路径列表。路径可以是完整或部分的，部分路径会自动添加 '//' 前缀以形成有效的路径格式。例如：[\"//192.168.0.1/1/1\", \"//192.168.0.1/1/2\"]。默认值为 None。\n\n    Ports (list of Port objects or single Port object, optional): 要释放的端口对象或端口对象列表。每个端口的 handle 将被用于执行释放命令。默认值为 None。\n\n    Force (bool, optional): 如果为 True，即使端口正在被使用也会强制释放。如果为 False，当端口被占用时释放操作将失败。默认值为 False。\n\n    Debug (bool, optional): 如果为 True，将跳过实际命令的执行，仅进行模拟运行。启用 Debug 模式后不会对系统造成任何更改。默认值为 False。\n\nReturns:\n    bool: 如果成功释放端口则返回 True，否则返回 False。如果处于 Debug 模式且参数正确，则总是返回 True。\n\nExamples:\n    robotframework:\n\n.. code:: robotframework\n\n    | ${Locations} = | Create List | //192.168.0.1/1/1 | //192.168.0.1/1/2 |\n    | ${result} | Release Port | Locations=${Locations} |\n\n    | ${PortList} | Get Ports | ... |\n    | ${result} | Release Port | Ports=${PortList} | Force=True |",
  "TesterLibrary.Port.common.get_ports": "获取当前测试仪表配置中所有的端口对象。\n\n该函数通过调用底层 RenixAPI 实例的 `get_ports` 方法，从系统入口获取所有类型为 'Port' 的子对象。这些端口对象代表了可用于配置或测试的物理或虚拟端口。\n\n返回值是一个包含 Port 对象的列表，每个 Port 对象具有相应的属性和方法用于与对应的硬件或虚拟端口进行交互。\n\n如果底层调用失败，则抛出一个可继续执行的异常（ContinuableFailure），并附带失败信息；否则返回获取到的端口对象列表。\n\n返回值类型：\n    list: 包含 Port 对象的列表\n\n示例（Robot Framework）：\n\n.. code:: robotframework\n\n    | ${result} | Get Ports |",
  "TesterLibrary.Port.common.del_port": "删除测试仪端口及其关联的流模板\n\n该函数用于从RenixAPI实例中删除指定的端口及其关联的流模板对象。它会释放给定的端口资源，移除相关的流模板，并确保所有关联的内部映射（如map_stream_header和map_stream_imix）也被正确清理。\n\n如果未提供端口参数，则默认删除由rom_manager管理的所有Port对象。\n\n参数:\n\n    Ports (Union[Port, list, set, tuple], optional): 要删除的端口对象或端口对象集合。\n        可以是一个Port对象、列表、集合或元组。如果为None（默认），则删除所有已知的Port对象。\n\n返回值:\n\n    bool: 删除操作完成后始终返回True。\n\n函数行为说明:\n\n    - 如果'Ports'为None，则通过self.rom_manager获取所有Port对象。\n    - 将输入转换为列表格式（如果不是列表）。\n    - 对每个端口执行ReleasePortCommand命令（ForceRelease=True）。\n    - 收集与端口关联的所有StreamTemplate子对象。\n    - 对每个收集到的流模板：\n        - 从map_stream_header和map_stream_imix中移除对应的条目。\n    - 最终删除所有的端口对象。\n\n注意事项:\n\n    - 该函数使用@abnormal_check装饰器，可能在执行期间处理或抛出异常以应对异常情况。\n    - cl_instance属性被用于内部执行ReleasePortCommand。\n\n示例:\n\nRobotFramework 示例:\n\n.. code:: robotframework\n\n    | Del Port | Ports=${Port_1} |\n    | Del Port |",
  "TesterLibrary.Port.common.get_port_speed": "获取测试仪表端口的速率信息\n\n该函数用于查询指定测试仪表端口的链路速率。对于每个提供的端口对象，函数会查找其关联的媒体配置（SelectMedia），并从中获取对应的线路速率值。该速率通过全局或类级别的字典 `LINESPEED` 进行映射，将内部表示转换为可读性更高的标准值。\n\n参数:\n    Ports (object 或 list of objects): 要查询速率的一个或多个端口对象。每个端口应包含 `get_relatives` 方法，以便根据关系类型和方向找到相关联的对象。\n\n返回值:\n    list: 与输入端口一一对应的链路速率列表。若输入单个端口，则返回长度为1的列表。\n\n功能描述:\n    函数内部首先统一处理输入，将其转换为列表形式以确保一致的数据流处理。然后对每个端口进行如下操作：\n        1. 使用 `get_relatives` 方法查找目标方向上的 'SelectMedia' 关系对象。\n        2. 从该媒体对象中提取 LineSpeed 属性。\n        3. 利用 `LINESPEED` 字典将原始数值映射为标准化速度值。\n\n应用场景:\n    在网络测试场景中，此函数适用于获取当前端口所配置或协商成功的链路速度，例如用于验证、调试或报告生成等环节。\n\n示例:\nrobotframework:\n\n.. code:: robotframework\n\n    | Get Port Speed | Ports=${Ports} |",
  "TesterLibrary.Port.common.edit_port": "修改测试仪表端口参数，用于配置一个或多个端口的属性，包括物理链路状态、ARP相关设置以及其他通用端口配置。\n\nArgs:\n\n    Ports (list(:obj:`Port`)): 测试仪表端口列表。可以是单个 Port 对象或多个 Port 对象的列表。\n\nKeyword Args:\n\n    EnableLink (bool): 设置端口的物理链路状态（Up/Down），默认值: True\n\n    AutoNegotiation (bool): 端口自协商功能开关，默认值: False\n\n    Mtu (int): 端口最大传输单元（MTU）值，有效范围: 128-9600，默认值由系统决定\n\n    FecType (str): 前向纠错（FEC）类型，有效值包括:\n\n        TYPE_OFF\n\n        TYPE_RS_FEC_CLAUSE91\n\n        TYPE_FEC_CLAUSE74\n\n        TYPE_RS_FEC_CLAUSE108\n\n        TYPE_RS_FEC_CONSORTIUM\n\n        TYPE_RS_FEC_CLAUSE119\n\n        默认值: TYPE_OFF\n\n    LineSpeed (str): 端口速率设置，有效值包括:\n\n        SPEED_UNKNOWN\n\n        SPEED_10M\n\n        SPEED_100M\n\n        SPEED_1G\n\n        SPEED_2_5G\n\n        SPEED_5G\n\n        SPEED_10G\n\n        SPEED_25G\n\n        SPEED_40G\n\n        SPEED_50G\n\n        SPEED_100G\n\n        SPEED_200G\n\n        SPEED_400G\n\n        默认值: SPEED_1G\n\n    Duplex (str): 双工模式设置，有效值包括 HALF（半双工）、FULL（全双工），默认值: FULL\n\n    FlowControl (str): 流控设置，有效值包括 DISABLE（禁用）、ENABLE（启用）、AUTO（自动协商），默认值: DISABLE\n\n    Media (str): 端口媒介类型，有效值包括 COPPER（铜缆）、FIBER（光纤）、FAKE（模拟）\n\n    PhyMode (str): 物理层模式，有效值包括 MODE_AUTO、MODE_1000BASEX、MODE_SGMII，默认值: None\n\n    PpmAdjust (int): 频率偏差调整（单位：ppm），有效范围: -300~300，默认值: None\n\n    DataPathMode (str): 数据路径模式，有效值包括 NORMAL（正常）、LOOPBACK（环回），默认值: None\n\n    RemoteFault (str): 远端故障处理策略，有效值包括 NORMAL（正常）、IGNORE（忽略），默认值: None\n\n    Master (str): 端口主从模式，有效值包括:\n\n        ADVERTISE_SINGLE_PORT\n\n        ADVERTISE_MULTI_PORT\n\n        MANUAL_MASTER\n\n        MANUAL_SLAVE\n\n        默认值: None\n\n    NoParam (bool): 是否忽略远端错误，默认值: False\n\n    ArpTimeout (int): ARP/ND请求超时时间（秒），有效范围: 1-255，默认值: 1\n\n    ArpRate (int): ARP/ND请求发送速率（包/秒），有效范围: 1-1000000，默认值: 250\n\n    ArpRetryCount (int): ARP/ND请求重传次数，有效范围: 0-100，默认值: 3\n\n    ArpSuppressDuplicateGateway (bool): 是否抑制重复网关检测，默认值: False\n\n    ArpDelayTime (int): 发送ARP/ND前的延迟时间（秒），有效范围: 0-4294967295，默认值: 0\n\n    ArpUseLinkLocalForNd (bool): 是否使用链路本地地址进行邻居发现（ND），默认值: False\n\nReturns:\n\n    bool: 操作是否成功完成。True 表示函数执行完毕未抛出异常，不保证所有配置项均成功应用。\n\nBehavior:\n    - 所有ARP相关配置将应用于每个端口的 'ArpPortConfig' 子对象\n    - 若指定了 EnableLink 参数，将通过 ConfigPortsLinkCommand 修改端口链路状态\n    - 其他参数将直接设置在端口对象上，或通过 ConfigurePortsCommand 应用到系统中\n\nSide Effects:\n    - 修改指定端口的配置状态\n    - 在 Renix 系统中执行命令以应用更改\n    - 更改后刷新端口数据使用 port.get()\n\nExamples:\n    robotframework:\n\n.. code:: robotframework\n\n    | Edit Port | Ports=${Ports} | AutoNegotiation=True | FecType=TYPE_OFF |",
  "TesterLibrary.Port.common.edit_port_load_profile": "编辑测试仪表端口的负载配置文件参数，用于配置一个或多个端口的流量发送行为。\n\nArgs:\n\n    Ports (list, set, tuple, 或单个对象): 需要配置负载的测试仪表端口对象列表或单个端口对象。若传入单个端口，函数内部会自动将其转换为列表。\n\nKeyword Args:\n\n    TransmitMode (str): 设置端口的传输模式，默认值：CONTINUOUS，取值范围：\n\n        CONTINUOUS: 连续发送\n\n        BURST: 突发发送\n\n        TIME: 按时间发送\n\n        STEP: 单步突发发送\n\n        ONSTREAM: 基于流调速（仅支持 BigTao 产品）\n\n    BurstSize (int): 单次突发中发送的报文数量，默认值：1\n\n    InterFrameGap (int or float): 突发内报文之间的间隔，默认值：12.0\n\n    InterFrameGapUnit (str): InterFrameGap 的单位，默认值：BYTES，可选值：\n\n        NS (纳秒)\n\n        MS (毫秒)\n\n        US (微秒)\n\n        SEC (秒)\n\n        BYTES (字节)\n\n    BurstCount (int): 突发发送次数，默认值：1\n\n    Seconds (int): 发送持续时间（单位：秒），默认值：100\n\n    Frames (int): 单次发送的帧数，默认值：1\n\n    LoadProfileType (str): 负载类型，默认值：PORT_BASE，可选值：\n\n        PORT_BASE: 端口级负载\n\n        STREAM_BASE: 流级负载\n\n        PRIORITY_BASE: 优先级负载（暂未启用）\n\n        MANUAL_BASE: 手动控制负载（暂未启用）\n\n    Rate (int or float): 端口发送速率，默认值：10\n\n    Unit (str): 端口速率单位，默认值：PERCENT，可选值：\n\n        NS\n\n        PERCENT (%)\n\n        FRAME_PER_SEC (帧/秒)\n\n        BYTE_PER_SEC (字节/秒)\n\n        DATABIT_PER_SEC (数据位/秒)\n\n        LINEBIT_PER_SEC (线路位/秒)\n\n        INTER_FRAME_GAP_BYTE (IFG 字节)\n\n        KLINEBIT_PER_SEC (千线路位/秒)\n\n        MLINEBIT_PER_SEC (兆线路位/秒)\n\n    GenerateError (str): 是否插入错误，默认值：NO_ERROR，可选值：\n\n        NO_ERROR\n\n        CRC (插入CRC错误)\n\n    IgnoreLinkState (str): 是否忽略链路状态，默认值：NO，可选值：\n\n        NO\n\n        YES\n\n    TimeStampPosTx (str): 发送时间戳位置，默认值：TIMESTAMP_HEAD，可选值：\n\n        TIMESTAMP_HEAD (头部)\n\n        TIMESTAMP_TAIL (尾部)\n\n    TimeStampPosRx (str): 接收时间戳位置，默认值：TIMESTAMP_HEAD，可选值：\n\n        TIMESTAMP_HEAD\n\n        TIMESTAMP_TAIL\n\n    LatencyCompensationTx (int): 发送时延补偿值（单位未知），默认值：0\n\n    LatencyCompensationRx (int): 接收时延补偿值（单位未知），默认值：0\n\n    LatencyCompensationOn (bool): 是否启用时延补偿，默认值：True\n\nRaises:\n\n    TesterException: 在以下情况抛出异常：\n\n        - 如果选择了 ONSTREAM 模式但设备不是 BigTao 类型\n        - 如果 BurstSize=1 但尝试设置 InterFrameGap 或 InterFrameGapUnit\n        - 如果存在未被处理的不支持参数\n\nReturns:\n\n    int: 返回 EnumBase.TRUE.value 表示操作成功。失败则抛出异常。\n\nNotes:\n\n    - 根据不同 TransmitMode，参数会被应用到对应的子配置对象如 StreamLoadProfile、BurstTransmitConfig、TimeTransmitConfig、StepTransmitConfig。\n    - 函数动态处理嵌套的配置对象，确保参数与当前模式及硬件能力匹配。\n    - 若任意配置步骤失败，则返回 False 并抛出 ContinuableFailure 异常。",
  "TesterLibrary.Port.common.wait_port_state": "等待测试仪表端口链路达到指定状态。\n\n**参数说明：**\n\n- `Ports` (list, set, tuple, 或 None): 要监控的一个或多个测试仪表端口对象。如果为 None，则使用 rom_manager 管理的所有端口。\n- `State` (list, set, tuple, 或 None): 期望的端口链路状态。每个状态应为字符串，如 'UP'、'DOWN' 等。若为 None，默认为 ['UP']。\n- `Interval` (int): 每次端口状态检查之间的时间间隔（秒）。默认值为 1 秒。\n- `TimeOut` (int): 最大等待时间（秒）。如果超时前未达到期望状态，函数返回 False。默认值为 60 秒。\n\n**返回值：**\n\n- `bool`: 如果所有端口在超时时间内达到指定状态之一，返回 True；否则返回 False。\n\n**功能描述：**\n\n该函数定期轮询指定端口的链路状态，并等待直到所有端口进入指定的目标状态之一。支持光纤和铜缆以太网介质类型，通过获取每个端口的适当子对象来实现兼容性。如果在指定的 TimeOut 时间内未能满足条件，则记录日志并返回 False。\n\n**示例：**\n\nRobot Framework 示例：\n\n```robotframework\n| Edit Port | Ports=${Ports} | EnableLink=False |\n| Wait Port State | Ports=${Ports} | State=DOWN |\n```",
  "TesterLibrary.Port.common.edit_stream_load_profile": "编辑测试仪表负载配置文件参数\n\n该函数用于修改一个或多个流对象的负载配置，包括流量负载、单位、传输模式及其他相关参数。它会根据传入的参数对流的负载配置进行设置，并在失败时抛出可继续执行的异常。\n\nArgs:\n\n    Streams (Stream or list of Stream): 需要编辑负载配置的一个或多个流对象列表\n\nKeyword Args:\n\n    Rate (int): 流量负载，默认值：10\n\n    Unit (str): 流量负载单位，默认值：PERCENT，取值范围：\n\n        PERCENT\n\n        FRAME_PER_SEC\n\n        BYTE_PER_SEC\n\n        LINEBIT_PER_SEC\n\n        KLINEBIT_PER_SEC\n\n        MLINEBIT_PER_SEC\n\n        INTER_FRAME_GAP\n\n    StreamTransmitMode (str): 传输模式，默认值：CONTINUOUS，取值范围：\n\n        CONTINUOUS\n\n        BURST\n\n    FramePerBurst (int): 每次突发的帧数，仅当StreamTransmitMode为BURST时有效，默认值：100，取值范围：1-4294967295\n\n    BurstCount (int): 突发次数，仅当StreamTransmitMode为BURST时有效，默认值：1，取值范围：1-4294967295\n\n    BurstGap (int): 突发之间的间隔时间，仅当StreamTransmitMode为BURST时有效，默认值：1，取值范围：1-4294967295\n\n    BurstGapUnit (str): 突发间隔时间单位，仅当StreamTransmitMode为BURST时有效，取值范围：\n\n        NS\n\n        US\n\n        MS\n\n        SEC\n\nReturns:\n\n    bool: 如果所有流的负载配置都成功编辑，则返回True；否则返回False（此时将抛出ContinuableFailure异常）\n\nRaises:\n\n    ContinuableFailure:\n        - 当传入的参数无效或与端口配置冲突时\n        - 当试图设置未知的属性时\n        - 当流所属端口使用PORT_BASE负载类型但不符合系统产品类型要求时\n\nExamples:\n\n    robotframework:\n\n.. code:: robotframework\n\n    | Edit Stream Load Profile | Streams=${Streams} | Rate=50 | Unit=FRAME_PER_SEC |\n    | Edit Stream Load Profile | Streams=${Streams} | StreamTransmitMode=BURST | FramePerBurst=200 | BurstCount=5 | BurstGap=10 | BurstGapUnit=MS |\n\nNotes:\n    - 若端口使用PORT_BASE负载类型，则不能在此处更改流的负载配置\n    - 若流的传输模式为ONSTREAM且端口使用PORT_BASE负载类型，将不允许修改\n    - 所有参数必须符合对应传输模式的要求，例如BURST模式下的参数仅在该模式下生效\n    - 函数内部调用renix.edit_stream_load_profile实现核心功能，并处理返回结果",
  "TesterLibrary.Port.interface.create_interface": "创建并配置指定端口或端口列表上的一个或多个网络接口，支持自定义链路层和网络层封装栈。\n\n**参数说明：**\n\n- **Port** (:obj:`Port` 或 :obj:`list` of :obj:`Port`): 指定要创建接口的物理或逻辑端口。如果传入的是端口列表，则为每个端口分别创建接口。\n- **Layers** (list, set, tuple, str 或 None, 可选): 定义从底层到顶层的网络层栈（例如 'eth', 'ipv4'）。各元素会被转换为小写。若为 None，默认值为 ['eth', 'ipv4']。用于定义接口的基础网络协议栈。\n- **Tops** (list, set, tuple, str 或 None, 可选): 指定在特定条件后插入的额外顶部网络层。若为 None 且 Layers 长度超过两个元素，则 Tops 默认为 Layers[1:]。否则可显式指定顶部层。\n- ****kwargs** (:obj:`dict`): 接口配置的可选关键字参数，传递给 Interface 构造函数。包括但不限于：\n  - Name: 接口名称\n  - Count: 接口数量\n  - EnableInterfaceCount: 是否启用接口计数\n  - EnableLearningGatewayMac: 是否启用学习网关 MAC 地址\n  - RouterIdMode: 路由器 ID 模式\n  - RouterId: 路由器 ID\n  - RouterIdStep: 路由器 ID 步长\n  - RouterIdList: 路由器 ID 列表\n  - Ipv6RouterId: IPv6 路由器 ID\n  - Ipv6RouterIdList: IPv6 路由器 ID 列表\n  - EnableVlansAssociation: 是否启用 VLAN 关联\n\n**返回值：**\n\n- :obj:`Interface` 或 :obj:`list` of :obj:`Interface`: 返回创建的接口对象或接口对象列表。若输入为多个端口，则按顺序返回对应的接口对象列表。\n\n**功能描述：**\n\n该函数首先检查 Layers 是否为 None，如果是则设置默认值 ['eth', 'ipv4'] 并标记为默认值。随后确保 Layers 总是一个类列表结构。接着根据 Port 类型（单个或列表）创建对应数量的接口。\n\n根据 Layers 的长度及 Tops 是否提供，决定使用以下方式之一来构建接口栈：\n\n- 若 Tops 为 None 且 Layers 长度小于等于 2，则调用 `BuildInterfaceCommand` 使用 NetworkLayers；\n- 若 Tops 为 None 且 Layers 长度大于 2，则调用 `BuildInterfaceCommand` 使用 NetworkLayers 和 TopLayers；\n- 若 Tops 不为 None 或 Layers 是默认值而 Tops 不为 None，则调用 `edit_interface_stack` 来处理更复杂的堆栈结构。\n\n**示例代码：**\n\n```python\n>>> api.create_interface(port1, Layers=['eth', 'vlan', 'ipv4'], name='VLAN_Interface')\n<Interface...>\n>>> api.create_interface([port1, port2], Layers='eth', Tops='ppp')\n[<Interface...>, <Interface...>]\n```\n\n**RobotFramework 示例：**\n\n```robotframework\n| ${Locations} | Create List | //192.168.0.1/1/1 |\n| ${Layers} | Create List | eth | ipv4 |\n| ${Port} | Reserve Ports | ${Ports} | ${Location} |\n| ${Interface} | Create Interface | ${Port} | ${Layers} |\n```",
  "TesterLibrary.Port.interface.edit_interface_stack": "修改测试仪表接口的协议栈结构\n\nArgs:\n\n    Interfaces (list (:obj:`Interface`)): 测试仪接口对象列表，每个元素为一个Interface对象\n\n    Layers (list or set or tuple or str, optional): 指定要应用到接口栈的网络层列表或字符串，按顺序排列。\n        默认值: ['eth']。支持的层包括:\n        \n            eth - 以太网层\n            \n            vlan - VLAN标签层\n            \n            pppoe - PPPoE封装层\n            \n            l2tp - L2TP隧道层\n            \n            ipv4 - IPv4网络层\n            \n            ipv6 - IPv6网络层\n            \n        如果是字符串类型，将自动转换为单元素列表；\n        所有输入会被转换为小写处理\n\n    Tops (list or set or tuple or str or None, optional): 指定要插入栈顶部的附加层，\n        如果Layers中包含'l2tp'，Tops层会插入在'l2tp'之前与之后的部分之间。\n        默认为空字符串（不添加顶部层）。如果非列表类型，将转换为小写列表。\n        支持的值包括：\n\n            None - 不添加顶部层\n            \n            ipv4 - IPv4网络层\n            \n            ipv6 - IPv6网络层\n\nReturns:\n\n    dict: 接口到其更新后的协议栈的映射字典。协议栈表示为NetworkLayer对象列表，\n        顺序从最顶层到底层。例如::\n\n        {\n            <Interface...>: [<NetworkLayer eth>, <NetworkLayer vlan>, <NetworkLayer ppp>, <NetworkLayer l2tp>]\n        }\n\n        如果输入无效返回False\n\nRaises:\n\n    ContinuableFailure: 当操作失败时抛出异常\n\nDescription:\n    该函数用于动态修改网络接口的协议栈配置。首先对所有输入参数进行标准化处理，\n    然后根据是否包含'l2tp'层和Tops参数构建新的协议栈。通过ReplaceInterfaceStackCommand\n    命令应用配置变更，最后重建每个接口的协议层层次结构并返回结果。\n\nExample:\n    >>> api.edit_interface_stack(interface_obj, Layers=['eth', 'vlan', 'l2tp'], Tops=['ppp'])\n    {<Interface...>: [<NetworkLayer eth>, <NetworkLayer vlan>, <NetworkLayer ppp>, <NetworkLayer l2tp>]}",
  "TesterLibrary.Port.interface.edit_interface": "修改测试仪表接口的参数\n\n该函数用于根据提供的关键字参数修改一个或多个网络接口对象的属性。如果指定了 Layer，则在该特定层内修改属性；如果还指定了 Level，则仅修改该层中指定索引位置的对象属性；如果没有提供 Level，则遍历该层下的所有层级并尽可能应用属性更改。\n\nArgs:\n    Interface (:obj:`Interface` 或可迭代对象): 要编辑的测试仪接口对象，可以是单个对象或可迭代对象（如列表、集合、元组）。\n    Layer (str, optional): 要修改的接口层名称，支持的类型包括：\n\n        - EthIILayer\n        - VLANLayer\n        - IPv4Layer\n        - IPv6Layer\n\n    Level (int, optional): 要修改的层在其同名层中的索引级别，默认为 None，表示修改该层下的所有层级。取值范围：0-1。\n\nKeyword Args:\n    通用参数:\n\n        Count\n\n        EnableInterfaceCount\n\n        EnableLearningGatewayMac\n\n        RouterIdMode\n\n        RouterId\n\n        RouterIdStep\n\n        RouterIdList\n\n        Ipv6RouterId\n\n        Ipv6RouterIdList\n\n        EnableVlansAssociation\n\n    EthIILayer 参数:\n\n        AddressMode\n\n        Address\n\n        Step\n\n        AddressList\n\n        EnableRandMac\n\n        RandomSeed\n\n    VLANLayer 参数:\n\n        AddressMode\n\n        VlanId\n\n        Step\n\n        VlanIdList\n\n        Priority\n\n        PriorityStep\n\n        PriorityList\n\n        Cfi\n\n        Tpid\n\n    IPv4Layer 参数:\n\n        AddressMode\n\n        Address\n\n        Step\n\n        AddressList\n\n        PrefixLength\n\n        Gateway\n\n        GatewayStep\n\n        GatewayList\n\n        GatewayCount\n\n        GatewayMac\n\n        ResolvedMacList\n\n        ResolvedState\n\n    IPv6Layer 参数:\n\n        AddressMode\n\n        Address\n\n        Step\n\n        AddressList\n\n        PrefixLength\n\n        Gateway\n\n        GatewayStep\n\n        GatewayList\n\n        GatewayCount\n\n        GatewayMac\n\n        ResolvedMacList\n\n        ResolvedState\n\n        LinkLocalGenType\n\n        LinkLocal\n\n        LinkLocalStep\n\n        LinkLocalList\n\nReturns:\n    bool: 表示操作是否成功的布尔值。成功返回 True，失败返回 False。\n\nRaises:\n    ContinuableFailure: 如果底层调用失败（即返回 False），将抛出此异常。\n\nExamples:\n    robotframework 示例代码:\n\n.. code:: robotframework\n\n    | ${Locations} | Create List | //192.168.0.1/1/1 |\n    | ${Layers} | Create List | eth | ipv4 |\n    | ${Port} | Reserve Ports | ${Ports} | ${Location} |\n    | ${Interface} | Create Interface | ${Port} | ${Layers} |\n    | Edit Interface | Interfaces=${Interface} | Layer=IPv4Layer | Gateway=192.168.1.1 |",
  "TesterLibrary.Port.interface.start_arp": "Start the ARP (Address Resolution Protocol) operation on specified ports or interfaces.\n\nThis function initiates an ARP command either on specified physical ports or logical interfaces. It ensures that only one of 'Ports' or 'Interfaces' is provided. If 'Interfaces' is provided, it takes precedence and 'Ports' must be None. The function internally constructs and executes a StartArpCommand or StartAllArpCommand based on the input parameters.\n\nParameters:\n    Ports (Union[Port, List[Port]], optional): A single Port object or a list of Port objects representing the physical ports on which to start ARP. Each Port object should have associated Interface children. If None, all interfaces across all ports may be considered, depending on other parameters. Default: None.\n\n    Interfaces (Union[Interface, List[Interface]], optional): A single Interface object or a list of Interface objects on which to start ARP. These are typically logical interfaces associated with physical ports. If provided, 'Ports' must be None. Default: None.\n\nReturns:\n    bool: True if the operation is successful, False otherwise.\n\nRaises:\n    ContinuableFailure: If the underlying API call returns False, indicating failure to start ARP.\n\nDescription:\n    The function first checks whether Interfaces is set. If so, it uses those to construct the InterfaceConfigs for the ARP command. If not, it processes the Ports parameter, retrieving associated interfaces from each port. If Ports is None, it starts ARP on all available interfaces using StartAllArpCommand. Otherwise, it collects interfaces from the given ports and starts ARP on them via StartArpCommand. The command is then executed through the cl_instance, which serves as the internal command execution engine.\n\nExample:\n    >>> start_arp(Ports=[port1, port2])\n    True\n    >>> start_arp(Interfaces=[interface1])\n    True\n    >>> start_arp()\n    True",
  "TesterLibrary.Port.interface.stop_arp": "停止指定端口或接口上的ARP（地址解析协议）功能。\n\n该函数用于停止特定端口或接口上的ARP操作。用户可以通过提供 `Ports` 或 `Interfaces` 参数来指定目标，若两者都未提供，则会停止所有接口上的ARP操作。\n\n参数:\n    - Ports (list, 可选): 端口对象的列表，默认值：None。表示这些端口关联的所有接口将停止ARP。\n    - Interfaces (list, 可选): 接口对象的列表，默认值：None。表示这些接口将停止ARP操作。\n        > 注意：如果提供了 Interfaces 参数，则 Ports 必须为 None；反之亦然。若两者同时提供，将引发异常。\n\n返回值:\n    - 布尔值 (True / False): 表示操作是否成功。成功时返回 True，失败时返回 False 并抛出可继续执行的异常 (ContinuableFailure)。\n\n行为描述:\n    - 如果提供了 Interfaces：\n        - 检查 Ports 是否为 None，否则抛出 TesterException。\n        - 将 Interfaces 转换为列表（如非列表格式）。\n        - 向 Renix 底层系统发送 StopArpCommand，作用于 Interfaces 的句柄。\n    - 如果 Interfaces 为 None：\n        - 若 Ports 也为 None，则发送 StopAllArpCommand 停止全局ARP。\n        - 若 Ports 不为 None，则获取其所有子 Interface 对象，并向这些接口句柄发送 StopArpCommand。\n\n异常:\n    - TesterException: 如果同时提供了 Ports 和 Interfaces（即两者都不为 None）。\n\n使用示例（RobotFramework）:\n\n.. code:: robotframework\n\n    | Stop Arp |",
  "TesterLibrary.Port.interface.get_gateway_mac": "获取测试仪表学习到的网关Mac地址\n\n该函数用于检索与指定网络接口关联的网关设备的MAC地址，支持根据IPv4和/或IPv6配置进行查询。\n\nArgs:\n\n    Interface (:obj:`Interface`): 测试仪表接口对象，或由接口对象组成的可迭代结构（如列表、集合、元组）。\n        每个接口对象应具备查询子层（如 'Ipv4Layer' 和 'Ipv6Layer'）的能力。\n\n    Version (str, optional): 指定要获取的网关MAC地址对应的IP版本。有效值包括：\n        - 'ipv4': 仅返回与IPv4相关的网关MAC地址。\n        - 'ipv6': 仅返回与IPv6相关的网关MAC地址。\n        - None（默认）: 同时返回IPv4和IPv6相关的网关MAC地址。\n\nReturns:\n\n    list of str: 包含网关MAC地址的字符串列表。返回结果依据 `Version` 参数：\n        - 若 Version 为 'ipv4'，则仅包含IPv4网关MAC地址。\n        - 若 Version 为 'ipv6'，则仅包含IPv6网关MAC地址。\n        - 若 Version 为 None，则包含IPv4和IPv6网关MAC地址的合并列表。\n\nRaises:\n\n    ContinuableFailure: 如果底层调用失败（返回False），则抛出此异常。\n\nExamples:\n\n    robotframework:\n\n    .. code:: robotframework\n\n        | Get Gateway Mac | Interface=${Interface} |\n\nNotes:\n\n    - 函数通过调用接口对象的 `get_children('Ipv4Layer')` 和 `get_children('Ipv6Layer')` 方法来查找关联的IP层。\n    - 假设每个IP层具有名为 `ResolvedMacList` 的属性，其中包含对应网关的MAC地址。",
  "TesterLibrary.Port.interface.get_interfaces": "获取测试仪表端口下的接口列表，可选择性地按接口类型进行过滤。\n\nArgs:\n\n    Ports (Port 或可迭代的 Port 对象, optional):\n        单个 Port 对象或包含多个 Port 对象的可迭代对象（如列表、集合、元组），用于获取其关联的接口。\n        如果为 None（默认值），则考虑系统下所有的端口。\n    \n    Types (str 或可迭代的 str, optional):\n        字符串或包含多个字符串的可迭代对象，指定要过滤的接口类型。支持的类型包括：\n\n            eth\n\n            vlan\n\n            pppoe\n\n            l2tp\n\n            ipv4\n\n            ipv6\n\n            gre（新增支持）\n\n        如果为 None（默认值），则不进行过滤，返回所有接口。\n\nReturns:\n\n    list: Interface 对象列表，可能根据指定的接口类型进行了过滤。\n\nExamples:\n    robotframework:\n\n.. code:: robotframework\n\n    | ${Interfaces} | Get Interfaces | Ports=${Ports} | Types=vlan |",
  "TesterLibrary.Port.interface.get_layer_from_interfaces": "获取测试仪表接口的指定封装层对象列表\n\n该函数用于从一个或多个给定的测试仪表接口中提取特定类型的封装层对象（如IPv4、Ethernet、VLAN等），并以列表形式返回这些层对象。\n\n参数:\n    Interfaces (Interface object 或 list of Interface objects): 一个或多个测试仪表接口对象，表示从中获取封装层。\n    Layer (str, optional, default='ipv4'): 指定要获取的封装层类型。有效值包括：\n        - 'eth' 表示以太网层（EthIILayer）\n        - 'ipv6' 表示IPv6层（Ipv6Layer）\n        - 'vlan' 表示VLAN层（VLANLayer）\n        - 'pppoe' 表示PPPoE层（PppoeLayer）\n        - 'l2tp' 表示L2TP层（L2tpLayer）\n        - 'gre' 表示GRE over IPv4层（GreIpv4Layer）\n        - 其他任意值默认为IPv4层（Ipv4Layer）\n\n返回值:\n    list: 从接口中获取到的所有指定类型的封装层对象列表。每个元素对应于接口中匹配的封装层对象。\n\n示例:\n\nRobotFramework 示例：\n\n.. code:: robotframework\n\n    | Get Layer From Interfaces | Interfaces=${Interface} | Layer=ipv4 |\n\nPython 示例：\n\n>>> api = RenixAPI()\n>>> intf1, intf2 = get_interface_objects()  # 假设此函数获取接口对象\n>>> ipv4_layers = api.get_layer_from_interfaces([intf1, intf2], 'ipv4')\n>>> print(ipv4_layers)\n[<Ipv4Layer object at 0x...>, <Ipv4Layer object at 0x...>]",
  "TesterLibrary.Port.interface.ipv4_ping": "从指定的IPv4接口发起对目标IP地址的Ping操作，并根据响应情况返回不同的状态结果。\n\n此函数通过调用内部命令配置并启动IPv4 Ping，随后等待Ping操作开始和结束。最终依据接收到的响应包数量判断Ping结果。\n\n参数：\n    Interface (object): 仪表的接口对象，必须是一个有效的接口实例，用于指定从哪个端口发出Ping请求。\n    IpAddr (str): 需要Ping的目标IPv4地址，字符串类型（例如：\"192.168.1.1\"）。\n    PacketCount (int, optional): 发送的Ping数据包数量，默认为5个。此参数控制发送多少个ICMP请求报文。\n\n返回值（str）：\n    'NotStart' : 由于设备或系统问题，在设定时间内Ping未成功启动。\n    'NotEnd'   : Ping已启动，但在预期时间内未能正常结束。\n    'Success' : 所有Ping请求均成功收到响应（即接收数等于发送数）。\n    'Failed'  : 没有任何Ping请求收到响应。\n    'PartialSuccess' : 收到了至少一个但少于全部的Ping响应。\n    'Unexpected' : 出现了无法解析的结果或未知错误。\n\n功能描述：\n    该函数首先创建并执行一个Ipv4PingCommand来配置并启动Ping操作。\n    然后使用WaitConditionCommand等待Ping进入“运行中”状态（State == 1），若超时则返回'NotStart'。\n    接着再次等待Ping恢复到“非运行”状态（State == 0），若超时则返回'NotEnd'。\n    最后检查Ping结果字符串中的“Received Packets”字段，根据收到的数据包数量决定返回'Success'、'Failed'或'PartialSuccess'。\n    若结果格式异常或匹配失败，则返回'Unexpected'。\n\n注意事项：\n    - 依赖的内部模块包括`StartIpv4PingCommand` 和 `WaitConditionCommand`。\n    - Ping结果受网络状况、设备支持能力以及权限限制影响。\n    - 若返回布尔值True/False，请注意代码逻辑中已存在转换机制。",
  "TesterLibrary.Port.interface.ipv6_ping": "从指定的IPv6接口发起对目标IPv6地址的Ping操作，并根据Ping结果返回相应的状态信息。\n\n该方法通过调用内部命令对象（StartIpv6PingCommand 和 WaitConditionCommand）来执行Ping操作，并等待响应。可以根据发送和接收的数据包数量判断网络连通性状态。\n\n参数：\n\n    Interface (object): 表示仪表的一个IPv6接口对象，必须具有 `handle` 属性用于底层识别该接口。\n    IpAddr (str): 要Ping的目标IPv6地址，格式应为合法的IPv6字符串表示（例如 '2001:db8::1'）。\n    PacketCount (int, optional): 发送的Ping请求包的数量，默认值为5。可选参数。\n\n返回值（str）：\n\n    'NotStart': Ping未能开始，可能由于设备或接口问题导致初始化失败。\n    'NotEnd': Ping已开始但未在预期时间内完成，无法自动结束。\n    'Success': 成功接收到所有发出的Ping响应报文（即接收数等于发送数）。\n    'Failed': 没有接收到任何Ping响应报文。\n    'PartialSuccess': 接收到至少一个但不是全部的Ping响应报文（部分成功）。\n    'Unexpected': 出现未知错误或无法解析的结果状态。\n\n功能说明：\n\n    - 首先获取系统中的IPv6 Ping配置对象。\n    - 构造并执行Ping启动命令，包含接口句柄、帧数量、目标IP等参数。\n    - 等待Ping操作进入“运行中”状态（最多等待5秒），超时则返回 'NotStart'。\n    - 根据PacketCount计算最大等待时间，等待Ping操作结束（最多等待 PacketCount * 5 秒），\n      若超时仍未结束，则返回 'NotEnd'。\n    - 获取Ping结果状态字符串，使用正则表达式提取已接收的数据包数量：\n        - 如果接收数等于发送数，返回 'Success'\n        - 如果接收数为0，返回 'Failed'\n        - 如果接收到部分数据包，返回 'PartialSuccess'\n    - 如果无法匹配接收数量，则返回 'Unexpected'\n\n注意事项：\n\n    - Interface 对象必须有效且已正确配置IPv6地址。\n    - 目标IpAddr 必须是可达的IPv6地址。\n    - PacketCount 值不能过大以避免等待时间过长。",
  "TesterLibrary.Protocol.bfd.create_bfd": "创建BFD协议会话对象，并将其与指定的端口关联。\n\n该函数用于在指定的测试仪表端口上创建并配置一个BFD（双向转发检测）协议会话。BFD会话可用于快速检测网络路径故障，从而提高网络可靠性。新创建的BFD会话将被注册到全局协议对象映射中，以便后续引用和管理。\n\nArgs:\n\n    Port (:obj:`Port`): 测试仪表端口对象，表示BFD会话所绑定的物理或逻辑端口，类型为object。\n\nKeyword Args:\n\n    Name (str): BFD协议会话名称，类型为字符串，默认值由系统自动生成。\n\n    Enable (bool): 是否启用BFD协议会话，类型为布尔值，默认值：True。有效取值为True或False。\n\n    RouterRole (str): BFD会话的角色，类型为字符串，默认值：Active。支持以下角色：\n\n        - Active: 主动发起BFD会话\n        - Passive: 被动响应BFD会话\n\n    TimeIntervalUnit (str): 时间间隔单位，类型为字符串，默认值：milliseconds。支持以下单位：\n\n        - milliseconds\n        - microseconds\n\n    DesiredMinTXInterval (int): 期望的最小发送时间间隔，单位取决于TimeIntervalUnit。默认值：50。取值范围：\n\n        - 如果单位是milliseconds，取值范围：1-10000\n        - 如果单位是microseconds，取值范围：1-10000000\n\n    RequiredMinRXInterval (int): 需要的最小接收时间间隔，单位同上，默认值：50。取值范围同上。\n\n    RequiredMinEchoRXInterval (int): 需要的最小Echo报文接收时间间隔，单位同上，默认值：0。取值范围同上。\n\n    DetectMultiple (int): 检测超时的时间因子，用于计算最终的检测时间，类型为整数，默认值：3。取值范围：2-100。\n\n    AuthenticationType (str): 认证方式，类型为字符串，默认值：None。支持以下认证方式：\n\n        - NONE: 不使用认证\n        - SIMPLE_PASSWORD: 简单密码认证\n        - KEYED_MD5: 带密钥的MD5认证\n        - METICULOUS_KEYED_MD5: 精确带密钥的MD5认证\n        - KEYED_SHA1: 带密钥的SHA1认证\n        - METICULOUS_KEYED_SHA1: 精确带密钥的SHA1认证\n\n    Password (str): 当认证方式不为NONE时使用的认证密码，类型为字符串，默认值：\"Xinertel\"。密码可包含字母、数字，最长为16个字符。\n\n    KeyID (int): 当认证方式不为NONE时使用的密钥标识符，类型为整数，默认值：1。取值范围：0-255。\n\nReturns:\n\n    (:obj:`BfdRouter`): 创建的BFD协议会话对象，代表该BFD路由器实例，可用于后续操作和查询。\n\nSide Effects:\n    - 将新创建的BFD会话实例通过其句柄注册到全局map_protocol_object字典中，以便后续可通过句柄访问该对象。\n\nExamples:\n    .. code:: RobotFramework\n\n        | Create bfd | Port=${Port} | TimeIntervalUnit=microseconds |",
  "TesterLibrary.Protocol.bfd.edit_bfd": "Updates attributes of the provided BFD session object with values from keyword arguments.\n\nThis function modifies the attributes of a given BFD (Bidirectional Forwarding Detection) session object using the provided keyword arguments. It allows dynamic configuration of BFD session parameters such as enable state, role, timing intervals, and authentication settings.\n\nArgs:\n    Session (:obj:`BfdRouter`): A BFD protocol session object to be edited.\n\nKeyword Args:\n    Name (str): The name of the BFD session.\n    \n    Enable (bool): Enables or disables the BFD session. Default: True.\n\n    RouterRole (str): Specifies the role of the BFD session. Supported values: 'Active', 'Passive'. Default: 'Active'.\n\n    TimeIntervalUnit (str): Unit for time intervals. Supported values: 'milliseconds', 'microseconds'. Default: 'milliseconds'.\n\n    DesiredMinTXInterval (int): The desired minimum transmit interval in milliseconds or microseconds based on TimeIntervalUnit. Default: 50.\n\n    RequiredMinRXInterval (int): The required minimum receive interval in milliseconds or microseconds based on TimeIntervalUnit. Default: 50.\n\n    DetectMultiple (int): Detection time multiplier used to compute timeout. Default: 3.\n\n    AuthenticationType (str): Authentication method for the BFD session. Supported values: 'NONE', 'SIMPLE_PASSWORD', 'KEYED_MD5', 'METICULOUS_KEYED_MD5', 'KEYED_SHA1', 'METICULOUS_KEYED_SHA1'. Default: 'None'.\n\n    Password (str): Authentication password when AuthenticationType is not 'NONE'. Max length: 16 characters. Default: 'Xinertel'.\n\n    KeyID (int): Key identifier used with keyed authentication methods. Default: 1.\n\nReturns:\n    bool: True if the operation was successful.\n\nNote:\n    - If a keyword argument does not correspond to an attribute of the Session object, it will be ignored.\n    - Only valid parameters that match existing attributes are applied.",
  "TesterLibrary.Protocol.bfd.create_bfd_ipv4_session": "创建BFD IPv4会话对象\n\n该函数用于创建一个或多个BFD（双向转发检测）IPv4会话。其底层调用Session对象的`create_ipv4_session`方法，并通过关键字参数传递配置信息，以实现灵活的会话配置。\n\nArgs:\n    Session (:obj:`BfdRouter`): BFD协议会话管理对象，必须具备`create_ipv4_session`方法用于实际创建IPv4会话。\n\nKeyword Args:\n    Name (str): 为BFD IPv4会话指定名称，默认自动生成。\n\n    Enable (bool): 是否启用该BFD会话。True表示启用，False表示不启用，默认值为True。\n\n    NumberOfSessions (str): 要创建的BFD会话数量，取值范围为1至4294967295，默认值为1。\n\n    StartDestinationAddress (str): 指定第一个BFD会话的目的IPv4地址，默认值为'192.0.1.0'。\n\n    DestinationAddressIncrement (str): 目的IPv4地址的递增值，用于批量创建时每个会话的目的地址递增，默认值为'0.0.0.1'。\n\n    EnableMyDiscriminator (bool): 是否手动设置本地标识符（My Discriminator）。True表示启用设置，False则使用默认值，默认值为False。\n\n    MyDiscriminator (int): 本地标识符的初始值，仅在EnableMyDiscriminator为True时生效，默认值为1。\n\n    MyDiscriminatorIncrement (int): 本地标识符的增量值，用于批量创建时每个会话的本地标识符递增，默认值为1。\n\n    EnableYourDiscriminator (bool): 是否手动设置对端标识符（Your Discriminator）。True表示启用设置，False则使用默认值，默认值为False。\n\n    YourDiscriminator (int): 对端标识符的初始值，仅在EnableYourDiscriminator为True时生效，默认值为1。\n\n    YourDiscriminatorIncrement (int): 对端标识符的增量值，用于批量创建时每个会话的对端标识符递增，默认值为1。\n\nReturns:\n    :obj:`BfdIpv4SessionConfig`: 返回创建的BFD IPv4会话配置对象，可用于后续操作如启动、停止或查询会话状态。\n\nRaises:\n    ContinuableFailure: 如果底层调用失败，则抛出可继续执行的异常，包含错误信息。\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${Session} | Create Bfd | Port=${Port} |\n        | Create Bfd Ipv4 Session | Session=${Session} | NumberOfSessions=10 | Name=MyBFDSession | Enable=True | StartDestinationAddress=192.168.1.1 | DestinationAddressIncrement=0.0.0.1 | EnableMyDiscriminator=True | MyDiscriminator=100 | MyDiscriminatorIncrement=1 |",
  "TesterLibrary.Protocol.bfd.create_bfd_ipv6_session": "创建BFD IPv6会话对象，用于在指定的会话(Session)上建立一个或多个BFD（双向转发检测）IPv6连接。\n\n该函数通过调用传入的Session对象的`create_ipv6_session`方法来实际创建BFD IPv6会话。它提供了一个封装，可能包含额外的行为，如异常检查（通过装饰器实现）。\n\n参数:\n    Session (object): \n        一个实现了`create_ipv6_session`方法的BFD协议会话对象（类型为`BfdRouter`），用于执行实际的会话创建逻辑。\n    \n    **kwargs (dict, optional):\n        可选的关键字参数，将直接传递给Session对象的`create_ipv6_session`方法，用于配置BFD会话的各项属性，包括但不限于：\n        \n        - Name (str): BFD IPv6会话的名称。\n        - Enable (bool): 是否启用该BFD会话，默认为True。\n        - NumberOfSessions (str): 要创建的BFD会话数量，取值范围1-4294967295，默认为\"1\"。\n        - StartDestinationAddress (str): 初始目的IPv6地址，默认为\"2000::1\"。\n        - DestinationAddressIncrement (str): 每个后续会话的目的IPv6地址增量，默认为\"::1\"。\n        - EnableMyDiscriminator (bool): 是否自定义本地标识符，默认为False。\n        - MyDiscriminator (int): 本地标识符初始值，默认为1（仅当EnableMyDiscriminator为True时有效）。\n        - MyDiscriminatorIncrement (int): 本地标识符递增步长，默认为1。\n        - EnableYourDiscriminator (bool): 是否自定义对端标识符，默认为False。\n        - YourDiscriminator (int): 对端标识符初始值，默认为1（仅当EnableYourDiscriminator为True时有效）。\n        - YourDiscriminatorIncrement (int): 对端标识符递增步长，默认为1。\n\n返回:\n    (:obj:`BfdIpv6SessionConfig`): 创建成功的BFD IPv6会话配置对象，类型为object，可用于后续操作或验证。\n\n异常:\n    如果创建失败，函数将抛出ContinuableFailure异常，并附带错误信息。\n\n示例:\n    .. code:: RobotFramework\n\n        | ${Session} | Create Bfd | Port=${Port} |\n        | Create Bfd Ipv6 Session | Session=${Session} | Name=BFDv6_Session_1 | NumberOfSessions=5 | StartDestinationAddress=3000::1 | DestinationAddressIncrement=::1 |\n\n说明:\n    该函数是对底层API `renix.create_bfd_ipv6_session` 的封装，提供了更高级别的接口以简化BFD IPv6会话的创建流程，并支持Robot Framework风格的调用方式。",
  "TesterLibrary.Protocol.bfd.bfd_admin_down": "Administratively shut down one or more BFD (Bidirectional Forwarding Detection) sessions.\n\nThis function accepts either a single BFD session object or a collection (list, set, or tuple) of such objects, and invokes the `admin_down()` method on each. It is typically used for testing or configuration purposes to manually disable BFD sessions.\n\nParameters:\n- Sessions (object or iterable of objects): A single session object or an iterable of session objects representing the BFD sessions to be administratively shut down. Each session object must have an `admin_down()` method implemented.\n\nReturns:\n- bool: Always returns True to indicate that the administrative shutdown operation was successfully executed.\n\nRaises:\n- TypeError: If any item in the provided Sessions does not have an `admin_down()` method.\n\nNote:\nThe function internally calls `renix.bfd_admin_down(Sessions=Sessions)` to perform the actual operation. If the result is False, it raises a `ContinuableFailure` exception indicating failure; otherwise, it returns True.\n\nExample usage in RobotFramework:\n.. code:: RobotFramework\n\n    | Bfd Admin Down | Sessions=${Sessions} |",
  "TesterLibrary.Protocol.bfd.bfd_admin_up": "Enable BFD (Bidirectional Forwarding Detection) administrative state for the specified session(s).\n\nThis function is used to administratively enable BFD sessions by invoking the `admin_up()` method on each provided session object. It supports both single session objects and iterable collections (such as lists, sets, or tuples) of session objects.\n\nIf the underlying operation fails, a `ContinuableFailure` exception is raised with a descriptive error message. On successful execution, the function returns `True`.\n\nParameters:\n-----------\nSessions : Session object or iterable of Session objects\n    A single session object or an iterable collection (list, set, or tuple) containing multiple session objects for which the BFD administrative state should be enabled.\n\nReturns:\n--------\nbool\n    Returns `True` to indicate successful enabling of the BFD administrative state for all provided session(s).\n\nRaises:\n-------\nContinuableFailure\n    If the underlying `renix.bfd_admin_up()` call returns `False`, indicating a failure in enabling the BFD administrative state.\n\nTypeError\n    If any element in `Sessions` does not have the `admin_up()` method, it will raise an error during execution by the backend.\n\nExample:\n--------\n.. code:: RobotFramework\n\n    | Bfd Admin Up | Sessions=${Sessions} |",
  "TesterLibrary.Protocol.bfd.bfd_enable_demand_mode": "Enables BFD (Bidirectional Forwarding Detection) Demand Mode for one or more BFD sessions.\n\n    In BFD, Demand Mode is a state where the session actively sends control packets to maintain and monitor\n    the bidirectional path. This function invokes the backend API to enable Demand Mode on each specified\n    BFD session.\n\n    Args:\n        Sessions (list of :obj:`BfdRouter`): A list of BFD session objects (of type `BfdRouter`) for which\n            Demand Mode should be enabled. Each session must support the necessary BFD operations.\n\n    Returns:\n        bool: True if Demand Mode was successfully enabled for all provided sessions; False otherwise.\n\n    Raises:\n        ContinuableFailure: If enabling Demand Mode fails, a `ContinuableFailure` exception is raised,\n            indicating that the operation did not complete successfully but execution can continue.\n\n    Example:\n        .. code:: RobotFramework\n\n            | Bfd Enable Demand Mode | Sessions=${Sessions} |\n\n    Notes:\n        - This function relies on the backend implementation (`renix.bfd_enable_demand_mode`) to perform\n          the actual operation.\n        - The return value of False indicates a failure, which results in an exception being raised to\n          ensure visibility of the failure.\n        - Ensure that the provided `Sessions` are valid BFD session objects; otherwise, unexpected behavior\n          or errors may occur.",
  "TesterLibrary.Protocol.bfd.bfd_disable_demand_mode": "Disables Demand mode for one or more BFD (Bidirectional Forwarding Detection) sessions.\n\nIn BFD, Demand mode is a state where the session actively sends control packets to maintain connectivity.\nDisabling Demand mode transitions the session into a passive state where it does not send periodic control packets.\n\nArgs:\n    Sessions (list of :obj:`BfdRouter`): A list of BFD session objects. Each object must support the `disable_demand_mode()` method that performs the actual disabling logic.\n\nReturns:\n    bool: True if the operation was successful, False otherwise.\n\nRaises:\n    ContinuableFailure: If the operation fails (result is False), an exception is raised with a failure message.\n\nExample:\n    .. code:: RobotFramework\n\n        | Bfd Disable Demand Mode | Sessions=${Sessions} |\n\nNotes:\n    This function internally calls the backend Renix API to disable Demand mode on the provided session(s).\n    If the backend returns False, indicating failure, a `ContinuableFailure` exception is raised.",
  "TesterLibrary.Protocol.bfd.bfd_initiate_poll": "Initiates a BFD (Bidirectional Forwarding Detection) poll operation on one or more BFD session objects.\n\nThis function sends a BFD Poll sequence to the specified BFD sessions, typically used for testing or triggering status updates in BFD communication. It delegates the actual operation to the backend API and handles success or failure by returning a boolean result or raising an exception.\n\nParameters:\n-----------\nSessions : list of :obj:`BfdRouter`\n    A list of BFD session objects (typically instances of `BfdRouter`). Each object must support the BFD poll operation. The function expects a list, and if not provided as such, it will be internally converted to one.\n\nReturns:\n--------\nbool\n    Returns True if the BFD poll operation was successfully initiated on all provided sessions.\n\nRaises:\n-------\nContinuableFailure\n    If the backend call (`renix.bfd_initiate_poll`) returns False, indicating a failure in initiating the poll operation.\n\nExamples:\n---------\nThe following example demonstrates how to use this keyword in a Robot Framework test case:\n\n.. code:: RobotFramework\n\n    | Bfd Initiate Poll | Sessions=${Sessions} |\n\nNotes:\n------\n- This function assumes that the input sessions are valid and have been properly initialized.\n- The function is decorated with `@abnormal_check()`, which may perform additional checks before execution.\n- It is primarily used in network testing scenarios to simulate or trigger BFD polling behavior for verification purposes.",
  "TesterLibrary.Protocol.bfd.bfd_resume_pdus": "Resumes the transmission of BFD (Bidirectional Forwarding Detection) protocol data units (PDUs) for one or more specified BFD sessions.\n\nThis function accepts either a single BFD session object or an iterable (list, set, or tuple) of BFD session objects. If a single session is provided, it is automatically converted into a list to ensure uniform handling. The function then iterates through each session and invokes the `resume_pdus()` method on each session object to resume PDU transmission.\n\nParameters:\n- Sessions (BfdRouter or list/set/tuple of BfdRouter): A single BFD session object or an iterable containing multiple BFD session objects for which PDU transmission should be resumed.\n\nReturns:\n- bool: Always returns True if the operation is successfully executed, indicating that all provided sessions have resumed sending PDUs. If the underlying implementation returns False, a `ContinuableFailure` exception is raised.\n\nRaises:\n- ContinuableFailure: If the backend call (`renix.bfd_resume_pdus`) returns False, indicating a failure in resuming PDU transmission for one or more sessions.\n- Other exceptions may also be raised if the `resume_pdus()` method of any individual session encounters an error, depending on its implementation.\n\nExample:\n.. code:: RobotFramework\n\n    | Bfd Resume Pdus | Sessions=${Sessions} |",
  "TesterLibrary.Protocol.bfd.bfd_stop_pdus": "Stops the transmission of BFD (Bidirectional Forwarding Detection) Protocol Data Units (PDUs) for the specified BFD session(s).\n\nThis function allows for the graceful termination of BFD control packet transmissions on one or more BFD sessions. It accepts either a single BFD session object or a list of session objects and invokes the `stop_pdus` method on each session to halt PDU transmission. The function ensures consistent handling of both single and multiple session inputs.\n\nParameters:\n- Sessions (list of :obj:`BfdRouter`): A list of BFD session objects (of type `BfdRouter`) for which PDU transmission should be stopped. If a single session is provided, it must still be passed as a list to ensure correct processing.\n\nReturns:\n- bool: Returns True if the operation to stop PDUs is successfully executed on all specified sessions. If the underlying API fails to stop the PDUs (e.g., due to invalid session state or communication issues), the function returns False and raises a `ContinuableFailure` exception to indicate the failure.\n\nExample Usage:\n.. code:: RobotFramework\n\n    | Bfd Stop Pdus | Sessions=${Sessions} |\n\nNotes:\n- This function is typically used during test teardown or when disabling BFD monitoring on specific network paths.\n- The function relies on the internal `renix.bfd_stop_pdus()` method to perform the actual operation on the backend.\n- If the operation fails (i.e., returns False), a `ContinuableFailure` exception is raised to notify the caller of the issue, ensuring that failures are explicitly handled in test automation contexts.",
  "TesterLibrary.Protocol.bfd.bfd_set_diagnostic_state": "Sets the diagnostic state for one or more BFD (Bidirectional Forwarding Detection) sessions.\n\nThis function accepts a single session or a collection of sessions and applies the specified\ndiagnostic state to all of them by calling the `set_diagnostic_state` method on each session object.\n\nParameters:\n-----------\nSessions : object or iterable\n    A single session object or an iterable (list, set, or tuple) of session objects for which the\n    diagnostic state should be set. If a single session is provided, it will be automatically\n    wrapped in a list to simplify processing.\n\nState : str or int\n    The diagnostic state to be applied to the session(s). This may correspond to predefined\n    diagnostic codes or strings indicating the session's health or status (e.g., 'up', 'down',\n    or specific diagnostic error codes).\n\nReturns:\n--------\nbool\n    Always returns True to indicate that the operation was successfully initiated. Note that\n    this does not guarantee that all sessions have successfully updated their state; it only\n    confirms that the method was executed without raising an exception.",
  "TesterLibrary.Protocol.bfd.wait_bfd_state": "等待BFD协议会话达到指定状态。\n\n该函数用于等待一个或多个BFD（双向转发检测）协议会话达到指定的目标状态。它封装了每个会话对象的 `wait_session_state` 方法，依次检查每个会话是否在超时时间内达到期望状态。如果某个会话未能在指定时间内达到目标状态，底层方法可能会抛出异常，进而影响本函数的行为。\n\n### 参数说明：\n\n- **Sessions** (`object` 或 `iterable of objects`)  \n  要监控的一个或多个BFD会话对象。可以是单个会话对象，也可以是包含多个会话的可迭代对象（如 list、set、tuple），类型为：`BfdRouter` 或其子类实例。\n\n- **State** (`str`, 可选)  \n  需要等待达到的目标状态。默认值为 `'RUNNING'`。支持的状态包括：\n\n  - `'DISABLED'`\n  - `'NOT_STARTED'`\n  - `'IDLE'`\n  - `'RUNNING'`\n\n  如果未指定，则使用默认值 `'RUNNING'`。\n\n- **Interval** (`int` 或 `float`, 可选)  \n  检查会话状态的时间间隔（单位：秒）。默认值为 `1` 秒。\n\n- **TimeOut** (`int`, 可选)  \n  等待的最大时间（单位：秒）。默认值为 `60` 秒。如果在此时间内有任何会话未达到目标状态，可能引发异常。\n\n### 返回值：\n\n- **bool**  \n  如果所有会话均成功达到目标状态，则返回 `True`。若任一会话未在超时时间内达到目标状态，可能由底层实现抛出异常，此时函数不会正常返回布尔值。\n\n### 注意事项：\n\n- 本函数使用了 `@abnormal_check` 装饰器，可能会在执行过程中进行额外的状态检查或异常处理。\n- 实际的会话状态等待逻辑依赖于 `Session.wait_session_state()` 的具体实现。\n- 函数在调用底层接口后，若返回结果为 `False`，则主动抛出 `ContinuableFailure` 异常，否则返回 `True`。\n\n### 示例：\n\n```robotframework\n| Wait Bfd State | Sessions=${Sessions} | State=RUNNING | Interval=2 | TimeOut=120 |\n```\n\n此示例中，系统将等待所有传入的BFD会话对象在最多120秒内进入 `RUNNING` 状态，每2秒检查一次。若全部满足条件则返回成功，否则抛出异常。",
  "TesterLibrary.Protocol.bfd.get_bfd_session_result": "获取BFD协议会话统计结果。\n\n该函数用于查询一个或多个BFD（双向转发检测）协议会话的统计信息。支持指定具体的会话对象以及需要获取的统计项，返回对应的结果。若未指定具体会话，则返回所有相关会话的数据。根据匹配结果的数量，返回值可能是字典、DataFrame 或布尔值 False。\n\nArgs:\n\n    Session (:obj:`BfdRouter` or list/set/tuple of :obj:`BfdRouter` or None, optional): \n        BFD协议会话对象或对象集合，每个会话对象应包含 `Name` 属性。\n        如果为 None，则不进行会话过滤，默认为 None。\n\n    StaItems (list or str or None, optional): \n        需要获取的统计项列表或单个统计项字符串，目前支持的统计项包括：\n\n            SessionID\n            SessionState\n            BfdSessionUpCount\n            BfdSessionDownCount\n            TXBfdPackets\n            RXBfdPackets\n            TimeoutsDetected\n            FlapsDetected\n\n        如果为 None，则返回所有可用统计项；如果为字符串，则自动转换为包含该字符串的列表，默认为 None。\n\nReturns:\n\n    dict or pd.DataFrame or bool:\n        - 若找到唯一匹配的BFD会话结果：返回一个字典，键为请求的统计项（StaItems），值为对应的值。\n        - 若找到多个匹配结果：返回一个 pandas DataFrame，包含所有匹配的会话数据。\n        - 若无匹配结果：返回 False。\n\nRaises:\n\n    ContinuableFailure: 如果调用底层接口返回失败（即返回值为 False），则抛出可继续执行的失败异常。\n\nExamples:\n\n    .. code:: RobotFramework\n\n        | @{StaItems} | Create List | TXBfdPackets | RXBfdPackets |\n        | Subscribe Result | Types=BfdSessionResult |\n        | Start Protocol |\n        | Sleep | 60 |\n        | &{Result} | Get Bfd Session Result | Session=${Session} | StaItems=@{StaItems} |\n        | Clear Result |",
  "TesterLibrary.Protocol.bfd.get_bfd_ipv4_session_result": "获取BFD IPv4会话统计结果\n\n该函数用于检索一个或多个BFD（双向转发检测）IPv4会话的统计信息。支持查询单个会话、多个会话或所有可用会话的统计项，用户可通过`Session`参数指定会话对象，通过`StaItems`参数选择需要返回的统计指标。\n\n参数：\n    Session (object 或 list/tuple/set of objects, optional)：要查询的BFD IPv4会话对象或对象集合。每个对象必须包含`.Name`属性，表示会话名称。若为None，则不进行会话过滤，默认值为None。\n    SessionId (int, optional)：在单一会话上下文中使用的会话索引号，作为传递给内部方法`_get_statictis()`的索引字典中的'SessionIndex'字段。默认值为1。\n    StaItems (list 或 str, optional)：指定需要返回的统计项（列名）。若为None，则返回所有可用统计项；若为字符串，则将其转换为列表处理。默认值为None。\n\n返回值：\n    dict、pandas.DataFrame 或 bool：\n        - 若找到唯一匹配的会话统计结果，返回一个字典，键为请求的统计项名称，值为对应的统计值；\n        - 若匹配到多个会话统计结果，返回一个pandas DataFrame，包含所有匹配的BFD IPv4会话统计信息；\n        - 若未找到任何匹配的会话统计结果，返回False。\n\n可能引发的异常：\n    TesterException：如果执行内部命令或从结果视图中获取数据时发生错误。\n    KeyError：如果提供的列名在结果DataFrame中不存在。\n    sqlite3.Error：如果在获取统计信息过程中发生数据库相关错误。\n\n副作用：\n    - 可能会执行如GotoResultPageCommand等内部命令以访问分页结果；\n    - 有可能修改内部状态，在获取统计信息前刷新会话数据；\n    - 在启用调试日志的情况下，将以表格形式记录获取的数据以便调试。\n\n示例：\n    .. code:: RobotFramework\n\n        | @{StaItems} | Create List | AdjacencyState | TxUpdate |\n        | Subscribe Result | Types=BfdIpv4SessionResult |\n        | Start Protocol |\n        | Sleep | 60 |\n        | &{Result} | Get Bfd Ipv4 Session Statistic | Session=${Session} | StaItems=@{StaItems} |\n        | Clear Result |\n\n支持的统计项包括但不限于：\n    Ipv4SessionKeyID\n    Ipv4SessionID\n    SessionID\n    SessionIndex\n    Ipv4SourceAddress\n    Ipv4DestinationAddress\n    BfdSessionState\n    MyDiscriminator\n    YourDiscriminator\n    BfdDiagnostic\n    LastBfdDiagnosticErrorRx\n    BfdControlBits_PFCADM\n    ReceiveCount\n    TransmitCount\n    TransmitInterval\n    ReceivedRequiredMinRXInterval\n    ReceivedRequiredMinEchoRXInterval\n    FlapsDetected\n    TimeoutsDetected\n    RXAvgRate\n    RXMaxRate\n    RXMinRate\n    TXAvgRate\n    TXMaxRate\n    TXMinRate",
  "TesterLibrary.Protocol.bfd.get_bfd_ipv6_session_result": "获取BFD IPv6会话统计结果\n\n该函数用于检索指定的BFD IPv6会话的统计信息。它支持从一个或多个会话对象中提取数据，并可以指定需要获取的统计项，如传输速率、接收速率、会话状态等。\n\nArgs:\n    Session (object or list/tuple/set of objects or None, optional): \n        BFD IPv6会话对象或对象集合。每个对象必须具有 `Name` 属性，用于过滤结果。如果为 None，则不根据名称过滤会话。\n    \n    SessionId (int, optional, default=1):\n        会话索引号，用于在后端过滤结果。默认值为1。对应于 'SessionIndex' 的过滤条件。\n\n    StaItems (list or str or None, optional):\n        指定需要获取的统计项列表。若为字符串则转换成单元素列表。可选统计项包括：\n\n            Ipv6SessionKeyID\n            Ipv6SessionID\n            SessionID\n            SessionIndex\n            Ipv6SourceAddress\n            Ipv6DestinationAddress\n            BfdSessionState\n            MyDiscriminator\n            YourDiscriminator\n            BfdDiagnostic\n            LastBfdDiagnosticErrorRx\n            BfdControlBits_PFCADM\n            ReceiveCount\n            TransmitCount\n            TransmitInterval\n            ReceivedRequiredMinRXInterval\n            ReceivedRequiredMinEchoRXInterval\n            FlapsDetected\n            TimeoutsDetected\n            RXAvgRate\n            RXMaxRate\n            RXMinRate\n            TXAvgRate\n            TXMaxRate\n            TXMinRate\n\n        如果未指定（None），则自动通过ROM属性查询确定。\n\nReturns:\n    dict or pd.DataFrame or bool:\n        - 若仅有一条匹配记录：返回字典，键为统计项名称，值为对应的统计值。\n        - 若有多条匹配记录：返回 pandas DataFrame，包含所有匹配的BFD IPv6会话统计信息。\n        - 若无匹配记录：返回 False。\n\nRaises:\n    ContinuableFailure: 当无法获取统计结果时抛出此异常，表示测试可以继续执行而不中断。\n\nExamples:\n    .. code:: RobotFramework\n\n        | @{StaItems} | Create List | TXAvgRate | RXAvgRate |\n        | Subscribe Result | Types=BfdIpv6SessionResult |\n        | Start Protocol |\n        | Sleep | 60 |\n        | &{Result} | Get Bfd Ipv6 Session Statistic | Session=${Session} | StaItems=@{StaItems} |\n        | Log Dictionary | ${Result} |\n        | Clear Result |\n\nSide Effects:\n    - 内部可能会刷新会话相关数据以确保获取最新结果。\n    - 在某些模式下使用 time.sleep(3) 来保证数据一致性。\n    - 使用日志输出表格格式的数据用于调试目的。",
  "TesterLibrary.Protocol.bfd.get_bfd_isis_session_result": "获取BFD-ISIS会话统计结果。该函数用于查询指定BFD和ISIS会话的统计信息，支持基于单个会话对象或多个会话集合进行查询，并可指定会话索引和需要返回的统计项。\n\n参数:\n    BfdSession (:obj:`BfdRouter` 或 list/set/tuple of objects 或 None, optional):\n        要查询的BFD会话对象。如果提供的是对象，则使用其 `Name` 属性作为标识符。\n        如果传入的是集合（如列表、元组、集合），则提取每个元素的 `Name` 属性。\n        若为 None，则不通过BFD会话ID进行过滤。\n\n    IsisSession (:obj:`IsisRouter` 或 list/set/tuple of objects 或 None, optional):\n        要查询的ISIS会话对象。处理方式与 `BfdSession` 相同，使用其 `Name` 属性作为标识符。\n        若为 None，则不通过ISIS会话ID进行过滤。\n\n    SessionId (int, optional):\n        会话索引号，用于进一步筛选结果，默认值为 1。\n\n    StaItems (list or str or None, optional):\n        指定需要获取的统计项（列名）。若为 None，将返回所有可用属性；\n        若提供字符串，将被转换为列表；必须是统计类中定义的属性子集。\n\n返回值:\n    dict 或 pd.DataFrame 或 bool:\n        - 如果找到唯一匹配行：返回一个字典，键为 `StaItems` 对应的字段，值为其对应的结果。\n        - 如果匹配多行：返回一个包含过滤结果的 pandas DataFrame。\n        - 如果没有找到匹配结果：返回 False。\n\n异常:\n    - TesterException: 在命令执行或数据检索过程中可能抛出的异常。\n    - sqlite3.Error: 如果在性能相关的统计数据检索过程中发生数据库访问错误。\n    - KeyError: 如果过滤条件中的列名在结果 DataFrame 中不存在。\n\n副作用:\n    - 内部可能会刷新会话数据以确保获取最新状态。\n    - 在处理分页结果时会执行如 GotoResultPageCommand 等命令。\n    - 为了调试目的，会将以表格形式记录检索到的数据。\n\n示例:\n    .. code:: RobotFramework\n\n        | @{StaItems} | Create List | AdjacencyState | TxUpdate |\n        | Subscribe Result | Types=IsisBfdSessionResult |\n        | Start Protocol |\n        | Sleep | 60 |\n        | &{Result} | Get Bfd Isis Session Statistic | BfdSession=${BfdSession} | IsisSession=${IsisSession} | SessionId=${SessionId} | StaItems=@{StaItems} |\n        | Clear Result |",
  "TesterLibrary.Protocol.bfd.get_bfd_isis_ipv6_session_result": "获取BFD over ISIS IPv6会话统计结果\n\n该函数用于根据提供的会话标识符和统计项，检索BFD（双向转发检测）在ISIS（中间系统到中间系统）协议上的IPv6会话的统计信息。它支持通过BFD会话对象、ISIS会话对象或两者结合，并配合会话索引号来过滤并获取指定的统计数据。\n\nArgs:\n    BfdSession (:obj:`BfdRouter` or list or set or tuple, optional): BFD会话对象或对象集合，用于提取会话标识。\n        如果为None，则不基于BFD会话进行过滤。\n        如果是可迭代对象（如列表、集合、元组），则从每个对象中提取名称属性。\n        如果是单个对象，则使用其Name属性进行过滤。\n\n    IsisSession (:obj:`IsisRouter` or list or set or tuple, optional): ISIS会话对象或对象集合，用于提取IP会话标识。\n        如果为None，则不基于ISIS会话进行过滤。\n        如果是可迭代对象（如列表、集合、元组），则从每个对象中提取名称属性。\n        如果是单个对象，则使用其Name属性进行过滤。\n\n    SessionId (int or str, optional): 会话索引号，默认值为1。与SessionID和IpSessionID一起用于过滤结果。\n\n    StaItems (list or str, optional): 指定需要获取的统计项目（列名）。如果未提供（None），则自动通过查询ROM属性确定。\n        如果是字符串，则会被转换为列表。必须为可用属性的子集。\n\nReturns:\n    dict or pd.DataFrame: 返回匹配的统计结果：\n        - 如果仅有一行匹配：返回一个字典，键对应请求的StaItems，值为其对应的统计值。\n        - 如果多行匹配：返回一个pandas DataFrame，包含所有匹配的行及其统计信息。\n        - 如果没有匹配结果：返回False。\n\nRaises:\n    TesterException: 在命令执行或数据检索过程中可能抛出异常。\n    sqlite3.Error: 如果在相关函数中发生数据库访问错误。\n    KeyError: 如果构造的索引列（由BfdSession、IsisSession和SessionId组成）在结果DataFrame中不存在。\n\nExamples:\n    .. code:: RobotFramework\n\n        | @{StaItems} | Create List | AdjacencyState | TxUpdate |\n        | Subscribe Result | Types=IsisBfdIpv6SessionResult |\n        | Start Protocol |\n        | Sleep | 60 |\n        | &{Result} | Get Bfd Isis Ipv6 Session Statistic | BfdSession=${BfdSession} | IsisSession=${IsisSession} | SessionId=${SessionId} | StaItems=@{StaItems} |\n        | Clear Result |\n\nSupported StaItems:\n    IpSessionKeyID\n    IpSessionID\n    SessionID\n    SessionIndex\n    Ipv6SourceAddress\n    Ipv6DestinationAddress\n    BfdSessionState\n    MyDiscriminator\n    YourDiscriminator\n    BfdDiagnostic\n    LastBfdDiagnosticErrorRx\n    BfdControlBits_PFCADM\n    ReceiveCount\n    TransmitCount\n    TransmitInterval\n    ReceivedRequiredMinRXInterval\n    ReceivedRequiredMinEchoRXInterval\n    FlapsDetected\n    TimeoutsDetected\n    RXAvgRate\n    RXMaxRate\n    RXMinRate\n    TXAvgRate\n    TXMaxRate\n    TXMinRate",
  "TesterLibrary.Protocol.bfd.get_bfd_ospfv2_session_result": "获取OSPFv2 BFD会话统计结果。\n\n该函数用于检索与指定OSPFv2和BFD会话相关联的BFD会话统计信息。它支持根据会话对象和会话索引进行过滤，并可选择性地获取一组特定的统计项。函数返回一个字典，包含请求的统计项及其对应的值；如果未找到匹配结果，则返回False。\n\n参数:\n    Ospfv2Session (:obj:`BfdRouter` 或其集合, 可选): 一个或多个OSPFv2会话对象，默认为None，此时不进行过滤。\n    BfdSession (:obj:`OspfRouter` 或其集合, 可选): 一个或多个BFD会话对象，默认为None，此时不进行过滤。\n    SessionId (int, 可选): 用于标识特定会话的索引号，默认为1。\n    StaItems (list, str, 可选): 指定要获取的统计项列表。若为字符串则会被转换为列表；若为None，则自动查询所有可用统计项。有效值包括：\n\n        Ipv4SessionKeyID\n\n        Ipv4SessionID\n\n        SessionID\n\n        SessionIndex\n\n        Ipv4SourceAddress\n\n        Ipv4DestinationAddress\n\n        BfdSessionState\n\n        MyDiscriminator\n\n        YourDiscriminator\n\n        BfdDiagnostic\n\n        LastBfdDiagnosticErrorRx\n\n        BfdControlBits_PFCADM\n\n        ReceiveCount\n\n        TransmitCount\n\n        TransmitInterval\n\n        ReceivedRequiredMinRXInterval\n\n        ReceivedRequiredMinEchoRXInterval\n\n        FlapsDetected\n\n        TimeoutsDetected\n\n        RXAvgRate\n\n        RXMaxRate\n\n        RXMinRate\n\n        TXAvgRate\n\n        TXMaxRate\n\n        TXMinRate\n\n返回值:\n    dict: 包含请求统计项的字典，例如：\n    \n        {\n            'TXAvgRate': 10,\n            'RXAvgRate': 10,\n        }\n\n    pd.DataFrame: 如果存在多条匹配记录，将返回一个pandas DataFrame。\n    False: 如果没有找到任何匹配记录。\n\n异常:\n    - `TesterException`: 在执行命令或从内部视图检索数据时可能引发异常。\n    - `sqlite3.Error`: 如果在底层调用中发生数据库访问错误（例如性能相关的统计数据检索）。\n    - `KeyError`: 如果过滤条件中指定的列名在结果DataFrame中不存在。\n\n副作用:\n    - 内部可能会调用`.get()`方法刷新会话对象的数据。\n    - 若处理分页结果，会执行类似`GotoResultPageCommand`的命令。\n    - 在页面导航时使用`time.sleep(3)`以确保一致性。\n    - 为了调试目的，将以表格形式记录结果数据。\n\n示例:\n    .. code:: RobotFramework\n\n        | @{StaItems} | Create List | AdjacencyState | TxUpdate |\n        | Subscribe Result | Types=Ospfv2BfdSessionResult |\n        | Start Protocol |\n        | Sleep | 60 |\n        | &{Result} | Get Bfd Ospfv2 Session Statistic | BfdSession=${BfdSession} | Ospfv2Session=${Ospfv2Session} | SessionId=${SessionId} | StaItems=@{StaItems} |\n        | Clear Result |\n\n描述:\n    该函数通常用于获取运行在OSPFv2协议实例上的BFD会话的当前状态或性能指标。通过灵活选择会话和定义需返回的指标，适用于高层监控和详细诊断场景。",
  "TesterLibrary.Protocol.bfd.get_bfd_ospfv3_session_result": "获取OSPFV3 BFD 会话统计结果。\n\n该函数用于获取与 OSPFv3 会话关联的 BFD（双向转发检测）会话的统计信息。可以通过提供 BFD 或 OSPFv3 会话对象、会话 ID 来过滤结果，并可指定需要返回的统计项。\n\n参数:\n\n    BfdSession (:obj:`BfdRouter`, optional): 表示 BFD 会话的对象，若提供，则使用其名称作为标识符进行过滤，默认为 None，表示不进行 BFD 会话过滤。\n\n    Ospfv3Session (:obj:`Ospfv3Router`, optional): 表示 OSPFv3 会话的对象，若提供，则使用其名称作为标识符进行过滤，默认为 None，表示不进行 OSPFv3 会话过滤。\n\n    SessionId (int, optional): 会话的索引号或标识符，默认值为 1，用于进一步指定要获取数据的会话实例。\n\n    StaItems (list, optional): 指定需要获取的统计项列表，支持以下统计项：\n\n        Ipv6SessionKeyID\n\n        Ipv6SessionID\n\n        SessionID\n\n        SessionIndex\n\n        Ipv6SourceAddress\n\n        Ipv6DestinationAddress\n\n        BfdSessionState\n\n        MyDiscriminator\n\n        YourDiscriminator\n\n        BfdDiagnostic\n\n        LastBfdDiagnosticErrorRx\n\n        BfdControlBits_PFCADM\n\n        ReceiveCount\n\n        TransmitCount\n\n        TransmitInterval\n\n        ReceivedRequiredMinRXInterval\n\n        ReceivedRequiredMinEchoRXInterval\n\n        FlapsDetected\n\n        TimeoutsDetected\n\n        RXAvgRate\n\n        RXMaxRate\n\n        RXMinRate\n\n        TXAvgRate\n\n        TXMaxRate\n\n        TXMinRate\n\n        若未提供此参数（即为 None），则返回所有可用统计项。\n\n返回值:\n\n    dict or pd.DataFrame or bool:\n        - 如果找到唯一匹配的一行数据：返回一个字典，键为统计项名称，值为对应的数据。\n        - 如果找到多行匹配数据：返回一个 pandas DataFrame，包含所有匹配的行，并仅包含指定的 StaItems 列。\n        - 如果没有找到匹配数据：返回 False。\n\n异常:\n\n    ContinuableFailure: 如果未能成功获取结果，则抛出此异常。\n\n    TesterException: 可能会在命令执行过程中或获取结果时引发。\n\n    sqlite3.Error: 如果在内部统计收集操作中发生数据库访问错误。\n\n    KeyError: 如果生成的索引中的任何键在结果数据集中不存在。\n\n副作用:\n\n    - 内部可能会通过 `.get()` 方法刷新会话数据。\n    - 在涉及分页结果的情况下，会执行导航命令（如 GotoResultPageCommand）。\n    - 为了调试目的，会以表格格式记录检索到的数据。\n\n示例:\n\n    .. code:: RobotFramework\n\n        | @{StaItems} | Create List | AdjacencyState | TxUpdate |\n        | Subscribe Result | Types=Ospfv3BfdSessionResult |\n        | Start Protocol |\n        | Sleep | 60 |\n        | &{Result} | Get Bfd Ospfv3 Session Statistic | BfdSession=${BfdSession} | Ospfv3Session=${Ospfv3Session} | SessionId=${SessionId} | StaItems=@{StaItems} |\n        | Clear Result |",
  "TesterLibrary.Protocol.bgp.create_bgp": "创建BGP协议会话对象，用于在指定端口上初始化并配置一个BGP路由器实例。\n\n该函数用于在测试仪表端口上创建并配置BGP协议会话。通过提供端口对象和一系列可选的配置参数，可以生成一个BgpRouter实例，并将其注册到全局映射中以便后续引用。该函数封装了底层调用，并在失败时抛出异常。\n\nArgs:\n    Port (:obj:`Port`): 测试仪表端口对象，表示BGP协议将绑定的网络接口。\n\nKeyword Args:\n    Name (str): BGP会话名称，默认值为自动生成。\n    \n    Enable (bool): 是否启用BGP协议会话，默认值：True。\n    \n    IpVersion (str): 指定IP版本，支持 'BOTH'、'IPV4'、'IPV6'，默认值：'BOTH'。\n    \n    BgpInitiator (bool): 是否作为BGP会话发起者，默认值：True。\n    \n    AsNumber (int): 本地自治系统编号（AS Number），取值范围1-65535，默认值：1。\n    \n    AsNumberStep (int): 自治系统编号增量步长，用于批量配置，默认值：1。\n    \n    Enable4ByteAs (bool): 是否启用4字节AS编号，默认值：False。\n    \n    AsNumber4Byte (int or str): 4字节AS编号，格式为 x.x，默认值：1.1。\n    \n    AsNumber4ByteStep (int or str): 4字节AS编号增量步长，默认值：0.1。\n    \n    DutAsNumber (int): 对端DUT的AS编号，默认值：1。\n    \n    DutAsNumberStep (int): DUT的AS编号增量步长，默认值：1。\n    \n    Enable4ByteDutAs (bool): 是否启用DUT的4字节AS编号，默认值：False。\n    \n    Dut4ByteAsNumber (int or str): DUT的4字节AS编号，默认值：1.1。\n    \n    Dut4ByteAsNumberStep (int or str): DUT的4字节AS编号增量步长，默认值：0.1。\n    \n    BgpType (str): BGP类型，支持 'EBGP' 或 'IBGP'，默认值：IBGP。\n    \n    UseGatewayAsDutIp (bool): 是否使用网关地址作为DUT的IP地址，默认值：True。\n    \n    BgpSessionIpAddressType (str): BGP会话使用的IP地址类型，支持 INTERFACE_IP 或 ROUTE_ID，默认值：INTERFACE_IP。\n    \n    DutIpv4Address (str): 当IP版本为IPv4且不使用网关地址时，指定DUT的IPv4地址（即Router ID），默认值：2.1.1.1。\n    \n    DutIpv4AddressStep (str): IPv4地址增量步长，默认值：0.0.0.1。\n    \n    DutIpv6Address (str): 当IP版本为IPv6且不使用网关地址时，指定DUT的IPv6地址（即Router ID），默认值：2000::1。\n    \n    DutIpv6AddressStep (str): IPv6地址增量步长，默认值：::1。\n    \n    HoldTime (int): BGP会话保持时间（秒），取值范围3-65535，默认值：90。\n    \n    KeepaliveTime (int): BGP保活时间（秒），取值范围1-65535，默认值：30。\n    \n    ConnectRetryCount (int): TCP连接重试次数，默认值：0。\n    \n    ConnectRetryInterval (int): TCP连接重试间隔（秒），取值范围10-300，默认值：30。\n    \n    MaxRoutesPerUpdateMessage (int): 每个Update消息中包含的最大路由数，默认值：2000。\n    \n    RouteRefreshMode (str): 路由刷新模式，支持 'None' 或 'Route Refresh'，默认值：None。\n    \n    EnableGracefulRestart (bool): 是否启用平滑重启功能，默认值：False。\n    \n    RestartTime (int): 平滑重启时间（秒），取值范围3-4095，默认值：90。\n    \n    EnableViewRoutes (bool): 是否启用查看路由信息功能，默认值：False。\n    \n    Authentication (str): 认证方式，支持 'None' 或 'MD5'，默认值：None。\n    \n    Password (str): MD5认证密码，字符串格式，长度1-255字符，默认值：xinertel。\n    \n    EnableBfd (bool): 是否启用BFD检测机制，默认值：False。\n    \n    EnableSr (bool): 是否启用Segment Routing（SR）功能，默认值：False。\n    \n    MiniLabel (int): 最小MPLS标签值，取值范围0-1048575，默认值：16。\n    \n    EnableExMsg (bool): 是否启用扩展消息支持，默认值：False。\n    \n    EnableCustomize (bool): 是否启用自定义配置项，默认值：False。\n    \n    AfiSubAfi (str): 地址族/子地址族标识，默认值为空字符串。\n    \n    EnableParseRxUpdateMsg (bool): 是否启用接收Update消息解析功能，默认值：True。\n\nReturns:\n    (:obj:`BgpRouter`): 创建并配置完成的BGP协议会话对象，可用于后续操作如添加路由等。\n\nSide Effects:\n    - 创建的BgpRouter实例会被注册到全局变量 `map_protocol_object` 中，以供后续通过句柄访问或修改。\n\nExamples:\n    .. code:: RobotFramework\n\n        | Create Bgp | Port=${Port} | Name=MyBgpSession | BgpType=EBGP | IpVersion=IPV4 | DutIpv4Address=3.3.3.3 |",
  "TesterLibrary.Protocol.bgp.edit_bgp": "编辑BGP协议会话对象的配置参数\n\n该函数用于修改指定BGP协议会话对象的属性。通过传入关键字参数（kwargs），可以动态更新会话对象中的相应配置字段。所有关键字参数都是可选的，若未提供则不会更改原有值。\n\nArgs:\n\n    Session (:obj:`BgpRouter`): 要编辑的BGP协议会话对象，类型为对象，代表当前的BGP会话实例。\n\nKeyword Args:\n\n    Name (str): BGP会话名称，字符串类型。\n\n    Enable (bool): 是否启用BGP会话，默认为True。\n\n    IpVersion (str): IP版本设置，支持：BOTH、IPV4、IPV6，默认为BOTH。\n\n    BgpInitiator (bool): 是否为会话发起方，默认为True。\n\n    AsNumber (int): 本地自治系统编号（1-65535），默认为1。\n\n    AsNumberStep (int): 自治系统编号递增值（0-65535），默认为1。\n\n    Enable4ByteAs (bool): 是否启用4字节AS号，默认为False。\n\n    AsNumber4Byte (int): 4字节AS号，格式为X.Y（如1.1），默认为1.1。\n\n    AsNumber4ByteStep (int): 4字节AS号递增值，默认为0.1。\n\n    DutAsNumber (int): DUT端的自治系统编号（1-65535），默认为1。\n\n    DutAsNumberStep (int): DUT端的自治系统编号递增值（1-65535），默认为1。\n\n    Enable4ByteDutAs (bool): 是否启用DUT端的4字节AS号，默认为False。\n\n    Dut4ByteAsNumber (int): DUT端的4字节AS号，格式为X.Y，默认为1.1。\n\n    Dut4ByteAsNumberStep (int): DUT端4字节AS号递增值，默认为0.1。\n\n    BgpType (str): BGP会话类型，支持EBGP或IBGP，默认为IBGP。\n\n    UseGatewayAsDutIp (bool): 是否使用网关地址作为DUT的IP地址，默认为True。\n\n    BgpSessionIpAddressType (str): 会话IP地址类型，支持INTERFACE_IP或ROUTE_ID，默认为INTERFACE_IP。\n\n    DutIpv4Address (str): 当IP版本为IPv4且UseGatewayAsDutIp为False时，需设置此参数作为DUT的IPv4地址，默认为2.1.1.1。\n\n    DutIpv4AddressStep (str): IPv4地址增量步长，默认为0.0.0.1。\n\n    DutIpv6Address (str): 当IP版本为IPv6且UseGatewayAsDutIp为False时，需设置此参数作为DUT的IPv6地址，默认为2000::1。\n\n    DutIpv6AddressStep (str): IPv6地址增量步长，默认为::1。\n\n    HoldTime (int): BGP会话保持时间（秒），范围3-65535，默认90秒。\n\n    KeepaliveTime (int): Keepalive报文发送间隔（秒），范围1-65535，默认30秒。\n\n    ConnectRetryCount (int): 连接失败重试次数，范围0-65535，默认0次。\n\n    ConnectRetryInterval (int): 每次连接尝试之间的间隔（秒），范围10-300，默认30秒。\n\n    MaxRoutesPerUpdateMessage (int): 每个UPDATE消息中最大路由数量，范围10-300，默认2000条。\n\n    RouteRefreshMode (str): Route Refresh模式，支持None或Route Refresh，默认None。\n\n    EnableGracefulRestart (bool): 是否启用平滑重启功能，默认False。\n\n    RestartTime (int): 平滑重启等待时间（秒），范围3-4095，默认90秒。\n\n    EnableViewRoutes (bool): 是否启用查看路由信息功能，默认False。\n\n    Authentication (str): 认证方式，支持None或MD5，默认None。\n\n    Password (str): MD5认证密码，长度1-255字符，默认xinertel。\n\n    EnableBfd (bool): 是否启用BFD检测机制，默认False。\n\n    EnableSr (bool): 是否启用Segment Routing功能，默认False。\n\n    MiniLabel (int): 最小MPLS标签值，范围0-1048575，默认16。\n\n    EnableExMsg (bool): 是否启用扩展BGP消息支持，默认False。\n\n    EnableCustomize (bool): 是否启用自定义扩展功能，默认False。\n\n    AfiSubAfi (str): AFI/SAFI标识符，默认空字符串。\n\n    EnableParseRxUpdateMsg (bool): 是否启用解析接收的Update消息，默认True。\n\nReturns:\n\n    bool: 返回操作结果，成功返回True，失败返回False（失败会抛出ContinuableFailure异常）。\n\nExamples:\n    .. code:: RobotFramework\n\n        | Edit Bgp | Session=${Session} | Enable=False | IpVersion=IPV4 | AsNumber=100 |",
  "TesterLibrary.Protocol.bgp.create_bgp_ipv4_route_pool": "创建BGP IPv4路由对象\n\n该函数用于创建一个BGP IPv4路由池对象，基于提供的会话对象和配置参数。它封装了底层会话对象的`create_ipv4_route_pool`方法，并支持丰富的BGP路由属性配置，包括下一跳、AS路径、Community、扩展Community、VRF、标签以及SRv6相关参数等。\n\n参数:\n-------\nSession : object or list of objects\n    一个或多个BgpRouter类型的会话对象，代表与BGP对等体的协议会话。\n    这些会话对象必须包含底层API调用的方法（如create_ipv4_route_pool）。\n\n**kwargs : dict\n    包含IPv4路由池配置的任意关键字参数。主要参数如下：\n\n    - Name (str): BGP IPv4路由名称，默认为自动生成。\n    - Enable (bool): 是否启用此路由池，默认True。\n    - SubAfi (str): 子地址族标识符，可选值：UNICAST, MULTICAST, VPN, LABELED，默认UNICAST。\n    - Origin (str): 路由源信息，可选值：Incomplete, IGP, EGP，默认IGP。\n    - AsPath (int): AS路径长度，取值范围1-255。\n    - AsPathType (str): AS路径类型，可选：SET, SEQUENCE, CONFED_SEQUENCE, CONFED_SET，默认SEQUENCE。\n    - UseSessionAddressAsNextHop (bool): 是否使用会话地址作为下一跳，默认True。\n    - EnableLocalPref (bool): 是否启用本地优先级，默认True。\n    - LocalPref (int): 本地优先级值，默认10。\n    - EnableMed (bool): 是否启用Multi Exit Discriminator，默认False。\n    - MultExitDisc (int): MED值，默认0。\n    - AtomicAggregate (bool): 是否启用Atomic Aggregate，默认False。\n    - EnableAggregator (bool): 是否启用聚合器，默认False。\n    - AggregatorAsNumber (int): 聚合器的AS号，默认1。\n    - AggregatorIp (str): 聚合器的IP地址，默认192.0.1.0。\n    - EnableOriginatorId (bool): 是否启用Originator ID，默认False。\n    - OriginatorId (str): Originator ID地址，默认192.0.1.0。\n    - EnableClusterIdList (bool): 是否启用Cluster ID列表，默认False。\n    - ClusterIdList (str): Cluster ID列表，默认为空。\n    - EnableCommunity (bool): 是否启用Community字段，默认False。\n    - CommunityType (str): Community类型，可选：AA_NN, NO_EXPORT, NO_ADVERTISE, LOCAL_AS，默认AA_NN。\n    - CommunityAsNumber (int): Community中的AS编号，默认1。\n    - CommunityId (int): Community中的ID，默认1。\n    - Community (list): Community列表，默认空列表。\n    - CommunityIncrement (list): Community递增列表，默认空列表。\n    - CommunityPerBlockCount (int): 每个路由块中Community的数量，默认1。\n    - ExtendedCommunity (list): 扩展Community列表，默认空列表。\n    - VrfRd (str): VRF路由区分符(RD)，格式为\"AS:Number\"或\"IPv4:Number\"，默认1:1。\n    - VrfRdStep (str): RD步长，默认0:1。\n    - VrfRt (str): VRF路由目标(RT)，格式为\"AS:Number\"，默认100:1。\n    - VrfRtStep (str): RT步长，默认0:1。\n    - VrfCount (int): VRF数量，默认1。\n    - StartingLabel (int): 起始MPLS标签，默认16。\n    - LabelType (str): 标签类型，可选：Fixed, Incremental, Explicit Null, Implicit Null，默认Fixed。\n    - FirstRoute (str): 起始IPv4路由地址，默认192.0.1.0。\n    - RandomRoute (bool): 是否生成随机路由，默认False。\n    - RouteCount (int): 每个会话生成的路由数量，默认1。\n    - PrefixLength (int): IPv4前缀长度，默认24。\n    - NextHop (str): 下一跳IPv4地址，默认192.0.1.0。\n    - IPv6NextHop (str): IPv6下一跳地址，默认2000::1。\n    - EnableLinkLocalNextHop (bool): 是否使用IPv6 Link Local地址作为下一跳，默认False。\n    - Ipv6LinkLocalNextHop (str): IPv6 Link Local下一跳地址，默认2000::1。\n    - EncodeSrTlvs (list): 编码的SR TLVs列表，可选项：LABEL_INDEX, SRGB, SRV6_VPN_SID, SRV6_SERVICES。\n    - OverrideGlobalSrgb (bool): 是否覆盖全局SRGB，默认False。\n    - SrgbBase (int): SRGB起始值，默认16000。\n    - SrgbRange (int): SRGB范围大小，默认1000。\n    - LabelIndex (int): 标签索引，默认0。\n    - Srv6SidInfoSubTlvType (int): SRv6 SID信息子TLV类型，默认1。\n    - Srv6LocatorBlockLength (int): Locator Block长度，默认32。\n    - Srv6LocatorNodeLength (int): Locator Node长度，默认32。\n    - Srv6FuncLength (int): Function长度，默认32。\n    - Srv6EndpointBehavior (str): SRv6 Endpoint Behavior，默认CUSTOM。\n    - Srv6CustomEndpointBehavior (int): 自定义Endpoint Behavior，默认0xFFFF。\n\n返回值:\n--------\nobject\n    返回一个BgpIpv4RoutepoolConfig类型的对象，表示创建的BGP IPv4路由池。可通过该对象进一步编辑或查询路由池的配置。\n\n异常:\n------\n- 如果底层会话对象没有`create_ipv4_route_pool`方法，可能抛出AttributeError。\n- 如果调用失败，将抛出ContinuableFailure异常。\n\n示例:\n-------\n.. code:: RobotFramework\n\n    | ${Session} | Create Bgp | Port=${Port} |\n    | ${Community} | Create List | AA_NN | NO_EXPORT | NO_ADVERTISE | LOCAL_AS |\n    | ${CommunityIncrement} | Create List | 1:1 | 1:2 | 1:3 | 1:4 |\n    | ${ExtendedCommunity} | Create List | 0x00:0x02:1:1 | 0x01:0x02:1:2 | 0x02:0x02:1:3 |\n    | ${RoutePool} | Create Bgp Ipv4 Route Pool | Session=${Session} | Community=${Community} | CommunityIncrement=${CommunityIncrement} | ExtendedCommunity=${ExtendedCommunity} |\n    | ${Community} | Create List | AA_NN | NO_EXPORT |\n    | ${CommunityIncrement} | Create List | 2:1 | 2:2 |\n    | Edit Configs | Configs=${RoutePool} | Community=${Community} | CommunityIncrement=${CommunityIncrement} | CommunityPerBlockCount=2 |\n\n备注:\n-----\n- 此函数是封装于底层API `renix.create_bgp_ipv4_route_pool` 的用户接口。\n- 若函数调用失败（返回False），则抛出ContinuableFailure异常。",
  "TesterLibrary.Protocol.bgp.create_bgp_ipv6_route_pool": "创建BGP IPv6路由对象\n\n该函数用于创建一个BGP IPv6路由对象，并将其绑定到指定的会话（Session）上。它封装了底层会话对象的`create_ipv6_route_pool`方法，允许通过关键字参数传递详细的IPv6路由配置信息。\n\n### 参数说明：\n\n- **Session** (`BgpRouter`):  \n  BGP协议会话对象，必须是有效的`BgpRouter`实例。这个会话对象提供了与设备或API的连接，实际的路由池创建操作会在该会话上下文中执行。\n\n- **\\*\\*kwargs**:  \n  支持以下关键字参数来定义IPv6路由池的行为和属性：\n\n#### 基础配置：\n- `Name` (str): 路由名称，默认值：自动生成。\n- `Enable` (bool): 是否启用该路由，默认值：`True`。\n- `SubAfi` (str): 子地址族标识（Sub-AFI），可选值：`UNICAST`, `MULTICAST`, `VPN`, `LABELED`，默认值：`UNICAST`。\n- `Origin` (str): BGP路由的起源属性，可选值：`Incomplete`, `IGP`, `EGP`，默认值：`IGP`。\n- `AsPath` (int): AS路径长度，默认值：未设置。\n- `AsPathType` (str): AS路径类型，可选值：`SET`, `SEQUENCE`, `CONFED_SEQUENCE`, `CONFED_SET`，默认值：`SEQUENCE`。\n- `UseSessionAddressAsNextHop` (bool): 是否使用会话地址作为下一跳，默认值：`True`。\n\n#### 路由策略相关：\n- `EnableLocalPref` (bool): 是否启用本地优先级（Local Preference），默认值：`True`。\n- `LocalPref` (int): 本地优先级值，范围：0~4294967295，默认值：10。\n- `EnableMed` (bool): 是否启用多出口鉴别器（MED），默认值：`False`。\n- `MultExitDisc` (int): MED值，范围：0~4294967295，默认值：0。\n- `AtomicAggregate` (bool): 是否启用原子聚合属性，默认值：`False`。\n- `EnableAggregator` (bool): 是否启用聚合者属性，默认值：`False`。\n- `AggregatorAsNumber` (int): 聚合者的AS编号，范围：1~4294967295，默认值：1。\n- `AggregatorIp` (str): 聚合者的IP地址（IPv4），默认值：`192.0.1.0`。\n- `EnableOriginatorId` (bool): 是否启用Originator ID，默认值：`False`。\n- `OriginatorId` (str): Originator ID（IPv4），默认值：`192.0.1.0`。\n- `EnableClusterIdList` (bool): 是否启用Cluster ID列表，默认值：`False`。\n- `ClusterIdList` (str): Cluster ID（IPv4），默认值：空。\n\n#### 团体属性：\n- `EnableCommunity` (bool): 是否启用团体属性，默认值：`False`。\n- `CommunityType` (str): 团体类型，可选值：`AA:NN`, `NO_EXPORT`, `NO_ADVERTISE`, `LOCAL_AS`，默认值：`AA:NN`。\n- `CommunityAsNumber` (int): AA:NN类型中的AS号，范围：1~65535，默认值：1。\n- `Community` (list): 团体值列表，支持：`AA_NN`, `NO_EXPORT`, `NO_ADVERTISE`, `LOCAL_AS`，默认值：空列表。\n- `CommunityIncrement` (list): 团体增量值列表，默认值：空列表。\n- `CommunityPerBlockCount` (int): 每个路由组的团体数量，范围：1~65535，默认值：1。\n- `ExtendedCommunity` (list): 扩展团体列表，格式如：`['0x00:0x02:1:1', '0x01:0x02:1:2']`，默认值：空列表。\n\n#### VRF 相关：\n- `VrfRd` (str): VRF路由标识（RD），格式：`AS:Number` 或 `IPv4:Number`，默认值：`1:1`。\n- `VrfRdStep` (str): RD步长，默认值：`0:1`。\n- `VrfRt` (str): VRF路由目标（RT），格式：`AS:Number`，默认值：`100:1`。\n- `VrfRtStep` (str): RT步长，默认值：`0:1`。\n- `VrfCount` (int): VRF数量，范围：1~65535，默认值：1。\n\n#### 标签相关：\n- `StartingLabel` (int): 起始标签，范围：0~1048575，默认值：16。\n- `LabelType` (str): 标签类型，可选值：`Fixed`, `Incremental`, `Explicit Null`, `Implicit Null`，默认值：`Fixed`。\n- `LabelIndex` (int): 标签索引，范围：0~4294967295，默认值：0。\n- `LabelStep` (int): 标签步长，范围：0~4294967295，默认值：1。\n\n#### 路由前缀与跳变：\n- `FirstIpv6Route` (str): IPv6路由起始地址，默认值：`2000::1`。\n- `RouteCount` (int): 每个会话的路由数，范围：1~8000000，默认值：1。\n- `RouteStep` (str): IPv6路由步长，默认值：`0:0:0:1::`。\n- `Ipv6RouteStep` (int): IPv6路由递增步长，范围：1~4294967295，默认值：1。\n- `PrefixLength` (int): IPv6前缀长度，范围：1~128，默认值：64。\n\n#### 下一跳配置：\n- `NextHopAddrType` (str): 下一跳地址类型，可选值：`IPv4`, `IPv6`，默认值：`IPv4`。\n- `NextHop` (str): IPv4下一跳地址，默认值：`192.0.1.0`。\n- `NextHopStep` (str): IPv4下一跳步长，默认值：`0.0.0.1`。\n- `IPv6NextHop` (str): IPv6下一跳地址，默认值：`2000::1`。\n- `IPv6NextHopStep` (str): IPv6下一跳步长，默认值：`::1`。\n- `EnableLinkLocalNextHop` (bool): 是否启用链路本地地址作为下一跳，默认值：`False`。\n- `Ipv6LinkLocalNextHop` (str): 链路本地下一跳地址，默认值：`fe80::1`。\n- `Ipv6LinkLocalNextHopStep` (str): 链路本地下一跳步长，默认值：`::1`。\n\n#### SRv6 相关：\n- `EncodeSrTlvs` (list): 编码SR TLV，可选值：`NO_SHOW`, `SRV6_VPN_SID`, `SRV6_SERVICES`，默认值：`NO_SHOW`。\n- `OverrideGlobalSrgb` (bool): 是否覆盖全局SRGB，默认值：`False`。\n- `SrgbBase` (int): SRGB起始值，范围：0~16777215，默认值：16000。\n- `SrgbRange` (int): SRGB范围，默认值：1000。\n- `Srv6SidInfoSubTlvType` (int): SID信息子TLV类型，范围：1~255，默认值：1。\n- `Srv6LocatorBlockLength` (int): Locator块长度，范围：0~128，默认值：32。\n- `Srv6LocatorNodeLength` (int): Locator节点长度，范围：1~128，默认值：32。\n- `Srv6FuncLength` (int): Function长度，范围：0~128，默认值：32。\n- `Srv6FuncOpcode` (str): Function Opcode，格式：`ff:ff:ff`，默认值：`0`。\n- `Srv6ArguLength` (int): Argument长度，范围：1~128，默认值：32。\n- `Srv6Argument` (str): Argument值，格式：`ff:ff:ff`，默认值：`0`。\n- `EncodedSrv6ServiceDataSubTlvs` (list): SRv6服务数据子TLV，可选值：`NO_SHOW`, `SRV6_ID_STRUCTURE`，默认值：`NO_SHOW`。\n- `Srv6TranspositionLength` (int): Transposition长度，范围：0~24，默认值：0。\n- `Srv6TranspositionOffset` (int): Transposition偏移，范围：0~15，默认值：0。\n- `Srv6Locator` (str): 认证类型，可选值：`None`, `MD5`，默认值：`None`。\n- `Srv6LocatorStep` (str): 认证密码，默认值：`xinertel`。\n- `Srv6EndpointBehavior` (str): Endpoint行为，可选值包括各种SRv6行为（如END_DX6、CUSTOM等），默认值：`CUSTOM`。\n- `Srv6CustomEndpointBehavior` (int): 自定义Endpoint行为，十六进制值，范围：0x0~0xFFFF，默认值：0xFFFF。\n\n### 返回值：\n- 返回一个 `BgpIpv6RoutepoolConfig` 对象，表示创建的BGP IPv6路由池配置。如果创建失败，抛出异常。\n\n### 示例：\n```robotframework\n| ${Session} | Create Bgp | Port=${Port} |\n| ${Community} | Create List | AA_NN | NO_EXPORT | NO_ADVERTISE | LOCAL_AS |\n| ${CommunityIncrement} | Create List | 1:1 | 1:2 | 1:3 | 1:4 |\n| ${ExtendedCommunity} | Create List | 0x00:0x02:1:1 | 0x01:0x02:1:2 | 0x02:0x02:1:3 |\n| ${RoutePool} | Create Bgp Ipv6 Route Pool | Session=${Session} | Community=${Community} | CommunityIncrement=${CommunityIncrement} | ExtendedCommunity=${ExtendedCommunity} |\n| ${Community} | Create List | AA_NN | NO_EXPORT |\n| ${CommunityIncrement} | Create List | 2:1 | 2:2 |\n| Edit Configs | Configs=${RoutePool} | Community=${Community} | CommunityIncrement=${CommunityIncrement} | CommunityPerBlockCount=2 |\n```",
  "TesterLibrary.Protocol.bgp.get_bgp_router_from_route_pool": "获取BGP路由器与给定路由配置相关联的对象列表\n\n该函数用于根据指定的IP版本（IPv4或IPv6）查找与提供的配置对象相关的BGP路由器。这些路由器是所生成路由的源。\n\n参数:\n    Configs (object 或 iterable): 单个配置对象或可迭代的配置对象集合（如列表、集合、元组）。每个配置对象需具备 `get_relatives` 方法，用于根据关系名称和方向获取相关元素。\n    \n    Type (str, optional): 指定要查询的路由类型，默认为 'ipv4'。若设置为 'ipv6'，则查找IPv6路由生成器。\n\n返回值:\n    list: 与每个配置对象对应的BGP路由器列表。列表顺序与输入配置顺序一致。\n\n说明:\n    - 如果 `Configs` 不是列表、集合或元组，则其将被转换为列表。\n    - 该函数调用每个配置对象的 `get_relatives` 方法，依据 `Type` 参数使用关系名 'GenerateIpv4Route' 或 'GenerateIpv6Route'。\n    - 查询中 `direction` 参数始终设为 `EnumRelationDirection.SOURCE`，表示仅获取生成路由的源路由器。\n\n示例:\n    .. code:: RobotFramework\n\n        | ${Session} | Create Bgp | Port=${Port} |\n        | ${RouterPool} | Create Bgp Ipv4 Route Pool | Session=${Session} |\n        | ${Point} | Get Router From Route Pool | Configs=${RouterPool} |",
  "TesterLibrary.Protocol.bgp.create_bgp_capability": "创建BGP Capability对象\n\n该函数用于在指定的BGP会话上创建一个BGP Capability配置。其底层调用的是会话对象的create_capability方法，具体行为和返回值依赖于会话对象的实现。\n\nArgs:\n\n    Session (:obj:`BgpRouter`): Bgp协议会话对象，类型为object，必须包含create_capability方法\n\nKeyword Args:\n\n    Name (str): BGP Capability名称, 类型为：string\n\n    Enable (bool): 使能BGP Capability, 类型为：bool, 取值范围：True或False, 默认值：True\n\n    CapabilityCode (int): Capability Code, 类型为：number, 默认值：1, 取值范围：1-255\n\n    CapabilityValue (str): Capability 值, 类型为：list\n\nReturns:\n\n    (:obj:`BgpCapabilityConfig`): 创建的BGP Capability配置对象, 类型为object。如果创建失败将抛出ContinuableFailure异常。\n\nRaises:\n\n    ContinuableFailure: 如果创建BGP Capability失败，抛出此异常\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${Session} | Create Bgp | Port=${Port} |\n        | ${CapabilityValue} | Create List | 1 | 2 | 3 | 4 | 5 |\n        | Create Bgp Capability | Session=${Session} | CapabilityCode=5 | CapabilityValue=${CapabilityValue} |",
  "TesterLibrary.Protocol.bgp.create_bgp_evpn_route_ad": "创建BGP EVPN以太自动发现路由对象\n\n该函数用于在给定的BGP会话上下文中创建一个BGP EVPN（Ethernet Virtual Private Network）Route Auto-Discovery (AD) 路由对象。它允许通过关键字参数进行灵活配置，并将实际的创建逻辑委托给会话对象。\n\nArgs:\n\n    Session (:obj:`BgpRouter`): Bgp协议会话对象，类型为object。该会话通常与网络设备或模拟器的连接相关联。\n\nKeyword Args:\n\n    Name (str): BGP EVPN以太自动发现路由名称，类型为字符串。\n\n    Enable (bool): 是否启用BGP EVPN以太自动发现路由，默认值：True，取值范围：True 或 False。\n\n    Origin (str): ORIGIN属性，表示路由信息的来源，默认值：IGP，可选值包括：\n        IGP\n        EGP\n        INCOMPLETE\n\n    AsPath (list): AS路径列表，类型为list，表示路由经过的AS路径。\n\n    AdRouteType (str): 以太自动发现路由类型，默认值：ESI，可选值包括：\n        EVI\n        ESI\n        VPWS\n\n    UseSessionAddressAsNextHop (bool): 是否使用会话地址作为下一跳地址，默认值：True，取值范围：True 或 False。\n\n    NextHop (str): IPv4下一跳地址，默认值：100.0.0.1，格式应为合法IPv4地址。\n\n    NextHopIpv6 (str): IPv6下一跳地址，默认值：2001::1，格式应为合法IPv6地址。\n\n    EnableLinkLocalNextHop (bool): 是否启用IPv6 Link Local下一跳地址，默认值：False，取值范围：True 或 False。\n\n    LinkLocalNextHop (str): IPv6 Link Local下一跳地址，默认值：fe80::1，格式应为合法IPv6地址。\n\n    EnableOriginatorId (bool): 是否启用Originator ID，默认值：False，取值范围：True 或 False。\n\n    OriginatorId (str): Originator ID，用于标识路由发起者，默认值：192.0.0.1，格式应为合法IPv4地址。\n\n    VrfRouteTarget (str): VRF路由目标，默认值：100:1，格式为AS:Number。\n\n    VrfRouteTargetStep (str): VRF路由目标步进值，默认值：0:1。\n\n    VrfRouteDistinguisher (str): VRF路由区分符起始值，默认值：10.0.0.2:1，格式可以是AS:Number或IPv4:Number。\n\n    VrfRouteDistinguisherStep (str): VRF路由区分符步进值，默认值：0:1。\n\n    EthernetSegmentType (str): 以太网段类型，默认值：OPERATOR，可选值包括：\n        OPERATOR\n        IEEE802\n        BRIDGEDLAN\n        MACBASED\n        ROUTEID\n        AS\n\n    EthernetSegmentIdentifier (str): 以太网段标识符，默认值：OPERATOR。\n\n    EthernetTagId (str): 以太网标签ID，默认值：00:00:00:00:00:00:00:00:00。\n\n    EthernetTagIdStep (int): 以太网标签ID步进值，默认值：1，取值范围：0 - 4294967295。\n\n    EthernetTagCountPerEvi (int): 每个EVI下的以太网标签数量，默认值：1，取值范围：1 - 4294967295。\n\n    ActiveStandbyMode (str): 主备模式，默认值：SINGLE，可选值包括：\n        ALL\n        SINGLE\n\n    EviCount (int): EVI（Ethernet Virtual Instance）数量，默认值：1，取值范围：1 - 4294967295。\n\n    DataPlanEncapsulation (str): 数据平面封装方式，默认值：NONE，可选值包括：\n        NONE\n        VXLAN\n        MPLS\n        SRv6\n\n    Label1 (int): 封装标签（如VNI/VSID），默认值：100，取值范围：0 - 16777215。\n\n    Label1Step (int): 封装标签步进值，默认值：1，取值范围：0 - 16777215。\n\n    IncludeLayer2AttributeExtendedCommunity (bool): 当路由类型为VPWS时是否包含L2属性扩展团体，默认值：False。\n\n    PBit (bool): 多归单活场景中，该标志位置1表示该PE为主PE，默认值：False。\n\n    BBit (bool): 多归单活场景中，该标志位置1表示该PE为备PE，默认值：False。\n\n    CBit (bool): 置1时表示发送给该PE的EVPN报文必须携带控制字，默认值：False。\n\n    L2Mtu (bool): 是否指定最大传输单元（单位为字节），默认值：False。\n\n    EnableCustomMplsLabel (bool): 是否启用自定义MPLS标签，默认值：False。\n\n    MplsLabel (int): 自定义MPLS标签值，默认值：0，取值范围：0 - 1048575。\n\n    MplsLabelStep (int): MPLS标签步进值，默认值：0，取值范围：0 - 1048575。\n\nReturns:\n\n    (:obj:`EvpnRouteAdConfig`): 创建的BGP EVPN以太自动发现路由对象，类型为object。\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${Session} | Create Bgp | Port=${Port} |\n        | Create Bgp Evpn Route Ad | Session=${Session} | EnableCustomMplsLabel=True | MplsLabel=1000 | MplsLabelStep=2 |",
  "TesterLibrary.Protocol.bgp.establish_bgp": "建立BGP协议会话\n\n该函数用于为提供的一个或多个BGP会话对象建立BGP连接。它接受单个会话对象或包含多个会话对象的可迭代对象（如列表、集合或元组），并在每个对象上调用`establish()`方法以建立BGP会话。如果传入的是单个会话对象，该对象将被转换为列表以确保统一处理。函数遍历所有会话对象并依次调用其建立方法。\n\nArgs:\n\n    Sessions (Union[object, list, set, tuple]): 一个或多个支持 `establish()` 方法的 BGP 会话对象。可以是单个对象或可迭代对象。\n\nReturns:\n\n    bool: 始终返回 ``True``，表示函数已成功执行。\n\nRaises:\n\n    ContinuableFailure: 如果底层实现返回 False，表示建立BGP会话失败，并抛出此异常。\n\nExamples:\n    .. code:: RobotFramework\n\n        | Establish Bgp | Sessions=${Sessions} |",
  "TesterLibrary.Protocol.bgp.connect_bgp": "Establishes a BGP connection for one or more BGP session objects.\n\n**Purpose:**  \nThis function is used to initiate BGP connections for one or more session objects that represent BGP routers or peers. It ensures that each session's `connect()` method is called to establish the BGP protocol session.\n\n**Parameters:**\n- **Sessions** (`object` or iterable of `object`, e.g., list, tuple, set):  \n  A single session object or a collection of session objects. Each session object must implement a `connect()` method that handles the actual BGP connection logic. If a single session is provided, it will be internally converted into a list for uniform processing.\n\n**Returns:**\n- `bool`:  \n  Returns `True` if the connection process was successfully initiated for all provided sessions.  \n  Note: The function always returns `True` as long as all session objects have the required `connect()` method and no exceptions are raised during execution.\n\n**Raises:**\n- `ContinuableFailure`:  \n  If the underlying API call fails (i.e., `renix.connect_bgp()` returns `False`), this exception is raised to indicate a failure in establishing the BGP session(s), with a message indicating the failed function name.\n\n**Description:**  \nThis function acts as a wrapper around the backend `renix.connect_bgp()` function. It provides a unified way to handle both single session objects and multiple session objects by converting them into an iterable format (list) if necessary. It then delegates the actual connection handling to the backend implementation.\n\nEach session object passed to this function must have a `connect()` method that performs the low-level BGP session establishment. If any session object lacks this method, a `TypeError` may be raised by the backend during execution.\n\n**Example Usage:**\n.. code:: RobotFramework\n\n    | Connect Bgp | Sessions=${Sessions} |\n\nWhere `${Sessions}` can be either a single session object or a list of session objects representing BGP routers.",
  "TesterLibrary.Protocol.bgp.disconnect_bgp": "断开一个或多个BGP协议会话连接。\n\n参数:\n    Sessions (object 或 iterable of objects): 表示要断开的BGP会话对象，可以是单个会话对象或包含多个会话对象的可迭代结构（如 list, set, tuple）。如果是单个会话对象，函数内部会将其转换为包含该会话的列表进行统一处理。\n\n返回值:\n    bool: 如果所有指定的BGP会话均成功断开，则返回 True；若断开过程中发生错误，则返回 False。\n\n功能描述:\n    该函数通过遍历提供的 Sessions 参数，并在其每个会话对象上调用 `disconnect()` 方法来实现BGP会话的断开。它对输入的单个或多个会话对象进行了统一处理，确保无论输入形式如何，都能正确执行断开操作。在用户接口层封装后，如果断开失败（即返回值为 False），会抛出一个可继续的异常（ContinuableFailure）以供上层处理。\n\n示例:\n    .. code:: RobotFramework\n\n        | Disconnect Bgp | Sessions=${Sessions} |",
  "TesterLibrary.Protocol.bgp.advertise_bgp": "Advertises BGP routes for the given BGP session(s).\n\nThis function triggers the advertisement of BGP routes for one or more provided BGP session objects. It internally invokes the backend method to execute the route advertisement command and returns the result.\n\nParameters:\n-----------\nSessions : BgpSession or list of BgpSession\n    A single BGP session object or a list of BGP session objects for which route advertisement should be initiated.\n\nReturns:\n--------\nbool\n    Returns True if the BGP route advertisement was successful. Returns False if the operation failed.\n\nRaises:\n-------\nContinuableFailure\n    If the BGP route advertisement fails, a ContinuableFailure exception is raised with an appropriate error message.\n\nNotes:\n------\n- If a single session is provided, it is automatically wrapped into a list.\n- The function internally uses `BgpAdvertiseRoutesCommand` to perform the route advertisement.\n- This function is typically used in test automation frameworks to simulate route updates or convergence scenarios.\n\nExample:\n--------\n.. code:: RobotFramework\n\n    | Advertise Bgp | Sessions=${Sessions} |",
  "TesterLibrary.Protocol.bgp.withdraw_bgp": "撤销BGP协议会话的路由\n\n该函数用于撤销指定BGP会话所关联的路由。它向底层API发送一个命令，要求从路由表中移除与给定BGP会话相关联的路由条目。可以传入单个会话对象或者多个会话对象的可迭代集合（如列表、元组或集合）。\n\n参数:\n    Sessions : BgpSession 或可迭代的 BgpSession 对象\n        一个单独的BGP会话对象，或包含多个BGP会话对象的可迭代结构（如 list, set, tuple）。\n        每个会话对象必须包含一个 'handle' 属性，该属性是API中标识会话块的唯一句柄。\n\n返回值:\n    bool\n        始终返回 True，表示命令已成功执行。如果执行失败，底层实现将抛出异常。\n\n注意事项:\n    - 此函数内部构造并执行一个 `BgpWithdrawnRoutesCommand` 命令。\n    - 如果传入的是单个会话对象，该对象会被自动封装进一个列表中以统一处理。\n    - 所有传入的会话对象必须有效，并且已经正确初始化了 'handle' 属性。\n\n示例:\n    .. code:: RobotFramework\n\n        | Withdraw Bgp | Sessions=${Sessions} |",
  "TesterLibrary.Protocol.bgp.advertise_bgp_route": "..  function:: advertise_bgp_route(Routes)\n\n    通告一个或多个BGP路由，使用底层的BGP协议栈。\n\n    该函数是对 `BgpRouter.advertise_route` 类方法的一个封装。\n    它接受单个BGP路由对象或可迭代（列表、集合或元组）的BGP路由对象，并触发路由通告过程。\n    在内部，它确保输入被正确格式化，然后执行相应的命令来通告指定的路由。\n\n    :param Routes: 单个BGP路由对象或者包含多个BGP路由对象的可迭代对象。\n                   每个路由对象必须有一个 `handle` 属性，用于在底层系统中唯一标识该路由块。\n    :type Routes: BgpRoute or list[BgpRoute] or set[BgpRoute] or tuple[BgpRoute]\n\n    :return: 如果命令成功执行则返回True；否则抛出异常。\n    :rtype: bool\n\n    **Robot Framework 示例用法**:\n\n    .. code:: RobotFramework\n\n        | Advertise Bgp Route | Routes=${Routes} |\n\n    **Python 示例用法**:\n\n    .. code-block:: python\n\n        api = RenixAPI()\n        api.advertise_bgp_route(route1)\n        api.advertise_bgp_route([route1, route2])",
  "TesterLibrary.Protocol.bgp.withdraw_bgp_route": "..  function:: withdraw_bgp_route(Routes)\n\n    撤销BGP协议中指定的路由（Route），该函数用于从BGP路由表中移除一个或多个路由条目，通常通过调用底层RenixAPI接口实现。该操作会通知BGP邻居这些路由已不可用。\n\n    :param Routes: 要撤销的BGP路由对象或其组成的可迭代对象（如列表、元组或集合）。每个路由对象必须包含一个 `handle` 属性，该属性在BGP协议上下文中唯一标识该路由。通常，这些路由对象由关联的BGP路由器实例管理。\n    :type Routes: BgpRoute 或 list(BgpRoute) 或 set(BgpRoute) 或 tuple(BgpRoute)\n\n    :return: 如果所有指定的路由都成功撤销，则返回 ``True``；如果操作失败，则抛出一个可继续执行的异常（ContinuableFailure）。\n    :rtype: bool\n\n    示例：\n\n    .. code-block:: robotframework\n\n        | Withdraw Bgp Route | Routes=${Routes} |\n\n    内部说明：\n        此方法是对 `BgpRouter.withdraw_route` 方法的封装。它构造并执行一个 `WithdrawBgpRouteBlockCommand` 命令，使用传入路由对象的 `handle` 属性来标识需要撤销的路由。\n\n    注意事项：\n        - 确保传入的路由对象是有效的，并且由BGP路由器正确管理。\n        - 如果其中任何一个路由撤销失败，整个操作可能返回失败并抛出异常。",
  "TesterLibrary.Protocol.bgp.graceful_restart_bgp": "Performs a graceful restart of BGP sessions for the provided session objects.\n\nThis function is used to initiate a controlled restart of the BGP protocol on one or more session objects, ensuring that network traffic is not disrupted during session recovery. It supports both single session objects and collections of session objects (such as lists, sets, or tuples). Each session object must have a `graceful_restart()` method that implements the actual restart logic.\n\nParameters:\n    Sessions (object or iterable): A single session object or an iterable of session objects.\n        Each session object must implement a `graceful_restart()` method.\n\nReturns:\n    bool: Always returns True to indicate successful initiation of graceful restart on all provided sessions.\n\nRaises:\n    AttributeError: If any of the session objects does not have a `graceful_restart` method.\n    TypeError: If the input is not a valid session object or iterable of session objects.\n    ContinuableFailure: If the underlying implementation (e.g., `renix.graceful_restart_bgp`) returns False, indicating failure in initiating the graceful restart.",
  "TesterLibrary.Protocol.bgp.refresh_bgp": "刷新提供的BGP会话（一个或多个）的状态。\n\n该函数用于更新或重新初始化一个或多个BGP会话对象的状态。它接受单个会话对象或者包含多个会话对象的可迭代结构（如列表、集合或元组），并在每个会话对象上调用 `refresh()` 方法。如果传入的是单个会话对象，该对象将被转换为列表形式进行统一处理。\n\n参数:\n    Sessions (object 或 iterable of objects): \n        一个BGP会话对象，或者包含多个BGP会话对象的可迭代结构。建议以列表形式传入。\n\n返回值:\n    bool: \n        返回 True，表示刷新操作已成功执行。若在刷新过程中发生错误，底层函数可能抛出异常。\n\n异常:\n    本函数不直接抛出异常。但如果传入的会话对象中没有 `refresh()` 方法，或者传入了无效的会话对象，则可能在执行时引发异常。\n\n示例:\n    .. code:: RobotFramework\n\n        | Refresh Bgp | Sessions=${Sessions} |",
  "TesterLibrary.Protocol.bgp.wait_bgp_state": "等待BGP协议会话达到指定状态。\n\n该函数用于阻塞当前执行流程，直到给定的BGP协议会话对象达到指定的目标状态。它基于会话类型自动选择需要监控的状态属性，并周期性地检查状态变化，直到达到目标状态或超时。\n\n参数:\n\n    Sessions (object 或 iterable): 一个或多个BGP会话对象（通常为`BgpProtocolConfig`或其他会话配置类的实例）。\n    \n    State (str, optional): 目标状态，默认为 'RUNNING'。支持的状态包括：\n    \n        DISABLED\n        \n        NOT_START\n        \n        RUNNING\n        \n        STARTING\n        \n        STOPPING\n\n    Interval (int or str, optional): 状态查询间隔时间（以秒为单位），默认值为1秒。\n\n    TimeOut (int or str, optional): 最大等待时间（以秒为单位），默认值为60秒。如果在指定时间内未达到目标状态，则抛出异常。\n\n返回值:\n\n    bool: 如果成功在超时时间内达到目标状态，返回 True；否则返回 False（当前实现中若返回False则抛出异常）。\n\n异常:\n\n    TesterException: 如果等待超时且BGP协议仍未达到目标状态，则抛出此异常。\n\n注意事项:\n\n    - 若Sessions是列表、集合或元组，函数将使用第一个元素来判断会话类型。\n    - 如果会话对象类型为 `BgpProtocolConfig`，则函数监控其 `BgpProtocolState` 属性；否则监控通用的 `State` 属性。\n    - 实际状态轮询逻辑由 `_wait_state` 函数处理。",
  "TesterLibrary.Protocol.bgp.wait_bgp_router_state": "等待所有指定的BGP会话达到一个或多个预期状态，否则在超时后抛出异常。\n\n该函数持续检查提供的BGP会话（IPv4或IPv6）的当前状态。支持等待一个或多个会话到达一个或多个预期状态。如果在指定的超时时间内有任何会话未达到预期状态，则会抛出TesterException异常。\n\n参数:\n    Sessions (object 或 list/set/tuple of objects): \n        单个会话对象或会话对象的集合，代表BGP路由器。\n        每个会话应包含属性如IpVersion和根据使用的IP版本决定的Ipv4RouterState/Ipv6RouterState或BgpV4RouterState/BgpV6RouterState。\n    \n    State (str 或 list/set/tuple of str, 可选): \n        期望的路由器状态（或多个状态）。默认为 'ESTABLISHED'。\n        如果提供了多个状态，每个会话必须至少达到其中一个状态。\n        示例: 'ESTABLISHED', ['UP', 'ESTABLISHED']。\n    \n    Interval (int, 可选): \n        连续状态检查之间的时间间隔（以秒为单位）。默认为1秒。\n    \n    TimeOut (int, 可选): \n        等待所有会话达到预期状态的最大时间（以秒为单位）。如果在超时时间内所有会话未达到预期状态，则抛出TesterException异常。\n        默认为60秒。\n\n返回值:\n    bool: \n        如果所有会话在超时时间内达到预期的一个或多个状态，则返回True。\n\n抛出:\n    TesterException: \n        如果在指定时间内至少有一个会话未能达到任何预期状态，则抛出此异常。",
  "TesterLibrary.Protocol.bgp.wait_bgp_ipv4_router_state": "等待BGP或IPv4路由器状态达到指定的目标状态。\n\n该函数用于等待一组会话（可以是BGP协议会话或IPv4路由器会话）的状态达到指定的目标状态（默认为ESTABLISHED）。它会定期轮询这些会话的状态，并在所有会话都达到目标状态后返回True。如果在超时时间内仍有部分会话未达到目标状态，则会抛出异常。\n\n参数：\n- Sessions (object 或可迭代对象)：要监控的会话对象，可以是一个单独的会话对象，也可以是一个会话对象的列表、集合或元组。如果提供多个会话，仅检查第一个会话来确定是BGP会话还是IPv4会话。\n- State (str, 可选)：期望等待达到的目标状态，默认值为'ESTABLISHED'。支持的状态包括：NOT_START、IDLE、CONNECT、ACTIVE、OPEN_SENT、OPEN_CONFIRM、ESTABLISHED。比较时不区分大小写。\n- Interval (int 或可转换为int的字符串, 可选)：轮询间隔时间，单位为秒，默认值为1秒。\n- TimeOut (int 或可转换为int的字符串, 可选)：等待的最大超时时间，单位为秒，默认值为60秒。\n\n返回值：\n- bool：如果所有会话在超时时间内达到目标状态则返回True，否则抛出TesterException异常。\n\n异常：\n- TesterException：如果在超时时间内部分会话未达到目标状态，则会抛出此异常。\n\n注意事项：\n- 对于BGP会话，监控的是'BgpV4RouterState'属性。\n- 对于IPv4路由器会话，监控的是'Ipv4RouterState'属性。\n- 状态比较不区分大小写。\n- 如果某个会话的当前状态与期望状态不一致，会使用logging.info记录该状态。",
  "TesterLibrary.Protocol.bgp.wait_bgp_ipv6_router_state": "等待BGP IPv6会话组达到指定状态。\n\n该函数用于等待一个或多个BGP IPv6协议会话的路由器状态达到指定的目标状态。根据会话类型的不同，它会分别监测不同的状态属性：\n\n- 如果会话对象是 `BgpProtocolConfig` 类型，则监测其 `BgpV6RouterState` 属性。\n- 否则，监测其 `Ipv6RouterState` 属性。\n\n函数会在每次间隔（Interval）后检查这些会话的状态，直到所有会话都达到目标状态或超时（TimeOut）为止。\n\n### 参数说明：\n\n- **Sessions** (`object` 或可迭代对象)  \n  一个或多个 BGP 协议会话对象（通常为 `BgpRouter` 类型），用于监测其 IPv6 路由器状态。\n\n- **State** (`str`, 可选，默认值: `'ESTABLISHED'`)  \n  等待的目标状态。支持以下状态字符串：\n  - `NOT_START`\n  - `IDLE`\n  - `CONNECT`\n  - `ACTIVE`\n  - `OPEN_SENT`\n  - `OPEN_CONFIRM`\n  - `ESTABLISHED`  \n  若未指定，则默认等待状态为 `ESTABLISHED`。状态比较不区分大小写。\n\n- **Interval** (`int`, 可选，默认值: `1`)  \n  检查会话状态的时间间隔（单位：秒）。\n\n- **TimeOut** (`int`, 可选，默认值: `60`)  \n  等待的最大超时时间（单位：秒）。若在超时时间内未能使所有会话达到目标状态，将抛出异常。\n\n### 返回值：\n\n- **bool**  \n  如果所有会话在超时时间内达到目标状态之一，则返回 `True`；否则抛出异常 `Failure`。\n\n### 注意事项：\n\n- 会话状态发生变化时，如果当前状态不符合任何目标状态，会通过 `logging.info` 输出当前状态。\n- 此函数是对底层函数 `_wait_state` 的封装，并根据会话类型自动选择要监测的状态属性。",
  "TesterLibrary.Protocol.bgp.create_bgp_route_pool_custom_path_attribute": "创建BGP Route Pool Custom Path Attribute对象，类型为：object / list\n\n该方法用于为一个或多个指定的BGP路由池（Route Pool）创建并配置自定义路径属性（Custom BGP Path Attributes）。所有提供的路由池将各自获得一个自定义路径属性对象，并根据相同的配置参数进行统一设置。\n\nArgs:\n\n    RoutePool (:obj:`BgpIpv4RoutepoolConfig` 或 iterable): 一个单独的路由池对象，或者包含多个路由池对象的可迭代对象（如 list、set、tuple）。\n                                                           每个路由池都将关联一个新创建的自定义BGP路径属性。\n\nKeyword Args:\n\n    PathAttributeType (int): 路径属性的类型值，取值范围1-255，默认值：1\n\n    OptionalFlag (str): 可选标志位，取值包括：\n                        WELL_KNOWN - 公认属性\n                        OPTION - 可选属性，默认值：OPTION\n\n    TransitiveFlag (str): 传递性标志位，取值包括：\n                          NONTRANSITIVE - 非传递\n                          TRANSITIVE - 传递，默认值：NONTRANSITIVE\n\n    PartialFlag (str): 部分标志位，取值包括：\n                       COMPLETE - 完整\n                       PARTIAL - 部分，默认值：PARTIAL\n\n    ExtendedLengthFlag (bool): 是否启用扩展长度标识符，类型为布尔值，默认值：False\n\n    AttributeExtendedLength (int): 自定义路径属性的长度值，类型为数字，默认值：0\n\n    AttributeValue (str): 自定义路径属性的原始值，以字符串形式提供，默认值为空字符串 \"\"\n\nReturns:\n\n    (:obj:`BgpPathAttributeConfig`) 或 list: 如果输入为单一路由池对象，则返回对应的配置好的路径属性对象；\n                                            如果输入为多个路由池对象，则返回配置好的路径属性对象列表，顺序与输入一致。\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${Session} | Create Bgp | Port=${Port} |\n        | ${RoutePool} | Create Bgp Ipv4 Route Pool | Session=${Session} |\n        | ${AttributeValue} | Set Variable | 0500220001001E00AAAA000100010001000000000000000100001300010006301014000000 |\n        | Create Bgp Route Pool Custom Path Attribute | RoutePool=${RoutePool} | AttributeValue=${AttributeValue} |",
  "TesterLibrary.Protocol.bgp.create_bgp_evpn_mac_ip_routes": "创建BGP EVPN MAC-IP路由，用于在一个或多个会话对象上配置EVPN路由信息。\n\n该函数用于在指定的BGP会话(Session)上创建EVPN（Ethernet Virtual Private Network）中的MAC-IP路由。它封装了底层会话级别的`create_evpn_mac_ip_routes`方法，并支持对单个或多个会话进行统一处理。如果传入的是单个会话对象，函数会自动将其转换为列表形式进行处理。函数最终返回一个配置结果对象或结果列表，具体取决于输入的会话数量。\n\n参数：\n    Session (object 或 iterable): 一个或多个BGP会话对象（如 `BgpRouter` 实例），用于在其上创建BGP EVPN MAC-IP路由。若提供多个会话，可使用列表、集合或元组形式传递。\n    **kwargs: 任意关键字参数，用于指定具体的路由配置参数。这些参数直接传递给底层会话级别的 `create_evpn_mac_ip_routes` 方法。常见的配置参数包括：\n\n        Origin (str): 路由的ORIGIN属性值，默认为IGP，可选值：IGP、EGP、INCOMPLETE。\n        AsPath (str): AS路径值，默认为空字符串。\n        UseSessionAddressAsNextHop (bool): 是否使用会话地址作为下一跳，默认为True。\n        NextHop (str): IPv4下一跳地址，默认值：100.0.0.1。\n        NextHopIpv6 (str): IPv6下一跳地址，默认值：2001::1。\n        EnableLinkLocalNextHop (bool): 是否启用IPv6链路本地下一跳，默认为False。\n        LinkLocalNextHop (str): 链路本地下一跳IPv6地址，默认值：fe80::1。\n        EnableOriginatorId (bool): 是否启用Originator ID，默认为False。\n        OriginatorId (str): Originator ID值，默认为192.0.0.1。\n        VrfRouteTarget (str): VRF路由目标起始值，默认为100:1。\n        VrfRouteTargetStep (str): VRF路由目标步长，默认为0:1。\n        VrfRouteDistinguisher (str): VRF路由标识符起始值，默认为10.0.0.2:1。\n        VrfRouteDistinguisherStep (str): VRF路由标识符步长，默认为0:1。\n        EthernetSegmentType (str): 以太网段类型，默认为OPERATOR，可选项包括OPERATOR、IEEE802等。\n        EthernetSegmentIdentifier (str): 以太网段标识符，默认为00:00:00:00:00:00:00:00:00。\n        EthernetTagId (int): VLAN广播域标识，取值范围1-4294967295，默认为0。\n        NetWorkCount (int): 网络数量，默认为1。\n        StartMacAddress (str): 起始MAC地址，默认为00:10:01:00:00:01。\n        MacIncrement (str): MAC地址递增步长，默认为00:00:00:00:00:01。\n        EviCount (int): EVPN实例数量，默认为1。\n        VpnDistributionType (str): RT/RD/VNI分配方式，默认为ROUNDROBIN，也可设为LINEAR。\n        AssociatedIpType (str): 关联IP类型，默认为IPV4，可选NONE、IPV4、IPV6。\n        DataPlanEncapsulation (str): 数据平面封装类型，默认为NONE，可选VXLAN、MPLS、SRv6。\n        EnableMacMobility (bool): 是否启用MAC迁移，默认为False。\n        StickyStatic (bool): 是否为静态MAC地址，默认为False。\n        SequenceNumber (int): 序列号起始值，默认为0。\n        Label1 (int): 封装标签（如VXLAN VNI）起始值，默认为0。\n        Label1Step (int): 标签步长，默认为1。\n        StartIpv4Address (str): IPv4起始地址，默认为100.0.0.2。\n        Ipv4Increment (str): IPv4递增步长，默认为0.0.0.1。\n        Ipv4PrefixLength (int): IPv4前缀长度，默认为24。\n        StartIpv6Address (str): IPv6起始地址，默认为2001::1。\n        Ipv6Increment (str): IPv6递增步长，默认为::1。\n        Ipv6PrefixLength (int): IPv6前缀长度，默认为64。\n        EnableLabel2 (bool): 是否启用MPLS Label2，默认为False。\n        Label2 (int): Label2起始值，默认为2000。\n        Label2Step (int): Label2步长，默认为1。\n        EnableIncludeRouterMac (bool): 是否包含路由器MAC，默认为False。\n        RouterMac (str): 路由器MAC地址，默认为00:00:00:00:00:00。\n        EnableIncludeDefaultGateway (bool): 是否包含默认网关，默认为False。\n        EnableCustomMplsLabel (bool): 是否自定义MPLS标签，默认为False。\n        MplsLabel (int): MPLS标签值，默认为0。\n        MplsLabelStep (int): MPLS标签步长，默认为0。\n        EnableCustomMplsLabel2 (bool): 是否自定义MPLS Label2，默认为False。\n        MplsLabel2 (int): MPLS Label2值，默认为0。\n        MplsLabel2Step (int): MPLS Label2步长，默认为0。\n\n返回值：\n    object 或 list: 如果仅处理了一个会话，则返回该会话的配置结果对象（类型为 `EvpnRouteMacIpConfig`）。如果处理了多个会话，则返回一个包含每个会话配置结果的对象列表，顺序与输入的会话一致。\n\n功能描述：\n    该函数是一个便捷封装函数，用于简化对单个或多个BGP会话的EVPN MAC-IP路由配置操作。它确保了输入类型的统一处理，并将实际的路由创建逻辑委托给底层会话实现。此外，为了提升交互式和脚本化环境下的易用性，当只处理一个会话时，它直接返回单一的结果对象而非列表。",
  "TesterLibrary.Protocol.bgp.create_bgp_evpn_inclusive_multicast_routes": "创建BGP EVPN包含组播路由，用于在一个或多个会话上配置EVPN Inclusive Multicast路由。\n\nArgs:\n\n    Session (:obj:`BgpRouter` 或 list): BGP协议会话对象或会话对象的集合（列表、集合、元组等），类型为：object / list\n\nKeyword Args:\n\n    Origin (str): 指定路由属性中的ORIGIN值，默认值：IGP。可选值包括IGP、EGP和INCOMPLETE。\n    \n    AsPath (str): 指定AS路径的值，默认为空字符串\"\"。\n\n    UseSessionAddressAsNextHop (bool): 使用会话地址作为下一跳地址，默认值：True。\n\n    NextHop (str): IPv4格式的下一跳地址（即UPDATE消息中的NEXT_HOP字段），默认值：100.0.0.1。\n\n    NextHopIpv6 (str): IPv6格式的下一跳地址（即UPDATE消息中的NEXT_HOP字段），默认值：2001::1。\n\n    EnableLinkLocalNextHop (bool): 是否启用IPv6 Link Local下一跳地址，默认值：False。\n\n    LinkLocalNextHop (str): IPv6 Link Local下一跳地址，仅在启用了EnableLinkLocalNextHop时有效，默认值：fe80::1。\n\n    EnableOriginatorId (bool): 是否启用Originator ID（通常在仿真路由器作为BGP路由反射器时使用），默认值：False。\n\n    OriginatorId (str): 指定Originator ID的值，用于标识路由发起者的router id，应为有效的IPv4地址，默认值：192.0.0.1。\n\n    VrfRouteTarget (str): 指定VRF路由目标起始值，默认值：100:1。\n\n    VrfRouteTargetStep (str): 指定VRF路由目标的步长变化值，默认值：0:1。\n\n    VrfRouteDistinguisher (str): 指定VRF路由标识符起始值，默认值：10.0.0.2:1。\n\n    VrfRouteDistinguisherStep (str): 指定VRF路由标识符的步长变化值，默认值：0:1。\n\n    EviCount (int): 创建的EVI（EVPN实例）数量，取值范围：1-4294967295，默认值：1。\n\n    EthernetTagId (int): 以太网标签ID，取值范围：1-4294967295，默认值：1。\n\n    PmsiTunnelType (str): 多播报文传输使用的隧道类型，当前仅支持INGRESS_REPLICATION（头端复制隧道），默认值：INGRESS_REPLICATION。\n\n    DataPlanEncapsulation (str): 数据平面封装类型，默认值：NONE。可选项包括：\n\n        NONE\n\n        VXLAN\n\n        MPLS\n\n        SRv6\n\n    Label1 (int): 当数据平面封装为VXLAN时，指定转发二层业务流量所使用的封装标签（VNI/VSID）起始值，取值范围：1-16777215，默认值：0。\n\n    Label1Step (int): 封装标签（Label1）的步长变化值，取值范围：1-16777215，默认值：1。\n\n    EnableCustomMplsLabel (bool): 是否启用自定义MPLS标签，默认值：False。\n\n    MplsLabel (int): 自定义MPLS标签值，取值范围：1-1048575，默认值：0。\n\n    MplsLabelStep (int): MPLS标签的步长变化值，取值范围：1-1048575，默认值：0。\n\nReturns:\n\n    (:obj:`EvpnRouteInclusiveMulticastConfig`): 返回创建的BGP EVPN Inclusive Multicast路由配置对象，如果提供单个会话则返回单个对象，如果提供多个会话则返回对象列表。\n\nExamples:\n    .. code:: RobotFramework\n\n         | ${Session} | Create Bgp | Port=${Port} |\n         | Create Bgp Evpn Inclusive Multicast Routes | Session=${Session} |",
  "TesterLibrary.Protocol.bgp.create_bgp_evpn_ethernet_segment_routes": "创建BGP EVPN Ethernet Segment路由，用于在指定的一个或多个BGP会话上配置EVPN以太网段（Ethernet Segment）相关路由。\n\n该函数封装了底层会话对象的`create_evpn_ethernet_segment_routes`方法。支持传入单个会话对象或包含多个会话对象的可迭代对象（如列表、集合、元组）。对于每个会话对象，使用提供的参数调用其对应的路由创建方法，并收集结果。\n\n### 参数说明：\n\n- **Session** (`object` 或 `iterable`):  \n  - 类型：单个会话对象（`:obj:BgpRouter`） 或 可迭代对象（如 list, set, tuple）\n  - 描述：一个或多个BGP协议会话对象，用于在其上创建BGP EVPN Ethernet Segment路由。\n\n- **\\*\\*kwargs**:  \n  任意关键字参数，传递给底层会话对象的`create_evpn_ethernet_segment_routes`方法，用于定义路由的具体属性。常见参数包括但不限于：\n\n    - `Origin` (str): 指定路由的ORIGIN属性，默认值：`IGP`，取值范围：`IGP`, `EGP`, `INCOMPLETE`\n    - `AsPath` (str): 指定AS路径，默认为空字符串\n    - `UseSessionAddressAsNextHop` (bool): 是否使用会话地址作为下一跳，默认为True\n    - `NextHop` (str): IPv4格式的下一跳地址，默认为`100.0.0.1`\n    - `NextHopIpv6` (str): IPv6格式的下一跳地址，默认为`2001::1`\n    - `EnableLinkLocalNextHop` (bool): 是否启用IPv6链路本地下一跳，默认为False\n    - `LinkLocalNextHop` (str): 链路本地下一跳地址，默认为`fe80::1`\n    - `EnableOriginatorId` (bool): 是否启用Originator ID，默认为False\n    - `OriginatorId` (str): Originator ID值，默认为`192.0.0.1`\n    - `VrfRouteTarget` (str): VRF路由目标起始值，默认为`100:1`\n    - `VrfRouteTargetStep` (str): VRF路由目标步长，默认为`0:1`\n    - `VrfRouteDistinguisher` (str): VRF路由标识符起始值，默认为`10.0.0.2:1`\n    - `VrfRouteDistinguisherStep` (str): 路由标识符步长，默认为`0:1`\n    - `EthernetSegmentType` (str): 以太网段类型，默认为`OPERATOR`，可选值包括：`OPERATOR`, `IEEE802`, `BRIDGEDLAN`, `MACBASED`, `ROUTEID`, `AS`\n    - `EthernetSegmentIdentifier` (str): 以太网段标识符，默认为`00:00:00:00:00:00:00:00:00`\n    - `EviCount` (int): 创建的EVPN实例数量，默认为1，取值范围：1~4294967295\n    - `DataPlanEncapsulation` (str): 数据平面封装方式，默认为`NONE`，可选值：`NONE`, `VXLAN`, `MPLS`, `SRv6`\n    - `EsImportRoute` (str): 导入路由的MAC地址，默认为`00:00:00:00:00:00`\n\n### 返回值：\n\n- 类型：`object` 或 `list`\n  - 如果传入的是单个会话对象，则返回该会话上创建的路由配置对象（`:obj:EvpnRouteEthernetSegmentConfig`）。\n  - 如果传入的是多个会话对象，则返回与会话顺序对应的配置对象列表。\n\n### 示例：\n\n```robotframework\n| ${Session} | Create Bgp | Port=${Port} |\n| Create Bgp Evpn Ethernet Segment Routes | Session=${Session} |\n```\n\n如果提供多个会话对象，例如：\n\n```python\nsessions = [session1, session2]\nresult = create_bgp_evpn_ethernet_segment_routes(sessions, rd='100:1', esi='0000.0000.0001')\n# result 将是一个包含两个配置对象的列表\n```\n\n### 行为说明：\n\n- 如果传入的Session不是可迭代对象，则内部将其转换为列表处理。\n- 对于每一个会话对象，都会调用其底层实现的`create_evpn_ethernet_segment_routes`方法，并将所有结果收集到一个列表中。\n- 如果最终结果只包含一个元素，则直接返回该元素；否则返回完整列表。",
  "TesterLibrary.Protocol.bgp.create_bgp_evpn_ip_prefix_routes": "创建BGP EVPN IP前缀路由，用于在一个或多个会话对象上配置EVPN IP Prefix路由。\n\nArgs:\n\n    Session (:obj:`BgpRouter`): BGP协议会话对象，可以是单个会话对象或者可迭代的会话对象集合（如列表、集合、元组）。\n                              每个会话对象应包含 `create_evpn_ip_prefix_routes` 方法，该方法在对应会话上实际执行路由创建操作。\n\nKeyword Args:\n\n    Origin (str): 设置路由属性中的ORIGIN值，默认为IGP。取值范围包括：\n        \n        IGP（默认）\n\n        EGP\n\n        INCOMPLETE\n\n    AsPath (str): 设置AS路径的值，默认为空字符串。\n\n    UseSessionAddressAsNextHop (bool): 是否使用会话地址作为下一跳地址，默认值：True。\n\n    NextHop (str): IPv4下一跳地址（即UPDATE消息中的NEXT_HOP字段），默认值：100.0.0.1。\n\n    NextHopIpv6 (str): IPv6下一跳地址（即UPDATE消息中的NEXT_HOP字段），默认值：2001::1。\n\n    EnableLinkLocalNextHop (bool): 是否启用IPv6 Link Local下一跳，默认值：False。\n\n    LinkLocalNextHop (str): IPv6 Link Local下一跳地址，默认值：fe80::1。\n\n    EnableOriginatorId (bool): 是否启用Originator ID（通常在仿真路由器作为BGP路由反射器时使用），默认值：False。\n\n    OriginatorId (str): 设置Originator ID值，表示路由发起者的router id，默认值：192.0.0.1。\n\n    VrfRouteTarget (str): 设置VRF路由目标起始值，默认值：100:1。\n\n    VrfRouteTargetStep (str): 设置VRF路由目标的跳变步长，默认值：0:1。\n\n    VrfRouteDistinguisher (str): 设置VRF路由标识起始值，默认值：10.0.0.2:1。\n\n    VrfRouteDistinguisherStep (str): 设置VRF路由标识的跳变步长，默认值：0:1。\n\n    EthernetSegmentType (str): 设置以太网段标识类型，用于确定Ethernet Segment Identifier格式，默认值：OPERATOR。取值范围：\n\n        OPERATOR（默认）\n\n        IEEE802\n\n        BRIDGEDLAN\n\n        MACBASED\n\n        ROUTEID\n\n        AS\n\n    EthernetSegmentIdentifier (str): 设置CE和PE之间的连接标识符，默认值：00:00:00:00:00:00:00:00:00。\n\n    EthernetTagId (int): 设置广播域标识（例如VLAN ID），取值范围：1-4294967295，默认值：0。\n\n    NetWorkCount (int): 设置要创建的网络数量，取值范围：1-4294967295，默认值：1。\n\n    EviCount (int): 设置要创建的EVPN实例（EVI）数量，取值范围：1-4294967295，默认值：1。\n\n    VpnDistributionType (str): 设置RT、RD以及VNI值在不同VPN之间的分配方式，默认值：ROUNDROBIN。取值范围：\n\n        ROUNDROBIN（默认）\n\n        LINEAR\n\n    DataPlanEncapsulation (str): 设置数据平面封装类型，默认值：NONE。取值范围：\n\n        NONE（默认）\n\n        VXLAN\n\n        MPLS\n\n        SRv6\n\n    EnableCustomMplsLabel (bool): 是否启用自定义MPLS标签，默认值：False。\n\n    Label1 (int): 设置转发二层业务流量使用的封装标签（如VXLAN的VNI/VSID）起始值，取值范围：1-16777215，默认值：0。\n\n    Label1Step (int): 封装标签跳变步长，取值范围：1-16777215，默认值：1。\n\n    IpType (str): 路由IP地址类型，默认值：IPV4。取值范围：\n\n        IPV4（默认）\n\n        IPV6\n\n    StartIpv4Address (str): IPv4地址起始值，默认值：100.0.0.2。\n\n    Ipv4Increment (str): IPv4地址增量，默认值：0.0.0.1。\n\n    Ipv4PrefixLength (int): IPv4地址前缀长度，取值范围：1-32，默认值：24。\n\n    GatewayIp (str): 网关IPv4地址，默认值：0.0.0.0。\n\n    StartIpv6Address (str): IPv6地址起始值，默认值：2001::1。\n\n    Ipv6Increment (str): IPv6地址增量，默认值：::1。\n\n    Ipv6PrefixLength (int): IPv6地址前缀长度，取值范围：1-128，默认值：64。\n\n    GatewayIpv6 (str): 网关IPv6地址，默认值：'::'。\n\n    EnableIncludeRouterMac (bool): 是否在路由中包含路由器MAC地址，默认值：False。\n\n    RouterMac (str): 路由器MAC地址，默认值：00:00:00:00:00:00。\n\n    MplsLabel (int): 设置MPLS标签值，取值范围：1-1048575，默认值：0。\n\n    MplsLabelStep (int): MPLS标签跳变步长，取值范围：1-1048575，默认值：0。\n\nReturns:\n\n    (:obj:`EvpnRouteIpPrefixConfig`): 返回创建的EVPN IP Prefix路由配置对象，如果传入一个会话则返回单个对象，如果传入多个会话则返回对象列表。\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${Session} | Create Bgp | Port=${Port} |\n        | Create Bgp Evpn Ip Prefix Routes | Session=${Session} |",
  "TesterLibrary.Protocol.bgp.create_bgp_ipv4_vpls": "创建BGP IPv4 VPLS配置对象，用于在指定的BGP会话上配置IPv4 VPLS路由信息。\n\n该函数用于为一个或多个BGP会话（`Session`）创建IPv4 VPLS配置对象。如果传入的是单个会话对象，会被自动转换为列表形式处理。函数内部调用每个会话对象的`create_ipv4_vpls`方法，并将所有关键字参数直接传递给这些方法。最终返回创建的配置对象或对象列表。\n\nArgs:\n    Session (:obj:`BgpRouter` 或 iterable of :obj:`BgpRouter`): BGP协议会话对象或其可迭代集合（如列表、元组等），表示要在此会话或多个会话上创建IPv4 VPLS配置。\n\nKeyword Args:\n    AsPath (str): 指定AS路径值，默认为空字符串。\n    AsPathType (str): AS路径类型，取值包括：SET, SEQUENCE, CONFED_SEQUENCE, CONFED_SET，默认为SEQUENCE。\n    UseSessionAddressAsNextHop (bool): 是否使用会话地址作为下一跳地址，默认为True。\n    NextHop (str): 下一跳地址（IPv4格式），仅当UseSessionAddressAsNextHop为False时生效，默认为100.0.0.1。\n    MultExitDisc (int): 多出口鉴别器值，用于影响入口路径选择，默认为0，取值范围1-4294967295。\n    LocalPreference (int): 本地优先级，默认为10，取值范围1-4294967295。\n    VeId (int): 虚拟以太网ID，默认为0，取值范围1-65535。\n    VeIdStep (int): VeId递增步长，默认为1，取值范围1-65535。\n    BlockOffset (int): 块偏移量，默认为0，取值范围1-65535。\n    BlockOffsetStep (int): 块偏移递增步长，默认为0，取值范围1-65535。\n    BlockSize (int): 块大小，默认为5，取值范围1-65535。\n    MtuSize (int): 接口MTU大小，默认为1500，取值范围64-9000。\n    EncapType (str): 封装类型，可选VLAN、ETHERNET、VPLS，默认为VLAN。\n    ControlFlag (int): 控制标识符，默认为0，取值范围1-255。\n    VrfRouteTarget (str): VRF路由目标起始值，默认为\"100:1\"。\n    VrfRouteTargetStep (str): VRF路由目标步长，默认为\"0:1\"。\n    VrfRouteDistinguisher (str): VRF路由标识符起始值，默认为\"10.0.0.2:1\"。\n    VrfRouteDistinguisherStep (str): VRF路由标识符步长，默认为\"0:1\"。\n    VrfCount (int): 创建的VRF数量，默认为1，取值范围1-65535。\n\nReturns:\n    :obj:`BgpIpv4VplsConfig` 或 list of :obj:`BgpIpv4VplsConfig`: 如果输入单个会话，则返回对应的配置对象；如果输入多个会话，则返回配置对象的列表。\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${Session} | Create Bgp | Port=${Port} |\n        | Create Bgp Ipv4 Vpls | Session=${Session} |",
  "TesterLibrary.Protocol.bgp.create_bgp_ipv6_vpls": "创建Bgp Ipv6 Vpls对象，用于在指定的BGP会话上配置IPv6 VPLS（Virtual Private LAN Service），支持单个或多个会话的统一配置。\n\nArgs:\n\n    Session (:obj:`BgpRouter` 或 iterable): 指定一个或多个BGP协议会话对象。可以是单个BgpRouter对象，也可以是包含多个BgpRouter对象的列表、集合或元组，类型为：object / list\n\nKeyword Args:\n\n    AsPath (str): 指定AS路径值，用于路由传播中的路径信息标识，默认为空字符串。\n    \n    UseSessionAddressAsNextHop (bool): 是否使用会话地址作为下一跳地址。默认值为True。\n    \n    NextHop (str): 下一跳地址，即BGP UPDATE消息中的NEXT_HOP字段值，必须是有效的IPv6地址，默认值为2000::1。\n    \n    LinkLocalNextHop (str): 链路本地下一跳地址，必须是有效的IPv6地址，默认值为fe80::1。\n    \n    MultExitDisc (int): 多出口鉴别器值，用于影响进入AS的流量路径选择，取值范围1-4294967295，默认值为0。\n    \n    LocalPreference (int): 本地优先级，用于影响离开AS的流量路径选择，取值范围1-4294967295，默认值为10。\n    \n    VeId (int): 虚拟以太网接口ID，用于唯一标识VPLS实例内的VE节点，取值范围1-65535，默认值为1。\n    \n    VeIdStep (int): VeId递增步长，用于批量配置时生成多个不同VeId值，取值范围1-65535，默认值为0。\n    \n    BlockOffset (int): 块偏移值，用于控制VE块的起始位置，取值范围1-65535，默认值为0。\n    \n    BlockOffsetStep (int): BlockOffset递增步长，用于批量配置时生成不同的BlockOffset值，默认值为0。\n    \n    BlockSize (int): VE块大小，表示该VE节点所支持的最大客户站点数量，取值范围1-65535，默认值为5。\n    \n    MtuSize (int): 接口最大传输单元，定义通过该接口可传输的最大数据包大小，取值范围64-65535，默认值为1500。\n    \n    EncapType (str): 封装类型，定义VPLS使用的封装方式，可选值包括VLAN、ETHERNET、VPLS，默认值为VLAN。\n    \n    EnableRfc4761 (bool): 是否启用RFC 4761标准定义的VPLS信令机制，默认值为True。\n    \n    ControlFlag (int): 控制标志位，用于特定控制功能的十进制表示，默认值为0。\n    \n    StripVlan (bool): 是否剥离VLAN标签，用于控制是否在转发前移除VLAN标签，默认值为False。\n    \n    VeFlooding (bool): 是否启用VE泛洪，用于控制是否允许在VE内进行广播或多播泛洪，默认值为False。\n    \n    VrfRouteTarget (str): 指定VRF的路由目标起始值，用于控制VPLS路由信息的导入/导出策略，默认值为\"100:1\"。\n    \n    VrfRouteTargetStep (str): VRF路由目标的跳变步长，用于批量配置生成多个不同RT值，默认值为\"0:1\"。\n    \n    VrfRouteDistinguisher (str): 指定VRF的路由标识符起始值，用于唯一标识VRF实例，默认值为\"10.0.0.2:1\"。\n    \n    VrfRouteDistinguisherStep (str): VRF路由标识符的跳变步长，用于批量配置生成多个不同RD值，默认值为\"0:1\"。\n    \n    VrfCount (int): VRF实例的数量，用于批量创建多个具有不同RD/RT值的VRF，默认值为1。\n\nReturns:\n\n    (:obj:`BgpIpv6VplsConfig` 或 list): 如果输入为单个会话对象，则返回对应的BgpIpv6VplsConfig配置对象；如果输入为多个会话对象，则返回与输入顺序一致的BgpIpv6VplsConfig对象列表。\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${Session} | Create Bgp | Port=${Port} |\n        | Create Bgp Ipv6 Vpls | Session=${Session} |",
  "TesterLibrary.Protocol.bgp.create_bgp_ipv4_flow_specs": "创建BGP IPv4流量规范（Flow Specs）对象，用于定义BGP流量过滤规则。\n\n### 参数说明：\n\n- **Session** (`BgpRouter` 或其列表)：指定要配置IPv4流量规范的BGP会话对象或多个会话对象的列表。每个会话对象应具备 `create_ipv4_flow_specs(**kwargs)` 方法以支持配置。\n\n### 关键字参数（可选）：\n\n- **RouteCount** (`int`)：生成的路由数量，默认值为1，取值范围：1–8,000,000。\n- **FlowSpecSubAfi** (`str`)：指定SubAFI类型，默认值：`FlowSpec`，可选值包括：\n  - `FlowSpec`\n  - `FlowSpecVpn`\n\n- **Origin** (`str`)：指定BGP路由源信息，默认值：`IGP`，可选值包括：\n  - `IGP`\n  - `EGP`\n  - `INCOMPLETE`\n\n- **AsPath** (`str`)：设置AS路径属性，默认为空字符串。\n- **AsPathType** (`str`)：AS路径类型，默认值：`SEQUENCE`，可选值包括：\n  - `SET`\n  - `SEQUENCE`\n\n- **EnableLocalPref** (`bool`)：是否启用本地优先级，默认值：`True`。\n- **LocalPref** (`int`)：本地优先级值，默认值：10。\n- **EnableMed** (`bool`)：是否启用多出口判别器（MED），默认值：`False`。\n- **MultExitDisc** (`int`)：MED值，取值范围：1–4294967295，默认值：0。\n- **EnableClusterIdList** (`bool`)：是否启用Cluster ID列表，默认值：`False`。\n- **ClusterIdList** (`str`)：Cluster ID列表，需为有效IPv4地址，默认值为空字符串。\n- **EnableCommunity** (`bool`)：是否启用团体属性，默认值：`False`。\n- **CommunityType** (`str`)：团体类型，默认值：`AA_NN`，可选值包括：\n  - `AA_NN`\n  - `NO_EXPORT`\n  - `NO_ADVERTISE`\n  - `LOCAL_AS`\n\n- **CommunityAsNumber** (`int`)：当团体类型为`AA_NN`时，指定AS编号，默认值：1，取值范围：1–65535。\n- **CommunityId** (`int`)：当团体类型为`AA_NN`时，指定团体ID，默认值：1，取值范围：1–65535。\n- **Community** (`str`)：特定团体值，根据类型自动设定，例如：\n  - `NO_EXPORT` → `0xffffff01`\n  - `NO_ADVERTISE` → `0xffffff02`\n  - `LOCAL_AS` → `0xffffff03`\n\n- **ExtendedCommunity** (`str`)：扩展团体属性值，默认值为空字符串。\n- **ComponentType** (`list`)：流量匹配规则类型列表，默认值：`[Type1]`，可选值包括：\n  - `Type1` 到 `Type12`\n\n- **VrfNum** (`int`)：指定创建的VRF数量，默认值：1。\n- **VrfRouteTarget** (`str`)：VRF路由目标起始值，默认值：`100:1`。\n- **VrfRouteTargetStep** (`str`)：VRF路由目标步长，默认值：`0:1`。\n- **VrfRouteDistinguisher** (`str`)：VRF路由标识符起始值，默认值：`1:1`。\n- **VrfRouteDistinguisherStep** (`str`)：VRF路由标识符步长，默认值：`0:1`。\n\n### 返回值：\n\n返回一个或多个 `BgpIpv4FlowSpecConfig` 对象，对应于输入的每个BGP会话。若仅提供一个会话，则返回单个对象；若提供多个会话，则返回对象列表。\n\n### 示例：\n\n```robotframework\n| ${Session} | Create Bgp | Port=${Port} |\n| Create Bgp Ipv4 Flow Specs | Session=${Session} |\n```\n\n### 功能描述：\n\n此函数用于在指定的一个或多个BGP会话上创建IPv4流量规范配置。该功能可用于模拟流量过滤规则，测试BGP对流量策略的支持能力。内部调用RENIX库方法进行实际配置，并在失败时抛出异常 `ContinuableFailure`。",
  "TesterLibrary.Protocol.bgp.create_bgp_flow_specs_actions": "创建BGP IPv4流量规格动作（Actions）对象，用于定义匹配流量的处理策略。\n\n该方法用于为指定的BGP流量规格（Flow Spec）配置相应的动作规则。支持对单个或多个Flow Spec对象进行操作，并返回对应的动作对象。每个动作可包含限速、重定向、DSCP标记等策略。\n\n参数：\n    FlowSpec (:obj:`BgpIpv4FlowSpecConfig` 或 list/set/tuple): 一个或多个BGP IPv4流量规格配置对象，类型可以是单个对象或可迭代集合。\n\n关键字参数（可选）：\n    EnableTrafficRate (bool): 是否启用流量限速功能，默认为True。\n    TrafficRate (int): 流量限速值，取值范围1-4294967295，默认为0。\n    AsNum (int): 指定AS号，用于某些需要AS信息的动作，取值范围1-4294967295，默认为1。\n    EnableTrafficAction (bool): 是否启用流量处理动作，默认为True。\n    SampleBit (bool): 是否启用流量抽样记录，默认为True。\n    TerminateBit (bool): 是否撤销已生效的匹配规则，默认为True。\n    EnableRedirect (bool): 是否启用将匹配流量重定向到指定路由目标的功能，默认为False。\n    RouteTarget (str): 重定向的目标路由标识，格式为\"X:X\"，默认为\"100:1\"。\n    EnableTrafficMarking (bool): 是否启用DSCP值重新标记报文，默认为True。\n    DSCPValue (int): 报文DSCP标记值，以整数形式表示，默认为0。\n    EnableRedirectToIpNextHop (bool): 是否启用重定向到下一跳IP地址的动作，默认为False。\n    NextHop (str): 下一跳IPv4地址，默认为\"0.0.1.0\"。\n    CopyBit (bool): 是否复制匹配流量并执行重定向到下一跳操作，默认为True。\n\n返回值：\n    :obj:`BgpIpv4FlowSpecAction` 或 list: 如果输入为单个FlowSpec，则返回对应的单个动作对象；如果输入为多个FlowSpec对象，则返回动作对象列表。\n\n示例：\n    .. code:: RobotFramework\n\n        | ${Session} | Create Bgp | Port=${Port} |\n        | ${FlowSpec} | Create Bgp Ipv4 Flow Specs | Session=${Session} |\n        | Create Bgp Ipv4 Flow Specs Action | FlowSpec=${FlowSpec} |",
  "TesterLibrary.Protocol.bgp.create_bgp_flow_spec_conponent_type": "创建或检索一个或多个BGP流规范（Flow Spec）组件类型。\n\n该函数用于封装对`BgpRouter.create_flow_spec_conponent_type`类方法的调用，支持单个或多个流规范组件类型的创建或检索。根据传入的类型（Types）参数决定返回单个对象或对象列表。若传入单个有效类型，则直接返回对应的配置对象；若传入多个类型，则按顺序返回配置对象列表，无效类型对应位置将返回False。\n\nArgs:\n    FlowSpec (:obj:`BgpIpv4FlowSpecConfig`): BGP IPv4 Flow Spec配置对象，用于确定是IPv4还是IPv6流规范。\n    Types (int or iterable): 指定要创建或检索的流规范组件类型。可以是单个整数（1-12），也可以是包含多个整数的可迭代对象（如 list, set, tuple）。取值范围：\n        - 1: 尝试获取已存在的第一个类型为1的组件\n        - 2: 尝试获取已存在的第一个类型为2的组件\n        - 3-12: 动态实例化指定类型的流规范组件\n        - 其他值：对应结果为False\n\nKeyword Args:\n    IpValue (str): 起始IP地址，用于生成地址块，默认值：\"192.0.1.0\"。\n    PrefixLength (int): 前缀长度，取值范围1-32，默认值：24。\n    AddressList (str): 地址列表，当InputType为LIST时使用，默认为空字符串。\n    InputType (str): 地址生成方式，默认值：\"RANGE\"，可选值：\n        RANGE\n        LIST\n        RFC_4814\n    Count (int): 地址数量，取值范围1-99，默认值：1。\n    Step (int): 地址步长，取值范围1-4294967295，默认值：1。\n    EqualBit (bool): 数据与指定值相等表示匹配，默认值：False。\n    LessThanBit (bool): 数据小于指定值表示匹配，默认值：False。\n    MoreThanBit (bool): 数据大于指定值表示匹配，默认值：False。\n    AndBit (bool): 表示当前组与前一组的关系是否为逻辑与（AND），默认值：False。\n    ValueField (int): 取值范围1-15，默认值：1。\n    ValueIncrement (int): 值增量，取值范围0-65535，默认值：1。\n    ValueList (int): 值列表，仅当ValueType为List时使用，默认值空字符串。\n    ValueType (str): 值类型，默认值：\"Increment\"，可选值：\n        Increment\n        List\n    NotBit (bool): 是否对计算结果按位取反，默认值：False。\n    MatchBit (bool): 是否启用精确按位匹配，默认值：False。\n    DSCPValue (int): DSCP值，取值范围0-63，默认值：0。\n\nReturns:\n    object or list of objects: 如果提供了单个有效类型，则返回对应的流规范组件对象；如果提供了多个类型，则返回一个列表，列表中的每个元素对应输入的类型顺序。对于无效类型，对应位置返回False。\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${Session} | Create Bgp | Port=${Port} |\n        | ${FlowSpec} | Create Bgp Ipv4 Flow Specs | Session=${Session} |\n        | Create Bgp Flow Spec Conponent Type | FlowSpec=${FlowSpec} | Type=1 |",
  "TesterLibrary.Protocol.bgp.create_bgp_flow_spec_custom_path_attribute": "创建BGP Flow Spec Custom Path Attribute对象，用于配置自定义的BGP路径属性。该函数支持单个或多个BgpIpv4FlowSpecConfig对象作为输入，并为每个输入对象创建一个对应的BgpFlowSpecPathAttributeConfig对象。\n\nArgs:\n\n    FlowSpec (:obj:`BgpIpv4FlowSpecConfig` 或 iterable of objects): 一个或多个Bgp Flow Spec对象，表示要为其创建自定义路径属性的上下文。类型可以是单个对象、列表、集合或元组。\n\nKeyword Args:\n\n    PathAttributeType (int): 路径属性的类型，取值范围为1到255，默认值为1。\n\n    OptionalFlag (str): 指定Optional Flag的值，可选值包括WELL_KNOWN和OPTION，默认值为OPTION。\n\n    TransitiveFlag (str): 指定Transitive Flag的值，可选值包括NONTRANSITIVE和TRANSITIVE，默认值为NONTRANSITIVE。\n\n    PartialFlag (str): 指定Partial Flag的值，可选值包括COMPLETE和PARTIAL，默认值为PARTIAL。\n\n    ExtendedLengthFlag (bool): 是否启用Extended Length Flag，默认值为False。\n\n    AttributeValue (str): 指定路径属性的原始值，默认为空字符串。\n\nReturns:\n\n    :obj:`BgpFlowSpecPathAttributeConfig` 或 list of BgpFlowSpecPathAttributeConfig:\n        如果输入为单个FlowSpec对象，则返回对应的BgpFlowSpecPathAttributeConfig对象；\n        如果输入为多个FlowSpec对象，则返回包含所有创建的BgpFlowSpecPathAttributeConfig对象的列表，顺序与输入一致。\n\nRaises:\n\n    ContinuableFailure: 如果底层调用失败（返回False），将抛出ContinuableFailure异常。\n\nExamples:\n\n    .. code:: RobotFramework\n\n        | ${Session} | Create Bgp | Port=${Port} |\n        | ${FlowSpecs} | Create Bgp Ipv4 Flow Specs | Session=${Session} |\n        | Create Bgp Flow Spec Custom Path Attribute | FlowSpec=${FlowSpecs} | PathAttributeType=100 | AttributeValue=\"custom_value\" |\n\n说明：\n    该函数封装了Renix内部API，用于在指定的BGP流规范对象上创建自定义路径属性。它接受一个或多个流规范对象，并为每个流规范创建一个对应的路径属性对象。同时支持通过关键字参数传递各种配置选项，以灵活地控制路径属性的行为。如果传入多个流规范对象，结果将以列表形式返回，且保持输入顺序。",
  "TesterLibrary.Protocol.bgp.create_bgp_ipv6_flow_spec": "创建BGP IPv6 Flow Spec对象，用于定义BGP流量规范。\n\n参数：\n    Session (object 或 iterable): 单个会话对象或会话对象的可迭代集合（如列表、集合、元组）。\n                                每个会话对象必须包含一个 `create_ipv6_flow_spec` 方法，该方法用于生成相应的流规范。\n    **kwargs: 任意关键字参数，直接传递给每个会话的 `create_ipv6_flow_spec` 方法。\n              可能包括匹配条件、动作或其他流规范相关的设置。\n\n描述：\n    该函数为一个或多个BGP会话生成IPv6流规范。如果传入的是单个会话对象，内部会将其转换为列表以确保统一处理。\n    函数遍历每个会话，调用其 `create_ipv6_flow_spec` 方法并传入提供的关键字参数，然后收集结果。\n    如果只处理了一个会话，则直接返回该会话的结果；如果处理了多个会话，则返回所有生成流规范的对象列表。\n\n返回值：\n    object 或 list: 如果仅提供了一个会话，则返回单个流规范对象；如果提供了多个会话，则返回流规范对象的列表。\n\n示例：\n    .. code:: RobotFramework\n\n        | ${Session} | Create Bgp | Port=${Port} |\n        | ${FlowSpecs} | Create Bgp Ipv6 Flow Specs | Session=${Session} |",
  "TesterLibrary.Protocol.bgp.create_bgp_ipv6_flow_spec_action": "创建或修改一个或多个IPv6 Flow Specification动作配置。\n\n该函数接受单个FlowSpec对象或可迭代的FlowSpec对象集合，并为每个FlowSpec调用类级别的方法`BgpRouter.create_ipv6_flow_spec_action`来获取并根据提供的关键字参数修改其关联的IPv6 Flow Specification动作配置。如果仅处理一个FlowSpec，则返回单个配置对象；否则，返回配置对象列表。\n\n参数:\n    FlowSpec (:obj:`BgpIpv6FlowSpecConfig`): BGP IPv6 Flow Spec对象，可以是单个对象或可迭代的对象集合（如list、set、tuple），要求每个对象支持`get_children`方法以检索'BgpIpv6FlowSpecAction'子对象。\n\n关键字参数:\n    EnableTrafficRate (bool): 启用流量限速动作，默认值：True\n    TrafficRate (int): 设置流量的最大传输速率，默认值：0，取值范围：1-4294967295\n    AsNum (int): 指定AS号，默认值：1，取值范围：1-4294967295\n    EnableTrafficAction (bool): 启用Traffic action，默认值：True\n    SampleBit (bool): 启用流量抽样记录，默认值：True\n    TerminateBit (bool): 撤销已生效的匹配规则，默认值：True\n    EnableRedirect (bool): 启用流量重定向到指定路由目标，默认值：False\n    RedirectIpv6RouteTarget (str): 设置重定向的路由目标，默认值：\"100:1\"\n    EnableRedirectToIpv6NextHop (bool): 启用重定向到下一跳动作，默认值：False\n    Type (str): 类型标识符，默认值：\"TYPE_0x000c\"，有效值包括 TYPE_0x0800 和 TYPE_0x000c\n    NextHop (str): 设置下一跳IPv6地址，默认值：\"2000::1\"\n    CopyBit (bool): 复制匹配流量并执行重定向到下一跳动作，默认值：True\n\n返回:\n    (:obj:`BgpIpv6FlowSpecAction`): 返回一个或多个BgpIpv6FlowSpecAction对象，若输入为单个FlowSpec则返回单个对象，否则返回对象列表。\n\n示例:\n    .. code:: RobotFramework\n\n        | ${Session} | Create Bgp | Port=${Port} |\n        | ${FlowSpec} | Create Bgp Ipv6 Flow Specs | Session=${Session} |\n        | Create Bgp Ipv6 Flow Specs Action | FlowSpec=${FlowSpec} |",
  "TesterLibrary.Protocol.bgp.create_bgp_sr_te_policy": "Creates a BGP SR-TE (Segment Routing Traffic Engineering) policy for one or more BGP sessions.\n\n**Purpose:**  \nThis function is used to configure and create Segment Routing Traffic Engineering (SR-TE) policies on BGP session(s). It supports both single and multiple session configurations, allowing for flexible deployment of SR-TE policies with various customizable parameters.\n\n**Parameters:**\n\n- **Session** (`BgpRouter` or iterable of `BgpRouter`): A single BGP session object or an iterable (e.g., list) of session objects. Each session must support the method `create_sr_te_policy` which will be invoked internally to apply the SR-TE configuration.\n  \n- **\\*\\*kwargs** (Keyword Arguments): Additional SR-TE policy configuration parameters passed as key-value pairs. These include:\n  - **BindingSidCount** (`int`): Number of Binding SIDs per endpoint (1–4294967295, default: 1).\n  - **PolicyColor** (`int`): Starting Color value for the SR Policy (default: 0).\n  - **PolicyColorStep** (`int`): Step increment for color values (default: 1).\n  - **IpVersion** (`str`): IP version for prefixes (default: \"IPV4\", options: \"IPV4\", \"IPV6\").\n  - **EndpointCount** (`int`): Number of endpoints (must not exceed BindingSidCount, default: 1).\n  - **Ipv4Endpoint**, **Ipv6Endpoint** (`str`): IPv4/IPv6 address for starting endpoint (defaults: 192.0.0.1 / 2000::1).\n  - **Ipv4EndpointStep**, **Ipv6EndpointStep** (`str`): Increment step for IPv4/IPv6 endpoint addresses (defaults: 0.0.0.1 / ::1).\n  - **EndpointIncrementMode** (`str`): Endpoint generation mode (default: \"RoundRobin\", options: \"RoundRobin\", \"Sequential\").\n  - **Origin** (`str`): Route origin type (default: \"IGP\", options: \"IGP\", \"EGP\", \"INCOMPLETE\").\n  - **AsPath** (`str`): AS path string (default: \"\").\n  - **AsPathType** (`str`): Type of AS path encoding (default: \"SEQUENCE\", options: \"SET\", \"SEQUENCE\", \"CONFED_SEQUENCE\", \"CONFED_SET\").\n  - **LocalPref** (`int`): Local preference value (default: 10).\n  - **UseSessionAddressAsNextHop** (`bool`): Whether to use session address as next hop (default: True).\n  - **Ipv4NextHop**, **Ipv6NextHop** (`str`): Next hop address for updates (defaults: 192.0.0.1 / 2001::1).\n  - **Distinguisher** (`int`): SR Policy distinguisher (1–4294967295, default: 0).\n  - **RouteTarget** (`str`): Route target extended community (default: \"\").\n  - **Community** (`str`): Standard community string (default: \"\", predefined values for NO_EXPORT, NO_ADVERTISE, LOCAL_AS).\n  - **ExtendedCommunity** (`str`): Extended community string (default: \"0x03:0x0b:0:0\").\n  - **SrTePolicySubTlv** (`list`): List of sub-TLVs to include in the policy (default: [\"NO_SHOW\"], options include various TLVs like COLOR, BINDING_SID, etc.).\n  - **RemoteEndpointAsn** (`int`): Remote endpoint ASN (1–4294967295, default: 0).\n  - **Ipv4RemoteEndpoint**, **Ipv6RemoteEndpoint** (`str`): IPv4/IPv6 remote endpoint address (defaults: 192.0.0.1 / 2000::1).\n  - **Color** (`int`): Color extended community value (1–4294967295, default: 0).\n  - **ColorFlags** (`list`): Flags for the Color extended community (default: [\"NO_SHOW\"], options: C_FLAG, O_FLAG).\n  - **Preference** (`int`): Priority of the SR Policy candidate path (1–4294967295, default: 0).\n  - **BsidFlags** (`str`): Binding SID flags (default: \"NO_SHOW\", options: S_FLAG, I_FLAG).\n  - **BsidLength** (`str`): Length of Binding SID (default: \"NO_SHOW\", options: OCTET_0, OCTET_4, OCTET_16).\n  - **BsidLabel** (`int`): Label value for Binding SID (1–4294967295, default: 0).\n  - **BsidLabelStep** (`int`): Label increment step (1–4294967295, default: 1).\n  - **BsidTc** (`int`): Traffic class field in BSID (0–7, default: 0).\n  - **BsidS** (`int`): Bottom-of-stack flag in BSID (0 or 1, default: 0).\n  - **BsidTtl** (`int`): TTL field in BSID (default: 0).\n  - **Ipv6Bsid**, **Srv6Bsid** (`str`): IPv6 Binding SID / SRv6 Binding SID (default: 2000::1).\n  - **Ipv6BsidStep**, **Srv6BsidStep** (`str`): IPv6/SRv6 BSID increment step (default: ::1).\n  - **Enlp** (`str`): Explicit null label policy setting (default: \"IPV4\", options: RESERVED0, IPV4, IPV6).\n  - **PolicyPriority** (`int`): Priority for re-calculation during topology changes (1–255, default: 0).\n  - **Srv6BsidFlags** (`list`): SRv6 Binding SID flags (default: [\"NO_SHOW\"], options: S_FLAG, I_FLAG, B_FLAG).\n  - **Srv6BsidEndpointBehavior** (`int`): SRv6 endpoint behavior code (1–65535, default: 0).\n  - **Srv6BsidLbLength**, **Srv6BsidLnLength**, **Srv6BsidFunLength**, **Srv6BsidArgLength** (`int`): SRv6 SID length fields (locator block, locator node, function, argument — all in bits, range: 1–255, default: 0).\n  - **CandidatePathName**, **PolicyName** (`str`): Name of candidate path / SR Policy (default: \"\").\n  - **TunnelEgressEndpointAfi**, **Ipv4TunnelEgressEndpoint**, **Ipv6TunnelEgressEndpoint** (`str`): Tunnel egress endpoint settings (default: IPV4 / 192.0.0.1 / 2000::1).\n\n**Returns:**\n- If a single session is provided, returns a `BgpSrTePolicyConfig` object representing the created SR-TE policy.\n- If multiple sessions are provided, returns a list of `BgpSrTePolicyConfig` objects, each corresponding to the SR-TE policy created on the respective session.\n\n**Raises:**\n- `ContinuableFailure`: If the operation fails, this exception is raised with an appropriate error message.\n\n**Description:**\nThe function abstracts the SR-TE policy creation logic across one or more BGP sessions. Internally, it ensures that all provided sessions are processed uniformly. For each session, the function calls its `create_sr_te_policy` method with the provided keyword arguments. The return values from these calls are collected and returned as either a single object or a list depending on the number of sessions.\n\n**Example Usage:**\n```robotframework\n| ${Session} | Create Bgp | Port=${Port} |\n| Create Bgp Sr Te Policy | Session=${Session} |\n```",
  "TesterLibrary.Protocol.bgp.create_bgp_sr_te_policy_Segement_list": "创建BGP SR-TE（Segment Routing Traffic Engineering）策略的Segment List对象，类型为：object / list。\n\n该函数用于在指定的BGP会话中，为一个或多个BGP SR-TE策略创建Segment List（段列表），每个Segment List可以包含SID（Segment Identifier）列表及相关配置。该函数支持批量创建，并根据输入返回单个对象或对象列表。\n\n参数：\n    Session (:obj:`BgpRouter`): 有效的BGP协议会话对象，类型可以是单个对象或对象列表。该会话必须已建立并具备创建SR-TE策略Segment List的能力。\n    \n    SrTePolicy (:obj:`BgpSrTePolicyConfig`): 要为其创建Segment List的BGP SR-TE策略配置对象，类型可以是单个对象或对象列表。\n\n关键字参数：\n    SubTlvs (list, optional): 指定Segment List中使用的子TLV选项，可选值包括：\n        NO_SHOW: 不显示任何子TLV\n        WEIGHT: 启用权重子TLV（用于多路径负载均衡）\n        默认值：NO_SHOW\n\n    Weight (int, optional): 指定该Segment List的权重值，用于负载均衡，取值范围1到4294967295，默认值：1\n\n返回值：\n    (:obj:`BgpSrTePolicySegmentList`): 创建的BGP SR-TE Segment List配置对象，若输入为单个SrTePolicy则返回单个对象，否则返回对象列表。\n\n示例：\n    .. code:: RobotFramework\n\n        | ${Session} | Create Bgp | Port=${Port} |\n        | ${SrTe} | Create Bgp Sr Te Policy | Session=${Session} |\n        | Create Bgp Sr Te Policy Segement List | Session=${Session} | SrTePolicy=${SrTe} |\n\n注意事项：\n    - `Session` 必须是一个有效且已激活的BGP会话对象。\n    - `SrTePolicy` 必须是已经正确配置的SR-TE策略对象。\n    - 若调用失败，将抛出ContinuableFailure异常。",
  "TesterLibrary.Protocol.bgp.create_bgp_segement_sub_tlv": "创建一个或多个BGP段子TLV（Segment sub-TLV）对象，用于BGP SR-TE策略配置。\n\nArgs:\n\n    Session (:obj:`BgpRouter`): BGP协议会话对象，用于与底层协议栈交互。该对象需具有`create_segement_sub_tlv`方法以创建段子TLV。\n\n    SegementList (:obj:`BgpSrTePolicySegmentList`): 一个段列表对象或段列表的集合，表示要关联到所创建的子TLV的段列表。\n\n    Types (str, list, set or tuple): 要创建的BGP段子TLV类型。可以是单个字符（如\"A\"），也可以是包含多个类型的列表、集合或元组。\n                                    类型取值范围为A-K，每个类型代表一种特定的段子TLV结构。\n\nKeyword Args:\n\n    Flags (list): 指定标志位，可选一个或多个Flag，取值包括：\n\n        NO_SHOW - 不设置任何标志\n\n        V_FLAG - V标志位\n\n        A_FLAG - A标志位\n\n        S_FLAG - S标志位\n\n        B_FLAG - B标志位\n\n    Label (int): 标签值，用于MPLS标签转发，取值范围1-1048575，默认值：1600\n\n    LabelStep (int): 标签步长，用于生成多个标签时的递增步长，默认值：1\n\n    Tc (int): 流量类别（Traffic Class）值，用于QoS标记，默认值：0，取值范围0-7\n\n    Sbit (int): 栈底标志（Bottom of Stack）值，通常为0或1，默认值：1\n\n    Ttl (int): 生存时间（TTL）值，用于限制数据包在网络中的跳数，默认值：255，取值范围1-1048575\n\n    Srv6Sid (str): SRv6段标识符（SID），IPv6地址格式，默认值：\"2000::1\"\n\n    Srv6SidStep (str): SRv6 SID的步长，用于生成多个SRv6 SID时的递增步长，默认值：\"::1\"\n\n    EndpointBehavior (int): SRv6端点行为标识符，用于定义转发行为，默认值：0，取值范围1-1048575\n\n    LbLength (int): SRv6 Locator Block字段长度，默认值：0，取值范围1-1048575\n\n    LnLength (int): SRv6 Locator Node字段长度，默认值：0，取值范围1-1048575\n\n    FunLength (int): SRv6 Function字段长度，默认值：0，取值范围1-1048575\n\n    ArgLength (int): SRv6参数字段长度，默认值：0，取值范围1-1048575\n\n    SrAlgorithm (int): Segment Routing算法标识符，默认值：0，取值范围1-1048575\n\n    Ipv4NodeAddress (str): IPv4节点地址，默认值：\"192.0.0.1\"\n\n    Ipv4NodeAddressStep (str): IPv4节点地址步长，默认值：\"0.0.0.1\"\n\n    Ipv6NodeAddress (str): IPv6节点地址，默认值：\"2000::1\"\n\n    Ipv6NodeAddressStep (str): IPv6节点地址步长，默认值：\"::1\"\n\n    LocalInterfaceId (int): 本地接口ID，默认值：0，取值范围1-1048575\n\n    LocalIpv4Address (str): 本地IPv4地址，默认值：\"192.0.0.1\"\n\n    LocalIpv4AddressStep (str): 本地IPv4地址步长，默认值：\"0.0.0.1\"\n\n    RemoteIpv4Address (str): 远端IPv4地址，默认值：\"192.0.0.1\"\n\n    RemoteIpv4AddressStep (str): 远端IPv4地址步长，默认值：\"0.0.0.1\"\n\n    LocalIpv6NodeAddress (str): 本地IPv6节点地址，默认值：\"2000::1\"\n\n    LocalIpv6NodeAddressStep (str): 本地IPv6地址步长，默认值：\"::1\"\n\n    RemoteInterfaceId (int): 远端接口ID，默认值：0，取值范围1-1048575\n\n    RemoteIpv6NodeAddress (str): 远端IPv6节点地址，默认值：\"2000::1\"\n\n    RemoteIpv6NodeAddressStep (str): 远端IPv6地址步长，默认值：\"::1\"\n\nReturns:\n\n    object or list: 如果仅创建一个子TLV，则返回对应的配置对象（例如`:obj:BgpSegmentSubTlvTypeA`等）；\n                    如果创建多个子TLV，则返回配置对象的列表。\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${Session} | Create Bgp | Port=${Port} |\n        | ${SrTe} | Create Bgp Sr Te Policy | Session=${Session} |\n        | ${SrTeSegmentList} | Create Bgp Sr Te Policy Segement List | Session=${Session} | SrTePolicys=${SrTe} |\n        | Create Bgp Segement Sub Tlv | Session=${Session} | SegementList=${SrTeSegmentList} | Types=B | Label=2000 | LabelStep=10",
  "TesterLibrary.Protocol.bgp.create_bgp_link_states": "创建BGP链路状态配置对象，用于定义BGP链路状态信息。该函数支持单个或多个会话对象的配置，并将所有配置参数传递给底层会话对象的方法。\n\nArgs:\n\n    Session (:obj:`BgpRouter`): BGP协议会话对象或其列表，用于指定要配置链路状态的BGP会话。类型为object或list。\n\nKeyword Args:\n\n    Origin (str): 路由来源，表示路由是如何生成的，默认值为IGP，可选值包括IGP、EGP、INCOMPLETE。\n    \n    AsPath (str): 自治系统路径字符串，默认为空字符串\"\"。\n    \n    AsPathType (str): AS路径类型，默认为SEQUENCE（顺序），可选值包括SET（集合）、SEQUENCE（顺序）、CONFED_SEQUENCE（联盟顺序）、CONFED_SET（联盟集合）。\n    \n    NextHop (str): IPv4下一跳地址，默认值为10.0.0.1。\n    \n    IPv6NextHop (str): IPv6下一跳地址，默认值为2001::1。\n    \n    EnableLinkLocalNextHop (bool): 是否启用本地链路IPv6下一跳，默认为True。\n    \n    LinkLocalNextHop (str): 本地链路IPv6下一跳地址，默认值为fe80::1。\n    \n    LocalPreference (int): 本地优先级，默认值为10。\n    \n    Community (str): 团体属性值，默认为空字符串\"\"。\n    \n    ExtendedCommunity (str): 扩展团体属性值，默认为空字符串\"\"。\n    \n    ProtocolID (str): 协议标识符，默认值为DIRECT，可选值包括ISIS_LEVEL_1、ISIS_LEVEL_2、OSPFV2、DIRECT、STATIC、OSPFV3、BGP。\n    \n    IdentifierType (str): 标识符类型，默认值为CUSTOMIZED，可选值包括DEFAULT_LAYER3和CUSTOMIZED。\n    \n    Identifier (int): 标识符数值，范围1-1048575，默认值为0。\n    \n    EnableNodeNLRI (bool): 是否启用节点NLRI（网络层可达性信息），默认为True。\n    \n    LocalNodeDescriptorFlag (list): 本地节点描述符标志列表，默认值为[IGP_ROUTER_ID]，可选项包括AS_NUMBER、BGPLS_IDENTIFIER、OSPF_AREA_ID、IGP_ROUTER_ID、BGP_ROUTER_ID、MEMBER_ASN。\n    \n    AsNumber (int): 自治系统编号，取值范围1-4294967295，默认值为1。\n    \n    BgpLsIdentifier (str): BGP-LS标识符，IPv4格式，默认值为1.0.0.1。\n    \n    OspfAreaId (str): OSPF区域ID，IPv4格式，默认值为0.0.0.0。\n    \n    IGPRouterIdType (str): IGP路由器ID类型，默认值为OSPF_NONPSEUDONODE，可选值包括ISIS_NONPSEUDONODE、ISIS_PSEUDONODE、OSPF_NONPSEUDONODE、OSPF_PSEUDONODE。\n    \n    IsisNonPseud (str): ISIS非伪节点路由器ID，默认值为\"00:10:12:00:00:01\"。\n    \n    IsisPseud (str): ISIS伪节点路由器ID，默认值为\"00:10:12:00:00:01.02\"。\n    \n    OspfNonPseud (str): OSPF非伪节点路由器ID，默认值为192.0.0.1。\n    \n    OspfPseud (str): OSPF伪节点路由器ID，默认值为\"192.0.0.1:192.0.0.1\"。\n    \n    BgpRouterId (str): BGP路由器ID，默认值为0.0.0.0。\n    \n    MemberAsn (int): 成员自治系统编号，默认值为0。\n    \n    LocalNodeAttributeFlag (str): 本地节点属性标志，默认值为NODE_FLAG_BITS，可选项包括MULTI_TOPO_ID、NODE_FLAG_BITS、NODE_NAME、ISIS_AREA_ID、IPV4_LOCAL_NODE_ROUTERID、IPV6_LOCAL_NODE_ROUTERID、SR_CAPABILITIES、SR_ALGORITHM、SR_LOCAL_BLOCK、SR_SRMA_PREF、SRV6_CAPABILITIES、SRV6_NODE_MSD。\n    \n    MultiTopoId (str): 多拓扑ID，取值范围1-4095，默认值为空字符串。\n    \n    NodeFlagBitIsis (str): ISIS节点标志，默认值为ATTACHED，可选值包括OVERLOAD、ATTACHED。\n    \n    NodeFlagBitOspfv2 (list): OSPFv2节点标志，默认值为[\"ABR\"]，可选项包括EXTERNAL、ABR。\n    \n    NodeFlagBitOspfv3 (list): OSPFv3节点标志，默认值为[\"ABR\"]，可选项包括EXTERNAL、ABR、ROUTER、V6。\n    \n    NodeName (str): 节点名称，默认值为空字符串。\n    \n    IsisAreaId (int): IS-IS区域ID，默认值为0。\n    \n    LocalIpv4RouterIds (str): IPv4本地路由器ID，默认值为空字符串。\n    \n    LocalIpv6RouterIds (str): IPv6本地路由器ID，默认值为空字符串。\n    \n    SidLabelType (str): SID/标签类型，默认值为BIT20_LABEL，可选值包括BIT20_LABEL和BIT32_SID。\n    \n    SrCapabilitiesFlags (list): SR能力标志，默认值为[\"MPLS_IPv4\"]，可选值包括MPLS_IPv4、MPLS_IPv6。\n    \n    SrCapabilities (str): SR能力描述，默认值为\"16:100\"。\n    \n    SrAlgorithm (int): SR算法编号，取值范围1-255，默认值为0。\n    \n    SrLocalBlock (str): SRLB（SR本地块）范围描述，默认值为\"16:100\"。\n    \n    SrmsPref (int): SRMS（SR管理子系统）优先级，取值范围1-255，默认值为0。\n    \n    Srv6CapabilitiesFlags (list): SRv6能力标志，默认值为[\"O_FLAG\"]，可选值包括UNUSED0到UNUSED15。\n    \n    Srv6MsdFlags (list): SRv6 MSD（最大段数）标志，默认值为[\"NONE\"]，可选项包括NONE、MAX_SEGMENTS_LELT、MAX_END_POP、MAX_T_INSERT_SRH、MAX_T_ENCAPS_SRH、MAX_END_D_SRH。\n    \n    Srv6MsdMaxSegmentLeft (int): 最大Segments Left值，默认值为8。\n    \n    Srv6MsdMaxEndPop (int): 最大End Pop值，默认值为8。\n    \n    Srv6MsdMaxInsert (int): 最大T.Insert SRH值，默认值为8。\n    \n    Srv6MsdMaxEncap (int): 最大T.Encaps SRH值，默认值为8。\n    \n    Srv6MsdMaxEndD (int): 最大End D SRH值，默认值为8。\n\nReturns:\n\n    (:obj:`BgpLsNodeConfig`): 创建的BGP链路状态配置对象。如果输入一个会话则返回单个对象；如果输入多个会话，则返回对象列表。\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${Session} | Create Bgp | Port=${Port} |\n        | Create Bgp Link States | Session=${Session} |",
  "TesterLibrary.Protocol.bgp.create_bgp_link_states_link": "创建一个或多个BGP链路状态(Link States)配置，基于提供的会话和链路状态信息。\n\n该函数封装了`Session.create_link_states_link`方法，用于创建一个或多个BGP链路状态配置。它统一处理单个或多个链路状态输入，并以一致的格式返回结果——如果仅创建一个配置，则返回单个配置对象；如果创建多个，则返回配置对象的列表。\n\n参数:\n    Session (object): 提供创建BGP链路状态上下文的会话对象。该对象必须包含\n                      `create_link_states_link`方法来实际执行配置。\n    LinkState (object or iterable): 用于创建BGP链路状态的一个单独的链路状态对象或一组链路状态对象(可迭代对象如list, set, tuple)。\n                                    如果提供的是单个对象，内部将被转换为列表。\n    **kwargs: 附加的关键字参数，用于自定义创建BGP链路状态配置。这些参数直接传递给\n              `Session.create_link_states_link`方法。\n\n返回值:\n    object or list: 如果仅处理了一个链路状态，则返回单个配置对象；否则返回与提供的每个链路状态对应的配置对象的列表。",
  "TesterLibrary.Protocol.bgp.create_bgp_link_states_prefix": "创建BGP链路状态前缀配置，用于在指定会话下为一个或多个链路状态生成BGP链路状态前缀对象。\n\n该函数封装了 `Session.create_link_states_prefix` 方法的调用逻辑。如果传入的是单个链路状态对象（非列表），则会在内部将其转换为列表形式以保持处理一致性。每个链路状态都会对应创建一个配置对象，并存储在结果列表中。若只创建了一个配置对象，则直接返回该对象；若创建了多个，则返回配置对象列表。\n\n### 参数说明：\n\n- **Session** (`BgpRouter`)：  \n  BGP协议会话对象，可以是单个对象或对象列表。提供创建配置所需的方法和上下文环境。\n\n- **LinkState** (`BgpLsNodeConfig`)：  \n  链路状态对象，可以是单个对象或对象列表。为每个链路状态创建对应的BGP链路状态前缀配置。\n\n- **\\*\\*kwargs**：  \n  可选参数，传递给底层 `Session.create_link_states_prefix` 方法，用于定义链路状态前缀的具体属性。包括但不限于以下选项：\n  \n  - **PrefixDescriptorFlag** (`list`)：LS前缀描述符标志，默认值：`[\"IP_REACH_INFO\"]`，可选值包括：\n    - `MULTI_TOPOLOGY`\n    - `OSPF_ROUTE_TYPE`\n    - `IP_REACH_INFO`\n\n  - **OspfRouteType** (`str`)：OSPF路由类型，默认值：`\"INTRA_AREA\"`，可选值包括：\n    - `INTRA_AREA`\n    - `INTER_AREA`\n    - `EXTERNAL1`\n    - `EXTERNAL2`\n    - `NSSA1`\n    - `NSSA2`\n\n  - **PrefixCount** (`int`)：地址前缀数量，默认值：`1`，取值范围：`1-65535`。\n\n  - **PrefixType** (`str`)：地址前缀类型，默认值：`\"IPV4\"`，可选值包括：\n    - `IPV4`\n    - `IPV6`\n\n  - **Ipv4Prefix** (`str`)：IPv4地址前缀，默认值：`\"1.0.0.0\"`，需为合法IPv4地址格式。\n\n  - **Ipv4PrefixLength** (`int`)：IPv4地址前缀长度，默认值：`24`，取值范围：`1-32`。\n\n  - **Ipv4PrefixStep** (`int`)：IPv4地址前缀步长，默认值：`1`，取值范围：`1-65535`。\n\n  - **Ipv6Prefix** (`str`)：IPv6地址前缀，默认值：`\"2000::1\"`，需为合法IPv6地址格式。\n\n  - **Ipv6PrefixLength** (`int`)：IPv6地址前缀长度，默认值：`64`，取值范围：`1-128`。\n\n  - **Ipv6PrefixStep** (`int`)：IPv6地址前缀步长，默认值：`1`，取值范围：`1-65535`。\n\n  - **MultiTopologyId** (`int`)：多拓扑ID，默认值为空，取值范围：`1-4095`。\n\n  - **OspfSrPrefixSidFlag** (`list`)：OSPF SR前缀SID标志，默认值：`[\"UNKNOWN\"]`，可选值包括：\n    - `UNKNOWN`\n    - `NO_PHP`\n    - `MAPPING_SERVER`\n    - `EXPLICIT_NULL`\n    - `VALUE`\n    - `LOCAL`\n\n  - **IsisSrPrefixSidFlag** (`list`)：ISIS SR前缀SID标志，默认值：`[\"UNKNOWN\"]`，可选值包括：\n    - `UNKNOWN`\n    - `RE_ADVER`\n    - `NODESID`\n    - `NO_PHP`\n    - `EXPLICIT_NULL`\n    - `VALUE`\n    - `LOCAL`\n\n  - **PrefixAttributeFlag** (`str`)：LS前缀属性标志，默认值：`\"UNKNOWN|IGP_FLAGS\"`，可选值包括：\n    - `UNKNOWN`\n    - `IGP_FLAGS`\n    - `PREFIX_METRIC`\n    - `OSPF_FORWARDING`\n    - `SR_PREFIX_SID`\n    - `SR_RANGE`\n    - `SR_ATTRIBUTE_FLAG`\n    - `SR_SOURCE`\n    - `SRV6_LOCATOR_TLV`\n\n  - **IgpFlag** (`str`)：IGP标志，默认值：`\"UNKNOWN\"`，可选值包括：\n    - `UNKNOWN`\n    - `ISIS_UP_DOWN`\n    - `OSPF_NO_UNICAST`\n    - `OSPF_LOCAL_ADDRESS`\n    - `OSPF_PROPAGATE_NSSA`\n\n  - **PrefixMetric** (`int`)：前缀度量值，默认值：`0`，取值范围：`1-4294967295`。\n\n  - **OspfForwardtype** (`str`)：OSPF转发地址类型，默认值：`\"OSPFV2\"`，可选值：\n    - `OSPFV2`\n    - `OSPFV3`\n\n  - **Ospfv2ForwardAddr** (`str`)：OSPFv2转发地址，默认值：`\"192.168.1.1\"`，需为合法IPv4地址。\n\n  - **Ospfv3ForwardAddr** (`str`)：OSPFv3转发地址，默认值：`\"2000::1\"`，需为合法IPv6地址。\n\n  - **OspfSrPrefixFlag** (`str`)：OSPF SR前缀SID标志，默认值：`\"UNKNOWN\"`，可选值同上。\n\n  - **IsisSrPrefixFlag** (`str`)：ISIS SR前缀SID标志，默认值：`\"UNKNOWN\"`，可选值同上。\n\n  - **Algorithm** (`int`)：算法编号，默认值：`0`，取值范围：`1-255`。\n\n  - **SidLabelIndex** (`int`)：SID/Label/Index值，默认值：`0`，取值范围：\n    - 20比特：`0-1048575`\n    - 32比特：`0-4294967295`\n\n  - **Ospfv2SrPrefixAttributeFlag** (`list`)：OSPFv2 SR前缀属性标志，默认值：`[\"NODE\"]`，可选值：\n    - `ATTACH`\n    - `NODE`\n\n  - **Ospfv3SrPrefixAttributeFlag** (`list`)：OSPFv3 SR前缀属性标志，默认值：`[\"NO_UNICAST\"]`，可选值：\n    - `NO_UNICAST`\n    - `LOCAL_ADDRESS`\n    - `MULTICAST`\n    - `PROPAGATE`\n    - `RE_ADVER`\n    - `HOST`\n\n  - **IsisSrPrefixAttributeFlag** (`list`)：ISIS SR前缀属性标志，默认值：`[\"NODE\"]`，可选值：\n    - `EXTERNAL_PREFIX`\n    - `RE_ADVER`\n    - `NODE`\n\n  - **SrSourceIpv4Id** (`str`)：SR IPv4源路由ID，默认值：`\"192.168.1.0\"`。\n\n  - **SrSourceIpv6Id** (`str`)：SR IPv6源路由ID，默认值：`\"2000::1\"`。\n\n  - **Ospfv2SrRangeFlag** (`list`)：OSPFv2 SR范围标志，默认值：`[\"INTER_AREA\"]`。\n\n  - **IsisSrRangeFlag** (`list`)：ISIS SR范围标志，默认值：`[\"ATTACHED\"]`，可选值：\n    - `ADDRESS_FAMILY`\n    - `MIRROR_CONTEXT`\n    - `S_FLAG`\n    - `D_FLAG`\n    - `ATTACHED`\n\n  - **SrRangeSubTlv** (`str`)：SR范围Sub-TLV字符串，默认值：`\"0 Range Sub-TLV\"`。\n\n  - **Srv6LocatorFlag** (`str`)：SRv6 Locator标志，默认值：`\"NONE\"`，可选值：\n    - `NONE`\n    - `D_FLAG`\n\n  - **Srv6LocatorAlgorithm** (`int`)：SRv6 Locator使用的算法，默认值：`0`，取值范围：`1-255`。\n\n  - **Srv6LocatorMetric** (`int`)：SRv6 Locator度量值，默认值：`0`，取值范围：`1-4294967295`。\n\n### 返回值：\n\n- **(:obj:`BgpLsPrefixConfig`)**：返回创建的BGP链路状态前缀配置对象，类型为 `object` 或 `list`，取决于输入的 `LinkState` 数量。若只有一个，则返回单个对象；否则返回对象列表。\n\n### 示例代码：\n\n```robotframework\n| ${Session} | Create Bgp | Port=${Port} |\n| ${LinkState} | Create Bgp Link States | Sessions=${Session} |\n| Create Bgp Link States Prefix | Sessions=${Session} | LinkState=${LinkState} |\n```",
  "TesterLibrary.Protocol.bgp.create_bgp_link_states_prefix_sr_range_sub_tlv": "创建BGP Link-State前缀段路由（SR）范围子TLV对象，类型为object或list。\n\n该函数用于在BGP-LS（Link-State）环境中为指定的LinkStatePrefix创建SR Range子TLV配置。支持单个或多个会话及前缀的统一处理，并根据输入数量返回相应的配置对象或对象列表。\n\n参数：\n    Session (:obj:`BgpRouter` 或 object/list): 一个或多个BGP协议会话对象。必须是具有相应方法的有效会话对象，用于与协议栈交互。\n\n    LinkStatePrefix (:obj:`BgpLsPrefixConfig` 或 object/list): 一个或多个Bgp Link-State前缀对象，表示需要为其创建SR Range子TLV的目标前缀。\n\n关键字参数：\n    Algorithm (int): SR算法标识符，取值范围1-255，默认为0。\n\n    OspfSrPrefixSidFlag (list): OSPF SR前缀SID标志位，类型为字符串列表，默认值为UNKNOWN，可选值包括：\n        UNKNOWN, NO_PHP, MAPPING_SERVER, EXPLICIT_NULL, VALUE, LOCAL\n\n    IsisSrPrefixSidFlag (list): ISIS SR前缀SID标志位，类型为字符串列表，默认值为UNKNOWN，可选值包括：\n        UNKNOWN, RE_ADVER, NODESID, NO_PHP, EXPLICIT_NULL, VALUE, LOCAL\n\n    SidLabelIndex (int): SID/标签/索引值，取值范围1-255，默认为0。\n\n返回值：\n    (:obj:`BgpLsSrRangeSubTlvConfig` 或 list): 如果仅提供一个LinkStatePrefix，则返回单个配置对象；如果提供多个前缀，则返回对应的配置对象列表。\n\n示例：\n    .. code:: RobotFramework\n\n        | ${Session} | Create Bgp | Port=${Port} |\n        | ${LinkState} | Create Bgp Link States | Sessions=${Session} |\n        | ${prefix} | Create Bgp Link States Prefix | LinkState=${LinkState} |\n        | Create Bgp Link States Prefix Sr Range Sub Tlv | Sessions=${Session} | LinkStatePrefix=${prefix} |",
  "TesterLibrary.Protocol.bgp.create_bgp_link_states_srv6_sid": "创建BGP Link-State SRv6 SID配置对象，类型为：object / list\n\n该函数用于在给定的BGP链路状态（LinkState）上创建SRv6 SID（Segment Identifier）配置，通常用于BGP Link-State扩展以支持SRv6（Segment Routing over IPv6）功能。该函数支持单个或多个会话和链路状态对象的输入，并返回相应的SRv6 SID配置对象。\n\n参数：\n    Session (:obj:`BgpRouter` 或 object/list): BGP协议会话对象，可以是单个对象或列表形式，用于与底层协议栈或API交互。\n    \n    LinkState (:obj:`BgpLsNodeConfig` 或 object/list): BGP链路状态对象，可以是单个对象或列表形式，表示需要配置SRv6 SID的链路状态节点。\n\n关键字参数：\n    Srv6AttributeFlag (list): SRv6 SID属性标志，默认值为 [SRV6_ENDPOINT_BEHAVIOR]，可选值包括：\n        - SRV6_ENDPOINT_BEHAVIOR\n        - SRV6_BGP_PEER_NODE_SID\n        - SRV6_SID_STRUCTURE\n\n    Srv6EndpointBehavior (str): SRv6 Endpoint行为类型，默认值为 'CUSTOM'。取值范围包括多种预定义行为，如 END, END_WITH_PSP, END_X 等，详见示例。\n\n    Srv6EndpointBehaviorFlag (list): SRv6 Endpoint行为标志，默认值为 [NONE]。可用标志包括 UNUSED0 ~ UNUSED7。\n\n    Srv6EndpointBehaviorAlgorithm (int): SRv6 Endpoint行为使用的算法编号，取值范围 1-255，默认值为 0。\n\n    Srv6BgpPeerNodeSidFlag (list): EPE Peer Node SID 标志，默认值为 [NONE]，可选值包括 BACKUP_FLAG, SET_FLAG, PERSISTENT_FLAG。\n\n    Srv6BgpPeerNodeSidWeight (int): EPE Peer Node SID 权重，取值范围 1-255，默认值为 0。\n\n    Srv6BgpPeerNodeSidPeerAsNumber (int): 对端自治系统号，取值范围 1-4294967295，默认值为 1001。\n\n    Srv6BgpPeerNodeSidPeerBgpId (int): 对端BGP ID，取值范围 1-4294967295，默认值为 0。\n\n    Srv6SidStructureLbLength (int): SRv6 Locator Block 长度，取值范围 1-255，默认值为 32。\n\n    Srv6SidStructureLnLength (int): SRv6 Locator Node 长度，取值范围 1-255，默认值为 32。\n\n    Srv6SidStructureFunLength (int): SRv6 Function 长度，取值范围 1-255，默认值为 32。\n\n    Srv6SidStructureArgLength (int): SRv6 Argument 长度，取值范围 1-255，默认值为 32。\n\n    Srv6Sid (str): SRv6 SID 地址，必须是一个有效的IPv6地址，默认值为 \"::1\"。\n\n    MultiTopologyId (int): 多拓扑ID，取值范围 1-4095，默认值为空。\n\n返回值：\n    :obj:`BgpLsSrv6SidConfig`: 返回一个或多个SRv6 SID配置对象。如果输入为单个Session和LinkState，则返回单个对象；否则返回对象列表。\n\n示例：\n    .. code:: RobotFramework\n\n        | ${Session} | Create Bgp | Port=${Port} |\n        | ${LinkState} | Create Bgp Link States | Sessions=${Session} |\n        | Create Bgp Link States Srv6 Sid | Sessions=${Session} | LinkState=${LinkState} | Srv6EndpointBehavior=END | Srv6Sid=2001:db8::1 |",
  "TesterLibrary.Protocol.bgp.get_bgp_evpn_routes_statistic": "获取BGP EVPN路由的统计信息。\n\n该函数用于查询一个或多个BGP会话中EVPN路由的相关统计值。它支持指定具体的统计项，并根据输入的会话对象过滤统计数据。\n\n参数:\n    Session (object, list, set, tuple 或 None):\n        - 如果为None：不指定会话，返回所有会话的统计信息。\n        - 如果是单个对象（如BgpRouter）：使用其Name属性作为会话标识符。\n        - 如果是包含多个会话对象的集合（list/set/tuple）：从每个对象中提取Name属性形成会话名列表。\n        - 用于指定需要查询的BGP会话。\n\n    StaItems (list or str or None):\n        - 指定要获取的统计项。\n        - 如果为None：默认返回所有可用的统计项。\n        - 如果是字符串：将其转换为包含一个元素的列表。\n        - 支持的统计项包括：\n\n            TxAdRouteCount\n            RxAdRouteCount\n            TxMacIpRouteCount\n            RxMacIpRouteCount\n            TxInclusiveMcastRouteCount\n            RxInclusiveMcastRouteCount\n            TxEthernetSegmentRouteCount\n            RxEthernetSegmentRouteCount\n            TxIpPrefixRouteCount\n            RxIpPrefixRouteCount\n            TxWithdrawnAdRouteCount\n            RxWithdrawnAdRouteCount\n            TxWithdrawnMacIpRouteCount\n            RxWithdrawnMacIpRouteCount\n            TxWithdrawnInclusiveMcastRouteCount\n            RxWithdrawnInclusiveMcastRouteCount\n            TxWithdrawnEthernetSegmentRouteCount\n            RxWithdrawnEthernetSegmentRouteCount\n            TxWithdrawnIpPrefixRouteCount\n            RxWithdrawnIpPrefixRouteCount\n\n返回值:\n    - 如果只匹配到一行数据：返回一个字典，键为统计项名称，值为对应的统计值。\n    - 如果匹配到多行数据：返回一个pandas DataFrame，每行对应一个会话的统计结果。\n    - 如果没有找到匹配的数据：返回False。\n\n异常:\n    - 如果返回结果为False，抛出ContinuableFailure异常，表示操作失败但可以继续执行后续步骤。\n\n示例:\n    .. code:: RobotFramework\n\n        | @{StaItems} | Create List | AdjacencyState | TxUpdate |\n        | Subscribe Result | Types=EvpnRoutesStatistic |\n        | Start Protocol |\n        | Sleep | 60 |\n        | &{Result} | Get Bgp Evpn Routes Statistic | Session=${Session} | StaItems=@{StaItems} |\n        | Clear Result |",
  "TesterLibrary.Protocol.bgp.get_bgp_link_state_statistic": "获取BGP链路状态统计信息\n\n该函数用于获取指定BGP会话的链路状态统计信息，可选地过滤到特定的统计项。\n\n参数:\n    Session (:obj:`BgpRouter` 或多个对象的列表/集合/元组, 可选): 指定要获取BGP链路状态统计的会话对象。每个会话对象应具有 `Name` 属性表示其ID。如果未提供，则不进行会话过滤，默认为None。\n    StaItems (list, str, 可选): 指定需要获取的统计项（列）。如果未提供，则可能根据内部逻辑动态确定所有可用项。若传入字符串，则将其视为单元素列表。必须是'BgpLinkStateStatistic'类型支持的属性子集，默认为None。\n\n返回值:\n    dict 或 pd.DataFrame 或 bool:\n        - 如果恰好找到一行匹配: 返回一个字典，键对应请求的StaItems，值代表该行的统计值。\n        - 如果多行匹配: 返回包含所有匹配行的pandas DataFrame，每一行表示一个BGP链路状态条目的统计信息。\n        - 如果没有找到匹配结果: 返回False。\n\n异常:\n    TesterException: 可能传播在命令执行或从视图检索数据期间引发的异常。\n    sqlite3.Error: 如果在相关函数中发生任何数据库访问错误（例如，在基于性能的统计检索时）。\n    KeyError: 如果索引字典中的列名在结果DataFrame中不存在。\n\n副作用:\n    - 内部可能会通过`.get()`调用刷新数据状态。\n    - 在分页结果导航时执行如GotoResultPageCommand命令。\n    - 使用time.sleep(3)以允许在ResultView模式下页面间切换时数据保持一致性。\n    - 将结果DataFrame以表格形式记录日志以便调试。\n\n示例:\n    .. code:: RobotFramework\n\n        | @{StaItems} | Create List | AdjacencyState | TxUpdate |\n        | Subscribe Result | Types=BgpLinkStateStatistic |\n        | Start Protocol |\n        | Sleep | 60 |\n        | &{Result} | Get Bgp Link State Statistic | Session=${Session} | StaItems=@{StaItems} |\n        | Clear Result |",
  "TesterLibrary.Protocol.bgp.get_bgp_session_statistic": "获取BGP会话统计信息，用于查询指定BGP会话对象和Peer ID的统计项数据。\n\nArgs:\n\n    Session (:obj:`BgpRouter` or list/set/tuple of :obj:`BgpRouter`, optional): \n        BGP协议会话对象或多个会话对象的集合。若未指定，则不进行会话过滤。\n        若传入集合类型，将使用每个对象的 `.Name` 属性来标识会话。\n        默认值：None\n\n    Id (int, optional):\n        指定BGP对等体的ID，用于过滤特定对等体的统计信息。\n        对应索引过滤中的 'BgpPeerId'。\n        默认值：1\n\n    StaItems (list or str, optional):\n        需要获取的统计项列表。支持以下统计项：\n\n            PeerState\n\n            TxOpen\n\n            RxOpen\n\n            TxKeepalive\n\n            RxKeepalive\n\n            TxUpdate\n\n            RxUpdate\n\n            TxAdvertisedUpdate\n\n            RxAdvertisedUpdate\n\n            TxWithdrawnUpdate\n\n            RxWithdrawnUpdate\n\n            TxAdvertisedRoutes\n\n            RxAdvertisedRoutes\n\n            TxWithdrawnRoutes\n\n            RxWithdrawnRoutes\n\n            LastTxUpdateRoutes\n\n            LastRxUpdateRoutes\n\n            TxNotification\n\n            RxNotification\n\n            TxRefresh\n\n            RxRefresh\n\n        如果为字符串，则会被转换为包含单个元素的列表。\n        如果为 None，则返回所有可用统计项。\n        默认值：None\n\nReturns:\n\n    dict or pd.DataFrame or bool:\n        - 如果找到唯一匹配的结果行，返回一个字典，键对应请求的 `StaItems`；\n        - 如果有多个匹配结果，返回一个 pandas DataFrame；\n        - 如果没有匹配结果，返回 False。\n\nRaises:\n\n    ContinuableFailure: 如果底层调用返回 False，表示操作失败，抛出可继续执行的异常。\n\nExamples:\n\n    .. code:: RobotFramework\n\n        | @{StaItems} | Create List | AdjacencyState | TxUpdate |\n        | Subscribe Result | Types=BgpSessionStatistic |\n        | Start Protocol |\n        | Sleep | 60 |\n        | &{Result} | Get Bgp Session Statistic | Session=${Session} | StaItems=@{StaItems} |\n        | Clear Result |",
  "TesterLibrary.Protocol.bgp.get_bgp_session_block_statistic": "获取BGP会话块的统计信息。\n\n此函数用于检索指定BGP会话对象的统计信息，支持多种统计项。它通过封装底层 `_get_statictis` 方法实现统计数据的获取，并根据传入的 `Session` 和 `StaItems` 参数进行过滤和查询。\n\n参数：\n    Session (:obj:`BgpRouter`, optional): BGP协议会话对象，或包含多个会话对象的集合（列表、集合或元组）。若为None，则不进行会话过滤。\n        默认值：None。\n\n    StaItems (list, optional): 需要获取的统计项列表。该列表必须是以下字符串的子集：\n\n        PeerState\n        TxOpen\n        RxOpen\n        TxKeepalive\n        RxKeepalive\n        TxUpdate\n        RxUpdate\n        TxAdvertisedUpdate\n        RxAdvertisedUpdate\n        TxWithdrawnUpdate\n        RxWithdrawnUpdate\n        TxAdvertisedRoutes\n        RxAdvertisedRoutes\n        TxWithdrawnRoutes\n        RxWithdrawnRoutes\n        LastTxUpdateRoutes\n        LastRxUpdateRoutes\n        TxNotification\n        RxNotification\n        TxRefresh\n        RxRefresh\n\n        若为None，则返回所有可用统计项。\n        默认值：None。\n\n返回值：\n    dict or pd.DataFrame:\n        - 如果只有一行匹配：返回一个字典，键为请求的统计项，值为其对应的值。\n        - 如果多行匹配：返回一个 pandas DataFrame，包含所有匹配的统计结果。\n        - 如果没有匹配结果：返回 False。\n\n异常：\n    ContinuableFailure: 如果获取结果失败，将抛出可继续执行的失败异常。\n\n示例：\n    .. code:: RobotFramework\n\n        | @{StaItems} | Create List | AdjacencyState | TxUpdate |\n        | Subscribe Result | Types=BgpSessionBlockStatistic |\n        | Start Protocol |\n        | Sleep | 60 |\n        | &{Result} | Get Bgp Session Block Statistic | Session=${Session} | StaItems=@{StaItems} |\n        | Clear Result |\n\n注意事项：\n    - 内部调用了 `renix.get_bgp_session_block_statistic` 来完成实际的数据获取操作。\n    - 如果返回结果为 False，表示未找到符合条件的统计数据，此时将抛出异常以供上层处理。\n    - 该函数可能会触发内部状态变更或数据刷新操作。\n    - 在分页结果处理时，会使用 `time.sleep(3)` 来确保数据一致性。\n    - 调试过程中会对返回的 DataFrame 进行日志记录以便查看。",
  "TesterLibrary.Protocol.bgp.edit_bgp_port_config": "Modifies the BGP port configuration for one or more specified ports.\n\nThis function allows editing of various BGP-related parameters on given port(s), including message rates, session delays, and Segment Routing (SR) configurations. It provides special handling for the 'BgpSrVersion' parameter, which can be provided as an enumeration key name (string) or a list of such names. These are converted to their corresponding numeric values, summed, and then applied to the configuration.\n\n### Purpose:\nTo configure or update BGP-specific settings on test instrument ports, enabling control over BGP behavior such as update message transmission rate, session timing, and SR capabilities.\n\n### Parameters:\n\n**Ports** (`RenixPort` or list of `RenixPort`):  \nA single port object or a list of port objects whose BGP configurations need to be edited.\n\n**\\*\\*kwargs** (arbitrary keyword arguments):  \nConfiguration parameters to update in the `BgpPortRateConfig` object associated with each port. Supported parameters include:\n\n- **BgpUpdateMessageRate** (int):  \n  BGP Update Messages Transmission Rate in messages per second.  \n  Range: 1–1000  \n  Default: 10\n\n- **SessionConnectDelay** (int):  \n  Delay before attempting to reconnect a BGP session, in milliseconds.  \n  Range: 1–10000  \n  Default: 100\n\n- **SessionDisconnectDelay** (int):  \n  Delay before disconnecting a BGP session, in milliseconds.  \n  Range: 1–10000  \n  Default: 100\n\n- **BgpSrVersion** (str or list of str):  \n  BGP Segment Routing (SR) version(s) to enable. Accepts one or more of the following keys:\n    - RFC8669  \n  These are converted to their respective integer values, summed, and applied.  \n  Default: \"RFC8669\"\n\n- **SrgbBase** (int):  \n  Global SRGB (Segment Routing Global Block) base value.  \n  Range: 0–16777215  \n  Default: 16000\n\n- **SrgbRange** (int):  \n  Global SRGB range (number of labels).  \n  Range: 0–16777215  \n  Default: 1000\n\n### Behavior:\n\n- If `BgpSrVersion` is included in `kwargs`, it undergoes special processing:\n  - Converts string enum keys to their numeric equivalents.\n  - Sums them and assigns the result to `BgpSrVersion`.\n  - Removes `BgpSrVersion` from `kwargs` after applying it.\n- Remaining parameters are directly applied to the `BgpPortRateConfig` object via its `edit()` method.\n\n### Returns:\n\n- (`BgpPortRateConfig` or list of `BgpPortRateConfig`):  \n  If a single port is provided, returns the updated `BgpPortRateConfig` object for that port.  \n  If multiple ports are provided, returns a list of updated `BgpPortRateConfig` objects corresponding to each input port.\n\n### Example Usage:\n\n```robotframework\n| Edit Bgp Port Config | Ports=${port_list} | BgpUpdateMessageRate=200 | SessionConnectDelay=200 | BgpSrVersion=RFC8669 |\n```",
  "TesterLibrary.Protocol.bgp.sent_bgp_data": "Sends custom BGP protocol packet data through a specified session.\n\nThis function sends raw BGP data either by using a `BgpProtocolConfig` object to construct and execute a BGP send data command, or by directly invoking the `sent_data` method on the session object. If a list, set, or tuple of session objects is provided, the first element will be used.\n\nParameters:\n- Session (BgpProtocolConfig or session object, or list/tuple/set of these): The session through which the BGP data should be sent. If a collection is passed, the first element will be selected. If a `BgpProtocolConfig` object is passed, a `BgpSendDataCommand` will be executed using its handle and the provided data. Otherwise, it is assumed that the session object has a `sent_data` method that can be used directly.\n- Data (str or bytes): The BGP data to be sent. Typically, this is a hexadecimal string representing low-level BGP protocol operations.\n\nReturns:\n- bool: Always returns True if the data was successfully processed for sending (does not guarantee actual transmission success).\n\nRaises:\n- TypeError: If Session is not a valid session type or compatible collection.\n- AttributeError: If Session is neither a `BgpProtocolConfig` nor has a `sent_data` method.\n\nExample:\n.. code:: RobotFramework\n\n    | Sent Bgp Data | Session=${Session} | Data=0x12345678 |",
  "TesterLibrary.Protocol.common.start_protocol": "Starts one or more protocols either on specified ports, by protocol type, or directly using protocol session objects.\n\nPurpose:\n    This function provides a flexible way to start network protocols in a test environment. It supports multiple modes of operation:\n    - Starting specific protocols on specified ports.\n    - Starting all protocols on specified ports.\n    - Starting specific protocols globally if no ports are specified.\n    - Starting specific protocol session objects directly.\n\nParameters:\n    Ports (list of Port objects, optional): A list of port objects on which the specified protocols should be started.\n        If None, and Protocols is not None, the function will attempt to start the specified protocols globally.\n        If both Ports and Protocols are None and Objects is also None, all available protocols will be started.\n\n    Protocols (list of str, optional): A list of strings specifying the names of the protocols to start.\n        Supported values include: 'ospfv2', 'ospfv3', 'dhcpv4', 'dhcpv6', 'vxlan'. Protocol names are case-insensitive.\n        If None and Ports is provided, all protocols associated with those ports will be started.\n        If both Ports and Protocols are None, and Objects is also None, all protocols in the system will be started.\n\n    Objects (list of Protocol objects, optional): A list of specific protocol session objects to start.\n        If provided, both Ports and Protocols must be None, as this mode bypasses port-based protocol selection\n        and directly starts the specified sessions.\n\nReturns:\n    bool: True if the operation was successful; False otherwise.\n\nRaises:\n    ContinuableFailure: If starting the protocol fails, a ContinuableFailure exception is raised with a detailed message.\n\nBehavior Summary:\n    - If Objects is provided, it takes precedence and only those specific protocol sessions are started.\n    - If only Ports is provided, all applicable protocols on those ports are started.\n    - If both Ports and Protocols are provided, only the specified protocols are started on the given ports.\n    - If neither Ports nor Protocols is provided (and Objects is also None), all protocols are started.\n\nExamples:\n    .. code:: RobotFramework\n\n        | Start Protocol |\n        | Start Protocol | Ports=${port_list} | Protocols=['ospfv2', 'dhcpv4'] |\n        | Start Protocol | Objects=${protocol_objects} |",
  "TesterLibrary.Protocol.common.stop_protocol": "停止协议功能，用于根据指定的端口、协议类型或协议对象来停止一个或多个协议。\n\n参数:\n    Ports (Union[object, list], optional): 一个端口对象或端口对象列表，表示需要停止其关联协议的端口，默认为 None。\n    Protocols (Union[str, list], optional): 字符串或字符串列表，表示要停止的协议类型（如 'ospfv2', 'dhcpv4' 等），默认为 None。\n                                          协议名称匹配不区分大小写。\n    Objects (Union[object, list], optional): 一个协议对象或协议对象列表，表示需要直接停止的协议会话，默认为 None。\n                                            如果提供了该参数，则 Ports 和 Protocols 必须为 None。\n\n返回值:\n    int: 操作结果，成功时返回 EnumBase.TRUE.value，除非发生异常。\n\n异常:\n    TesterException: 如果参数组合无效，特别是当 Objects 不为 None 且 Ports 或 Protocols 也不为 None 时将抛出异常。\n\n说明:\n    此函数内部根据输入参数使用 StopProtocolCommand 或 StopAllProtocolCommand 来执行协议停止操作。\n    它通过提供的端口和/或协议类型构建一个协议句柄列表，并确保去除重复项，然后通过核心引擎实例执行命令。\n\n示例:\n    .. code:: RobotFramework\n\n        | Stop Protocol |",
  "TesterLibrary.Protocol.common.get_sessions": "获取当前测试仪表配置中与指定端口和协议相关的所有会话对象。此函数根据提供的端口和/或协议类型动态查找并返回对应的协议会话对象列表。若未指定端口，则默认考虑系统下所有端口；若未指定协议，则默认考虑所有支持的协议类型。每个会话对象为对应协议的具体类实例，且若已存在则从全局映射中获取，否则新建并缓存。\n\n参数:\n    Ports (list, optional): 端口对象的列表，用于过滤特定端口上的会话，默认为 None（表示所有端口）。\n    Protocols (list, optional): 指定需要获取的协议类型列表，目前支持的协议类型包括：\n        bgp\n        bfd\n        isis\n        ospfv2\n        ospfv3\n        pim\n        rip\n        dot1x\n        dhcpv4server\n        dhcpv4\n        dhcpv6server\n        dhcpv6\n        vxlan\n        saa\n        IGMP\n        igmpquery\n        mld\n        mldquery\n        l2tp\n        pppoe\n        ldp\n        lspping\n        pcep\n        默认为 None（表示所有可用协议）。\n\n返回值:\n    list: 协议会话对象列表，每个对象为具体协议类型的实例。\n\n示例:\n    .. code:: RobotFramework\n\n        | ${result} | Get Sessions |",
  "TesterLibrary.Protocol.common.get_sessions_from_type": "获取当前测试仪表配置中指定类型协议的会话对象列表\n\nArgs:\n\n    Type (str): 指定需要查询的协议类型，该参数用于查找对应的协议会话对象。支持的协议类型包括：\n\n        bgp\n\n        bfd\n\n        isis\n\n        ospfv2\n\n        ospfv3\n\n        pim\n\n        rip\n\n        dot1x\n\n        dhcpv4server\n\n        dhcpv4\n\n        dhcpv6server\n\n        dhcpv6\n\n        vxlan\n\n        saa\n\n        IGMP\n\n        igmpquery\n\n        mld\n\n        mldquery\n\n        l2tp\n\n        pppoe\n\n        ldp\n\n        lspping\n\n        pcep\n\n    该参数首先会在全局 `PROTOCOL_MAP` 中查找是否有对应映射关系，如果有，则使用映射后的实际类型名称进行查询；如果没有，则直接作为会话类名使用。\n\nReturns:\n\n    list: 返回一个包含所有匹配协议类型的会话对象的列表。如果未找到任何匹配的会话对象，则返回空列表。\n\nRaises:\n\n    ContinuableFailure: 如果调用底层接口失败（返回 False），则抛出可继续执行的异常，并附带函数名作为错误信息的一部分。\n\nFunction Behavior:\n\n    - 函数内部通过 `renix.get_sessions_from_type(Type=Type)` 调用底层 ROM 管理器接口。\n    - 如果底层接口返回 False，表示操作失败，将抛出 `ContinuableFailure` 异常。\n    - 否则返回查找到的会话对象列表。\n    - 所有会话对象由 `self.rom_manager` 管理，本函数只是对其进行了类型过滤。\n\nNotes:\n\n    - 协议会话对象是通过动态解析协议类型并匹配其对应类来检索的。\n    - 支持大小写不敏感的协议类型匹配（取决于底层实现）。\n    - 可以处理直接传入的类名或通过 `PROTOCOL_MAP` 映射得到的类名。",
  "TesterLibrary.Protocol.common.select_interface": "Selects the specified network interface(s) for one or more given session(s) using the Renix API.\n\nThis function ensures that the provided Session and Interface parameters are in list format,\nthen executes a command to associate the specified interfaces with the respective sessions.\nIt internally uses the `SelectInterfaceCommand` to perform the operation via the command layer instance.\n\nParameters:\n    Session (Session object or list of Session objects): \n        The session or list of sessions to which the interface(s) will be assigned.\n        Each session is expected to have a 'handle' attribute used by the API for internal reference.\n\n    Interface (Interface object or list of Interface objects): \n        The interface or list of interfaces to be selected for the given session(s).\n        Each interface is expected to have a 'handle' attribute used by the API for internal reference.\n\nReturns:\n    bool: Always returns True if the command execution is successful. If an error occurs during execution,\n          it is typically handled by the @abnormal_check decorator or raised from the command layer.\n\nDescription:\n    This method provides a way to bind one or more interfaces to one or more sessions within\n    the context of the Renix API. It abstracts the complexity of directly dealing with handles\n    and the command layer by allowing high-level Session and Interface objects to be passed in.\n\nRaises:\n    ContinuableFailure: If the underlying implementation returns False, indicating a failure in execution.\n\nExample:\n    .. code:: RobotFramework\n\n        | Select Interface | Session=${Session} | Interface=${Interface} |",
  "TesterLibrary.Protocol.dhcpv4.create_dhcp_client": "创建DHCPv4客户端协议会话对象。\n\n该函数用于在指定端口上创建并配置一个DHCPv4客户端实例。该实例可以代表一个普通的DHCP客户端或中继代理（Relay Agent），并且支持多种可配置参数，以满足不同的测试场景需求。创建完成后，该DHCP客户端会被注册到全局的协议对象映射表中，便于后续管理和引用。\n\n参数:\n    Port (:obj:`Port`): 必填，表示与DHCP客户端关联的测试仪表端口对象，用于构建协议栈的层级关系。\n\n关键字参数（**kwargs）:\n    Name (str): DHCP会话名称，默认值为自动生成，用户可自定义。\n\n    Mode (str): 客户端模式，默认值：CLIENT，可选值包括：\n\n        CLIENT - 普通DHCP客户端\n\n        RELAY_AGENT - DHCP中继代理\n\n    HostName (str): 主机名，默认值：XINERTEL。\n\n    ParameterRequests (list): 客户端请求的选项字段，默认值：['NONEOPTION', 'SUBNET_MASK', 'DOMAIN_NAME_SERVERS', 'DOMAIN_NAME', 'STATIC_ROUTES']，支持的选项包括：\n\n        SUBNET_MASK\n\n        ROUTERS\n\n        DOMAIN_NAME_SERVERS\n\n        DOMAIN_NAME\n\n        STATIC_ROUTES\n\n        IP_LEASE_TIME\n\n        SERVER_IDENTIFIER\n\n        T1\n\n        T2\n\n    EnableRouterOption (bool): 是否启用路由选项，默认值：False。\n\n    VendorClassIdentifier (str): 供应商类别标识符，默认值：XINERTEL。\n\n    BroadcastFlag (str): 广播标志位，默认值：BROADCAST，可选值包括：\n\n        UNICAST\n\n        BROADCAST\n\n    RelayAgentIp (str): 中继代理IP地址，默认值：1.1.1.1，格式应为合法IPv4地址。\n\n    ServerIp (str): DHCP服务器IP地址，默认值：2.1.1.3，格式应为合法IPv4地址。\n\n    EnableRelayAgentCircuitID (bool): 是否启用中继代理电路ID，默认值：False。\n\n    RelayAgentCircuitID (str): 中继代理电路ID，默认值为空字符串。\n\n    EnableRelayAgentRemoteID (bool): 是否启用中继代理远程ID，默认值：False。\n\n    RelayAgentRemoteID (str): 中继代理远程ID，默认值为空字符串。\n\n    EnableSyncAddressToInterface (bool): 是否将分配的IP地址同步到接口，默认值：True。\n\n    HostInterface (:obj:`Interface`): 客户端绑定的接口对象，默认值为None。\n\n返回值:\n    (:obj:`DhcpClient`): 创建成功的DHCPv4客户端会话对象，可用于后续操作和管理。\n\n副作用:\n    将创建的DhcpClient实例通过其handle属性注册到全局map_protocol_object字典中，供后续查找和管理使用。\n\n示例:\n    .. code:: RobotFramework\n\n        | ${Session} | Create Dhcp Client | Port=${Port} | Name=DHCP_Client_1 |",
  "TesterLibrary.Protocol.dhcpv4.edit_dhcp_client": "更新DHCP客户端会话的配置参数。\n\n该函数用于修改已存在的DHCPv4客户端会话对象（Session）的属性值。通过关键字参数传递需要更新的配置项，所有提供的参数都会被设置到Session对象中对应的属性上。\n\nArgs:\n    Session (:obj:`DhcpClient`): 要修改的DHCPv4客户端会话对象\n\nKeyword Args:\n    Name (str): 设置会话名称\n    \n    Mode (str): 设置DHCPv4客户端模式，默认值为CLIENT。支持：\n    \n        CLIENT\n        \n        RELAY_AGENT\n    \n    HostName (str): 设置主机名，默认值：XINERTEL\n    \n    ParameterRequests (list): 设置客户端请求的选项列表，默认值为['NONEOPTION', 'SUBNET_MASK', 'DOMAIN_NAME_SERVERS', 'DOMAIN_NAME', 'STATIC_ROUTES']。支持的选项包括：\n    \n        SUBNET_MASK\n        \n        ROUTERS\n        \n        DOMAIN_NAME_SERVERS\n        \n        DOMAIN_NAME\n        \n        STATIC_ROUTES\n        \n        IP_LEASE_TIME\n        \n        SERVER_IDENTIFIER\n        \n        T1\n        \n        T2\n    \n    EnableRouterOption (bool): 是否启用路由选项，默认值：False\n    \n    VendorClassIdentifier (str): 设置供应商标识符，默认值：XINERTEL\n    \n    BroadcastFlag (str): 设置广播标志，默认值：BROADCAST。支持：\n    \n        UNICAST\n        \n        BROADCAST\n    \n    RelayAgentIp (str): 设置DHCP中继代理IP地址，默认值：1.1.1.1，必须为合法IPv4地址\n    \n    ServerIp (str): 设置DHCP服务器IP地址，默认值：2.1.1.3，必须为合法IPv4地址\n    \n    EnableRelayAgentCircuitID (bool): 是否启用中继代理电路ID，默认值：False\n    \n    RelayAgentCircuitID (str): 设置中继代理电路ID，默认值为空字符串\n    \n    EnableRelayAgentRemoteID (bool): 是否启用中继代理远程ID，默认值：False\n    \n    RelayAgentRemoteID (str): 设置中继代理远程ID，默认值为空字符串\n    \n    EnableSyncAddressToInterface (bool): 是否将分配的IP同步到接口，默认值：True\n    \n    HostInterface (:obj:`Interface`): 设置客户端使用的网络接口对象\n\nReturns:\n    bool: 操作成功返回True，失败抛出ContinuableFailure异常\n\nExamples:\n    .. code:: RobotFramework\n\n        | Edit Dhcp Client | Session=${Session} | RelayAgentIp=2.2.2.2 | HostName=MyHost |",
  "TesterLibrary.Protocol.dhcpv4.dhcp_bind": "Bind the specified DHCP session(s) to the associated network interface.\n\nThis function ensures that one or more DHCP sessions are properly bound,\nwhich typically involves associating the session with a physical or logical\nnetwork interface to enable communication. It serves as a user-facing interface\nfor triggering the binding process and internally calls the backend implementation.\n\nParameters:\n-----------\nSessions : DhcpClient or iterable of DhcpClient objects\n    A single DhcpClient session object or an iterable (list, set, or tuple)\n    containing multiple DhcpClient session objects. Each session must have\n    a `bind()` method that performs the actual binding logic.\n\nReturns:\n--------\nbool\n    True if all provided sessions were processed successfully.\n    If the backend returns False, a ContinuableFailure exception is raised\n    to indicate that the binding operation did not succeed.\n\nRaises:\n-------\nContinuableFailure\n    If the backend binding operation returns False, indicating failure in binding.\nTypeError\n    If any of the provided session objects do not support the `bind()` method\n    (as enforced by the backend logic).\n\nExamples:\n---------\n.. code:: RobotFramework\n\n    | Dhcp Bind | Sessions=${Sessions} |\n\nNotes:\n------\n- This function acts as a wrapper over the internal implementation (`renix.dhcp_bind`)\n  and provides integration with the test framework's error handling.\n- Always returns True upon successful execution unless an exception is raised.",
  "TesterLibrary.Protocol.dhcpv4.dhcp_abort": "Aborts DHCP sessions for the provided session objects.\n\nThis function is used to terminate one or more active DHCPv4 client sessions. It forwards the call to the backend implementation which handles the actual termination of the sessions.\n\nParameters:\n    Sessions (DhcpClient or iterable of DhcpClient): A single DhcpClient object or an iterable \n                                                    (list, set, tuple) of DhcpClient objects \n                                                    representing active DHCP sessions to be aborted.\n\nReturns:\n    bool: Always returns True to indicate successful execution of the abort operation.\n\nDescription:\nIf a single DhcpClient object is provided, it will be internally converted into a list to ensure uniform processing. The function then iterates over each DhcpClient in the collection and calls its `abort()` method to terminate the corresponding DHCP session.\n\nRaises:\n    ContinuableFailure: If the result of the dhcp_abort operation is False, indicating failure, this exception is raised to signal the error while allowing test execution to continue.\n\nExample:\n.. code:: RobotFramework\n\n    | Dhcp Abort | Sessions=${Sessions} |\n\nIn this example, `${Sessions}` can be a single DhcpClient instance or a list of DhcpClient instances whose DHCP sessions will be terminated.",
  "TesterLibrary.Protocol.dhcpv4.dhcp_rebind": "Rebinds the DHCP session(s) provided.\n\nThis function takes one or more session objects and invokes the `rebind` method on each of them. The session objects are expected to have a `rebind()` method that performs the actual DHCP rebind operation.\n\nParameters:\n-----------\nSessions : object or iterable of objects\n    A single session object or an iterable (list, set, tuple) of session objects that support the `rebind()` method. If a single non-iterable object is passed, it will be wrapped in a list for processing.\n\nReturns:\n--------\nbool\n    Always returns True to indicate the operation was executed successfully (note: this does not guarantee that all session rebinds were successful, only that the method was applied to all provided sessions).\n\nRaises:\n-------\nContinuableFailure\n    If the underlying implementation (`renix.dhcp_rebind`) returns `False`, indicating a failure in applying the rebind operation.",
  "TesterLibrary.Protocol.dhcpv4.dhcp_reboot": "DHCP客户端重新启动\n\n该函数用于重新启动一个或多个DHCPv4客户端会话。适用于网络测试或配置过程中需要重启DHCP客户端的场景。\n\nArgs:\n\n    Sessions (:obj:`DhcpClient` 或 list of :obj:`DhcpClient`): \n        可以传入单个DHCPv4客户端对象，或者包含多个DHCPv4客户端对象的列表(list)、集合(set)或元组(tuple)\n\nReturns:\n\n    bool: 始终返回True，表示已成功在所有提供的会话上启动了重启操作\n\nRaises:\n\n    ContinuableFailure: 如果底层实现返回False，表示重启操作未能成功启动\n\nExamples:\n    .. code:: RobotFramework\n\n        | Dhcp Reboot | Sessions=${Sessions} |",
  "TesterLibrary.Protocol.dhcpv4.dhcp_release": "Releases the DHCP sessions provided.\n\nThis function takes a parameter 'Sessions', which can be a single session object or a collection (list, set, or tuple) of session objects. If a single session is provided, it is converted into a list containing that session. The function then iterates over all sessions in the collection and calls the 'release' method on each session object. After releasing all specified sessions, the function returns True to indicate success.\n\nParameters:\nSessions (:obj:`DhcpClient` or list or set or tuple): A single DHCPv4 Client protocol object or a collection of DHCPv4 Client protocol objects to be released.\n\nReturns:\nbool: True if the DHCP release operation was successfully performed on all provided sessions.\n\nRaises:\nContinuableFailure: If the DHCP release operation fails, a ContinuableFailure exception is raised with a descriptive error message.\n\nExamples:\n    .. code:: RobotFramework\n\n        | Dhcp Release | Sessions=${Sessions} |",
  "TesterLibrary.Protocol.dhcpv4.dhcp_renew": "dhcp_renew 函数用于发起 DHCPv4 客户端的单播续租操作。该函数接受一个或多个 DHCPv4 客户端会话对象作为参数，并对每个会话调用其 `renew()` 方法以执行实际的续租逻辑。函数最终返回一个布尔值，表示续租操作是否成功完成。\n\n### 参数说明：\n\n- **Sessions** (`DhcpClient` 或可迭代的 `DhcpClient` 对象)：  \n  表示需要续租的 DHCPv4 客户端协议对象。可以是一个单独的 `DhcpClient` 实例，也可以是一个包含多个 `DhcpClient` 的列表、元组或集合。如果传入的是单个会话对象，则会被自动转换为只包含该对象的列表。\n\n### 返回值：\n\n- **bool**：  \n  如果所有会话都成功完成续租操作，函数返回 `True`；如果续租过程中发生错误（如某个会话缺少 `renew()` 方法），则可能抛出异常。若底层调用返回 `False`，则会抛出 `ContinuableFailure` 异常，表示当前测试步骤失败但可继续执行后续步骤。\n\n### 异常说明：\n\n- **TypeError**：  \n  如果传入的任意一个会话对象没有 `renew()` 方法，将引发此异常。\n- **ContinuableFailure**：  \n  如果底层调用返回 `False`，表示 DHCP 续租失败，抛出此异常以便在测试框架中进行处理。\n\n### 使用示例：\n\n```robotframework\n| Dhcp Renew | Sessions=${Sessions} |\n```\n\n其中 `${Sessions}` 可以是单个 `DhcpClient` 对象，也可以是由多个 `DhcpClient` 构成的列表。\n\n### 注意事项：\n\n- 该函数依赖于底层 `renix.dhcp_renew()` 接口实现具体的 DHCP 协议交互逻辑。\n- 所有传入的 `DhcpClient` 对象必须具有有效的 `renew()` 方法，否则可能导致运行时错误。",
  "TesterLibrary.Protocol.dhcpv4.create_dhcp_client_custom_option": "创建测试仪表DHCP协议会话的自定义Option对象，用于在指定的一个或多个DHCP客户端会话上配置自定义选项。\n\nArgs:\n\n    Session (:obj:`DhcpClient` or list of :obj:`DhcpClient`): 一个或多个DHCPv4 Client协议对象。如果传入单个对象，则内部会将其转换为列表处理；如果传入列表，则对其中每个会话依次应用配置。\n\nKeyword Args:\n\n    OptionTag (number, optional): 可选项类型标识（即Option Code），默认值：0，取值范围：0-255。\n    \n    OptionType (str, optional): 可选项的数据类型，决定如何解析OptionValue字段，默认值：'HEX'，支持以下参数：\n        \n        'HEX'       - 十六进制字符串格式\n        \n        'STRING'    - ASCII字符串格式\n        \n        'BOOLEAN'   - 布尔值格式（\"True\"/\"False\"）\n        \n        'INT8'      - 有符号8位整数\n        \n        'INT16'     - 有符号16位整数\n        \n        'INT32'     - 有符号32位整数\n        \n        'IP'        - IPv4地址格式\n\n    EnableOptionValueList (bool, optional): 是否启用Option值列表模式，默认值：False。若为True，表示该Option包含多个值项。\n\n    OptionValue (str, optional): 可选项的具体值，以字符串形式提供，默认为空字符串。根据OptionType的不同，其内容应符合相应格式要求。\n\n    MessageType (list of str, optional): 指定该Option应在哪些DHCP消息类型中携带，默认值：['DISCOVER']，支持以下参数：\n\n        'DISCOVER'  - DHCP Discover消息\n        \n        'REQUEST'   - DHCP Request消息\n\nReturns:\n\n    :obj:`Dhcpv4ClientOption` or list of :obj:`Dhcpv4ClientOption`: 如果传入单个Session，返回对应的DHCPv4客户端Option对象；如果传入多个Session，则返回Option对象的列表。\n\nRaises:\n\n    ContinuableFailure: 当底层调用失败（返回False）时抛出可继续执行的异常。\n\nExamples:\n    .. code:: RobotFramework\n\n        | Create Dhcp Client Custom Option | Session=${Sessions} | OptionTag=123 | OptionType=STRING | OptionValue=TestOption | MessageType=['DISCOVER', 'REQUEST'] |\n\n该函数封装了对一个或多个DHCP客户端会话创建自定义Option的操作。对于每一个传入的Session对象，都会在其上依次调用create_option方法，并将所有结果收集后返回。若仅处理一个会话，则直接返回对应的结果对象；若处理多个会话，则返回结果对象的列表。",
  "TesterLibrary.Protocol.dhcpv4.edit_dhcp_client_port_config": "修改DHCPv4客户端端口配置对象，用于编辑一个或多个指定端口上的DHCPv4客户端配置。\n\nArgs：\n\n    Ports (:obj:`Port`): 测试仪表端口对象，可以是一个端口对象或者包含多个端口对象的列表、集合或元组。\n\nKeyword Args:\n\n    SetupRate (int): 建立速率，默认值：100，取值范围：1-65535。\n    \n    TeardownRate (int): 拆除速率，默认值：100，取值范围：1-65535。\n    \n    MaxOutstanding (int): 最大同时请求个数，默认值：100，取值范围：1-65535。\n    \n    LeaseTime (int): 期望租约时间（单位为秒），默认值：600，取值范围：1-4294967295。\n    \n    SessionRetryCount (int): 创建会话尝试次数，默认值：0，取值范围：0-65535。\n    \n    MessageRetryCount (int): 消息发送超时尝试次数，默认值：5，取值范围：0-65535。\n    \n    MessageTimeout (int): 消息超时时间（单位为秒），默认值：10，取值范围：1-99999。\n    \n    MaxMessageSize (int): 允许的最大有效负荷大小（单位为字节），默认值：576，取值范围：291-1500。\n\nReturns:\n\n    (:obj:`Dhcpv4PortConfig` or list of :obj:`Dhcpv4PortConfig`): 如果仅处理一个端口，则返回该端口对应的修改后的Dhcpv4PortConfig对象；如果处理多个端口，则返回与输入端口顺序一致的Dhcpv4PortConfig对象列表。\n\nExamples:\n    .. code:: RobotFramework\n\n        | Edit Dhcp Client Port Config | Port=${Port} | SetupRate=65535 |",
  "TesterLibrary.Protocol.dhcpv4.get_dhcp_port_statistic": "获取Dhcp Port Statistic统计结果，用于查询指定端口的DHCPv4协议层统计信息。\n\nArgs:\n\n    Port (:obj:`Port` or list/set/tuple of :obj:`Port`, optional): \n        测试仪表端口对象或其集合，表示要查询统计信息的端口。每个端口对象必须包含一个 `handle` 属性，用于内部索引。\n        如果为 None，则不指定具体端口，可能返回全局统计（如果支持）。\n\n    StaItems (list or str, optional): \n        指定需要获取的统计项列表，类型为 list 或 str。若为字符串将自动转换为列表。支持以下统计项：\n\n            CurrentAttempt\n            CurrentBound\n            TotalAttempt\n            TotalBound\n            TotalFailed\n            TotalReboot\n            TotalRenew\n            TotalRebind\n            TotalRetry\n            TxDiscover\n            RxOffer\n            TxRequest\n            RxAck\n            RxNak\n            TxRenew\n            TxRebind\n            TxReboot\n            TxRelease\n            RxForceRenew\n\n        若为 None，则尝试获取所有可用统计项。\n\nReturns:\n\n    dict or pd.DataFrame:\n        - 当仅匹配到一行数据时，返回一个字典，键为 `StaItems` 中的统计项名称，值为其对应的结果。\n        - 当匹配到多行数据时，返回一个 pandas DataFrame，包含所有匹配的 DHCPv4 端口统计信息。\n        - 若没有找到任何结果，返回 False。\n\nRaises:\n\n    ContinuableFailure: 如果底层调用失败（返回 False），则抛出可继续执行的异常。\n\nExamples:\n    .. code:: RobotFramework\n\n        | @{StaItems} | Create List | CurrentAttempt | CurrentBound |\n        | Subscribe Result | Types=Dhcpv4PortStats |\n        | Start Protocol |\n        | Sleep | 60 |\n        | &{Result} | Get Dhcp Port Statistic | Port=${Port} | StaItems=@{StaItems} |\n        | Clear Result |\n\nNotes:\n    - 内部调用 `renix.get_dhcp_port_statistic()` 实现功能。\n    - 支持性能模式下刷新并获取最新统计数据。\n    - 在使用前需确保已订阅正确的统计类型（如 Dhcpv4PortStats）。",
  "TesterLibrary.Protocol.dhcpv4.get_dhcp_client_statistic": "获取Dhcp Client Statistic统计结果\n\n该函数用于检索指定会话和会话索引的DHCP客户端统计信息。它封装了底层方法以获取与DHCPv4客户端相关的统计数据，处理输入的会话信息并构造适当的索引值来过滤和返回特定的统计结果。\n\nArgs:\n\n    Session (:obj:`DhcpClient` 或其组成的列表/集合/元组, 可选): Dhcp客户端会话对象或多个会话对象。\n                                                            如果为None，则不进行会话过滤。\n                                                            如果是单个对象，则使用其名称作为'ClientHandle'。\n                                                            如果是多个对象，则将其名称收集到一个列表中。\n                                                            类型为：Object\n\n    Id (int or str, 可选): 会话索引，用来进一步标识会话内的特定DHCP客户端。\n                         默认值: 1\n                         传递为'SessionIndex'参数以过滤结果。\n\n    StaItems (list or str, 可选): 需要获取的统计项目（列名）。\n                               如果为None，则自动查询所有可用属性。\n                               如果是字符串，则转换为列表。\n                               必须是以下支持的统计项的子集：\n                                    ClientState\n                                    IpAddress\n                                    LeaseTime\n                                    LeaseLeft\n                                    ErrorStatus\n                                    DiscoverResponseTime\n                                    RequestResponseTime\n\nReturns:\n\n    dict or pd.DataFrame or bool:\n        - 如果找到恰好一行匹配的结果：返回一个字典，键对应StaItems，值为对应的统计值。\n        - 如果找到多行匹配的结果：返回一个pandas DataFrame，包含过滤后的DHCP客户端统计数据。\n        - 如果没有找到匹配结果：返回False。\n\nRaises:\n\n    ContinuableFailure: 如果调用失败，将抛出可继续执行的异常，并提示“{函数名} Failure”。\n\nExamples:\n    .. code:: RobotFramework\n\n        | @{StaItems} | Create List | LeaseTime | DiscoverResponseTime |\n        | Subscribe Result | Types=Dhcpv4ClientStatistics |\n        | Start Protocol |\n        | Sleep | 60 |\n        | &{Result} | Get Dhcp Client Statistic | Session=${Session} | StaItems=@{StaItems} |\n        | Clear Result |",
  "TesterLibrary.Protocol.dhcpv4.get_dhcp_client_block_statistic": "获取Dhcp Client Block Statistic统计结果\n\n该函数用于获取指定DHCP客户端会话的块级统计信息。它封装了底层 `_get_statistics()` 方法，并支持查询单个或多个会话的 DHCPv4 客户端块级统计项。\n\nArgs:\n    Session (:obj:`DhcpClient` 或 list/set/tuple): Dhcp客户端会话对象或会话对象集合。\n        每个会话应具有 `Name` 属性，用于标识具体的客户端块。如果为 None，则不进行会话过滤。\n    \n    StaItems (list, str 或 None): 需要获取的统计项列表。若为字符串则转换为单元素列表；\n        若为 None，默认返回所有可用统计项。支持的统计项包括：\n\n        BlockState\n        AttemptRate\n        SetupRate\n        CurrentAttempt\n        CurrentBound\n        TotalAttempt\n        TotalBound\n        TotalFailed\n        TotalReboot\n        TotalRenew\n        TotalRebind\n        TotalRetry\n        TxDiscover\n        RxOffer\n        TxRequest\n        RxAck\n        RxNak\n        TxRenew\n        TxRebind\n        TxReboot\n        TxRelease\n        TxDecline\n        RxForceRenew\n\nReturns:\n    dict or pd.DataFrame or bool:\n        - 如果匹配到一行数据：返回一个字典，键为统计项名称，值为对应的统计值；\n        - 如果匹配到多行数据：返回一个 pandas DataFrame，包含过滤后的统计结果；\n        - 如果没有找到匹配的数据：返回 False。\n\nRaises:\n    ContinuableFailure: 当获取统计失败时抛出此异常，表示测试可继续执行。\n\nExamples:\n    .. code:: RobotFramework\n\n        | @{StaItems} | Create List | CurrentAttempt | CurrentBound |\n        | Subscribe Result | Types=Dhcpv4ClientBlockStats |\n        | Start Protocol |\n        | Sleep | 60 |\n        | &{Result} | Get Dhcp Client Block Statistic | Session=${Session} | StaItems=@{StaItems} |\n        | Clear Result |\n\nSide Effects:\n    - 可能修改内部状态，如刷新会话或统计信息；\n    - 在分页查看结果（ResultView）激活时，可能执行 GotoResultPageCommand 命令；\n    - 在页面切换时调用 time.sleep(3) 以保证数据一致性；\n    - 调试时可能会记录返回的 DataFrame 数据。\n\nNote:\n    - 此函数是对底层 API 的封装，实际调用 renix.get_dhcp_client_block_statistic()；\n    - 返回值类型依赖于匹配结果的数量，使用时需注意判断返回类型；\n    - 如果需要更灵活的统计分析，推荐使用返回 DataFrame 的形式处理数据。",
  "TesterLibrary.Protocol.dhcpv4.wait_dhcp_client_state": "等待DHCP客户端会话达到指定的状态。\n\n该函数用于监控一个或多个DHCP客户端会话，并阻塞直到每个会话的状态都变为期望的目标状态。它以固定的时间间隔轮询会话状态，如果在指定的超时时间内未能全部达到目标状态，则抛出异常。\n\n参数:\n\n    Sessions (object | iterable): 要监控的一个DHCP客户端会话对象，或者包含多个会话对象的可迭代对象（如列表、集合、元组）。\n\n    State (str | list, optional): 期望达到的状态，默认为 'BOUND'。可以是一个字符串表示单一状态，也可以是一个列表包含多个允许的状态。\n                                  所有会话必须进入这些状态之一才能成功完成等待。\n\n    Interval (int | str, optional): 检查会话状态的时间间隔（单位：秒），默认为 1 秒。\n\n    TimeOut (int | str, optional): 等待的最大时间（单位：秒），默认为 60 秒。若超过此时间仍未满足条件，则抛出 TesterException 异常。\n\n返回值:\n\n    bool: 如果所有DHCP客户端会话都在指定时间内达到了目标状态，则返回 True；否则抛出 TesterException。\n\n抛出异常:\n\n    TesterException: 当在超时时间内并非所有会话都达到期望状态时被抛出。\n\n注意事项:\n\n    - 如果传入的 Sessions 不是可迭代对象，则会被自动转换为包含单个会话的列表。\n    - 函数内部调用 `_wait_state` 方法来监控 'State' 属性。\n    - 状态比较不区分大小写。\n    - 若返回值为 False，将抛出 ContinuableFailure 异常并附带失败信息。",
  "TesterLibrary.Protocol.dhcpv4.create_dhcp_server": "创建DHCP Server会话对象，并将其关联到指定的端口上。\n\n该函数用于初始化一个DhcpServer实例，该实例通常代表运行在指定端口上的DHCP服务器。传入的`Port`参数定义了DHCP服务器所绑定的网络接口或端口。此外，所有通过`**kwargs`传递的可选关键字参数会被动态地设置为DhcpServer实例的属性，用于进一步配置服务器的行为（如租约时间、地址池范围等）。创建完成后，该DHCP服务器实例将被注册到全局协议对象映射中，以便后续通过其句柄进行访问或修改。\n\nParameters:\n-----------\nPort : :obj:`Port`\n    测试仪表端口对象，表示DHCP Server将会在其上运行的物理或逻辑端口。\n\nKeyword Args:\n-------------\nName (str): DHCP Server协议会话名称\n\nLeaseTime (number): 租约时间（秒），默认值：600，取值范围：1-4294967295\n\nRenewTime (number): T1租约更新时间（%），默认值：50，取值范围：0-200\n\nRebindTime (number): T2租约更新时间（%），默认值：87.5，取值范围：0-200\n\nMinLeaseTime (number): 最小允许租约时间（秒），默认值：10，取值范围：1-4294967295\n\nDeclineReserveTime (number): 资源释放等待时间（秒），默认值：10，取值范围：1-600\n\nOfferReserveTime (number): 租约申请超时时间（秒），默认值：10，取值范围：1-600\n\nServerHostName (str): 服务端主机名，默认值为空字符串\n\nDuplicateAddressDetection (bool): 是否启用重复地址检测（DAD），默认值：False\n\nDuplicateAddressDetectionTimeout (number): DAD检测超时时间（秒），默认值：0.5，取值范围：0-60\n\nReturns:\n--------\n:obj:`DhcpServer`\n    创建并配置完成的DHCP Server会话对象。该对象可用于进一步操作和查询DHCP服务器的状态与配置。\n\nRaises:\n-------\nContinuableFailure\n    如果底层调用失败，则抛出可继续执行类型的异常，提示\"create_dhcp_server Failure\"。\n\nSide Effects:\n-------------\n- 将新创建的DhcpServer实例注册到全局`map_protocol_object`字典中，使用其`handle`作为键，以便后续通过句柄访问该实例。\n\nExamples:\n---------\n.. code:: RobotFramework\n\n    | Create Dhcp Server | Port=${Port} | RenewTime=100 |",
  "TesterLibrary.Protocol.dhcpv4.edit_dhcp_server": "Modifies the attributes of a DHCP server session object based on the provided keyword arguments.\n\nThis function is used to update configuration parameters of an existing DHCPv4 server session in a test or automation framework. It applies changes by setting corresponding attributes on the Session object if they exist, using the key-value pairs passed through keyword arguments.\n\nParameters:\n\n    Session (:obj:`DhcpServer`): An object representing the current DHCPv4 server session. This object must have attributes that match the keys in the keyword arguments for the changes to take effect.\n\nKeyword Args:\n\n    Name (str): DHCP Server protocol session name.\n\n    LeaseTime (number): Lease time in seconds. Default: 600, Range: 1-4294967295.\n\n    RenewTime (number): T1 lease renewal time as a percentage. Default: 50, Range: 0-200.\n\n    RebindTime (number): T2 lease renewal time as a percentage. Default: 87.5, Range: 0-200.\n\n    MinLeaseTime (number): Minimum allowed lease time in seconds. Default: 10, Range: 1-4294967295.\n\n    DeclineReserveTime (number): Resource release wait time in seconds. Default: 10, Range: 1-600.\n\n    OfferReserveTime (number): Lease request timeout in seconds. Default: 10, Range: 1-600.\n\n    ServerHostName (str): Hostname of the server.\n\n    DuplicateAddressDetection (bool): Enables/disables Duplicate Address Detection (DAD). Default: False.\n\n    DuplicateAddressDetectionTimeout (number): Timeout for DAD in seconds. Default: 0.5, Range: 0-60.\n\nReturns:\n\n    bool: Returns True if the operation was attempted successfully. Note that this does not guarantee all attributes were updated, as it depends on the validity of the Session object and whether the attributes exist.\n\nExamples:\n    .. code:: RobotFramework\n\n        | Edit Dhcp Server | Session=${Session} | LeaseTime=1000 |",
  "TesterLibrary.Protocol.dhcpv4.create_dhcp_server_custom_option": "创建测试仪表DHCP协议会话自定义Option对象，并在指定的会话和上层结构下配置DHCP服务器自定义选项。\n\nArgs:\n\n    Session (object / list): 表示DHCPv4 Client协议对象或DHCP地址池对象，可以是单个对象或者包含多个对象的列表\n\n    Upper (object / list): 表示DHCPv4 Client协议对象或DHCP地址池对象，用于定义自定义Option的挂载位置，可以是单个对象或者包含多个对象的列表\n\nKeyword Args:\n\n    OptionTag (number): 可选字段的类型标识符，默认值为0，取值范围为0-255\n\n    OptionType (str): 可选字段的数据类型，默认值为HEX，支持以下参数：\n\n        HEX: 十六进制格式表示数据\n\n        STRING: 字符串类型数据\n\n        BOOLEAN: 布尔型数据\n\n        INT8: 有符号8位整数\n\n        INT16: 有符号16位整数\n\n        INT32: 有符号32位整数\n\n        IP: IPv4地址格式数据\n\n    EnableOptionValueList (bool): 是否启用可选字段值列表功能，默认值为False\n\n    OptionValue (str): 可选字段的具体数值，默认值为空字符串\n\n    MessageType (list): 指定该Option携带的消息类型，默认值为['OFFER', 'ACK']，支持以下参数：\n\n        OFFER: DHCP Offer消息中携带此Option\n\n        ACK: DHCP Ack消息中携带此Option\n\n        NAK: DHCP Nak消息中携带此Option\n\nReturns:\n\n    (:obj:`Dhcpv4ClientOption` or list): 如果仅创建了一个Option，则返回对应的Dhcpv4ClientOption对象；如果创建了多个Option（例如传入了多个Session或Upper组合），则返回包含所有创建的Dhcpv4ClientOption对象的列表\n\nExamples:\n    .. code:: RobotFramework\n\n        | Create Dhcp Server Custom Option | Session=${Sessions} |",
  "TesterLibrary.Protocol.dhcpv4.create_dhcp_server_address_pool": "创建DHCP Server会话对象地址池\n\n该方法用于为一个或多个DHCP Server会话对象创建地址池。每个会话对象需具有`create_pool`方法，用于实际处理地址池的创建逻辑。若传入单个会话对象，则内部将其转换为列表以保持一致性。随后，对列表中的每个会话调用`create_pool`方法，并将结果收集返回。若仅有一个结果则直接返回该结果对象；若多个结果则返回结果对象列表。\n\nArgs:\n\n    Sessions (:obj:`DhcpServer` or list of :obj:`DhcpServer`): 一个或多个DHCPv4 Server协议会话对象。\n        每个会话对象应具备`create_pool`方法，用于执行具体的地址池配置。\n\nKeyword Args:\n\n    Name (str): DHCP Server协议会话名称。\n\n    PoolAddressStart (str): 地址池起始IP地址，取值范围为IPv4地址，默认值：1.1.1.2。\n\n    PoolAddressStep (str): 分配地址时的步长，取值范围为IPv4地址，默认值：0.0.0.1。\n\n    PrefixLength (number): 子网前缀长度，有效范围为0到32，默认值：24。\n\n    RouterList (list): 网关地址列表，默认为空列表，元素应为有效的IPv4地址字符串。\n\n    LimitPoolCount (bool): 是否限制地址池中IP地址数量，默认值：True。\n\n    PoolAddressCount (number): 地址池中IP地址数量，默认值：255，有效范围：0-4294967295。\n\n    DomainName (str): 分配给客户端的域名，默认值为空字符串。\n\n    DnsList (list): DNS服务器地址列表，默认为空列表，元素应为有效的IPv4地址字符串。\n\nReturns:\n\n    (:obj:`Dhcpv4AddressPool` 或 list of :obj:`Dhcpv4AddressPool`): 创建的DHCP地址池对象。\n        如果输入单个会话对象，则返回单个地址池对象；如果输入多个会话对象，则返回地址池对象列表。\n\nExamples:\n    .. code:: RobotFramework\n\n        | Create Dhcp Server Address Pool | Sessions=${Sessions} | PoolAddressStart=2.2.2.2 |",
  "TesterLibrary.Protocol.dhcpv4.edit_dhcp_server_port_config": "修改DHCPv4服务器端口配置\n\n该函数用于为一个或多个指定的测试仪表端口对象修改DHCPv4服务器端口配置。它会获取每个端口关联的`Dhcpv4ServerPortConfig`子对象，并通过提供的关键字参数应用配置更改。如果传入的是单个端口，返回更新后的配置对象；如果传入多个端口，返回包含所有更新后配置对象的列表。\n\nArgs：\n\n    Ports (:obj:`Port`): 测试仪表端口对象，类型可以是单个Port对象或者包含多个Port对象的可迭代结构（如 list / set / tuple）\n\nKeyword Args:\n\n    RenewRate (int): 强制单播续租速度（单位：次/秒），默认值: 100，取值范围: 1-65535\n\n    MaxOutstanding (int): 最大并发请求个数，默认值: 1000，取值范围: 1-65535\n\nReturns:\n\n    (:obj:`Dhcpv4ServerPortConfig`): 返回修改后的DHCPv4服务器端口配置对象。若输入单个端口则返回单个对象；若输入多个端口则返回对象列表\n\nRaises:\n\n    IndexError: 如果某个端口没有' Dhcpv4ServerPortConfig '子对象\n\n    TypeError: 如果提供的端口对象不具有预期的方法或不是合法的端口对象\n\nExamples:\n    .. code:: RobotFramework\n\n        | Edit Dhcp Server Port Config | Port=${Port} | RenewRate=1000 |",
  "TesterLibrary.Protocol.dhcpv4.get_dhcp_server_statistic": "获取Dhcp Server Statistic统计结果\n\n该函数用于检索DHCPv4服务器的统计数据，支持根据提供的会话对象（或多个会话）以及指定的统计项来获取相关的性能指标。\n\nArgs:\n\n    Session (:obj:`DhcpServer` or list or set or tuple or None): \n        表示DHCP服务端会话的对象或对象集合。可以是单个会话对象、列表、集合或元组。\n        每个会话对象应具有 `Name` 属性，作为索引中的会话标识符。如果为 None，则不按会话过滤。\n\n    StaItems (list or str or None):\n        需要获取的统计项目列表。可选参数，若为 None 则返回所有可用统计项。\n        支持的统计项包括：\n\n            CurrentBound: 当前绑定数\n            TotalBound: 总绑定数\n            TotalExpire: 总过期数\n            TotalReboot: 总重启数\n            TotalRenew: 总续订请求次数\n            TotalRebind: 总重绑定请求数\n            TotalRelease: 总释放请求数\n            RxDiscover: 接收到的发现报文数\n            TxOffer: 发送的提供报文数\n            RxRequest: 接收到的请求报文数\n            TxAck: 发送的确认报文数\n            TxNak: 发送的否定响应报文数\n            RxDecline: 接收到的拒绝报文数\n            RxRelease: 接收到的释放报文数\n            TxForceRenew: 强制续订发送数\n\n        如果传入字符串，则自动转换为包含该字符串的列表。\n\nReturns:\n\n    dict or pd.DataFrame or bool:\n        - 如果只找到一行匹配数据：返回一个字典，键为请求的 StaItems，值为其对应的数据。\n        - 如果找到多行匹配数据：返回一个 pandas DataFrame，包含所有匹配的统计数据。\n        - 如果未找到匹配数据：返回 False。\n\nRaises:\n\n    ContinuableFailure: 如果底层调用返回失败 (result is False)，则抛出此异常。\n    TesterException: 可能传播执行命令或数据检索过程中发生的异常。\n    sqlite3.Error: 如果在相关函数中发生数据库访问错误。\n    KeyError: 如果内部索引中指定的列名在结果 DataFrame 中不存在。\n\nSide Effects:\n\n    - 通过 `.get()` 调用可能刷新内部状态。\n    - 如涉及分页结果，会执行相应的导航命令。\n    - 为了调试目的，将以表格形式记录检索到的数据。\n\nExamples:\n\n    .. code:: RobotFramework\n\n        | @{StaItems} | Create List | CurrentBound | TotalBound |\n        | Subscribe Result | Types=Dhcpv4ServerStats |\n        | Start Protocol |\n        | Sleep | 60 |\n        | &{Result} | Get Dhcp Server Statistic | Session=${Session} | StaItems=@{StaItems} |\n        | Clear Result |",
  "TesterLibrary.Protocol.dhcpv4.get_dhcp_server_lease_statistic": "获取Dhcp Server Lease Statistic统计结果\n\n该函数用于查询DHCP服务器的IPv4地址租约统计信息。它是一个专门化的接口，封装了对 `_get_statictis` 函数的调用，用于从指定会话中提取与特定客户端相关的租约统计数据。\n\nArgs:\n\n    Session (:obj:`DhcpServer` 或 session对象的列表/集合/元组 或 None): DHCP服务端会话对象或其集合，表示要查询的DHCP服务器实例。每个Session对象必须包含一个 `Name` 属性，用于唯一标识会话。如果为None，则不进行会话过滤。\n\n    ClientId (str 或 None): 要查询的DHCP客户端的MAC地址（例如：'00:00:12:01:01:03'）。如果为None，则返回所有客户端的统计信息。\n\n    StaItems (list, str 或 None): 指定需要获取的统计项。支持的统计项包括：\n\n        ClientIp - 客户端分配的IP地址\n\n        LeaseTime - 租约总时长（单位：秒）\n\n        LeaseLeft - 剩余租约时间（单位：秒）\n\n      如果为字符串，则自动转换为单元素列表；如果为None，则查询所有可用统计项。\n\nReturns:\n\n    dict or pd.DataFrame or bool:\n        - 如果只找到一条匹配记录，返回dict，格式如::\n\n            {\n                'LeaseTime': 100,\n                'LeaseLeft': 50\n            }\n\n        - 如果找到多条记录，返回pandas.DataFrame，列对应请求的StaItems\n\n        - 如果没有找到匹配记录，返回False\n\nRaises:\n\n    ContinuableFailure: 如果未找到匹配数据（result is False）\n\n    TesterException: 如果命令执行或视图数据获取过程中发生错误（由底层函数抛出）\n\n    sqlite3.Error: 如果在性能统计数据库访问过程中出现异常（由底层函数抛出）\n\n    KeyError: 如果构建索引时引用了不存在的列名（由底层函数抛出）\n\nExamples:\n    .. code:: RobotFramework\n\n        | @{StaItems} | Create List | LeaseTime | LeaseLeft |\n        | Subscribe Result | Types=Dhcpv4LeaseStats |\n        | Start Protocol |\n        | Sleep | 60 |\n        | &{Result} | Get Dhcp Server Lease Statistic | Session=${Session} | ClientId=00:00:12:01:01:03 | StaItems=@{StaItems} |\n        | Clear Result |\n\nSide Effects:\n    - 将Session参数转换为基于`.Name`属性的会话标识符后再进行查询\n\n    - 可能触发内部的数据刷新、结果页面导航或性能数据采集操作",
  "TesterLibrary.Protocol.dhcpv4.wait_dhcp_server_state": "等待DHCP服务器协议会话达到指定状态\n\n该函数用于阻塞执行，直到提供的所有DHCP服务器协议会话对象达到期望的状态。如果未指定状态（State），则默认等待状态为 UP。函数会在设定的时间间隔（Interval）内轮询会话状态，并在超时时间内（TimeOut）持续检查。\n\n参数:\n\n    Sessions (list): DHCP Server协议会话对象列表。可以是单个会话对象或一个包含多个会话对象的可迭代对象（如 list、set 或 tuple）。若传入的是非可迭代对象，则会被自动包装成列表。\n\n    State (str or list, optional): 等待DHCP Server协议会话达到的目标状态，默认值：UP。支持以下状态：\n\n        NOT_READY\n\n        DOWN\n\n        UP\n\n        如果提供多个状态（以列表形式），只要会话状态匹配其中任意一个即视为成功。\n\n    Interval (number, optional): 查询DHCP协议会话状态的间隔时间（单位：秒），默认值：1秒。\n\n    TimeOut (number, optional): 等待DHCP协议会话状态的超时时间（单位：秒），默认值：60秒。若在指定时间内并非所有会话都达到目标状态，将抛出TesterException异常。\n\n返回值:\n\n    bool: 如果所有DHCP Server协议会话在超时时间内达到目标状态之一，则返回True；否则抛出TesterException。\n\n异常:\n\n    TesterException: 如果在指定的超时时间内并非所有会话达到期望的状态。\n\n注意:\n\n    - 该函数内部调用 `_wait_state` 方法来处理实际的轮询和状态比较逻辑。\n    - 状态比较是大小写不敏感的，且基于会话对象中 'State' 属性的字符串表示进行判断。\n\n示例:\n    .. code:: RobotFramework\n\n        | Wait Dhcp Server State | Sessions=${Sessions} | State=${State} | Interval=${Interval} | TimeOut=${TimeOut} |",
  "TesterLibrary.Protocol.dhcpv4.dhcp_force_renew": "Forces a DHCP lease renewal for one or more session objects.\n\nThis function checks the type of the input `Sessions`. If it is not a list, set, or tuple,\nit is converted into a list containing that single session. Then, it iterates over each\nsession and calls the `renew()` method to force DHCP lease renewal.\n\nArgs:\n    Sessions (object or iterable): A single session object or an iterable (list, set, tuple)\n        of session objects representing the DHCP client sessions for which to force a lease renewal.\n\nReturns:\n    bool: Always returns True to indicate successful execution of the DHCP force renew operation.\n\nRaises:\n    ContinuableFailure: If the backend call returns False, indicating a failure in the DHCP force renew operation.\n\nExamples:\n    .. code:: RobotFramework\n\n        | Dhcp Force Renew | Sessions=${Sessions} |",
  "TesterLibrary.Protocol.dhcpv4.dhcp_abort_server": "Aborts the DHCP server sessions provided in the input.\n\nThis function allows for gracefully stopping one or more DHCPv4 server sessions by calling the `abort()` method on each session object. It supports both a single session object and an iterable (list, set, or tuple) of session objects as input. If a single session is provided, it will be internally converted into a list for uniform processing. The function ensures that all sessions are properly iterated and their abort methods are invoked sequentially.\n\nThe function is decorated with `@abnormal_check()`, which may perform checks or handle abnormal states during execution, though its exact behavior is not detailed here.\n\nParameters:\n    Sessions (DhcpServer or iterable of DhcpServer): \n        A single DHCP server session object or an iterable collection of DHCP server session objects to be aborted.\n\nReturns:\n    bool: Always returns True if the operation completes successfully. If any session fails to abort, the underlying implementation (`renix.dhcp_abort_server`) returns False, which triggers a `ContinuableFailure` exception in this function.\n\nExample Usage:\n    .. code:: RobotFramework\n\n        | Dhcp Abort Server | Sessions=${Sessions} |",
  "TesterLibrary.Protocol.dhcpv6.create_dhcpv6_client": "创建DHCPv6客户端会话对象\n\n该函数用于在指定端口上创建并配置一个DHCPv6客户端实例。它初始化一个Dhcpv6Client对象，并将其绑定到提供的`Port`作为其上层协议层。客户端还会通过其`handle`属性注册到全局协议对象映射表中，以便后续通过句柄检索或操作该协议对象。可以通过`**kwargs`参数动态设置客户端的已有属性，以实现灵活的配置。\n\nParameters:\n\n    Port (:obj:`Port`): 测试仪表端口对象，表示该DHCPv6客户端所绑定的网络端口，类型为object。\n\n    **kwargs (dict): 任意关键字参数，用于动态配置Dhcpv6Client实例的属性。只有已存在的属性可以被更新。\n\nKeyword Args（可选配置参数）:\n\n    Name (str): DHCPv6客户端会话名称，默认值：自动生成。\n\n    Enable (bool): 是否启用DHCPv6客户端会话，默认值：True。\n\n    EmulationMode (str): 会话模式，默认值：DHCPV6，可选值包括：\n\n        DHCPV6（仅地址分配）\n\n        DHCPV6PD（仅前缀分配）\n\n        DHCPV6ANDPD（同时进行地址和前缀分配）\n\n    EnableRenewMsg (bool): 是否启用Renew消息，默认值：True。\n\n    EnableRebindMsg (bool): 是否启用Rebind消息，默认值：True。\n\n    EnableReconfigAccept (bool): 是否接受Reconfigure消息，默认值：True。\n\n    EnableSyncAddressInterface (bool): 是否同步接口地址信息，默认值：True。\n\n    T1Timer (int): T1定时器时间（秒），默认值：302400，取值范围：0-2147483647。\n\n    T2Timer (int): T2定时器时间（秒），默认值：483840，取值范围：0-2147483647。\n\n    PreferredLifetime (int): 首选生命周期（秒），默认值：604800，取值范围：0-2147483647。\n\n    ValidLifetime (int): 有效生命周期（秒），默认值：2592000，取值范围：0-2147483647。\n\n    RapidCommitOptMode (str): 快速提交模式，默认值：DISABLE，可选值包括：\n\n        DISABLE\n\n        ENABLE\n\n        SERVERSET\n\n    DuidType (str): 客户端唯一标识符DUID的类型，默认值：LL，可选值包括：\n\n        LLT\n\n        EN\n\n        LL\n\n        CUSTOM\n\n    DuidCustomValue (int): 自定义DUID编号，默认值：1，取值范围：0-65535。\n\n    DuidEnterpriseNumber (int): DUID企业编号，默认值：3456，取值范围：0-4294967295。\n\n    DuidStartValue (str): DUID起始值，默认值：\"3456\"，必须匹配正则表达式 \"^([0-9a-fA-F]{1,256})$\"。\n\n    DuidStepValue (int): DUID步进值，默认值：0x1，取值范围：0-4294967295。\n\n    DestinationAddress (str): 发送请求的目标地址，默认值：ALL，可选值包括：\n\n        ALL\n\n        SERVER\n\n    EnableRelayAgent (bool): 是否启用中继代理，默认值：False。\n\n    RelayAgentIp (str): 中继代理IP地址，默认值：2000::1，必须是合法IPv6地址。\n\n    ServerIp (str): DHCP服务器IP地址，默认值：2001::2，必须是合法IPv6地址。\n\n    EnableUseRelayAgentMacForTraffic (bool): 是否使用中继代理MAC地址进行流量发送，默认值：True。\n\n    RequestPrefixLength (int): 请求的前缀长度，默认值：64，取值范围：0-128。\n\n    RequestPrefixStartAddress (str): 请求前缀的起始地址，默认值：'::'，必须是合法IPv6地址。\n\n    ControlPlaneSrcIPv6Addr (str): 控制平面源IPv6地址选择方式，默认值：LINKLOCAL，可选值包括：\n\n        LINKLOCAL\n\n        ROUTEADVERTISEMENT\n\n    RequestStartAddress (str): 请求地址的起始地址，默认值：'::'，必须是合法IPv6地址。\n\n    EnableAuthentication (bool): 是否启用认证功能，默认值：False。\n\n    AuthenticationProtocol (str): 认证协议类型，默认值：DELAYED，可选值包括：\n\n        DELAYED\n\n        RECONFIGURATION\n\n    DhcpRealm (str): 认证使用的域名，默认值：'xinertel.com'。\n\n    AuthenticationKeyId (int): 认证密钥ID，默认值：0，取值范围：0-4294967295。\n\n    AuthenticationKey (str): 认证密钥内容，默认值：空字符串。\n\n    AuthenticationKeyType (str): 认证密钥类型，默认值：ASCII，可选值包括：\n\n        ASCII\n\n        HEX\n\n    EnableDad (bool): 是否启用重复地址检测（DAD），默认值：False。\n\n    DadTimeout (int): DAD超时时间（秒），默认值：2，取值范围：1-4294967295。\n\n    DadTransmits (int): DAD探测报文发送次数，默认值：1，取值范围：1-4294967295。\n\n    HostInterface (:obj:`Interface`): 关联的接口对象，默认值：None。\n\nReturns:\n\n    (:obj:`Dhcpv6Client`): 创建并配置完成的DHCPv6客户端会话对象，提供方法和属性用于后续管理与交互。\n\nRaises:\n\n    ContinuableFailure: 如果创建失败，抛出异常提示。\n\nExamples:\n    .. code:: RobotFramework\n\n        | Create Dhcpv6 Client | Port=${Port} | DadTransmits=10 |",
  "TesterLibrary.Protocol.dhcpv6.create_dhcpv6_client_custom_options": "Configures custom DHCPv6 client options for one or more session objects.\n\n    Purpose:\n        This function is used to create and configure DHCPv6 client custom options on specified DHCPv6 client sessions.\n        It allows the user to define custom DHCPv6 options with specific properties such as option value, message types,\n        payload format, and removal behavior. These options are typically used in network testing scenarios to simulate\n        customized DHCPv6 client behavior.\n\n    Parameters:\n        Sessions (object or iterable): A single session object or an iterable (list, set, tuple) of session objects\n                                       representing DHCPv6 client sessions. Each session object must support a\n                                       `custom_options` method that accepts keyword arguments.\n\n        **kwargs: Arbitrary keyword arguments representing the configuration of the custom DHCPv6 client options.\n                  Available keyword arguments include:\n\n            OptionVal (int): The numeric identifier for the DHCPv6 option (0-255). Default: 0\n\n            IncludeMsg (list): List of DHCPv6 message types where this option should be included.\n                               Valid values: 'SOLICIT', 'REQUEST', 'CONFIRM', 'RENEW', 'REBIND',\n                                             'RELEASE', 'INFOREQUEST', 'RELAYFORWARD'\n                               Default: ['SOLICIT', 'REQUEST']\n\n            Wildcards (bool): If True, enables wildcard matching for this option. Default: False\n\n            StringIsHexadecimal (bool): If True, treats the string payload as hexadecimal data. Default: False\n\n            OptionPayload (str): ASCII string payload for the option. Max length: 512 characters. Default: ''\n\n            OptionHexPayload (int): Hexadecimal representation of the option payload. Default: \"\" (not set)\n\n            RemoveOption (bool): If True, configures the system to remove this option during transmission. Default: False\n\n    Returns:\n        (:obj:`Dhcpv6ClientCustomOptionsConfig` or list): A configuration object representing the created custom DHCPv6\n                                                       client option(s). If a single session was provided, returns a\n                                                       single configuration object. If multiple sessions were provided,\n                                                       returns a list of configuration objects in the same order as\n                                                       the input sessions.\n\n    Raises:\n        ContinuableFailure: If the operation fails (returns False), a ContinuableFailure exception is raised with a\n                            descriptive error message.\n\n    Example Usage:\n        .. code:: RobotFramework\n\n            | ${Dhcpv6} | Create Dhcpv6 Client | Port=${Port} |\n            | Create Dhcpv6 Client Custom Options | Sessions=${Dhcpv6} | Wildcards=True |\n\n    Notes:\n        - The function internally calls the `dhcpv6_client_custom_options` method from the underlying API (renix).\n        - All sessions must be valid DHCPv6 client session objects that support the `custom_options` method.\n        - Configuration changes take effect immediately upon successful execution of this function.",
  "TesterLibrary.Protocol.dhcpv6.dhcpv6_client_bind": "Binds one or more DHCPv6 client sessions to their respective network interfaces.\n\nThis function ensures that each provided session is properly bound, enabling communication\nover the network for DHCPv6 client operations. If a single session is provided, it will be\nautomatically placed into a list internally for uniform processing.\n\nParameters:\n- Sessions (object or iterable): A single session object or an iterable (list, set, or tuple)\n  of session objects representing the DHCPv6 client sessions to bind. Each session must have\n  a `bind()` method.\n\nReturns:\n- bool: Always returns True, indicating successful binding of all provided sessions.\n\nRaises:\n- TypeError: If any of the provided session objects do not have a `bind()` method, or if the\n  input is not a valid session object or iterable of session objects.\n- ContinuableFailure: If the underlying API call returns False, indicating a failure in\n  binding the sessions.\n\nExample Usage:\n.. code:: RobotFramework\n\n    | Dhcpv6 Client Bind | Sessions=${Sessions} |",
  "TesterLibrary.Protocol.dhcpv6.dhcpv6_client_release": "Releases the specified DHCPv6 client sessions.\n\nThis function is used to release one or more DHCPv6 client sessions by invoking the `release()` method on each session. It accepts either a single session object or a collection (list, set, or tuple) of session objects for batch processing. Each session is processed uniformly by converting it into a list if necessary, and then iterating over the collection to release all provided sessions.\n\nParameters:\n- Sessions (:obj:`Dhcpv6Client` or list/set/tuple of :obj:`Dhcpv6Client`): A single DHCPv6 client session object or a collection of such objects representing the sessions to be released.\n\nReturns:\n- bool: Returns True if the sessions are successfully released, indicating successful execution of the operation. If there is a failure during the release process, a `ContinuableFailure` exception is raised.\n\nExample Usage:\n.. code:: RobotFramework\n\n    | Dhcpv6 Client Release | Sessions=${Sessions} |\n\nNotes:\n- This function ensures efficient handling of both single and multiple session releases.\n- If any session fails to release, the backend may return False, which triggers a `ContinuableFailure` exception to be raised by the framework.\n- The function is typically used in scenarios where DHCPv6 client sessions need to be explicitly terminated and their resources freed.",
  "TesterLibrary.Protocol.dhcpv6.dhcpv6_client_renew": "Renews the DHCPv6 client sessions for the provided session objects.\n\nThis function takes one or more session objects and triggers the renewal process for each of them. If a single session is provided, it is converted into a list to ensure uniform processing. Each session's `renew()` method is called individually via the backend.\n\nIf any of the provided session objects do not have a `renew()` method, a `TypeError` will be raised by the backend.\n\nParameters:\n- Sessions (object or iterable of objects): A single session object or an iterable (list, set, or tuple) of session objects. Each session must have a `renew()` method that handles the actual DHCPv6 renewal logic.\n\nReturns:\n- bool: Always returns True to indicate successful initiation of the renewal process for all provided sessions.\n\nRaises:\n- TypeError: If any of the provided session objects do not have a `renew()` method.\n- ContinuableFailure: If the underlying backend call (`renix.dhcpv6_client_renew`) returns False, indicating a failure in initiating the renewal process.\n\nExample:\n.. code:: RobotFramework\n\n    | Dhcpv6 Client Renew | Sessions=${Sessions} |",
  "TesterLibrary.Protocol.dhcpv6.dhcpv6_client_rebind": "Rebinds one or more DHCPv6 client sessions.\n\nThis function takes a single session object or a collection of session objects\nand invokes the `rebind()` method on each of them. The function ensures that\nall provided sessions are rebound properly.\n\nParameters:\n-----------\nSessions : object or iterable of objects\n    A single session object or an iterable (list, set, tuple) of session objects.\n    Each session object is expected to have a `rebind()` method that performs\n    the actual rebind operation.\n\nReturns:\n--------\nbool\n    Always returns True, indicating that the rebind operation was successfully\n    initiated for all provided sessions.\n\nDescription:\n------------\nThis function is used to trigger the DHCPv6 client rebind operation on one or\nmore session objects. If a single session is provided, it is rebinded directly.\nIf multiple sessions are provided in an iterable, the function iterates through\nthem and rebinds each session in turn.",
  "TesterLibrary.Protocol.dhcpv6.dhcpv6_client_confirm": "Sends a DHCPv6 Confirm message for each session in the provided Sessions parameter to validate the IPv6 address configuration currently assigned to the client.\n\nThis function ensures that the provided Sessions parameter is an iterable (list, set, or tuple). If it's not, it wraps the Sessions value into a list. Then, it iterates through each session and invokes the confirm() method on it.\n\nArgs:\n    Sessions (:obj:`Dhcpv6Client` or list of :obj:`Dhcpv6Client`): A single DHCPv6 client session object or a collection of DHCPv6 client session objects to be confirmed.\n\nReturns:\n    bool: Always returns True, indicating the Confirm messages were successfully sent to all specified sessions.\n\nRaises:\n    ContinuableFailure: If the underlying implementation returns False, indicating a failure in sending the Confirm messages.\n\nDescription:\nThis function is used to validate the IPv6 addresses assigned to DHCPv6 clients by sending Confirm messages to the server via the provided session(s). It abstracts the complexity of handling individual session confirmations and ensures consistent behavior across multiple sessions.\n\nExamples:\n    .. code:: RobotFramework\n\n        | Dhcpv6 Client Confirm | Sessions=${Sessions} |",
  "TesterLibrary.Protocol.dhcpv6.dhcpv6_client_abort": "中断DHCPv6/PD客户端\n\n该函数用于终止一个或多个DHCPv6客户端会话。它接受单个会话对象或多个会话对象的集合，并对每个会话调用`abort()`方法以终止对应的DHCPv6客户端会话。执行成功时返回True。\n\nArgs:\n\n    Sessions (:obj:`Dhcpv6Client` 或 iterable of :obj:`Dhcpv6Client`): \n        表示要终止的DHCPv6客户端会话对象，可以是单个会话对象或者包含多个会话对象的列表、集合或元组。每个会话对象必须实现`abort()`方法，用于执行实际的中止逻辑。\n\nReturns:\n\n    bool: 如果会话被成功中止，则返回True；否则将抛出异常。\n\nRaises:\n\n    ContinuableFailure: 当底层调用返回False时，表示操作失败，将抛出此异常，并附带相应的错误信息。\n\nExamples:\n    .. code:: RobotFramework\n\n        | Dhcpv6 Client Abort | Sessions=${Sessions} |",
  "TesterLibrary.Protocol.dhcpv6.dhcpv6_client_info_request": "Sends an information request to one or more DHCPv6 client sessions.\n\nThis function is used to trigger an information request operation on the specified\nDHCPv6 client session(s). It is typically used to retrieve configuration information\nfrom a DHCPv6 server without performing a full address assignment process.\n\nParameters:\n-----------\nSessions : object or iterable of objects\n    A single DHCPv6 client session object or an iterable (list, set, tuple) of \n    such session objects. Each session must have an `info_request()` method that \n    will be called by this function.\n\nReturns:\n--------\nbool\n    Always returns True to indicate successful initiation of information requests\n    on all provided sessions.\n\nRaises:\n-------\nContinuableFailure\n    If the underlying operation fails (indicated by a False return from the backend),\n    this exception is raised to signal failure while allowing test execution to continue.\n\nNotes:\n------\nThe function internally ensures that the input is treated as a list even if a single\nsession object is provided. It then iterates over the sessions and invokes the \n`info_request()` method on each.",
  "TesterLibrary.Protocol.dhcpv6.dhcpv6_client_lease_query": "Sends a DHCPv6 lease query to one or more specified session objects.\n\nThis function checks if the provided Sessions argument is a single session or a collection\nof sessions. If it's a single session, it converts it into a list for uniform processing.\nIt then iterates over each session and invokes the `lease_query` method with the provided\nkeyword arguments. This function acts as a wrapper to handle multiple sessions efficiently.\n\nParameters:\n    Sessions (Session or list or set or tuple): A single session object or a collection of session\n        objects that support the DHCPv6 lease query operation. Each session must have a `lease_query`\n        method.\n\nKeyword Args:\n    QueryType (str): Leasequery消息中query-type类型, 默认值：QUERY_BY_ADDRESS, 取值范围：\n        QUERY_BY_ADDRESS\n        QUERY_BY_CLIENTID\n\n    ClientAddress (str): 客户端IPv6地址, 默认值：'2000::1', 取值范围：有效的ipv6地址\n\n    ClientId (str): 客户端ID, 默认值：'', 取值范围：匹配正则表达式\"^([0-9a-fA-F]{0,512})$\"\n\nReturns:\n    bool: 布尔值Bool (范围：True / False). 请注意，返回True仅代表方法成功调用lease_query，并不保证实际查询操作的成功。\n\nRaises:\n    TypeError: 如果提供的session对象没有lease_query方法\n    ContinuableFailure: 如果底层调用renix.dhcpv6_client_lease_query返回False，表示租约查询失败\n\nExamples:\n    .. code:: RobotFramework\n\n        | Dhcpv6 Client Lease Query | Sessions=${Sessions} |\n        | Dhcpv6 Client Lease Query | Sessions=${Sessions} | QueryType=QUERY_BY_CLIENTID | ClientId=000100011a3b4c5d |",
  "TesterLibrary.Protocol.dhcpv6.dhcpv6_client_bulk_lease_query": "Perform a bulk lease query operation on one or more DHCPv6 client sessions.\n\nThis function sends a bulk lease query request to the DHCPv6 server through the specified\nsession(s), retrieving lease information for assigned IPv6 addresses in bulk.\n\nArgs:\n\n    Sessions (:obj:`Dhcpv6Client` or list): A single DHCPv6 client session or a list of sessions over which the bulk lease query will be executed.\n\nKeyword Args:\n\n    QueryType (str): The query-type in the Bulk Leasequery message. Default: 'QUERY_BY_ADDRESS'. Valid values are:\n        QUERY_BY_ADDRESS\n        QUERY_BY_CLIENTID\n        QUERY_BY_RELAY_ID\n        QUERY_BY_LINK_ADDRESS\n        QUERY_BY_REMOTE_ID\n\n    ClientAddress (str): The specified client IPv6 address. Default: '2000::1'. Must be a valid IPv6 address.\n\n    ClientId (str): The client ID. Default: ''. Must match the regular expression \"^([0-9a-fA-F]{0,512})$\".\n\n    RelayIdentifier (str): The relay agent identifier. Default: ''. Must match the regular expression \"^([0-9a-fA-F]{0,512})$\".\n\n    LinkAddress (str): The link address. Default: '2000::1'. Must be a valid IPv6 address.\n\n    RemoteId (str): The relay agent Remote-ID value. Default: ''\n\nReturns:\n\n    bool: True if the bulk lease query command was successfully issued on all provided sessions. If an error occurs during execution, it may raise exceptions instead of returning False.\n\nRaises:\n\n    TypeError: If any of the provided sessions do not have the `bulk_lease_query` method.\n\nNotes:\n\n    - This function uses the `@abnormal_check()` decorator, which may handle or raise exceptions in case of abnormal conditions during execution.\n    - Each session in `Sessions` must support the `bulk_lease_query` method for this function to execute successfully.\n\nExamples:\n\n    .. code:: RobotFramework\n\n        | Dhcpv6 Client Bulk Lease Query | Sessions=${Sessions} |",
  "TesterLibrary.Protocol.dhcpv6.dhcpv6_client_active_lease_query": "Sends an active lease query to one or more DHCPv6 client sessions to retrieve current lease information from the server.\n\nThis function checks if the provided Sessions argument is a single session or a collection of sessions. It then iterates over each session and invokes the `active_lease_query()` method on it.\n\nArgs:\n    Sessions (:obj:`Dhcpv6Client` or list of :obj:`Dhcpv6Client`): A single DHCPv6 client session object or an iterable (list, set, tuple) of multiple session objects. Each session must have an `active_lease_query()` method.\n\nReturns:\n    bool: Always returns True, indicating that the operation was successfully initiated on all provided sessions.\n\nRaises:\n    ContinuableFailure: If the result of the operation is False, an exception is raised with a failure message.\n\nDescription:\nThis function is used in DHCPv6 testing scenarios to actively query the server for lease information associated with one or more client sessions. It ensures that each session performs its own `active_lease_query()`, which presumably communicates with the DHCPv6 server and updates the session's lease state accordingly.\n\nExamples:\n    .. code:: RobotFramework\n\n        | Dhcpv6 Client Active Lease Query | Sessions=${Sessions} |",
  "TesterLibrary.Protocol.dhcpv6.dhcpv6_client_start_tls": "Starts TLS communication for one or more DHCPv6 client sessions.\n\nThis function initiates TLS for each provided DHCPv6 client session. It can accept either a single session object or a collection of session objects (such as a list, set, or tuple). Each session must have a `start_tls()` method that performs the TLS initiation for that specific session.\n\nIf any session does not have the required `start_tls()` method, an `AttributeError` will be raised. Similarly, if the input type is invalid (i.e., not a session object or an iterable of session objects), a `TypeError` will be raised.\n\nUpon successful execution, this function returns `True` to indicate that the TLS initiation operation was attempted on all provided sessions.\n\nParameters:\n    Sessions (object or iterable): A single Dhcpv6Client session object or an iterable containing multiple session objects.\n\nReturns:\n    bool: Always returns True to indicate the operation was attempted for all provided sessions.\n\nRaises:\n    AttributeError: If any of the session objects do not have a `start_tls()` method.\n    TypeError: If the input is not a session object or an iterable of session objects.\n\nExample:\n    .. code:: RobotFramework\n\n        | Dhcpv6 Client Start Tls | Sessions=${Sessions} |",
  "TesterLibrary.Protocol.dhcpv6.edit_dhcpv6_client_port_config": "修改DHCPv6客户端端口配置。\n\n该函数用于为一个或多个指定的测试仪表端口对象编辑DHCPv6客户端端口配置。对于每个提供的端口，它会获取其关联的`Dhcpv6PortRateConfig`配置对象，并根据传入的关键字参数对配置进行修改。\n\n参数：\n    Ports (list or object): 测试仪表端口对象或端口对象列表。如果传递的是单个端口对象，则处理一个端口；如果是多个端口组成的列表，则批量处理。\n    **kwargs: 任意数量的关键字参数，表示需要修改的DHCPv6端口配置属性。这些参数应对应于`Dhcpv6PortRateConfig`类的有效可编辑属性。支持的参数包括但不限于：\n        - RequestRate (int): Request消息速率（会话/秒），取值范围：1-10000，默认值：100\n        - ReleaseRate (int): Release消息速率（会话/秒），取值范围：1-10000，默认值：100\n        - RenewRate (int): Renew消息速率（会话/秒），取值范围：1-10000，默认值：100\n        - MaxOutstanding (int): 最大会话数，取值范围：1-2048，默认值：1000\n        - SolicitInitialTimeout (int): Solicit消息初始超时时间（秒），取值范围：1-99999，默认值：5\n        - SolicitMaxTimeout (int): Solicit消息最大超时时间（秒），取值范围：1-99999，默认值：120\n        - SolicitRetryCount (int): Solicit消息重发次数，取值范围：0-32，默认值：10\n        - SolicitIndefiniteRetry (bool): 是否无限次重发Solicit消息，默认值：False\n        - SolicitDisableRetries (bool): 是否禁止重发Solicit消息，默认值：False\n        - RequestInitialTimeout (int): Request消息初始超时时间（秒），取值范围：1-99999，默认值：2\n        - RequestMaxTimeout (int): Request消息最大超时时间（秒），取值范围：1-99999，默认值：30\n        - RequestRetryCount (int): Request消息重发次数，取值范围：0-32，默认值：10\n        - RequestIndefiniteRetry (bool): 是否无限次重发Request消息，默认值：False\n        - RequestDisableRetries (bool): 是否禁止重发Request消息，默认值：False\n        - ConfirmInitialTimeout (int): Confirm消息初始超时时间（秒），取值范围：1-99999，默认值：2\n        - ConfirmMaxTimeout (int): Confirm消息最大超时时间（秒），取值范围：1-99999，默认值：4\n        - ConfirmMaxDuration (int): Confirm消息最大重发次数，取值范围：0-32，默认值：5\n        - RenewInitialTimeout (int): Renew消息初始超时时间（秒），取值范围：0-32，默认值：10\n        - RenewMaxTimeout (int): Renew消息最大超时时间（秒），取值范围：1-99999，默认值：600\n        - RenewRetryCount (int): Renew消息重发次数，取值范围：0-32，默认值：5\n        - RenewIndefiniteRetry (bool): 是否无限次重发Renew消息，默认值：False\n        - RenewDisableRetries (bool): 是否禁止重发Renew消息，默认值：False\n        - RebindInitialTimeout (int): Rebind消息初始超时时间（秒），取值范围：1-99999，默认值：10\n        - RebindMaxTimeout (int): Rebind消息最大超时时间（秒），取值范围：1-99999，默认值：600\n        - RebindRetryCount (int): Rebind消息重发次数，取值范围：0-32，默认值：5\n        - RebindIndefiniteRetry (bool): 是否无限次重发Rebind消息，默认值：False\n        - RebindDisableRetries (bool): 是否禁止重发Rebind消息，默认值：False\n        - ReleaseInitialTimeout (int): Release消息初始超时时间（秒），取值范围：1-99999，默认值：1\n        - ReleaseRetryCount (int): Release消息重发次数，取值范围：0-32，默认值：3\n        - ReleaseIndefiniteRetry (bool): 是否无限次重发Release消息，默认值：False\n        - ReleaseDisableRetries (bool): 是否禁止重发Release消息，默认值：False\n        - DeclineInitialTimeout (int): Decline消息初始超时时间（秒），取值范围：1-99999，默认值：1\n        - DeclineRetryCount (int): Decline消息重发次数，取值范围：0-32，默认值：5\n        - DeclineIndefiniteRetry (bool): 是否无限次重发Decline消息，默认值：False\n        - DeclineDisableRetries (bool): 是否禁止重发Decline消息，默认值：False\n        - InfoRequestInitialTimeout (int): Information-Request消息初始超时时间（秒），取值范围：1-99999，默认值：1\n        - InfoRequestMaxTimeout (int): Information-Request消息最大超时时间（秒），取值范围：1-99999，默认值：120\n        - InfoRequestRetryCount (int): Information-Request消息重发次数，取值范围：0-32，默认值：5\n        - InfoRequestIndefiniteRetry (bool): 是否无限次重发Information-Request消息，默认值：False\n        - InfoRequestDisableRetries (bool): 是否禁止重发Information-Request消息，默认值：False\n        - TcpServerPort (int): TCP服务端口号，取值范围：1-65535，默认值：547\n\n返回值：\n    (:obj:`Dhcpv6PortRateConfig` or list of :obj:`Dhcpv6PortRateConfig`): 如果输入只有一个端口对象，则返回对应的修改后的`Dhcpv6PortRateConfig`对象；如果输入是多个端口，则返回包含每个端口对应的修改后配置对象的列表。\n\n示例：\n    .. code:: RobotFramework\n\n        | Edit Dhcpv6 Client Port Config | Ports=${Port} | TcpServerPort=10 |",
  "TesterLibrary.Protocol.dhcpv6.wait_dhcpv6_client_state": "等待DHCPv6客户端会话达到指定状态。\n\n该函数定期检查一个或多个DHCPv6客户端会话的状态，直到它们达到指定的目标状态或超过超时时间。\n\n参数:\n    Sessions (object 或 可迭代对象): 一个或多个表示DHCPv6客户端会话的对象。可以是单个会话对象或包含多个会话对象的列表、集合或元组。\n\n    State (str, optional): 目标状态，默认为 \"BOUND\"。支持以下状态：\n\n        DISABLED\n\n        IDLE\n\n        BOUND\n\n        SOLICITING\n\n        REQUESTING\n\n        RELEASING\n\n        RENEWING\n\n        REBINDING\n\n    Interval (int 或 float, optional): 状态检查的时间间隔（单位：秒），默认值为 1 秒。\n\n    TimeOut (int 或 float, optional): 等待状态的最大时间（单位：秒），默认值为 60 秒。如果在指定时间内未达到目标状态，可能会抛出异常，具体取决于底层实现。\n\n返回:\n    bool: 如果所有会话都成功达到目标状态，则返回 True；否则根据底层实现可能抛出异常。\n\n异常:\n    Exception: 如果任意一个会话在指定的超时时间内未能达到目标状态，可能会抛出异常。\n\n示例:\n    .. code:: RobotFramework\n\n        | Wait Dhcpv6 Client State | Sessions=${Sessions} | State=BOUND | Interval=2 | TimeOut=120 |",
  "TesterLibrary.Protocol.dhcpv6.wait_dhcpv6_pd_client_state": "等待Dhcpv6 PD客户端会话达到指定状态\n\nArgs:\n\n    Sessions (:obj:`Dhcpv6Client` or list): DHCPv6 PD客户端会话对象或对象列表，用于指定需要监控的一个或多个会话。\n\n    State (str, optional): 等待DHCPv6 PD客户端会话达到的目标状态。默认值为\"BOUND\"。支持以下状态：\n\n        DISABLED\n\n        IDLE\n\n        BOUND\n\n        SOLICITING\n\n        REQUESTING\n\n        RELEASING\n\n        RENEWING\n\n        REBINDING\n\n    Interval (int, optional): 查询DHCPv6会话状态的间隔时间，单位为秒，默认值为1秒。\n\n    TimeOut (int, optional): 等待协议会话状态的超时时间，单位为秒，默认值为60秒。\n\nReturns:\n\n    bool: 如果所有提供的会话在超时时间内达到了指定的状态，则返回True；否则返回False，并抛出异常。\n\nDescription:\n\n    该函数用于等待一个或多个DHCPv6 Prefix Delegation (PD)客户端会话达到指定的状态。它封装了对每个会话调用底层函数`wait_session_pd_state`的过程，并传递给定的状态、查询间隔和超时参数。如果传入的是单个会话对象，则内部将其转换为列表以进行统一处理。\n\nExamples:\n    .. code:: RobotFramework\n\n        | Wait Dhcpv6 Pd Client State | Sessions=${Sessions} | State=BOUND | Interval=2 | TimeOut=120 |",
  "TesterLibrary.Protocol.dhcpv6.get_dhcpv6_port_statistic": "获取Dhcpv6 Port Statistic统计结果\n\n该函数用于检索一个或多个指定端口上的DHCPv6协议端口级统计信息，支持查询单个端口、多个端口（以列表/集合/元组形式提供），并可指定需要获取的统计项。若未指定具体统计项，则默认返回所有可用统计属性。\n\nArgs:\n    Port (object or list or set or tuple of objects, optional):\n        测试仪表端口对象或其集合，每个对象应包含标识符属性`handle`。\n        若为None，则不按端口过滤，查询所有相关端口的统计信息。\n    \n    StaItems (list or str, optional):\n        需要获取的DHCPv6端口统计项，类型为列表或字符串。目前支持以下统计项：\n\n            CurrentlyAttempting\n            CurrentlyIdl\n            CurrentlyBound\n            AverageSetupTime\n            MaxSetupTime\n            MinSetupTime\n            SolicitTxCount\n            RequestTxCount\n            ReleaseTxCount\n            RenewTxCount\n            RebindTxCount\n            ConfirmTxCount\n            InfoRequestTxCount\n            AdvertiseRxCount\n            ReconfigureRxCount\n            ReplyRxCount\n            SuccessPercentage\n            TotalAttempted\n            TotalBound\n            TotalBoundFailed\n            TotalRebound\n            TotalReleased\n            TotalReleaseRetried\n            TotalRenewed\n            TotalRenewedRetried\n            TotalRetired\n\n        若为字符串，则自动转换为包含该字符串的列表；\n        若为None，默认查询所有可用统计项。\n\nReturns:\n    dict or pd.DataFrame or bool:\n        - 如果仅匹配到一行数据（如单个端口且统计项唯一）：返回字典，键为统计项名称，值为对应数值；\n        - 如果匹配到多行数据（如多个端口）：返回pandas DataFrame，每行代表一个端口的统计信息，列根据StaItems筛选；\n        - 如果未找到匹配结果：返回False。\n\nRaises:\n    ContinuableFailure: 当底层调用失败时抛出可继续执行的异常；\n    TesterException: 可能传播在命令执行或数据检索过程中引发的异常；\n    sqlite3.Error: 如果数据库访问过程中发生错误；\n    KeyError: 如果过滤条件中包含不存在于结果中的列名。\n\nSide Effects:\n    - 内部调用 `_get_statictis()` 方法可能会刷新或更新数据；\n    - 在分页获取结果时会执行导航命令 GotoResultPageCommand；\n    - 为了调试目的，日志中会记录DataFrame内容，并以表格格式输出。\n\nExamples:\n    .. code:: RobotFramework\n\n        | @{StaItems} | Create List | TotalRenewed | TotalReleased |\n        | Subscribe Result | Types=Dhcpv6PortStatistics |\n        | Start Protocol |\n        | Sleep | 60 |\n        | &{Result} | Get Dhcpv6 Port Statistic | Port=${Port} | StaItems=@{StaItems} |\n        | Log Dictionary | ${Result} |\n        | Clear Result |",
  "TesterLibrary.Protocol.dhcpv6.get_dhcpv6_client_statistic": "获取Dhcpv6 Client Statistic统计结果\n\n该函数用于根据会话信息、会话索引和指定的统计项检索DHCPv6客户端相关的统计信息。它封装了内部 `_get_statictis` 方法，专门用于获取 DHCPv6 客户端统计数据。\n\n参数说明：\n\n- Session (:obj:`Dhcpv6Client` 或 list/set/tuple, optional): Dhcpv6客户端会话对象或多个会话对象的集合。\n  如果为 None，则不进行会话过滤，默认值为 None。\n  \n- Id (int, optional): 指定的会话索引，通常用于标识特定测试场景或实例，默认值为 1。\n\n- StaItems (list or str or None, optional): 需要获取的统计项列表。可选字段包括：\n\n    - IaidValue\n    - MacAddr\n    - LeaseRx\n    - AddressType\n    - SessionState\n    - StateCode\n    - IpAddress\n    - LeaseRemaining\n    - PrefixLength\n    - RequestResponseTime\n    - SolicitResponseTime\n\n  如果为 None，则返回所有可用统计项；如果为字符串，则自动转换为包含该字符串的列表。\n\n返回值：\n\n- dict: 当找到唯一匹配的统计行时，返回一个字典，键为请求的 StaItems，值为其对应的统计值。\n- pd.DataFrame: 当匹配多行统计结果时，返回一个 pandas DataFrame，包含所有匹配的行。\n- bool: 当没有找到匹配结果时，返回 False。\n\n异常说明：\n\n- TesterException: 可能抛出由内部命令执行或数据检索引发的异常。\n- sqlite3.Error: 若数据库访问过程中出现错误。\n- KeyError: 若指定的列名在返回的 DataFrame 中不存在。\n\n副作用：\n\n- 内部调用 `_get_statictis()` 方法，可能刷新或更新内部状态以确保统计数据准确性。\n- 如需翻页获取分页数据，会执行类似 GotoResultPageCommand 的操作。\n- 在页面切换之间使用 time.sleep(3) 确保数据一致性。\n- 日志中会记录以表格形式打印的调试信息。\n\n示例：\n\n.. code:: RobotFramework\n\n    | @{StaItems} | Create List | AdjacencyState | TxUpdate |\n    | Subscribe Result | Types=Dhcpv6ClientStatistics |\n    | Start Protocol |\n    | Sleep | 60 |\n    | &{Result} | Get Dhcpv6 Client Statistic | Session=${Session} | StaItems=@{StaItems} |\n    | Clear Result |",
  "TesterLibrary.Protocol.dhcpv6.get_dhcpv6_client_block_statistic": "获取Dhcpv6 Client Block Statistic统计结果\n\n该函数用于检索DHCPv6客户端块的统计信息。它基于提供的会话标识符和指定的统计项，调用底层方法 `_get_statictis` 来获取数据，并支持对会话进行过滤。\n\nArgs:\n    Session (object or list or set or tuple of objects, optional): \n        会话对象或对象集合，其 `Name` 属性将被用作过滤 DHCPv6 客户端块统计信息的会话 ID。\n        - 如果为 None，则不进行会话过滤。\n        - 如果是单个对象，则使用其 Name 属性作为会话 ID。\n        - 如果是多个对象的集合，则收集它们的 Name 属性形成一个会话 ID 列表。\n        默认值：None\n\n    StaItems (list or str or None, optional): \n        指定需要获取的统计项（列名），必须是 'Dhcpv6ClientBlockStatistics' 中存在的属性子集。\n        - 如果为 None，则统计项由 ROM 属性自动确定。\n        - 如果是字符串，则会被转换为包含该字符串的列表。\n        默认值：None\n\n        支持的统计项包括：\n        \n        BlockSessionState\n        CurrentlyAttempting\n        CurrentlyIdl\n        CurrentlyBound\n        AttemptRate\n        BindRate\n        RebindRate\n        ReleaseRate\n        RenewRate\n        AverageRebindToReplyTime\n        AverageReleaseToReplyTime\n        AverageRenewToReplyTime\n        AverageRequestToReplyTime\n        AverageSolicitToAdvertiseTime\n        AverageSolicitToReplyTime\n        MaxRebindToReplyTime\n        MaxReleaseToReplyTime\n        MaxRenewToReplyTime\n        MaxRequestToReplyTime\n        MaxSolicitToAdvertiseTime\n        MaxSolicitToReplyTime\n        MinRebindToReplyTime\n        MinReleaseToReplyTime\n        MinRenewToReplyTime\n        MinRequestToReplyTime\n        MinSolicitToAdvertiseTime\n        MinSolicitToReplyTime\n        AdvertiseRxCount\n        ReplyRxCount\n        ReconfigureRxCount\n        SolicitTxCount\n        RequestTxCount\n        ReleaseTxCount\n        RenewTxCount\n        RebindTxCount\n        ConfirmTxCount\n        InfoRequestTxCount\n        TotalAttempted\n        TotalBound\n        TotalFailed\n        TotalRebound\n        TotalReleased\n        TotalReleaseRetried\n        TotalRenewed\n        TotalRenewedRetried\n        TotalRetired\n\nReturns:\n    dict or pd.DataFrame or bool:\n        - 如果找到唯一一行匹配的数据，返回一个字典，键为请求的统计项（StaItems），值为对应的统计值。\n        - 如果找到多行匹配的数据，返回一个 pandas DataFrame，包含所有匹配的行。\n        - 如果没有找到任何匹配的数据，返回 False。\n\nRaises:\n    TesterException: 在执行命令或从视图中检索数据期间可能抛出异常。\n    sqlite3.Error: 如果在性能相关统计检索过程中发生数据库访问错误。\n    KeyError: 如果索引列（Idx）中的列名在结果 DataFrame 中不存在。\n\nSide Effects:\n    - 内部可能会通过 `.get()` 调用刷新数据状态。\n    - 如果存在分页结果，可能会执行 GotoResultPageCommand 来导航到对应页面。\n    - 在调试模式下，会记录返回的 DataFrame 用于分析。\n\nExamples:\n    .. code:: RobotFramework\n\n        | @{StaItems} | Create List | TotalRenewed | TotalReleased |\n        | Subscribe Result | Types=Dhcpv6ClientBlockStatistics |\n        | Start Protocol |\n        | Sleep | 60 |\n        | &{Result} | Get Dhcpv6 Client Block Statistic | Session=${Session} | StaItems=@{StaItems} |\n        | Log Dictionary | &{Result} |\n        | Clear Result |",
  "TesterLibrary.Protocol.dhcpv6.get_dhcpv6_pd_client_statistic": "获取Dhcpv6 PD Client Statistic统计结果\n\n该函数用于查询DHCPv6前缀委派（Prefix Delegation）客户端的统计信息。它封装了底层的 `_get_statictis` 方法，支持通过会话对象和会话索引过滤统计结果，并可指定需要返回的统计项。\n\n参数说明:\n\n    Session (object 或 list/set/tuple, 可选): 表示DHCPv6 PD客户端会话的对象或对象集合。如果为None，则不进行会话过滤。\n                                            如果提供了多个会话对象，将提取它们的名称用于过滤。\n                                            默认值: None\n\n    Id (int, 可选): 会话索引，用于在存在多个会话时进一步过滤统计数据。\n                  默认值: 1\n\n    StaItems (list 或 str 或 None, 可选): 指定要获取的统计项列表。可以是一个字符串（会被转换为列表），也可以是包含多个统计项的列表。\n                                        如果为None，则返回所有可用统计项。必须是支持的统计项子集。\n                                        支持的统计项包括：\n\n                                            Dhcpv6PdClientId\n                                            IaidValue\n                                            SessionIndex\n                                            MacAddr\n                                            VlanId\n                                            LeaseRx\n                                            AddressType\n                                            SessionState\n                                            StateCode\n                                            IpAddress\n                                            LeaseRemaining\n                                            PrefixLength\n                                            RequestResponseTime\n                                            SolicitResponseTime\n\n返回值:\n\n    - 如果找到唯一匹配的统计行，返回一个字典，键为 `StaItems` 中指定的统计项，值为其对应的统计值。\n    - 如果匹配多行统计结果，返回一个 pandas DataFrame，包含所有匹配的记录。\n    - 如果没有找到匹配结果，返回 False。\n\n异常说明:\n\n    - TesterException: 在命令执行或数据检索过程中可能发生此异常。\n    - sqlite3.Error: 如果数据库访问出错（如底层涉及数据库操作）。\n    - KeyError: 如果提供的列名在最终的DataFrame中不存在。\n\n副作用:\n\n    - 内部可能会调用 `.get()` 方法刷新数据状态。\n    - 执行类似 GotoResultPageCommand 的命令来处理分页结果。\n    - 使用 time.sleep(3) 等待数据同步以确保一致性。\n    - 将结果 DataFrame 格式化输出日志用于调试。\n\n使用示例:\n    .. code:: RobotFramework\n\n        | @{StaItems} | Create List | RequestResponseTime | SolicitResponseTime |\n        | Subscribe Result | Types=Dhcpv6PdClientStatistics |\n        | Start Protocol |\n        | Sleep | 60 |\n        | &{Result} | Get Dhcpv6 Pd Client Statistic | Session=${Session} | Id=1 | StaItems=@{StaItems} |\n        | Clear Result |",
  "TesterLibrary.Protocol.dhcpv6.create_dhcpv6_server": "创建DHCPv6服务端会话对象，并将其与指定的端口关联。\n\n该函数用于初始化一个Dhcpv6Server实例，将其与提供的端口对象建立逻辑连接，并根据提供的配置参数进行设置。创建的服务端实例会被注册到全局协议对象映射表中，以便后续引用和操作。\n\n参数:\n    Port (:obj:`Port`): 测试仪表端口对象，表示DHCPv6服务端将绑定到的物理或逻辑端口。\n\n关键字参数 (**kwargs):\n\n    Name (str): DHCPv6服务端会话名称，默认为自动生成的唯一名称。\n\n    Enable (bool): 是否启用DHCPv6服务端会话，默认值：True。\n\n    EmulationMode (str): 模拟模式，可选值包括：\n        DHCPV6 - 标准DHCPv6服务；\n        DHCPV6PD - 前缀委托模式（Prefix Delegation）；\n        默认值：DHCPV6。\n\n    RenewalTimer (int): T1租约更新时间百分比，取值范围：1-200，默认值：50。\n\n    RebindingTimer (int): T2租约更新时间百分比，取值范围：1-200，默认值：80。\n\n    DnsList (str): DNS服务器IPv6地址列表，默认值：\"::\"。\n\n    EnableDelayedAuth (bool): 是否启用延迟认证，默认值：False。\n\n    DhcpRealm (str): DHCP认证域名，默认值：\"xinertel.com\"。\n\n    AuthenticationKeyId (int): 认证密钥ID，取值范围：0-4294967295，默认值：0。\n\n    AuthenticationKey (str): 认证密钥值，默认为空字符串。\n\n    AuthenticationKeyType (str): 认证密钥类型，可选值：\n        ASCII - 明文ASCII字符串；\n        HEX - 十六进制格式；\n        默认值：ASCII。\n\n    EnabledReconfigureKey (bool): 是否启用重新配置认证功能，默认值：False。\n\n    ReconfigureKey (str): 重新配置使用的密钥值，默认为空字符串。\n\n    ReconfigureKeyType (str): 重新配置密钥类型，可选值：\n        ASCII\n        HEX\n        默认值：ASCII。\n\n    EnabledDhcpv6Only (bool): 是否仅启用DHCPv6协议而不启用其他相关协议，默认值：False。\n\n    EnabledTcp (bool): 是否启用TCP传输，默认值：False。\n\n    TcpPort (int): TCP监听端口号，取值范围：1-65535，默认值：547。\n\n    LeaseQueryStatusCode (str): 租约查询响应状态码，可选值：\n        SUCCESS\n        UNKNOWN_QUERY_TYPE\n        MALFORMED_QUERY\n        NOT_CONFIGURED\n        NOT_ALLOWED\n        默认值：SUCCESS。\n\n    BulkLeaseQueryStatusCode (str): 批量租约查询响应状态码，额外支持：\n        QUERY_TERMINATED\n        默认值：SUCCESS。\n\n    ActiveLeaseQueryStatusCode (str): 活动租约查询响应状态码，额外支持：\n        QUERY_TERMINATED\n        DATA_MISSING\n        CATCH_UP_COMPLETE\n        NOT_SUPPORTED\n        默认值：SUCCESS。\n\n    StartTlsStatusCode (str): TLS启动响应状态码，可选值：\n        SUCCESS\n        TLS_CONNECTION_REFUSED\n        默认值：SUCCESS。\n\n返回值:\n    (:obj:`Dhcpv6Server`): 创建并配置完成的DHCPv6服务端会话对象。\n\n异常:\n    如果创建失败，则抛出ContinuableFailure异常。\n\n示例:\n    .. code:: RobotFramework\n\n        | Create Dhcpv6 Server | Port=${Port} | DadTransmits=10 |\n\n副作用:\n    - 修改全局变量`map_protocol_object`，添加或更新对应句柄的Dhcpv6Server实例记录。",
  "TesterLibrary.Protocol.dhcpv6.create_dhcpv6_server_custom_options": "Configures custom DHCPv6 server options for one or more session objects.\n\n    Parameters:\n        Sessions (object or iterable of objects): A single session object or a collection\n                                                  (list, set, tuple) of session objects\n                                                  for which DHCPv6 server custom options\n                                                  will be configured. If a single session\n                                                  is provided, it will be converted into\n                                                  a list internally.\n\n        **kwargs: Arbitrary keyword arguments representing the custom options to be set.\n                  These are passed directly to the `custom_options` method of each session\n                  object. The valid keys and their meanings depend on the session's implementation,\n                  but they typically correspond to DHCPv6 option fields such as option codes,\n                  values, or other configuration parameters.\n\n    Description:\n        This function iterates over each session in the `Sessions` parameter and invokes\n        the `custom_options` method with the provided `**kwargs`. It collects the resulting\n        configurations and returns them. This method serves as a wrapper that simplifies\n        setting custom DHCPv6 server options across multiple sessions simultaneously.\n\n    Returns:\n        object or list of objects: If a single session is provided, returns the result of\n                                   its `custom_options` call directly (the configuration object).\n                                   If multiple sessions are provided, returns a list containing\n                                   the configuration objects for each session in the same order\n                                   as input.",
  "TesterLibrary.Protocol.dhcpv6.create_dhcpv6_server_address_pool": "Configures a DHCPv6 server address pool for one or more session objects.\n\nThis function provides a unified interface to configure DHCPv6 server address pools. It supports both single and multiple session inputs, automatically adapting the output format accordingly — returning a single configuration object for one session or a list of configuration objects for multiple sessions.\n\n### Purpose\nTo create and configure a DHCPv6 server address pool with customizable parameters for IPv6 address allocation, including prefix settings, assignment mode, lease lifetimes, and IAID ranges.\n\n### Parameters\n\n**Sessions** (`object` or `iterable`):  \nA single session object (of type `Dhcpv6Server`) or an iterable (list, set, tuple) containing multiple session objects for which the DHCPv6 address pool will be configured.\n\n**\\*\\*kwargs (Keyword Arguments)**:  \nArbitrary keyword arguments used to configure the address pool. Available options include:\n\n- **PrefixLength** (`int`): Prefix length for the IPv6 address pool. Range: 0–128. Default: `64`.\n- **AssignMode** (`str`): Address assignment mode. Valid values: `'CUSTOM'`, `'EUI64'`. Default: `'SUCCESS'`.\n- **StartAddress** (`str`): Starting IPv6 address of the pool. Default: `\"2001::1\"`.\n- **HostStep** (`str`): Step increment between allocated IPv6 addresses. Default: `\"::1\"`.\n- **AddressCount** (`int`): Total number of addresses in the pool. Range: 1–4294967295. Default: `65535`.\n- **PreferredLifetime** (`int`): Preferred lifetime of assigned addresses in seconds. Range: 0–4294967295. Default: `604800`.\n- **ValidLifetime** (`int`): Maximum valid lifetime of assigned addresses in seconds. Range: 0–4294967295. Default: `2592000`.\n- **MinIaidValue** (`int`): Minimum IAID value for client identification. Range: 0–4294967295. Default: `0`.\n- **MaxIaidValue** (`int`): Maximum IAID value for client identification. Range: 0–4294967295. Default: `4294967295`.\n\n### Returns\n`object` or `list`:  \nIf a single session is provided, returns a single `Dhcpv6AddressPoolsConfig` object representing the created address pool configuration.  \nIf multiple sessions are provided, returns a list of `Dhcpv6AddressPoolsConfig` objects — one per session.\n\n### Example Usage (Robot Framework)\n\n```robotframework\n| ${Dhcpv6} | Create Dhcpv6 Server | Port=${Port} |\n| Create Dhcpv6 Server Address Pool | Sessions=${Dhcpv6} | MinIaidValue=10 |\n```\n\n### Notes\n- The function internally converts non-list session inputs into a list for uniform processing.\n- If any session fails during configuration, a `ContinuableFailure` exception is raised.\n- This function wraps the backend `renix.dhcpv6_server_address_pool()` method and propagates its behavior.",
  "TesterLibrary.Protocol.dhcpv6.create_dhcpv6_server_prefix_pool": "创建DHCPv6 Server Prefix Pool对象，用于配置或获取DHCPv6服务端的前缀池。\n\n参数：\n\n    Sessions (:obj:`Dhcpv6Server` 或 list): DHCPv6服务端会话对象，可以是单个会话对象或包含多个会话对象的列表。\n\n关键字参数（**kwargs）:\n\n    PrefixLength (int): 前缀池中IPv6前缀的长度，取值范围：0-128，默认值：64\n\n    PrefixPoolStart (str): 前缀池起始IPv6地址，默认值：\"2001::1\"\n\n    PrefixPoolStep (str): 每次分配IPv6地址块时的步进值，默认值：\"0:0:0:1::\"\n\n    PrefixAddressCount (int): 前缀池中可用地址的总数，取值范围：1-65535，默认值：16\n\n    PreferredLifetime (int): 最优租期时间（单位：秒），取值范围：0-4294967295，默认值：604800\n\n    ValidLifetime (int): 有效租期时间（单位：秒），取值范围：0-4294967295，默认值：2592000\n\n    MinIaidValue (int): 分配给客户端的最小IAID值，取值范围：0-4294967295，默认值：0\n\n    MaxIaidValue (int): 分配给客户端的最大IAID值，取值范围：0-4294967295，默认值：4294967295\n\n返回值：\n\n    (:obj:`Dhcpv6PrefixPoolsConfig`): 返回一个DHCPv6 Server Prefix Pool配置对象。如果传入的是单个会话，则返回单个配置对象；如果是多个会话，则返回配置对象的列表。\n\n示例：\n    .. code:: RobotFramework\n\n        | ${Dhcpv6} | Create Dhcpv6 Server | Port=${Port} |\n        | Create Dhcpv6 Server Prefix Pool | Sessions=${Dhcpv6} | MinIaidValue=10 |\n\n说明：\n    如果传入的Sessions是一个会话列表，该函数会对每个会话依次应用prefix_pool配置，并将结果收集到一个列表中返回。如果只有一个会话，则直接返回该会话的配置结果。",
  "TesterLibrary.Protocol.dhcpv6.dhcpv6_server_start": "启动DHCPv6服务端\n\nArgs:\n\n    Sessions (object or iterable of objects): DHCPv6服务端会话对象。可以是一个单一会话对象，也可以是多个会话对象的可迭代结构（如 list、set 或 tuple）。每个会话对象应包含一个 `start_server()` 方法，用于启动该会话对应的DHCPv6服务器。\n\nReturns:\n\n    bool: 布尔值，表示操作是否成功发起。若所有提供的会话均成功启动DHCPv6服务器，则返回 True；如果在调用底层方法时返回 False，则抛出 ContinuableFailure 异常。\n\nRaises:\n\n    ContinuableFailure: 当底层实现返回 False 时，表示至少一个会话未能成功启动DHCPv6服务器。\n\nDescription:\n\n    该函数用于为指定的一个或多个会话启动DHCPv6服务器。如果传入的是单个会话对象，内部会被转换为列表以便统一处理。函数依次调用每个会话的 `start_server()` 方法。无论会话数量多少，只要所有操作被成功发起，就返回 True。如果底层实现返回 False，则抛出异常以供上层处理错误。\n\nExamples:\n    .. code:: RobotFramework\n\n        | Dhcpv6 Server Start | Sessions=${Sessions} |",
  "TesterLibrary.Protocol.dhcpv6.dhcpv6_server_stop": "Stops one or more DHCPv6 server sessions.\n\n    Parameters:\n    -----------\n    Sessions : object or iterable of objects\n        A single session object or an iterable (list, set, tuple) of session objects\n        representing the DHCPv6 servers to stop. Each session must have a 'stop_server'\n        method that is called to stop the corresponding server.\n\n    Returns:\n    --------\n    bool\n        Always returns True, indicating that the operation to stop the server(s) was completed.\n\n    Description:\n    ------------\n    This function stops the DHCPv6 server(s) associated with the provided session(s).\n    If a single session is provided, it is placed into a list for uniform processing.\n    The function then iterates through each session and invokes its 'stop_server' method.\n\n    Raises:\n    -------\n    ContinuableFailure\n        If the result of stopping the DHCPv6 server is False, a ContinuableFailure exception is raised,\n        indicating that the operation failed. This allows integration with test frameworks where\n        failures should not immediately halt execution but be handled gracefully.\n\n    Examples:\n    ---------\n    .. code:: RobotFramework\n\n        | Dhcpv6 Server Stop | Sessions=${Sessions} |",
  "TesterLibrary.Protocol.dhcpv6.dhcpv6_server_reconfigure_renew": "Reconfigures and renews the specified DHCPv6 server sessions.\n\nThis function is used to trigger a renewal process for one or more DHCPv6 server sessions, typically to update configurations or lease information. It accepts a single session object or an iterable (list, set, or tuple) of session objects, ensures they are in list format, and then calls the `renew()` method on each session to initiate the reconfiguration and renewal process.\n\nEach session object is expected to have a `renew()` method that performs the actual renewal logic. If any session object does not have this method, an AttributeError will be raised.\n\nParameters:\n-----------\nSessions : object or iterable of objects\n    A single session object or an iterable (list, set, or tuple) of session objects representing the DHCPv6 server sessions to be reconfigured and renewed. Each session object must have a `renew()` method.\n\nReturns:\n--------\nbool\n    Always returns True to indicate that the reconfigure and renew operation has been successfully initiated for all provided sessions.\n\nRaises:\n-------\nAttributeError\n    If any of the provided session objects does not have a `renew()` method.\n\nExamples:\n---------\n.. code:: RobotFramework\n\n    | Dhcpv6 Server Reconfigure Renew | Sessions=${Sessions} |",
  "TesterLibrary.Protocol.dhcpv6.dhcpv6_server_reconfigure_rebind": "重新配置并触发指定DHCPv6服务端会话的Rebind操作。\n\n该函数用于对一个或多个DHCPv6服务端会话对象执行Rebind操作，以重新协商客户端租约或动态更新配置。函数接受单个会话对象或包含多个会话对象的可迭代对象（如列表、集合、元组），并对每个会话调用其`rebind()`方法，从而统一处理一个或多个会话的重新绑定过程。\n\n参数:\n    Sessions (object 或 iterable of objects): \n        表示DHCPv6服务端会话对象的一个或多个实例。每个对象必须包含一个`rebind()`方法，\n        该方法将被调用以执行实际的重新绑定操作。类型可以是单个`Dhcpv6Server`对象或包含此类对象的列表等结构。\n\n返回值:\n    bool: 布尔值，表示操作是否成功启动。始终返回True，表示所有提供的会话均已成功触发Rebind操作。\n\n异常:\n    如果底层调用失败（即返回False），函数将抛出`ContinuableFailure`异常，附带相应的错误信息。\n\n示例:\n    .. code:: RobotFramework\n\n        | Dhcpv6 Server Reconfigure Rebind | Sessions=${Sessions} |",
  "TesterLibrary.Protocol.dhcpv6.dhcpv6_server_abort": "Aborts one or more DHCPv6 server sessions.\n\n    Parameters:\n    -----------\n    Sessions : object or iterable of objects\n        A single session object or an iterable (list, set, tuple) of session objects \n        representing the DHCPv6 server sessions to be aborted. Each session object \n        is expected to have an `abort()` method that performs the actual abort operation.\n\n    Returns:\n    --------\n    bool\n        Always returns True to indicate that the operation has been successfully initiated.\n\n    Description:\n    ------------\n    This function is used to abort DHCPv6 server sessions. If a single session is provided, \n    it is converted into a list internally for uniform processing. The function then iterates \n    through each session and calls its `abort()` method to terminate the corresponding \n    DHCPv6 server session. The return value is a boolean indicating success.\n\n    Raises:\n    -------\n    ContinuableFailure\n        If the result of the backend call (`renix.dhcpv6_server_abort`) returns `False`, \n        this function raises a `ContinuableFailure` exception with a message indicating \n        the failure of the current function.\n\n    Example:\n    --------\n    .. code:: RobotFramework\n\n        | Dhcpv6 Server Abort | Sessions=${Sessions} |",
  "TesterLibrary.Protocol.dhcpv6.wait_dhcpv6_server_state": "等待Dhcpv6服务端会话达到指定状态\n\nArgs:\n\n    Sessions (:obj:`Dhcpv6Server` or list of :obj:`Dhcpv6Server`): DHCPv6服务端会话对象或对象列表。可以是一个单个的会话对象，也可以是多个会话对象的集合。\n\n    State (str, optional): 等待DHCPv6服务端会话达到的目标状态。默认值为 None（可能表示等待一个隐式或默认状态，如\"UP\"）。支持的状态包括：\n\n        NOTSTART: 会话尚未开始\n\n        UP: 会话已建立并处于活动状态\n\n        DISABLED: 会话已被禁用\n\n    Interval (int or float, optional): 查询DHCPv6会话状态的间隔时间（单位：秒），类型为数字，默认值为1秒。\n\n    TimeOut (int or float, optional): 等待协议会话状态的超时时间（单位：秒），类型为数字，默认值为60秒。如果在该时间内未能达到目标状态，可能会抛出异常。\n\nReturns:\n\n    bool: 如果所有会话都在超时时间内达到指定状态，则返回 True；否则，根据实现逻辑可能会抛出异常（如 `Failure`）。\n\nExamples:\n    .. code:: RobotFramework\n\n        | Wait Dhcpv6 Server State | Sessions=${Sessions} | State=UP | Interval=2 | TimeOut=120 |",
  "TesterLibrary.Protocol.dhcpv6.get_dhcpv6_server_statistic": "获取Dhcpv6 Server Statistic统计结果\n\n该函数用于获取指定DHCPv6服务端会话的统计信息。它支持单个或多个会话对象作为输入，并可过滤出需要的统计项（列）。如果未指定会话，则不进行会话过滤；如果未指定统计项，则查询所有可用属性。\n\nArgs:\n\n    Session (:obj:`Dhcpv6Server` or list/set/tuple of Dhcpv6Server objects, optional): \n        DHCPv6服务端会话对象或其集合，每个对象需包含唯一标识会话的 `Name` 属性。\n        如果为None，则不进行会话过滤，默认值为 None。\n\n    StaItems (list, optional): 需要获取的统计项目列表，类型为 list。\n        如果为None，则返回所有可用统计项；\n        可选统计项包括：\n\n            ServerState\n            CurrentlyBound\n            ReconfigureRebindTxCount\n            ReconfigureRenewTxCount\n            ReconfigureTxCount\n            AdvertiseTxCount\n            ReplyTxCount\n            SolicitRxCount\n            RequestRxCount\n            ReleaseRxCount\n            RenewRxCount\n            RebindRxCount\n            TotalBound\n            TotalExpired\n            TotalReleased\n            TotalRenewed\n\nReturns:\n\n    dict or pd.DataFrame or bool:\n        - 如果找到一行匹配的结果：返回一个字典，键为请求的统计项（StaItems），值为对应的统计值。\n        - 如果找到多行匹配的结果：返回一个pandas DataFrame，包含过滤后的行和列。\n        - 如果没有找到匹配结果：返回 False。\n\nRaises:\n\n    ContinuableFailure: 如果内部调用失败（即返回值为 False）时抛出此异常。\n\nExamples:\n\n    .. code:: RobotFramework\n\n        | @{StaItems} | Create List | AdjacencyState | TxUpdate |\n        | Subscribe Result | Types=Dhcpv6ServerStatistics |\n        | Start Protocol |\n        | Sleep | 60 |\n        | &{Result} | Get Dhcpv6 Server Statistic | Session=${Session} | StaItems=@{StaItems} |\n        | Clear Result |",
  "TesterLibrary.Protocol.dhcpv6.get_dhcpv6_server_lease_statistic": "获取Dhcpv6 Server Lease Statistic统计结果\n\n该函数用于检索DHCPv6服务器的租约统计信息，支持根据提供的会话和地址池标识符进行过滤查询。它可以返回一个字典、pandas DataFrame 或布尔值，具体取决于匹配的行数。\n\nArgs:\n\n    Session (:obj:`Dhcpv6Server` or list or set or tuple or None): DHCPv6服务端会话对象或其集合，默认为None。\n        如果是单个对象，则使用其Name属性；如果是集合类型（如list, set, tuple），所有元素需具有'Name'属性。\n        若为None，则不进行基于会话的过滤。\n\n    Pool (:obj:`Dhcpv6AddressPoolsConfig` or list or set or tuple or None): DHCPv6 Server Address Pool对象或其集合，默认为None。\n        如果是单个对象，则使用其Name属性；如果是集合类型（如list, set, tuple），所有元素需具有'Name'属性。\n        若为None，则不进行基于地址池的过滤。\n\n    StaItems (list or str or None): 需要获取的统计项，类型为list或str，默认为None。\n        - 若为None，则返回所有可用统计项；\n        - 若为字符串，则将其转换为包含该字符串的列表；\n        - 支持的统计项包括：\n            ServerState\n            CurrentlyBound\n            ReconfigureRebindTxCount\n            ReconfigureRenewTxCount\n            ReconfigureTxCount\n            AdvertiseTxCount\n            ReplyTxCount\n            SolicitRxCount\n            RequestRxCount\n            ReleaseRxCount\n            RenewRxCount\n            RebindRxCount\n            TotalBound\n            TotalExpired\n            TotalReleased\n            TotalRenewed\n\nReturns:\n\n    dict or pd.DataFrame or bool:\n        - 如果找到唯一一行匹配数据：返回一个dict，键为请求的StaItems，值为其对应的统计值；\n        - 如果匹配多行：返回一个pandas DataFrame，包含所有匹配的行；\n        - 如果没有匹配结果：返回False。\n\nRaises:\n\n    TesterException: 在执行命令或内部数据检索过程中可能抛出异常；\n    sqlite3.Error: 如果底层数据库访问出错（例如性能相关的统计检索）；\n    KeyError: 如果指定的列名在结果DataFrame中不存在。\n\nSide Effects:\n    - 内部调用 `_get_statictis` 函数，可能会通过 `.get()` 刷新对象状态；\n    - 如果涉及分页结果，将执行导航命令如 GotoResultPageCommand；\n    - 最终结果DataFrame会被以表格形式记录日志，用于调试。\n\nExamples:\n    .. code:: RobotFramework\n\n        | @{StaItems} | Create List | AdjacencyState | TxUpdate |\n        | Subscribe Result | Types=Dhcpv6ServerStatistics |\n        | Start Protocol |\n        | Sleep | 60 |\n        | &{Result} | Get Dhcpv6 Server Lease Statistic | Session=${Session} | Pool=${Pool} | StaItems=@{StaItems} |\n        | Clear Result |",
  "TesterLibrary.Protocol.dot1ag.create_dot1ag": "创建802.1ag协议实例并将其关联到指定端口，同时使用提供的参数进行配置。\n\n**参数说明：**\n\n- **Port** (:obj:`Port`)  \n  测试仪表端口对象，表示该802.1ag协议实例将被绑定的物理或逻辑端口，类型为object。\n\n- **\\*\\*kwargs**  \n  可选的关键字参数，用于进一步配置Dot1ag会话的属性。支持的参数包括：\n\n  - **Name** (str): 802.1ag会话的名称，类型为字符串。\n  - **Enable** (bool): 是否启用该802.1ag会话，默认值为True，类型为布尔值，取值范围：True 或 False。\n\n**返回值：**\n\n- :obj:`Dot1ag`  \n  创建并配置完成的802.1ag协议实例对象，可用于后续测试操作。\n\n**功能描述：**\n\n该函数调用底层API（`renix.create_dot1ag()`）来初始化一个IEEE 802.1ag（连通性故障管理，CFM）协议实例，并将其与指定的端口对象绑定。通过关键字参数可对该协议实例进行动态配置。若创建失败，则抛出异常 `ContinuableFailure`；若成功，则返回该协议对象。\n\n**应用场景：**\n\n通常在网络测试中用于模拟或管理被测设备上的CFM功能，例如建立维护域、维护关联和维护端点等。\n\n**示例代码：**\n\n.. code:: RobotFramework\n\n    | Create Dot1ag | Port=${Port} | Name=CFM_Session_1 | Enable=True |",
  "TesterLibrary.Protocol.dot1ag.edit_dot1ag_link_trace": "修改802.1ag Link Trace对象的配置。\n\nArgs：\n\n    Session (:obj:`Dot1ag` 或 iterable): 一个或多个802.1ag会话对象。可以是单个对象或包含多个对象的可迭代类型（如list、tuple、set）。每个会话对象必须具有 `edit_link_trace` 方法，用于编辑链路追踪配置。\n\nKeyword Args:\n\n    TxType (str): 指定发送方式，默认值：SINGLE。有效取值包括：\n\n        SINGLE: 单次发送\n\n        MULTIPLE: 多次发送\n\n    TxRate (str): 指定发送速率，默认值：TXRATE_10_PER_SEC。有效取值包括：\n\n        TXRATE_10_PER_SEC\n\n        TXRATE_1_PER_SEC\n\n        TXRATE_1_PER_MIN\n\n        TXRATE_1_PER_10MIN\n\n    InitTransactionId (int): 初始Transaction ID，默认值：1。取值范围为32位无符号整数 [0, 4294967295]。\n\n    InitTtl (int): 初始TTL值，默认值：64。取值范围为8位无符号整数 [1, 255]。\n\nReturns:\n\n    (:obj:`Dot1agLinkTraceConfig` 或 list): 返回编辑后的802.1ag Link Trace配置对象。若仅修改了一个会话，则直接返回该配置对象；若修改了多个会话，则返回包含所有配置对象的列表。\n\nExamples:\n    .. code:: RobotFramework\n\n        | Edit Dot1ag Link Trace | Session=${Session} | InitTtl=255 |",
  "TesterLibrary.Protocol.dot1ag.edit_dot1ag_loopback": "修改802.1ag Loopback对象的配置，适用于一个或多个会话对象。\n\nArgs：\n\n    Session (object / list): 802.1ag会话对象，可以是单个对象或包含多个会话对象的列表。\n\nKeyword Args:\n\n    TxType (str, optional): 发送方式，默认值：SINGLE。可选值包括：\n        \n        SINGLE: 单次发送\n        \n        MULTIPLE: 多次发送\n\n    TxRate (str, optional): 发送速率，默认值：TXRATE_10_PER_SEC。可选值包括：\n\n        TXRATE_10_PER_SEC: 每秒10次\n        \n        TXRATE_1_PER_SEC: 每秒1次\n        \n        TXRATE_1_PER_MIN: 每分钟1次\n        \n        TXRATE_1_PER_10MIN: 每10分钟1次\n\n    InitTransactionId (int, optional): 初始Transaction ID，默认值：1，取值范围为无符号32位整数 [0, 4294967295]\n\nReturns:\n\n    (:obj:`Dot1agLoopBackConfig` or list): 返回修改后的802.1ag Loopback配置对象。若输入为单个Session，则返回单个配置对象；若输入为多个Session，则返回配置对象的列表。\n\nRaises:\n\n    ContinuableFailure: 如果调用失败，抛出此异常并附带相关信息。\n\nExamples:\n    .. code:: RobotFramework\n\n        | Edit Dot1ag Loopback | Session=${Session} | InitTransactionId=50 |",
  "TesterLibrary.Protocol.dot1ag.create_dot1ag_ma": "创建802.1ag维护联盟（MA）配置对象\n\n该函数用于创建并返回一个新的802.1ag维护联盟（Maintenance Association, MA）配置对象。该配置对象可用于定义和管理IEEE 802.1ag协议中的MA实例，支持多种配置参数的设置。\n\nKeyword Args:\n\n    OperationMode (str): 操作模式，默认值：IEEE，当前仅支持IEEE模式\n\n    MaidType (str): MA ID类型，默认值：STRING，可选值包括：\n\n        PRI_VID - 使用PrimaryVid作为MA ID\n\n        STRING - 使用字符串形式的MA ID\n\n    MdName (str): 管理域（MD）名称，默认值为空字符串，取值为任意字符串\n\n    MdLevel (str): MD级别，默认值：Level1，可选值包括：\n\n        Level0 ~ Level7，表示不同的维护域层级\n\n    PrimaryVid (int): 主VID（VLAN Identifier），默认值：100，取值范围：0 ~ 4095 的16位无符号整数(uint16)\n\n    CcPeriod (str): 连通性检查（CC）报文发送周期，默认值：CC_1S，可选值包括：\n\n        CC_3MS\n\n        CC_10MS\n\n        CC_100MS\n\n        CC_1S\n\n        CC_10S\n\n        CC_1MIN\n\n        CC_10MIN\n\n    LckPeriod (str): 锁定（LCK）报文发送周期，默认值：LCK_1S，可选值包括：\n\n        LCK_1S\n\n        LCK_1MIN\n\n    CcPriority (str): CC报文优先级，默认值：Level0，可选值：\n\n        Level0 ~ Level7\n\n    LbPriority (str): 环回（LB）报文优先级，默认值：Level0，可选值：\n\n        Level0 ~ Level7\n\n    LtPriority (str): 链路跟踪（LT）报文优先级，默认值：Level0，可选值：\n\n        Level0 ~ Level7\n\nReturns:\n\n    (:obj:`Dot1agMaConfig`): 返回一个新创建的Dot1agMaConfig对象，表示802.1ag MA配置。在特定情况下可能返回对象列表。\n\nRaises:\n\n    ContinuableFailure: 如果底层调用失败，则抛出ContinuableFailure异常，表示操作未成功完成\n\nExamples:\n    .. code:: RobotFramework\n\n        | Create Dot1ag Ma | PrimaryVid=200 | MdName=MyMD | MdLevel=Level3 |",
  "TesterLibrary.Protocol.dot1ag.create_dot1ag_mp": "创建802.1ag维护点（MP）配置。\n\n该函数用于在一个或多个会话对象上创建802.1ag维护点（Maintenance Point, MP）配置。每个会话对象必须包含一个`create_mp`方法，此方法将被调用以在相应会话中配置MP。如果提供了单个会话对象，则其会被内部封装为列表；若提供了多个会话对象（如列表、集合或元组），则会依次对每个会话调用`create_mp`方法。最终返回值取决于会话数量：仅处理一个会话时返回对应结果，否则返回包含所有结果的列表。\n\n参数:\n    Session (object or iterable): 一个单独的会话对象或者可迭代的会话集合（例如 list, set, tuple）。每个会话对象都应具有 `create_mp` 方法。\n    **kwargs: 配置MP的关键字参数，具体参数如下：\n\n        SelectMa (obj): 要关联的MA对象，示例：SelectMa=config_ma（其中config_ma由create_dot1ag_ma()创建）\n\n        MpType (str): MP类型，默认值：MEP，目前支持取值：\n\n            MEP\n\n        Rdi (str): 远端缺陷指示（RDI）状态，默认值：AUTO，可选值包括：\n\n            AUTO\n\n            OFF\n\n            ON\n\n        EnableLbResponse (bool): 是否启用环回响应（Loopback Response），默认值：True，取值范围：True 或 False\n\n        EnableLtResponse (bool): 是否启用链路跟踪响应（Linktrace Response），默认值：True，取值范围：True 或 False\n\n        MpId (int): MP标识符（ID），默认值：1，有效范围：uint32 [1, 8191]\n\n        EnableOverrideMdLevel (bool): 是否覆盖MD级别（Maintenance Domain Level），默认值：False，取值范围：True 或 False\n\n        OverrideMdLevel (str): 自定义MD级别，默认值：Level1，可选值包括：\n\n            Level0\n\n            Level1\n\n            Level2\n\n            Level3\n\n            Level4\n\n            Level5\n\n            Level6\n\n            Level7\n\n        EnableOverrideCcPeriod (bool): 是否覆盖CC周期（Continuity Check Period），默认值：False，取值范围：True 或 False\n\n        OverrideCcPeriod (str): 自定义CC周期，默认值：CC_1S，可选值包括：\n\n            CC_3MS\n\n            CC_10MS\n\n            CC_100MS\n\n            CC_1S\n\n            CC_10S\n\n            CC_1MIN\n\n            CC_10MIN\n\n        IsCcmRunning (bool): 指示当前是否运行CCM（Continuity Check Message），默认值：False，取值范围：True 或 False\n\n        IsLtmRunning (bool): 指示当前是否运行LTM（Link Trace Message），默认值：False，取值范围：True 或 False\n\n        IsLbmRunning (bool): 指示当前是否运行LBM（Loopback Message），默认值：False，取值范围：True 或 False\n\n返回值:\n\n    (:obj:`Dot1agMpConfig` or list of :obj:`Dot1agMpConfig`): 返回创建的802.1ag MP配置对象。如果输入单个Session，则返回单个Dot1agMpConfig对象；如果输入多个Session，则返回Dot1agMpConfig对象的列表。\n\n示例:\n\n    .. code:: RobotFramework\n\n        | Create Dot1ag Mp | Session=${Session} | Rdi=ON |",
  "TesterLibrary.Protocol.dot1ag.create_dot1ag_org_specific_tlv": "创建802.1ag Org Specific TLV对象，用于在给定的一个或多个会话(Session)中配置并生成符合Dot1ag标准的组织特定TLV（Type-Length-Value）数据结构。\n\n参数说明：\n\n    Session (object or iterable): 会话对象或包含多个会话对象的可迭代结构（如列表、元组、集合）。每个会话对象必须实现`create_org_specific_tlv`方法，并接受通过`**kwargs`传递的配置参数。\n\n    **kwargs: 任意关键字参数，用于配置Org Specific TLV的具体属性。包括以下可选字段：\n\n        OrgUniqueId (list): 组织唯一ID，默认值：[0,0,0]，取值范围：由0-255之间的十进制数组成的列表，长度为3。\n\n        SubType (int): 子类型标识，默认值：0，取值范围：0~255（uint8）。\n\n        Data (list): TLV的数据部分，默认值：空列表[]，取值范围：长度为0~250的列表，元素值为0~255之间的十进制数。\n\n返回值：\n\n    object 或 list: 如果传入的是单个Session，则返回一个Dot1agOrgSpecificTlv对象；如果传入多个Session，则返回对应每个Session生成的Dot1agOrgSpecificTlv对象组成的列表。\n\n功能描述：\n\n    该函数封装了底层会话对象的`create_org_specific_tlv`方法，提供统一接口用于在一个或多个会话中创建Dot1ag组织特定TLV。若传入单个会话，返回单个TLV对象；若传入多个会话，返回对应的TLV对象列表。\n\n异常处理：\n\n    若调用失败（返回False），将抛出ContinuableFailure异常，提示当前函数执行失败。\n\n示例：\n    .. code:: RobotFramework\n\n        | Create Dot1ag Org Specific Tlv | Session=${Session} | SubType=1 |",
  "TesterLibrary.Protocol.dot1ag.create_dot1ag_custom_mp": "创建用于IEEE 802.1ag协议的自定义维护点（Maintenance Point，MP）配置对象。\n\n该函数封装了底层`Dot1ag.create_custom_mp`方法，用于在系统中创建并初始化一个`Dot1agCustomMpConfig`类型的自定义MP实例。新创建的MP以上层系统条目为所属上下文，并支持通过关键字参数进行进一步定制。\n\nKeyword Args:\n\n    CustomTargetMacAddr (str): 自定义目标MAC地址，表示该MP所监控的目标设备MAC地址。\n                               默认值：空字符串\"\"。\n                               取值范围：符合标准格式的MAC地址字符串，例如：\"00:00:00:01:01:01\"。\n\nReturns:\n\n    (:obj:`Dot1agCustomMpConfig`): 创建并配置完成的802.1ag自定义MP对象。返回类型为`Dot1agCustomMpConfig`实例。\n\nRaises:\n\n    ContinuableFailure: 如果创建操作失败，将抛出此异常，包含对应的错误信息。\n\nExamples:\n    .. code:: RobotFramework\n\n        | Create Dot1ag Custom Mp | CustomTargetMacAddr=00:00:00:01:01:01 |\n\n说明：\n    此函数作为`renix.create_dot1ag_custom_mp()`的封装接口，主要用于Robot Framework测试脚本调用，实现网络测试场景下的802.1ag协议自定义MP配置功能。",
  "TesterLibrary.Protocol.dot1ag.create_dot1ag_expected_mp": "创建802.1ag Expected Mp配置对象，用于网络测试中的维护点（MP）预期配置。\n\n该函数用于为一个或多个维护关联（Maintenance Association，简称Ma）创建对应的Dot1agExpectedMpConfig配置对象。每个配置对象代表一个预期的维护点（MP），可用于后续的测试验证。此函数封装了底层协议的创建流程，并支持通过关键字参数对每个MP进行详细配置。\n\n参数说明：\n\n    Ma (object 或 iterable of objects): 一个或多个Maintenance Association对象，表示要为其创建预期MP配置的维护关联。\n                                       如果传入单个对象，内部会自动将其包装成列表处理；若传入多个对象，则分别为每个对象创建一个MP配置。\n    **kwargs: 可选的关键字参数，用于配置每个Dot1agExpectedMpConfig实例的属性。这些参数将直接传递给每个新创建的MP配置对象的`edit()`方法。\n              常见的配置参数包括：\n              \n              - MpId (int): MEP ID，取值范围：uint32 [1, 8191]，默认值：1\n              - MacAddress (str): MAC地址，格式应为标准MAC字符串（如\"00:00:00:01:01:01\"），默认值：\"00:00:00:00:00:01\"\n\n返回值：\n\n    Dot1agExpectedMpConfig 或 list of Dot1agExpectedMpConfig: 如果只传入了一个Maintenance Association对象，则返回单个配置好的Dot1agExpectedMpConfig对象；\n                                                               如果传入了多个Maintenance Association对象，则返回与之对应的一组Dot1agExpectedMpConfig对象列表。\n\n异常：\n\n    如果创建失败（即底层调用返回False），则抛出ContinuableFailure异常。\n\n示例：\n\n    .. code:: RobotFramework\n\n        | Create Dot1ag Expected Mp | Ma=${Ma} | MacAddress=00:00:00:01:01:01 |\n        | Create Dot1ag Expected Mp | Ma=@{MaList} | MpId=100 |\n\n功能描述：\n\n    该函数简化了为多个维护关联创建预期MP配置的过程，避免手动遍历维护关联列表。每个生成的MP配置都与其对应的维护关联绑定，可以通过关键字参数进一步自定义配置。适用于构建测试场景或验证点时使用。",
  "TesterLibrary.Protocol.dot1ag.start_cc_dot1ag": "启动 IEEE 802.1ag 的连通性检查 (CC)\n\n该函数用于在指定的 IEEE 802.1ag 会话上启动连通性检查（Continuity Check，CC）。它接受一个或多个会话对象作为输入，并为每个会话创建相应的 CC 启动命令。如果输入的是单个会话对象，则会被自动转换为包含该会话的列表。\n\n参数:\n    Sessions (:obj:`Dot1ag` 或 list of :obj:`Dot1ag`): 表示 IEEE 802.1ag 会话的对象或对象列表。这些会话用于执行连通性检查。\n\n返回值:\n    bool: 如果命令成功执行则返回 True，否则返回 False。\n\n异常:\n    如果底层调用返回 False，则会引发 ContinuableFailure 异常，表示操作失败但可以继续执行后续步骤。\n\n示例:\n    .. code:: RobotFramework\n\n        | Start Cc Dot1ag | Sessions=${Sessions} |\n\n功能说明:\n    该函数首先判断传入的 Sessions 是否为可迭代对象（如列表、元组或集合），如果不是，则将其转换为包含单个元素的列表。然后，为每个会话创建 Dot1agStartCCCommand 命令并执行，以启动对应的连通性检查。最终返回 True 表示操作成功。",
  "TesterLibrary.Protocol.dot1ag.start_link_trace_dot1ag": "启动Link Trace\n\nArgs:\n\n    Sessions (:obj:`Dot1ag`): 一个或多个802.1ag会话对象，用于执行IEEE 802.1ag链路追踪测试。可以是单个对象或对象列表。\n\nKeyword Args:\n\n    MsgType (str): 消息类型，指定发送的消息是组播还是单播。默认值为：MULTICAST。可选值包括：\n\n        MULTICAST（组播）\n\n        UNICAST（单播）\n\n    MpMaps (str): 维护点（MP）源和目标映射列表，用于定义链路追踪的路径。默认为空字符串。输入格式应为字符串列表，例如：\n\n        ['Dot1agMpConfig_1,00:00:00:00:00:01', 'Dot1agMpConfig_2,00:00:00:00:00:02']\n\nReturns:\n\n    bool: 布尔值，表示命令是否成功执行。成功返回True，失败则抛出ContinuableFailure异常。\n\nExamples:\n    .. code:: RobotFramework\n\n        | Start Link Trace Dot1ag | Sessions=${Sessions} | MpMaps=['Dot1agMpConfig_1,00:00:00:00:00:01', 'Dot1agMpConfig_2,00:00:00:00:00:02'] |\n\nNote:\n    - 该函数通过调用底层Dot1agStartLinkTraceCommand执行实际操作。\n    - 如果检测到异常状态，@abnormal_check装饰器可能会触发额外处理或抛出异常。\n    - 此函数仅封装了RenixAPI中的start_link_trace_dot1ag方法，并在失败时抛出ContinuableFailure异常以支持Robot Framework的错误处理机制。",
  "TesterLibrary.Protocol.dot1ag.start_loopback_dot1ag": "启动IEEE 802.1ag连通性故障管理（CFM）的LoopBack操作\n\n该函数用于在指定的IEEE 802.1ag会话上启动LoopBack（环回）操作，用于网络连通性故障检测与验证。通过此操作，可以测试网络中设备之间的连接状态。\n\nArgs:\n\n    Sessions (:obj:`Dot1ag` or list): 表示802.1ag会话的对象或对象列表。每个会话必须具有唯一标识系统配置的'handle'属性。若传入单个会话对象，则内部自动转换为列表处理。\n\nKeyword Args:\n\n    MsgType (str, optional): 消息类型，可选值包括：\n\n        MULTICAST（默认）: 多播消息类型\n\n        UNICAST: 单播消息类型\n\n    MpMaps (str, optional): 维护点（MP）源和目标映射列表，字符串格式，默认为空字符串。\n\nReturns:\n\n    bool: 环回操作是否成功启动。始终返回True表示操作成功发起；失败将抛出异常。\n\nRaises:\n\n    ContinuableFailure: 如果底层调用返回False，表示启动LoopBack失败。\n\nExamples:\n    .. code:: RobotFramework\n\n        | Start LoopBack Dot1ag | Sessions=${Sessions} |\n\nNotes:\n\n    - 此函数基于`Dot1agStartLoopBackCommand`类实现命令构造与执行。\n    - 函数使用了`@abnormal_check()`装饰器，表示在执行前会对系统状态进行异常检查。\n    - 所有关键字参数直接传递给底层API，支持扩展配置选项如超时时间、测试参数等。",
  "TesterLibrary.Protocol.dot1ag.stop_cc_dot1ag": "停止 IEEE 802.1ag 会话的连续性检查（CC）\n\n该函数用于停止指定的 IEEE 802.1ag 会话对象上的连续性检查（Continuity Check, CC）。  \n可以传入单个 Dot1ag 会话对象或包含多个 Dot1ag 会话对象的列表。\n\n参数:\n\n    Sessions (:obj:`Dot1ag` 或 list): 要停止连续性检查的 Dot1ag 会话对象，支持以下类型：\n    \n        - 单个 Dot1ag 会话对象\n        - 包含多个 Dot1ag 会话对象的列表(list)、元组(tuple)或集合(set)\n\n返回值:\n\n    bool: 如果成功停止所有提供的会话对象的连续性检查，则返回 True；如果操作失败，则返回 False 并抛出异常\n\n异常:\n\n    ContinuableFailure: 当返回结果为 False 时，函数会抛出此异常以指示操作失败\n\n示例:\n    .. code:: RobotFramework\n\n        | Stop Cc Dot1ag | Sessions=${Sessions} |",
  "TesterLibrary.Protocol.dot1ag.stop_link_trace_dot1ag": "停止IEEE 802.1AG链路追踪操作。\n\n该函数用于停止针对指定会话和维护点（Maintenance Points）的IEEE 802.1AG链路追踪操作。它调用底层API方法，并在执行失败时抛出可继续的异常。\n\n参数:\n\n    Sessions (object / list / tuple / set): 表示一个或多个802.1ag会话对象，每个会话对象必须包含有效的 'handle' 属性。\n\n    MpObjects (list / tuple / set): 表示参与链路追踪操作的一个或多个维护点对象，每个维护点对象也必须包含有效的 'handle' 属性。默认值为空列表。\n\n返回值:\n\n    bool: 如果成功执行停止命令，则返回 ``True``；否则抛出 ContinuableFailure 异常。\n\n示例:\n    .. code:: RobotFramework\n\n        | Stop Link Trace Dot1ag | Sessions=${Sessions} |",
  "TesterLibrary.Protocol.dot1ag.stop_loopback_dot1ag": "停止IEEE 802.1ag环回操作\n\n该函数用于停止指定的IEEE 802.1ag连通性故障管理（CFM）会话的环回（Loopback）操作。它通过发送命令来终止与提供的维护点（MP）对象相关联的环回测试，并返回执行结果的状态。\n\n参数说明：\n    Sessions (object / list / tuple / set): 表示802.1ag CFM会话的对象或对象集合。每个会话对象必须包含一个用于系统内部标识的 'handle' 属性。如果传入的是单个对象，会被自动转换为包含该对象的列表。\n    \n    MpObjects (list): 维护点（Maintenance Point）对象的列表，用于唯一标识参与环回操作的MP。每个MP对象也必须包含一个 'handle' 属性。\n\n返回值：\n    bool: 布尔值，表示环回停止操作是否成功执行。当前实现中总是返回True以表示命令成功发送。\n\n注意事项：\n    - 如果传入的`Sessions`不是列表、元组或集合类型，函数会将其转换为包含单个元素的列表。\n    - 函数内部会构建并执行一个`Dot1agStopLoopBackCommand`命令，使用传入的会话和MP对象中的handle属性进行操作。\n    - 如果底层调用返回False，则抛出ContinuableFailure异常，表示操作失败但可继续执行后续步骤。\n\n示例：\n    .. code:: RobotFramework\n\n        | Stop LoopBack | Sessions=${Sessions} |",
  "TesterLibrary.Protocol.dot1ag.wait_dot1ag_state": "等待802.1ag会话达到指定状态\n\n该函数用于等待一个或多个802.1ag会话对象达到指定的状态（默认为RUNNING）。它会周期性地检查每个会话的当前状态，直到所有会话都处于目标状态之一，或者超过指定的超时时间。\n\nArgs:\n\n    Sessions (:obj:`Dot1ag` 或 list): 一个或多个802.1ag会话对象。可以是单个对象或包含多个对象的列表。\n\n    State (str 或 list, optional): 要等待的目标状态或状态列表。默认值为 'RUNNING'。支持以下状态：\n\n        DISABLED\n\n        IDLE\n\n        RUNNING\n\n    Interval (int, optional): 状态检查的时间间隔（单位：秒），默认值为1秒。\n\n    TimeOut (int, optional): 等待状态变化的超时时间（单位：秒），默认值为60秒。如果在指定时间内未达到目标状态，将引发异常。\n\nReturns:\n\n    bool: 如果所有会话在超时时间内达到目标状态之一，则返回True；否则引发TesterException异常。\n\nRaises:\n\n    TesterException: 如果在指定的TimeOut时间内，并非所有会话都达到期望的状态。\n\nExamples:\n    .. code:: RobotFramework\n\n        | Wait Dot1ag State | Sessions=${Sessions} | State=RUNNING | Interval=2 | TimeOut=120 |",
  "TesterLibrary.Protocol.dot1ag.get_dot1ag_mp_stats": "获取802.1ag Maintenance Point（MP）的统计信息。\n\n该函数用于检索基于IEEE 802.1ag协议的维护点（Maintenance Point）的统计结果。它封装了底层 `_get_statictis()` 方法，用于根据提供的会话对象和配置获取指定的统计项。\n\nArgs:\n    Session (:obj:`Dot1ag` 或 list): 一个或多个802.1ag会话对象。每个会话对象必须包含 'Name' 属性，作为会话的唯一标识。\n        如果为 None，则不进行会话过滤。类型可以是单个对象、列表、集合或元组。\n\n    StaItems (list, optional): 需要获取的统计项列表。如果为 None，则查询所有可用属性。\n        支持的统计项包括：\n\n            MepId\n            RemoteMeps\n            CcmTimeout\n            CcmUnexpectMaid\n            CcmUnexpectMdLevel\n            TxCcm300Hz\n            TxCcm10ms\n            TxCcm100ms\n            TxCcm1s\n            TxCcm10s\n            TxCcm1min\n            TxCcm10min\n            RxCcm\n            LastTxCcmSeqNum\n            LbTimeout\n            LbTransIdMismatch\n            TxLbm\n            RxLbm\n            TxLbr\n            RxLbr\n            TxLtm\n            RxLtm\n            TxLtr\n            RxLtr\n            LtTimeout\n\nReturns:\n    dict or pd.DataFrame or bool: 返回值根据匹配结果的数量而定：\n        - 如果仅找到一行匹配数据：返回字典，键为统计项名称，值为对应的统计值；\n        - 如果找到多行匹配数据：返回 pandas DataFrame，每一行代表一个 MP 的统计信息；\n        - 如果没有找到任何结果：返回 False。\n\nRaises:\n    ContinuableFailure: 当底层调用失败时抛出，表示测试可继续执行但当前操作失败。\n\nExamples:\n    .. code:: RobotFramework\n\n        | @{StaItems} | Create List | TxLtr | RxLtr |\n        | Subscribe Result | Types=Dot1agMpStats |\n        | Start Protocol |\n        | Sleep | 60 |\n        | &{Result} | Get Dot1ag Mp stats | Session=${Session} | StaItems=@{StaItems} |\n        | Clear Result |\n\nSide Effects:\n    - 可能会通过调用 `.get()` 刷新相关对象的数据以确保统计信息的准确性；\n    - 在 `ResultView=True` 情况下使用 `time.sleep(3)` 确保分页数据一致性；\n    - 执行 `GotoResultPageCommand` 来导航分页结果视图；\n    - 若存在数据库访问问题或列名不存在，可能引发异常（如 sqlite3.Error、KeyError）。",
  "TesterLibrary.Protocol.dot1x.create_dot1x": "创建802.1x协议会话并将其关联到指定端口\n\n该函数用于在指定端口上初始化并配置一个Dot1x协议会话对象。除了基本的会话创建，还可以通过关键字参数提供额外的配置选项。创建的会话将被注册到全局协议对象映射中，以便后续可以通过其句柄进行引用。\n\nArgs:\n    Port (:obj:`Port`): 测试仪表端口对象，作为Dot1x协议的上层参考，类型为object\n\nKeyword Args:\n    Name (str): 802.1x会话名称，字符串类型，默认值：未指定（可选）\n\n    Enable (bool): 是否启用802.1x会话，布尔类型，默认值：True，可选值：True 或 False\n\n    AuthMode (str): 认证模式，字符串类型，默认值：MD5，可选值：\n        MD5\n        TLS\n        TTLS\n\n    Identity (str): 用户身份标识，字符串类型，默认值：xinertel，长度范围：[1,255]\n\n    Password (str): 认证密码，字符串类型，默认值：xinertel，长度范围：[1,255]\n\n    UseAuthenticatorMac (bool): 是否使用认证器MAC地址，布尔类型，默认值：False，可选值：True 或 False\n\n    AuthenticatorMac (str): 认证器MAC地址，字符串类型，默认值：01:80:c2:00:00:03，必须为有效MAC地址格式\n\n    RetryCount (int): 重试次数，整数类型，默认值：5，取值范围：0-4294967295 (uint32)\n\n    RetryTimeout (int): 重试超时时间，整数类型，默认值：5，取值范围：1-4294967295\n\n    RetransmitCount (int): 重传次数，整数类型，默认值：5，取值范围：0-4294967295 (uint32)\n\n    RetransmitTimeout (int): 重传超时时间，整数类型，默认值：5，取值范围：1-4294967295\n\n    SupplicantCertificateName (str): 客户端证书名称，字符串类型，默认值为空字符串，长度范围：[1,255]\n\n    CertificatePassword (str): 证书密码，字符串类型，默认值为空字符串，长度范围：[1,255]\n\n    DuplicateUserInfoToInner (bool): 是否将用户信息复制到内部身份验证，布尔类型，默认值：True，可选值：True 或 False\n\n    InnerIdentity (str): 内部身份标识，字符串类型，默认值：xinertel，长度范围：[1,255]\n\n    InnerPassword (str): 内部身份验证密码，字符串类型，默认值：xinertel，长度范围：[1,255]\n\n    InnerTunnelAuthMode (str): 隧道内身份验证模式，字符串类型，默认值：AUTO，可选值：\n        AUTO\n        GTC\n        MS_CHAPV2\n        MD5\n\n    EnableClientCertificate (bool): 是否启用客户端证书，布尔类型，默认值：False，可选值：True 或 False\n\nReturns:\n    (:obj:`Dot1x`): 创建的802.1x协议会话对象，类型为Dot1x对象\n\nRaises:\n    ContinuableFailure: 如果底层调用失败则抛出此异常，表示操作未成功但测试可以继续执行\n\nSide Effects:\n    - 将创建的Dot1x会话对象注册到全局 `map_protocol_object` 字典中，以供后续通过句柄引用\n\nExamples:\n    .. code:: RobotFramework\n\n        | Create Dot1x | Port=${Port} | Name=MyDot1xSession | AuthMode=TLS | Identity=user1 | Password=pass123 | Enable=True |",
  "TesterLibrary.Protocol.dot1x.edit_dot1x_port_config": "修改802.1x端口配置对象\n\n该函数用于编辑一个或多个指定端口的802.1X端口配置。它会获取每个端口关联的'Dot1xPortConfig'子对象，并应用给定的配置更改（如果有的话）。若提供多个端口，将返回更新后的Dot1xPortConfig对象列表；若仅提供一个端口，则直接返回对应的Dot1xPortConfig对象。\n\nArgs：\n\n    Ports (:obj:`Port` 或 list of :obj:`Port`): 测试仪表端口对象或端口对象列表，表示需要编辑802.1X配置的端口。\n                                                 如果传入的是单个Port对象，内部会将其转换为列表处理。\n\nKeyword Args:\n\n    AuthenticationRate (int): 认证速率，默认值：100，取值范围：1-16384\n    LogoutRate (int): 注销速率，默认值：100，取值范围：1-16384\n    OutstandingSessions (int): 最大未完成会话数，默认值：100，取值范围：1-10000\n\nReturns:\n\n    (:obj:`Dot1xPortConfig` 或 list of :obj:`Dot1xPortConfig`): 编辑后的802.1x端口配置对象。\n        - 如果只提供了一个端口，返回对应的Dot1xPortConfig对象。\n        - 如果提供了多个端口，返回包含每个端口对应Dot1xPortConfig对象的列表，顺序与输入一致。\n\nExamples:\n    .. code:: RobotFramework\n\n        | Edit dot1x Port Config | Ports=${Port} | OutstandingSessions=10 |",
  "TesterLibrary.Protocol.dot1x.dot1x_upload_certificate": "上传802.1X认证所需的证书文件到指定的一个或多个会话对象上。\n\n该函数用于将指定路径下的证书文件上传至一个或多个802.1X会话对象，以支持后续的认证操作。可以传入单个会话对象或者包含多个会话对象的可迭代结构（如列表、元组或集合），函数内部会统一处理为列表形式进行操作。\n\n参数说明：\n    Sessions (object / list): 802.1X会话对象或其组成的可迭代结构。每个会话对象必须实现`upload_certificate`方法，并接受`Folder`作为参数。\n    Folder (str): 包含证书文件的文件夹路径，需为会话对象可访问的有效路径，例如：'c:/CertificateFolder'。\n\n返回值：\n    bool: 成功完成证书上传后始终返回 `True`。\n\n异常行为：\n    若上传失败，函数将抛出 `ContinuableFailure` 异常，提示当前操作失败。\n\n注意事项：\n    - 所有传入的会话对象必须支持 `upload_certificate` 方法；\n    - 如果传入的是单个会话对象，函数内部会将其转换为列表处理；\n    - 路径应确保有效且可被目标会话访问，否则可能导致上传失败。",
  "TesterLibrary.Protocol.dot1x.dot1x_delete_certificate": "删除与一个或多个802.1X会话对象关联的证书。\n\n该函数用于从指定的802.1X会话中删除证书。它接受单个会话对象或会话对象的可迭代集合（如列表、元组或集合），并对每个会话调用 `delete_certificate()` 方法以执行证书删除操作。传入的参数将被自动处理为可迭代对象，若输入为单个会话对象，则会被转换为包含该单一元素的列表。\n\n参数:\n    Sessions (:obj:`Dot1x` 或 list of :obj:`Dot1x`): 一个或多个802.1x会话对象。\n\n返回值:\n    bool: 布尔值，始终返回True，表示操作已成功执行。\n\n异常:\n    如果底层API调用返回False，函数将抛出一个ContinuableFailure异常，表明操作失败。\n\n示例:\n    .. code:: RobotFramework\n\n        | Dot1x Delete Certificate | Sessions=${Sessions} |",
  "TesterLibrary.Protocol.dot1x.abort_dot1x": "中断802.1x会话\n\n该函数用于终止一个或多个802.1X认证会话。它通过调用每个会话对象的`abort()`方法来实现会话的中断。如果提供了单个会话对象，它将被内部转换为列表以进行统一处理。函数在所有提供的会话成功中止后返回True。\n\nArgs:\n\n    Sessions (Union[object, list, tuple, set]): 单个会话对象或一组会话对象，这些对象需实现`abort()`方法。\n        通常表示活动的802.1X认证会话。类型可以是单个对象、列表、元组或集合。\n\nReturns:\n\n    bool: 返回布尔值，表示会话中止是否成功。始终返回True，表示所有会话已成功中止。\n\nRaises:\n\n    ContinuableFailure: 如果底层实现返回False，表示中止失败，则抛出此异常，并包含失败信息。\n\nExamples:\n    .. code:: RobotFramework\n\n        | Abort Dot1x | Sessions=${Sessions} |\n\nNote:\n\n    该函数确保所有传入的会话对象都被正确中止。若任何一个会话中止失败，函数将抛出ContinuableFailure异常。",
  "TesterLibrary.Protocol.dot1x.wait_dot1x_state": "等待802.1x会话达到指定的状态。\n\n该函数用于等待一个或多个IEEE 802.1X（dot1x）会话对象达到指定的预期状态。它通过周期性地查询每个会话的当前状态，直到所有会话都达到目标状态或超时发生为止。\n\nArgs:\n    Sessions (:obj:`Dot1x` 或 list of :obj:`Dot1x`): 要监控的一个或多个802.1x会话对象。\n    \n    State (str, optional): 期望会话达到的目标状态。如果未指定，默认为 'AUTHENTICATED'。\n                           支持的状态包括：\n                               DISABLED\n                               DOWN\n                               UNAUTHORIZED\n                               AUTHENTICATING\n                               AUTHENTICATED\n                               FAILED\n                               LOGGING_OFF\n    \n    Interval (int or float, optional): 检查会话状态的时间间隔（单位：秒），默认值为1秒。\n    \n    TimeOut (int or float, optional): 等待会话状态的最大时间（单位：秒），默认值为60秒。\n\nReturns:\n    bool: 如果所有会话在超时时间内成功达到指定状态则返回True；否则根据底层实现可能抛出异常或返回False。\n\nRaises:\n    Failure: 如果底层调用返回False，则抛出Failure异常，并附带相应的错误信息。\n\nExamples:\n    .. code:: RobotFramework\n\n        | Wait Dot1x State | Sessions=${Sessions} | State=AUTHENTICATED | Interval=2 | TimeOut=120 |\n\nNotes:\n    - 函数将非迭代类型的Sessions参数转换为列表以统一处理。\n    - 每个会话对象必须实现 `wait_session_state` 方法，并且其参数与当前接口兼容。\n    - 如果任何会话未能在TimeOut时间内达到指定状态，行为取决于 `wait_session_state` 的具体实现。",
  "TesterLibrary.Protocol.dot1x.get_dot1x_block_statistic": "获取802.1X会话的Block统计信息，用于分析认证过程中的关键性能指标和状态。\n\n参数:\n    Session (:obj:`Dot1x` 或 list/set/tuple of objects, optional): \n        指定要查询的802.1X会话对象或多个会话对象的集合。若为None，则不进行会话过滤。\n        若传入一个列表、集合或元组，将从每个会话对象中提取`.Name`属性作为标识符。\n        \n    StaItems (list 或 str, optional):\n        指定需要获取的统计项列表。如果传入字符串，将自动转换为单元素列表。\n        如果为None，默认返回所有可用统计项（通过动态查询ROM属性获取）。\n        支持的统计项包括：\n\n            BlockState\n            CurrentAuthenticatedAttempt\n            CurrentAuthenticated\n            CurrentFailed\n            CurrentLogoff\n            AuthenticatedAttemptRate\n            AuthenticatedRate\n            LogoffRate\n            TotalAttempt\n            TotalAuthenticated\n            TotalFailed\n            TotalLogoff\n            TotalRetry\n            TotalRetransmit\n            RxEapFailure\n            RxEapRequest\n            RxEapSuccess\n            TxEapResponse\n            MaxAuthenticatedTime\n            MaxLogoffTime\n\n返回值:\n    dict 或 pd.DataFrame 或 bool:\n        - 如果仅找到一行匹配结果：返回一个字典，键为统计项名称，值为对应的统计值。\n        - 如果找到多行匹配结果：返回一个pandas DataFrame，包含所有匹配的行，并根据索引进行过滤。\n        - 如果未找到匹配结果：返回False。\n\n异常:\n    TesterException: 在执行命令或访问结果视图时发生错误会抛出该异常。\n    sqlite3.Error: 在基于性能的数据检索过程中可能发生数据库错误。\n    KeyError: 如果过滤条件(`Idx`)中的列名在结果DataFrame中不存在，会抛出该异常。\n\n副作用:\n    - 可能修改内部状态，如刷新会话或统计数据。\n    - 执行类似GotoResultPageCommand的命令以处理分页结果。\n    - 使用time.sleep(3)确保访问结果视图时数据一致性。\n    - 为了调试目的，最终结果将以表格形式记录日志。\n\n示例:\n    .. code:: RobotFramework\n\n        | @{StaItems} | Create List | MaxAuthenticatedTime | MaxLogoffTime |\n        | Subscribe Result | Types=Dot1xBlockStatistics |\n        | Start Protocol |\n        | Sleep | 60 |\n        | &{Result} | Get Dot1x Block Statistic | Session=${Session} | StaItems=@{StaItems} |\n        | Clear Result |",
  "TesterLibrary.Protocol.dot1x.get_dot1x_port_statistic": "获取802.1X端口级别的认证统计信息。\n\n该函数用于查询一个或多个测试仪表端口的802.1X认证相关统计项，支持指定特定的统计项目，并返回对应的结果。它封装了底层的 `_get_statictis()` 方法来获取 Dot1xPortStatistics 类型的数据，并能根据传入的参数处理不同类型的端口输入（单个端口、端口集合或全部端口）。\n\nArgs:\n\n    Port (:obj:`Port`, optional): 测试仪表端口对象，类型为 object。若为 None，则可能返回所有端口的统计结果；也可传入 list/set/tuple 包含多个 Port 对象以批量查询。\n\n    StaItems (list, optional): 需要获取的统计项列表，每个元素应为字符串，表示 Dot1xPortStatistics 支持的统计字段。支持的统计项包括：\n\n        CurrentAuthenticatedAttempt\n        CurrentAuthenticated\n        CurrentFailed\n        CurrentLogoff\n        TotalAttempt\n        TotalAuthenticated\n        TotalFailed\n        TotalLogoff\n        TotalRetry\n        TotalRetransmit\n\n        若未指定（None），则默认获取所有可用的统计项。\n\nReturns:\n\n    dict or pd.DataFrame or bool:\n        - 如果仅匹配到一行数据：返回字典，键为统计项名称，值为对应的统计值。\n        - 如果匹配到多行数据：返回 pandas DataFrame，包含所有匹配端口的统计信息。\n        - 如果没有匹配到任何数据：返回 False。\n\nRaises:\n\n    ContinuableFailure: 当底层调用失败（返回 False）时抛出可继续执行的异常。\n    TesterException: 可能传播在命令执行或数据检索过程中发生的异常。\n    sqlite3.Error: 如果访问数据库时发生错误。\n    KeyError: 如果过滤条件中包含不存在于结果中的列名。\n\nExamples:\n\n    .. code:: RobotFramework\n\n        | @{StaItems} | Create List | TotalAttempt | TotalAuthenticated |\n        | Subscribe Result | Types=Dot1xPortStatistics |\n        | Start Protocol |\n        | Sleep | 60 |\n        | &{Result} | Get Dot1x Port Statistic | Port=${PortHandle} | StaItems=@{StaItems} |\n        | Clear Result |\n\nSide Effects:\n\n    - 可能通过 `.get()` 调用刷新内部状态数据。\n    - 在分页结果处理时可能会执行 GotoResultPageCommand 命令。\n    - 为保证数据一致性，在 ResultView 模式下会使用 time.sleep(3)。\n    - 会将结果 DataFrame 以表格形式记录日志用于调试。\n\nDescription:\n\n    该函数主要用于获取 802.1X 端口级认证统计信息。其内部构造基于提供的 Port 参数生成合适的索引字典（Idx），并固定查询类型为 'Dot1xPortStatistics'，然后将请求委托给 `_get_statictis()` 函数进行实际的数据获取。",
  "TesterLibrary.Protocol.dot1x.get_dot1x_statistic": "获取802.1x统计结果。该函数用于检索与802.1X认证相关的统计信息，基于提供的会话对象、会话索引以及指定的统计项。\n\n参数:\n    Session (:obj:`Dot1x` 或 list/set/tuple of objects, 可选): \n        802.1x会话对象或其集合。如果提供了可迭代对象，将提取每个对象的 `.Name` 属性作为标识。\n        如果为 None，则不应用特定会话过滤。\n\n    Index (int, 可选): \n        会话索引，用于在多会话环境中进一步识别统计数据表中的正确行。默认值为 1。\n\n    StaItems (list 或 str, 可选): \n        需要获取的统计项目列表。支持的统计项包括：\n\n            State\n\n            ReqIdentity\n\n            RespIdentity\n\n            ReqChallenge\n\n            RespChallenge\n\n            TLSEstablish\n\n            ReceiveOK\n\n            ReceiveFail\n\n        如果为字符串，将被转换为单元素列表。若为 None，则返回所有可用统计项。\n\n返回值:\n    dict 或 pd.DataFrame 或 bool:\n        - 如果找到唯一匹配行：返回一个字典，键为请求的统计项名称，值为对应的统计值。\n        - 如果找到多行匹配：返回一个包含所有匹配行的 pandas DataFrame。\n        - 如果没有找到匹配数据：返回 False。\n\n异常:\n    - ContinuableFailure: 如果底层调用失败（例如无法获取统计信息）。\n    - TesterException: 可能传播命令执行过程中的异常。\n    - sqlite3.Error: 若在基于性能的数据检索过程中发生数据库访问错误。\n    - KeyError: 若筛选条件中包含不存在于结果 DataFrame 中的列名。\n\n副作用:\n    - 内部可能通过执行性能命令刷新数据。\n    - 在处理分页结果集时可能会执行类似 GotoResultPageCommand 的操作。\n    - 为了调试目的，将以表格形式记录最终结果 DataFrame。\n\n示例:\n    .. code:: RobotFramework\n\n        | @{StaItems} | Create List | AdjacencyState | TxUpdate |\n        | Subscribe Result | Types=Dot1xStatistics |\n        | Start Protocol |\n        | Sleep | 60 |\n        | &{Result} | Get Dot1x Statistic | Session=${Session} | StaItems=@{StaItems} |\n        | Clear Result |",
  "TesterLibrary.Protocol.dot3ah.create_dot3ah": "创建并配置与指定端口关联的Dot3ah协议实例。\n\n该函数使用提供的`Port`作为上层初始化Dot3ah协议配置，并允许通过关键字参数传递额外的配置属性。这些属性将被转发到Dot3ah构造函数以进行实例配置。创建Dot3ah实例后，它会被注册到一个全局的协议对象映射中，使用其句柄进行标识。\n\n参数:\n    Port (:obj:`Port`): 测试仪表端口对象，表示物理或逻辑网络接口，类型为：object\n\n    **kwargs : dict\n        任意关键字参数用于设置Dot3ah实例的其他配置属性。每个键值对将作为属性分配给Dot3ah实例，\n        仅限于Dot3ah类已定义的属性，防止创建意外属性。\n\n返回值:\n    (:obj:`Dot3ah`): 创建并配置完成的802.3ah会话对象，类型为：object\n\n副作用:\n    - 通过调用 `self.set_protocol_object_map` 方法，将创建的Dot3ah实例注册到全局 `map_protocol_object` 字典中，使用其句柄作为键。\n\n示例:\n    .. code:: RobotFramework\n\n        | Create Dot3ah | Port=${Port} | MaxPduSize=1300 |",
  "TesterLibrary.Protocol.dot3ah.edit_dot3ah_event_notification": "修改一个或多个802.3ah会话对象的Event Notification配置。\n\n该函数用于统一修改一个或多个Dot3ah会话对象的事件通知配置。它将传入的会话对象（Session）进行处理，并调用每个会话对象的`edit_event_notification`方法，传入指定的配置参数。如果传入的是单个会话对象，则内部将其转换为列表进行统一处理。该函数支持多种事件类型的配置，包括Errored Frame Event、Errored Frame Period Event、Errored Symbol Period Event等。\n\nArgs:\n\n    Session (:obj:`Dot3ah` 或 list): 802.3ah会话对象，可以是单个对象或包含多个会话对象的列表。\n\nKeyword Args:\n\n    InitialTime (int, optional): 初始时间（单位：秒），默认值：0，取值范围：0~65535(uint32)\n\n    EventRepeatPeriod (int, optional): 事件重复周期（单位：秒），默认值：2，取值范围：0~10(uint32)\n\n    EnableErroredFrameEvent (bool, optional): 是否启用Errored Frame Event，默认值：False\n\n    EfeWindow (int, optional): EFE窗口大小（单位：毫秒），默认值：10，取值范围：10~600(uint16)\n\n    EfeThreshold (int, optional): EFE阈值，表示在窗口内触发事件的错误帧数量，默认值：1，取值范围：0~65535(uint16)\n\n    EfeErrorCount (int, optional): EFE错误计数，默认值：1，取值范围：0~65535(uint16)\n\n    EnableErroredFramePeriodEvent (bool, optional): 是否启用Errored Frame Period Event，默认值：False\n\n    EfpeWindow (int, optional): EFPE窗口大小（单位：毫秒），默认值：10，取值范围：1~65535(uint16)\n\n    EfpeThreshold (int, optional): EFPE阈值，表示在窗口内触发事件的错误帧周期，默认值：10，取值范围：0~65535(uint16)\n\n    EfpeErrorCount (int, optional): EFPE错误计数，默认值：10，取值范围：0~65535(uint32)\n\n    EnableErroredSymbolPeriodEvent (bool, optional): 是否启用Errored Symbol Period Event，默认值：False\n\n    EspeWindow (int, optional): ESPE窗口大小（单位：毫秒），默认值：10，取值范围：1~65535(uint16)\n\n    EspeThreshold (int, optional): ESPE阈值，表示在窗口内触发事件的错误符号周期，默认值：600，取值范围：100~900(uint16)\n\n    EspeErrorCount (int, optional): ESPE错误计数，默认值：10，取值范围：0~65535(uint32)\n\n    EnableErroredFrameSecondsSummaryEvent (bool, optional): 是否启用Errored Frame Seconds Summary Event，默认值：False\n\n    EfsseWindow (int, optional): EFSSE窗口大小（单位：秒），默认值：600，取值范围：1~65535(uint16)\n\n    EfsseThreshold (int, optional): EFSSE阈值，表示在窗口内触发事件的错误帧秒数，默认值：600，取值范围：100~900(uint16)\n\n    EfsseCount (int, optional): EFSSE计数，默认值：1，取值范围：0~65535(uint32)\n\n    EnableOrgSpecEvent (bool, optional): 是否启用自定义组织事件（Organization Specific Event），默认值：False\n\n    OrgSpecEventOUI (list, optional): 自定义组织事件的OUI标识符，默认值：[0,0,0]，列表元素为0~255之间的十进制整数\n\n    OrgSpecEventData (list, optional): 自定义组织事件的数据内容，默认值：空列表([])，列表元素为0~255之间的十进制整数\n\nReturns:\n\n    :obj:`Dot3ahEventNotificationConfig` 或 list: 返回修改后的802.3ah Event Notification配置对象。\n    如果输入的是单个会话对象，则返回单个配置对象；如果输入的是多个会话对象，则返回配置对象的列表，顺序与输入一致。\n\nExamples:\n    .. code:: RobotFramework\n\n        | Edit Dot3ah Event Notification | Session=${Session} | InitialTime=20 | EnableErroredFrameEvent=True | EfeWindow=100 | EfeThreshold=5 |",
  "TesterLibrary.Protocol.dot3ah.edit_dot3ah_info_pdu": "修改802.3ah Info PDU配置，用于以太网OAM（Operations, Administration and Maintenance）会话的协议数据单元参数编辑。\n\nArgs:\n    Session (:obj:`Dot3ah` 或其列表): 一个或多个802.3ah会话对象，类型可以是单个对象或包含多个对象的列表。\n\nKeyword Args:\n    PduTime (int, optional): PDU发送时间间隔，单位为秒，默认值：1，取值范围：1~10。\n    LostLinkTime (int, optional): 检测链路丢失的时间阈值，单位为秒，默认值：5，取值范围：2~90。\n    OamModeType (str, optional): OAM操作模式，默认值：ACTIVE，可选值包括：\n        - 'PASSIVE': 被动模式，等待对端发起OAM协商。\n        - 'ACTIVE': 主动模式，主动发起OAM协商。\n    OrgUniqueId (list, optional): 组织唯一标识符，由三个0~255之间的整数组成，默认值：[0, 0, 0]。\n    OamVersion (int, optional): OAM协议版本号，默认值：1，取值范围：0~255。\n    VendorSpecInfo (int, optional): 供应商特定信息字段，默认值：0，取值范围：uint32。\n    EnableOverrideRevision (bool, optional): 是否启用自定义修订版本，默认值：False。\n    OverrideRevision (int, optional): 自定义修订版本号，默认值：0，取值范围：uint16。\n    EnableVarRetrieval (bool, optional): 是否启用变量检索功能，默认值：True。\n    EnableInterpLinkEvent (bool, optional): 是否启用链路事件解释功能，默认值：True。\n    EnableLoopBack (bool, optional): 是否启用环回测试功能，默认值：True。\n    EnableUnidirMode (bool, optional): 是否启用单向模式，默认值：True。\n\nReturns:\n    :obj:`Dot3ahInfoPduConfig` 或其列表: 返回修改后的802.3ah Info PDU配置对象。如果输入的是单个会话对象，则返回单个配置对象；如果输入的是多个会话对象，则返回对应数量的配置对象组成的列表。\n\nRaises:\n    ContinuableFailure: 如果底层调用失败，抛出此异常并记录函数名作为错误信息的一部分。\n\nExamples:\n    .. code:: RobotFramework\n\n        | Edit Dot3ah Info Pdu | Session=${Session} | PduTime=10 |\n\nDescription:\n    该函数封装了底层 `renix.edit_dot3ah_info_pdu` 方法，用于编辑一个或多个Dot3ah会话的Info PDU配置。支持通过关键字参数指定任意数量的字段进行更新，并根据输入的Session类型处理单个或批量操作。函数确保在失败时抛出异常，成功时返回结果。实际支持的关键字参数和行为取决于底层会话对象中 `edit_info_pdu` 方法的具体实现。",
  "TesterLibrary.Protocol.dot3ah.edit_dot3ah_org_spec": "Modifies the organization-specific configuration for one or more 802.3ah session objects.\n\nParameters:\n    Session (:obj:`Dot3ah` or list of :obj:`Dot3ah`): The 802.3ah session object(s) to modify.\n        Can be a single session object or a list of session objects.\n\nKeyword Args:\n    EnableOrgSpec (bool, optional): Enables or disables the Organization Specific configuration.\n        Valid values: True or False. Default: False.\n    Period (int, optional): Specifies the interval at which organization-specific events are transmitted.\n        Valid range: uint8 in [0,10]. Default: 1.\n    OrgSpecOUI (list, optional): Organizationally Unique Identifier (OUI) for the organization-specific event.\n        A list of three decimal numbers between 0 and 255. Default: [0, 0, 0].\n    OrgSpecEventData (list, optional): Data payload for the organization-specific event.\n        A list of decimal numbers between 0 and 255. Default: Empty list [].\n\nReturns:\n    :obj:`Dot3ahOrgSpecConfig` or list of :obj:`Dot3ahOrgSpecConfig`: Returns the modified organization-specific\n    configuration object(s). If a single session is provided, returns a single configuration object. If multiple sessions\n    are provided, returns a list of configuration objects corresponding to each session.\n\nRaises:\n    ContinuableFailure: If the operation fails, an exception is raised with a failure message.\n\nExample:\n    .. code:: RobotFramework\n\n        | Edit Dot3ah Org Spec | Session=${Session} | Period=20 | EnableOrgSpec=True | OrgSpecOUI=[1,2,3] | OrgSpecEventData=[4,5,6,7] |",
  "TesterLibrary.Protocol.dot3ah.create_dot3ah_org_spec_tlv": "创建802.3ah Org Spec TLV对象，用于封装与一个或多个802.3ah会话关联的组织特定TLV（Type-Length-Value）信息。\n\nArgs:\n\n    Session (:obj:`Dot3ah` 或 iterable): 表示单个802.3ah会话对象，或者是一个包含多个会话对象的可迭代对象（如 list、tuple、set）。每个会话对象必须提供 `create_org_spec_tlv` 方法以供调用。\n\nKeyword Args:\n\n    OrgUniqueId (list, optional): 组织唯一标识符，表示为一个由三个元素组成的列表，默认值：[0, 0, 0]。每个元素取值范围为0到255的十进制整数，用于标识定义该TLV的组织。\n\n    Data (list, optional): TLV数据字段内容，表示为字节列表，默认值为空列表[]。每个元素取值范围为0到255的十进制整数，用于存储该TLV的实际有效载荷。\n\nReturns:\n\n    如果输入为单个会话对象，则返回由其 `create_org_spec_tlv` 方法生成的TLV对象，类型为 :obj:`Dot3ahOrgSpecTlvConfig`；\n    如果输入为多个会话对象，则返回一个列表，包含每个会话生成的TLV对象。\n\nRaises:\n\n    ContinuableFailure: 如果底层实现返回False，表示操作失败，将抛出可继续执行的异常，并附带函数名和错误信息。\n\nDescription:\n\n    该函数是对底层会话方法 `create_org_spec_tlv` 的封装，允许统一处理单个或多个会话对象的TLV创建过程。它接受任意数量的关键字参数（kwargs），这些参数将直接传递给会话对象的 `create_org_spec_tlv` 方法。\n\n    当传入多个会话时，函数会依次对每个会话调用该方法，并将结果收集为一个列表返回。这简化了上层代码对单个与多个会话对象的差异化处理。\n\nNote:\n\n    - 返回的TLV对象结构和行为取决于底层会话对象中 `create_org_spec_tlv` 方法的具体实现。\n    - OrgUniqueId 和 Data 参数的格式需严格遵守要求，否则可能导致底层调用失败。\n\nExamples:\n    .. code:: RobotFramework\n\n        | Create Dot3ah Org Spec Tlv | Session=${Session} | Data=2 | OrgUniqueId=[1,2,3] |",
  "TesterLibrary.Protocol.dot3ah.create_dot3ah_var_req": "创建802.3ah Var Req对象，用于为一个或多个802.3ah会话对象配置变量请求。\n\n参数：\n    Session (:obj:`Dot3ah` 或 iterable): 指定的802.3ah会话对象，或者包含多个会话对象的可迭代容器（如 list、tuple、set）。\n                                      每个会话对象必须具有 'create_var_req' 方法，并可通过提供的关键字参数进行调用。\n\n关键字参数：\n    Branch (int, optional): 分支编号，默认值：0，取值范围：uint8 [0, 255]。\n    Leaf (int, optional): 叶子编号，默认值：0，取值范围：uint16 [0, 65535]。\n\n返回值：\n    :obj:`Dot3ahVarReqConfig` 或 list: 如果仅处理了一个会话对象，则返回该会话生成的配置对象；如果处理了多个会话对象，则返回配置对象的列表，顺序与输入会话一致。\n\n功能描述：\n    此函数封装了对给定会话对象的 'create_var_req' 方法的调用，并以统一方式处理单个或多个会话。如果传入的是单个会话对象，则内部会将其转换为列表以保持处理一致性。\n    函数将关键字参数直接传递给每个会话对象的 'create_var_req' 方法，这些参数通常用于指定特定的变量请求配置。\n    最终结果根据会话数量返回单个配置对象或配置对象的列表。\n\n异常：\n    如果底层实现调用失败（返回 False），则抛出 `ContinuableFailure` 异常，表示操作未成功完成。\n\n示例：\n    .. code:: RobotFramework\n\n        | Create Dot3ah Var Req | Session=${Session} | Branch=10 |",
  "TesterLibrary.Protocol.dot3ah.create_dot3ah_var_resp": "创建802.3ah Var Resp对象，用于为一个或多个802.3ah会话配置变量响应。\n\nArgs：\n\n    Session (:obj:`Dot3ah` 或 iterable): 802.3ah会话对象或其可迭代集合（如列表、元组、集合）。每个会话对象必须包含`create_var_resp`方法，该方法能够接受提供的关键字参数并创建对应的变量响应配置。\n\nKeyword Args:\n\n    Branch (int): 分支编号，默认值：0，取值范围：uint8 [0, 255]\n    \n    Leaf (int): 叶子编号，默认值：0，取值范围：uint16 [0, 65535]\n    \n    Indication (bool): 表示标志位，类型为布尔值，默认值：False，有效值：True 或 False\n    \n    Width (int): 数据宽度，默认值：1，取值范围：uint8，表示数据字段的字节长度\n    \n    Data (list): 数据内容，默认值：空列表[]，取值范围：元素为0到255之间的十进制整数的列表，表示变量响应中携带的数据\n\nReturns:\n\n    (:obj:`Dot3ahVarRespConfig` 或 list): 如果输入是单个Session对象，则返回一个Dot3ahVarRespConfig类型的配置对象；如果输入是多个Session对象，则返回对应配置对象的列表。\n\nDescription:\n    该函数用于统一为指定的一个或多个Dot3ah会话创建变量响应(Var Resp)配置。它首先检查传入的Session参数是单一对象还是可迭代对象，并将其统一转换为列表形式进行处理。然后，对于每个会话对象，调用其`create_var_resp`方法，并将所有关键字参数直接传递给该方法以完成具体配置。最终收集所有会话的配置结果，若仅有一个会话则直接返回单个配置对象，否则返回配置对象的列表。\n\nExamples:\n    .. code:: RobotFramework\n\n        | Create Dot3ah Var Resp | Session=${Session} | Branch=10 | Leaf=100 | Data=[1, 2, 3, 4] |\n\nRaises:\n    ContinuableFailure: 如果底层调用失败（返回False），则抛出可继续执行类型的异常，包含错误信息。",
  "TesterLibrary.Protocol.dot3ah.start_event_notification_dot3ah": "启动Event Notification\n\nArgs:\n\n    Sessions (:obj:`Dot3ah`): 802.3ah会话对象，用于启动事件通知。可以是一个单独的会话对象或包含多个会话对象的列表(list)、元组(tuple)或集合(set)。每个会话对象必须具有一个有效的'handle'属性，用于唯一标识该会话。\n\nReturns:\n\n    bool: 布尔值，始终返回True，表示命令已成功执行。\n\nRaises:\n\n    TypeError: 如果任何一个会话对象缺少'dot3ah_start_event_notification'所需的'handle'属性。\n\nNotes:\n\n    - 此函数内部调用`dot3ah_start_event_notification`，负责准备并发送相应的后端命令。\n    - 如果传入的是单个会话对象，它将被自动封装成列表进行处理。\n    - 该功能用于启动IEEE 802.3ah链路监控的事件通知机制。\n\nExamples:\n    .. code:: RobotFramework\n\n        | Start Event Notification Dot3ah | Sessions=${Sessions} |",
  "TesterLibrary.Protocol.dot3ah.start_link_trace_dot3ah": "启动Link Trace操作，用于指定的Dot3ah会话对象。\n\n此函数用于对一个或多个Dot3ah会话启动链路追踪（Link Trace）操作。它封装了底层命令`Dot3ahStartLinkTraceCommand`的执行，并阻塞直到操作完成。\n\n参数:\n    Sessions (object 或 iterable)\n        可以是一个单独的802.3ah会话对象，也可以是包含多个会话对象的可迭代对象（如列表、元组或集合）。每个会话对象必须具有'handle'属性，该属性在命令执行时被使用。\n\n返回值:\n    bool\n        始终返回True，表示链路追踪操作成功启动。\n\n异常:\n    TypeError\n        如果提供的任何一个会话对象没有'handle'属性，则抛出此异常。\n    ContinuableFailure\n        如果底层操作返回False，表示操作失败，抛出可继续执行的失败异常。\n\n注意事项:\n    - 如果传入的是单个会话对象，它将被自动包装成一个列表。\n    - 此函数在内部执行命令并阻塞，直到命令完成。\n    - 在Robot Framework中使用时，若操作失败会触发测试用例标记为失败。",
  "TesterLibrary.Protocol.dot3ah.start_loopback_dot3ah": "启动Loopback\n\n    启动指定的802.3ah会话的Loopback功能。\n\n    Args:\n        Sessions (:obj:`Dot3ah` 或 list): 802.3ah会话对象，可以是单个对象或包含多个Dot3ah会话对象的列表(list)、元组(tuple)或集合(set)。\n                                          每个会话对象必须具有用于命令执行的 'handle' 属性。\n\n    Returns:\n        bool: 如果命令成功执行，则返回 True；如果命令执行失败，则返回 False 并抛出 ContinuableFailure 异常。\n\n    Raises:\n        ContinuableFailure: 当返回结果为 False 时，表示命令执行失败并抛出此异常，错误信息中包含当前函数名。\n\n    Examples:\n        .. code:: RobotFramework\n\n            | Start Loopback Dot3ah | Sessions=${Sessions} |\n\n    Note:\n        此函数首先将输入的会话对象转换为列表形式（如果不是已有的可迭代类型），\n        然后使用每个会话的 handle 创建并执行一个 Dot3ahStartLoopBackCommand 命令来启动Loopback。",
  "TesterLibrary.Protocol.dot3ah.start_org_spec_dot3ah": "启动Organization Specific\n\n启动基于IEEE 802.3ah的以太网OAM协议中的组织特定EtherType（0x8870）。该函数用于为一个或多个提供的会话对象准备并执行命令，以启动Dot3ah协议的组织特定功能。每个会话对象必须包含一个有效的handle属性，用以唯一标识系统中的会话。\n\nArgs:\n\n    Sessions (:obj:`Dot3ah` 或 iterable): 802.3ah会话对象或其可迭代集合（如列表、元组或集合）。\n        每个会话对象应具有 'handle' 属性，该属性是会话在系统中的唯一标识符。\n\nReturns:\n\n    bool: 如果命令成功执行，则返回True；否则返回False。\n\nRaises:\n\n    ContinuableFailure: 如果执行失败（即返回值为False），将抛出此异常，表示测试可以继续执行而非中断。\n\nExamples:\n    .. code:: RobotFramework\n\n        | Start Org Spec | Sessions=${Sessions} |",
  "TesterLibrary.Protocol.dot3ah.start_var_req_dot3ah": "启动Variable Request\n\n启动IEEE 802.3ah协议的变量请求（VarReq）操作。\n\n该函数用于在指定的一个或多个Dot3ah会话对象上发起变量请求操作。这些会话对象必须包含一个名为'handle'的属性，该属性用于唯一标识会话，确保其能够在底层Renix API中被正确识别和处理。\n\nArgs:\n\n    Sessions (:obj:`Dot3ah` 或 list of :obj:`Dot3ah`): 一个或多个有效的802.3ah会话对象。\n        每个会话对象必须具有 'handle' 属性，否则将引发 TypeError。\n\nReturns:\n\n    bool: 如果操作成功执行，则返回True；如果底层调用失败，则抛出ContinuableFailure异常。\n\nRaises:\n\n    TypeError: 如果提供的任意会话对象缺少必需的 'handle' 属性，或者传入的Sessions参数类型不兼容。\n\nExamples:\n    .. code:: RobotFramework\n\n        | Start Var Req | Sessions=${Sessions} |",
  "TesterLibrary.Protocol.dot3ah.stop_event_notification_dot3ah": "停止Event Notification\n\n该函数用于停止指定的IEEE 802.3ah（Ethernet OAM）会话上的事件通知。它可以接受单个会话对象或多个会话对象的集合，并在所有对应的会话句柄上停止事件通知。\n\nArgs:\n\n    Sessions (:obj:`Dot3ah` 或 list 或 tuple 或 set): 单个802.3ah会话对象，或者包含多个会话对象的可迭代集合（如列表、元组或集合）\n\nReturns:\n\n    bool: 布尔值，始终返回True以表示命令成功执行\n\nRaises:\n\n    ContinuableFailure: 如果底层API调用返回False，表示操作失败，将抛出可继续执行的异常\n\nExamples:\n    .. code:: RobotFramework\n\n        | Stop Event Notification Dot3ah | Sessions=${Sessions} |",
  "TesterLibrary.Protocol.dot3ah.stop_link_trace_dot3ah": "Stops the IEEE 802.3ah link trace operation on the specified session(s). This function sends a command to stop the link trace process for one or more Dot3ah sessions. The sessions can be provided as a single session object or as a collection (list, tuple, or set) of session objects.\n\nParameters:\n    Sessions (:obj:`Dot3ah`): A single Dot3ah session object or a collection (list, tuple, or set) of Dot3ah session objects. Each session is expected to have a `handle` attribute used in constructing the command.\n\nReturns:\n    bool: True if the stop command was successfully executed; False otherwise.\n\nRaises:\n    TypeError: If any of the provided session objects do not have the required attributes (e.g., `handle`).\n    CommandExecutionError: If the execution of the stop link trace command fails.\n    ContinuableFailure: If the result of stopping the link trace is False, indicating a failure, this exception is raised with a message indicating the failure.\n\nExample Usage:\n    .. code:: RobotFramework\n\n        | Stop Link Trace Dot3ah | Sessions=${Sessions} |",
  "TesterLibrary.Protocol.dot3ah.stop_loopback_dot3ah": "停止Loopback\n\n该函数用于停止指定的 IEEE 802.3ah (Ethernet OAM) 会话上的环回（Loopback）操作。它通过调用底层 API 向测试设备发送 `Dot3ahStopLoopBackCommand` 命令，以终止当前正在进行的环回测试。\n\nArgs:\n\n    Sessions (:obj:`Dot3ah` 或 iterable of :obj:`Dot3ah`): 表示一个或多个 802.3ah 会话对象。\n        每个会话对象必须包含 'handle' 属性，该属性用于唯一标识会话并传递给底层命令。\n        可传入单个会话对象，也可以是包含多个会话对象的列表(list)、元组(tuple)或集合(set)。\n\nReturns:\n\n    bool: 如果命令成功执行则返回 True，否则抛出 ContinuableFailure 异常。\n\nRaises:\n\n    ContinuableFailure: 当底层 API 返回 False 时抛出，表示停止 Loopback 失败，但测试可继续执行。\n\nExamples:\n    .. code:: RobotFramework\n\n        | Stop Loopback Dot3ah | Sessions=${Sessions} |\n\nNote:\n    此函数依赖于底层 Renix API 实现实际操作，确保提供的会话对象有效且具有 handle 属性。",
  "TesterLibrary.Protocol.dot3ah.stop_org_spec_dot3ah": "停止Organization Specific\n\n该函数用于停止指定的IEEE 802.3ah（Ethernet in the First Mile）会话中的组织特定功能（如OAM - Operations, Administration, and Maintenance）。它封装了 `Dot3ahStopOrgSpecCommand` 命令的执行，并确保传入的会话参数始终被当作可迭代对象处理，如果是单个会话对象则自动转换为列表。\n\nArgs:\n\n    Sessions (:obj:`Dot3ah`): 表示要停止的802.3ah会话对象或会话对象的列表。每个会话对象必须包含一个唯一标识会话的 `handle` 属性。类型为：object / list / tuple / set\n\nReturns:\n\n    bool: 布尔值，始终返回 `True` 表示命令成功执行（如果返回 `False`，则抛出异常）。\n    \nExamples:\n    .. code:: RobotFramework\n\n        | Stop Org Spec | Sessions=${Sessions} |",
  "TesterLibrary.Protocol.dot3ah.stop_var_req_dot3ah": "..  function:: stop_var_req_dot3ah(Sessions)\n\n    Stops the variable request for IEEE 802.3ah sessions.\n\n    This function is used to terminate ongoing variable request operations on one or more IEEE 802.3ah\n    sessions. It sends a command to the backend to stop the variable request for the specified session(s),\n    and ensures uniform handling whether a single session or multiple sessions are provided.\n\n    :param Sessions: A single session object or an iterable (list, tuple, or set) of session objects\n                     for which the variable request needs to be stopped. Each session object must\n                     have a `handle` attribute that uniquely identifies the session.\n\n    :type Sessions: session object or iterable of session objects\n\n    :return: Returns ``True`` upon successful execution, indicating that the variable request has been\n             stopped for the provided sessions.\n\n    :rtype: bool\n\n    :raises ContinuableFailure: If the operation fails, a ContinuableFailure exception is raised with a\n                               message indicating the failure in the current function.\n\n    Example usage in RobotFramework:\n\n    .. code:: RobotFramework\n\n        | Stop Var Req | Sessions=${Sessions} |\n\n    Internally, this function calls the backend implementation ``renix.stop_var_req_dot3ah()``, and if\n    the result is ``False``, it raises an exception to indicate failure. Otherwise, it returns ``True``.",
  "TesterLibrary.Protocol.dot3ah.wait_dot3ah_state": "等待802.3ah会话达到指定状态。\n\n该函数用于等待一个或多个802.3ah协议会话的'`State`'属性达到指定的目标状态。内部通过轮询机制检查每个会话的状态，直到所有会话都达到目标状态或超时发生。\n\n### 参数说明：\n\n- **Sessions** (:obj:`Dot3ah` 或 list):  \n  一个802.3ah会话对象或包含多个会话对象的列表，表示需要监控的协议会话。\n\n- **State** (str, 可选，默认值为 'RESERVED'):  \n  需要等待达到的目标状态。如果未提供，默认等待状态为 `'RESERVED'`。支持的状态包括：\n  \n  - NONE\n  - UNSATISFIED\n  - NOTCOMPLETED\n  - COMPLETED\n  - RESERVED（默认）\n  - DISABLED\n  - IDLE\n\n- **Interval** (int, 可选，默认值为1秒):  \n  检查会话状态的时间间隔（单位：秒），控制轮询频率。\n\n- **TimeOut** (int, 可选，默认值为60秒):  \n  等待会话状态变化的最大时间（单位：秒）。如果在指定时间内未能全部达到目标状态，则抛出异常。\n\n### 返回值：\n\n- **bool**:  \n  如果所有会话在超时时间内成功达到目标状态，返回 `True`；否则不返回，而是抛出异常。\n\n### 异常：\n\n- **TesterException**:  \n  当等待超时时，若仍有部分或全部会话未达到指定状态，则抛出此异常。\n\n### 注意事项：\n\n- 内部调用 `_wait_state` 实现实际的等待和轮询逻辑。\n- 如果 `Sessions` 不是可迭代对象，则会被转换为列表进行处理。\n- 若 `Sessions` 包含的是 `Dot3ahProtocolConfig` 类型实例，默认等待状态为 `'RESERVED'`。\n\n### 使用示例：\n\n```robotframework\n| Wait Dot3ah State | Sessions=${Sessions} | State=COMPLETED | Interval=2 | TimeOut=120 |\n```\n\n此示例将等待名为 `${Sessions}` 的所有802.3ah会话达到 `COMPLETED` 状态，每次检查间隔为2秒，最大等待时间为120秒。",
  "TesterLibrary.Protocol.dot3ah.get_dot3ah_error_event_stats": "获取802.3ah error event 统计结果\n\n该函数用于检索与802.3ah协议相关的错误事件统计信息。它支持从现有的结果视图中获取数据或通过动态查询系统来获取数据，并允许根据会话对象和指定的统计项进行过滤和选择。\n\n参数:\n\n    Session (:obj:`Dot3ah` or list/set/tuple of :obj:`Dot3ah` or None):\n        802.3ah会话对象或其集合。每个会话对象必须具有 `Name` 属性，用于构造过滤统计信息的 'SessionHandle' 索引。\n        如果为 None，则不应用会话过滤。\n\n    StaItems (list or str or None):\n        指定要检索的统计项（列）。如果为 None，则查询所有可用属性。\n        如果提供单个字符串，则将其转换为包含一个元素的列表。必须是 'Dot3ahErrorEventStats' 类型中可用属性的子集。\n\n返回值:\n\n    dict or pd.DataFrame or bool:\n        - 如果恰好匹配一行：返回一个字典，键对应所选的 `StaItems`，值为其对应的统计值。\n        - 如果匹配多行：返回一个包含过滤后统计信息的 pandas DataFrame。\n        - 如果未找到匹配结果：返回 False。\n\n可能引发的异常:\n\n    TesterException: 在命令执行或从视图中检索数据期间发生的任何错误都会被抛出。\n    sqlite3.Error: 如果在相关函数中发生数据库访问错误。\n    KeyError: 如果内部构造索引中的列名不存在于结果DataFrame中。\n\n副作用:\n\n    - 可能会调用 `.get()` 方法刷新各种对象的数据以确保获取最新状态。\n    - 如果需要处理分页结果，会执行类似 GotoResultPageCommand 的命令。\n    - 在 ResultView 模式下为了保证数据一致性可能会调用 time.sleep(3)。\n    - 为了调试目的，会将结果 DataFrame 以表格形式记录日志。\n\n示例:\n\n    .. code:: RobotFramework\n\n        | @{StaItems} | Create List | AdjacencyState | TxUpdate |\n        | Subscribe Result | Types=Dot3ahErrorEventStats |\n        | Start Protocol |\n        | Sleep | 60 |\n        | &{Result} | Get Dot3ah Error Event Stats | Session=${Session} | StaItems=@{StaItems} |\n        | Clear Result |",
  "TesterLibrary.Protocol.dot3ah.get_dot3ah_session_statistic": "获取802.3ah会话的统计信息。\n\n此函数用于根据提供的会话对象和统计项检索Dot3ah会话的统计结果。它封装了底层 `_get_statictis` 函数，以简化对特定会话统计信息的查询。如果提供了单个会话或会话列表，则提取它们的名称作为标识符用于查询统计信息。该函数支持从所有可用统计项中选择性地检索指定的列。\n\n参数:\n    Session (:obj:`Dot3ah` 或 list, optional): 一个802.3ah会话对象或多个会话对象的集合（如列表、集合或元组），用于查询对应的统计信息。每个会话对象必须包含 `Name` 属性。如果不提供此参数，则不应用会话过滤器，默认为 None。\n    StaItems (list, optional): 需要获取的统计项列表。如果为 None，则返回所有可用的统计属性；如果为字符串，则将其转换为列表。统计项必须是 Dot3ahSessionStatistic 支持的列名子集。默认为 None。\n\n返回值:\n    dict or pd.DataFrame or bool:\n        - 如果查询结果仅匹配一行：返回一个字典，键为指定的统计项（StaItems），值为对应的数据。\n        - 如果查询结果匹配多行：返回一个 pandas DataFrame，包含过滤后的统计信息。\n        - 如果没有找到匹配的结果：返回 False。\n\n可能引发的异常:\n    TesterException: 在执行命令或检索数据期间可能会抛出此异常。\n    sqlite3.Error: 如果在相关函数中发生数据库访问错误。\n    KeyError: 如果指定的索引列（Idx）不存在于最终生成的 DataFrame 中。\n\n副作用:\n    - 可能修改内部状态，例如刷新与会话相关的数据。\n    - 如果适用，执行分页导航相关的命令。\n    - 为了调试目的，将生成的 DataFrame 以表格形式记录日志。\n\n示例:\n    .. code:: RobotFramework\n\n        | @{StaItems} | Create List | TxOrgSpecPduCounter | RxOrgSpecPduCounter |\n        | Subscribe Result | Types=Dot3ahSessionStatistic |\n        | Start Protocol |\n        | Sleep | 60 |\n        | &{Result} | Get Dot3ah Session Statistic | Session=${Session} | StaItems=@{StaItems} |\n        | Clear Result |\n\n示例返回值:\n    .. code-block:: python\n\n        {\n            'TxOrgSpecPduCounter': 10,\n            'RxOrgSpecPduCounter': 10,\n        }",
  "TesterLibrary.Protocol.ieee8021as.create_ieee8021as": "创建IEEE 802.1AS协议会话对象，并将其与指定的端口关联。\n\n该函数用于初始化一个IEEE 802.1AS协议配置对象，并将其绑定到提供的Port对象（通常为物理端口）作为其上层对象。同时，可以通过关键字参数传递额外的配置参数，动态设置协议会话的属性。创建完成后，该会话会被注册到全局的协议对象映射表中，以便后续通过句柄进行访问和操作。\n\n参数:\n    Port (:obj:`Port`): 测试仪表端口对象，作为IEEE 802.1AS协议实例的上层对象，类型为object\n\n    **kwargs : 任意关键字参数\n        可选的关键字参数，用于配置IEEE 802.1AS协议会话的其他属性。每个关键字应对应Ieee8021as类的有效属性名称，值将被赋给对应的属性。\n\n        支持的关键字参数包括:\n\n        Name (str): IEEE 802.1AS会话名称，默认值：自动生成\n\n        Enable (bool): 是否启用IEEE 802.1AS会话，默认值：True\n\n        MaxPduSize (int): 最大PDU大小，默认值：1500，取值范围：60 ~ 2047\n\n        TransmitType (str): 发送方式，默认值：SINGLE，可选值：SINGLE、BATCH\n\n        LoopBackRespTime (int): Loopback响应时间间隔（单位：秒），默认值：1，取值范围：1 ~ 10\n\n        EnableLinkFault (bool): 是否启用Link Fault功能，默认值：False\n\n        EnableDyingGasp (bool): 是否启用Dying Gasp功能，默认值：False\n\n        EnableCriticalEvent (bool): 是否启用Critical Event功能，默认值：False\n\n        EnableLoopBackResp (bool): 是否启用Loopback Response功能，默认值：True\n\n        EnableVarResp (bool): 是否启用Variable Response功能，默认值：True\n\n        VarReqPeriod (int): Variable Request请求周期（单位：秒），默认值：1，取值范围：0 ~ 10\n\n返回值:\n    (:obj:`Ieee8021as`): 创建完成的IEEE 802.1AS协议会话对象，可用于后续配置或操作，类型为object\n\n副作用:\n    将创建的Ieee8021as会话实例通过其`handle`属性注册到全局字典`map_protocol_object`中，以便后续通过句柄检索和管理该会话。\n\n示例:\n    .. code:: RobotFramework\n\n        | Create Ieee801as | Port=${Port} | MaxPduSize=1300 | Enable=False |",
  "TesterLibrary.Protocol.ieee8021as.edit_ieee8021as": "修改Ieee802.1as会话对象的属性设置\n\n该函数用于编辑一个或多个Ieee802.1as会话对象的属性，仅对已存在的属性进行修改，不会新增属性。\n\nArgs:\n\n    Session (:obj:`Ieee802.1as` 或 list): 要修改的Ieee802.1as会话对象，可以是单个对象或者包含多个对象的列表\n\nKeyword Args:\n\n    Name (str): 修改会话名称\n    \n    Enable (bool): 启用/禁用Ieee802.1as会话，默认值：True\n    \n    MaxPduSize (int): 设置最大PDU大小，默认值：1500，取值范围：60到2047之间的整数\n    \n    TransmitType (str): 设置发送方式，可选值：SINGLE（单次发送）或BATCH（批量发送），默认值：SINGLE\n    \n    LoopBackRespTime (int): 设置Loopback响应时间，单位毫秒，默认值：1，取值范围：1到10之间的整数\n    \n    EnableLinkFault (bool): 启用/禁用Link Fault功能，默认值：False\n    \n    EnableDyingGasp (bool): 启用/禁用Dying Gasp功能，默认值：False\n    \n    EnableCriticalEvent (bool): 启用/禁用Critical Event功能，默认值：False\n    \n    EnableLoopBackResp (bool): 启用/禁用Loopback Response功能，默认值：True\n    \n    EnableVarResp (bool): 启用/禁用Variable Response功能，默认值：True\n    \n    VarReqPeriod (int): 设置Variable Request周期，单位秒，默认值：1，取值范围：0到10之间的整数\n\nReturns:\n\n    bool: 属性修改操作结果，成功返回True；若部分属性不存在于会话对象中，也会返回True，但只修改存在的属性\n    \n    如果传入Session为单个会话对象，则返回该对象本身；如果为多个对象，则返回是否成功应用的布尔值\n\nExamples:\n    .. code:: RobotFramework\n\n        | Create Ieee801as | Port=${Port} | MaxPduSize=1300 |\n        | Edit Ieee8021as | Session=${session} | Enable=False | MaxPduSize=1400 |",
  "TesterLibrary.Protocol.ieee8021as.wait_ieee8021as_state": "等待802.1as会话达到指定的状态。\n\n该函数用于等待一个或多个IEEE 802.1AS会话对象达到指定的状态。如果提供的会话类型为Ieee8021asProtocolConfig，则会监听'SessionState'属性；否则，通过_wait_state方法监听默认的'State'属性。\n\nArgs:\n    Sessions (:obj:`object` 或 list): 要监控的一个或多个802.1as会话对象。可以是一个单一会话对象或包含多个会话的列表。\n    State (str 或 list, optional): 等待达到的状态，默认值为 'RUNNING'。支持以下状态：\n    \n        RUNNING\n\n        DISABLED\n\n        IDLE\n        \n    注意：如果未提供状态，默认使用 'RUNNING'。所有状态值将被转换为字符串，并与实际属性值进行不区分大小写的比较。\n    \n    Interval (int, optional): 检查会话状态的时间间隔（以秒为单位），默认值为 1 秒。\n    TimeOut (int, optional): 等待会话达到目标状态的最大超时时间（以秒为单位），默认值为 60 秒。若在超时时间内未能达到目标状态，将抛出TesterException异常。\n\nReturns:\n    bool: 如果所有会话均成功达到指定状态，返回 True；否则抛出TesterException异常。\n\nRaises:\n    TesterException: 如果在指定的超时时间内并非所有会话都达到期望的状态。\n\nExamples:\n    .. code:: RobotFramework\n\n        | Wait Ieee8021as State | Sessions=${Sessions} | State=RUNNING | Interval=2 | TimeOut=120 |",
  "TesterLibrary.Protocol.ieee8021as.wait_ieee8021as_clock_state": "等待 IEEE 802.1AS 会话的时钟状态（ClockState）达到指定的目标状态。\n\n该函数用于监控 IEEE 802.1AS 会话的时钟状态（如 MASTER 或 SLAVE）。它会在设定的时间间隔内轮询每个会话，检查其 ClockState 是否达到任意一个预期的状态。如果所有会话在超时时间内达到了预期状态，则返回 True；否则抛出 TesterException 异常。\n\n参数:\n\n    Sessions (:obj:`Ieee802.1as` 或 list/set/tuple): IEEE 802.1AS 会话对象或会话对象的集合。\n\n    State (str 或 list, optional): 预期的时钟状态，默认为 ['MASTER', 'SLAVE']。可以是一个字符串或者包含多个状态的可迭代对象。比较时不区分大小写。\n\n        支持的状态包括：\n            MASTER\n            SLAVE\n            DISABLED\n            IDLE\n\n    Interval (int, optional): 检查会话状态的时间间隔（单位：秒），默认值：1 秒。\n\n    TimeOut (int, optional): 等待的最大超时时间（单位：秒），默认值：60 秒。若在此时间内未满足条件，则抛出异常。\n\n返回值:\n\n    bool: 如果所有会话在超时时间内达到了预期的 ClockState 状态之一，则返回 True；否则抛出 TesterException。\n\n异常:\n\n    TesterException: 若在指定的超时时间内部分或全部会话未达到预期的 ClockState。\n\n注意事项:\n\n    - 如果会话对象的 ClockState 是枚举类型，则使用其名称进行比较。\n    - 每次检查中，若某个会话的当前 ClockState 不符合预期，将通过 logging.info 记录其当前状态。\n    - 此函数内部调用 `_wait_state` 方法，并监控 'ClockState' 属性。\n\n示例:\n\n    .. code:: RobotFramework\n\n        | Wait Ieee8021as Clock State | Sessions=${Sessions} | State=MASTER | Interval=2 | TimeOut=120 |",
  "TesterLibrary.Protocol.ieee8021as.get_ieee8021as_clock_statistic": "获取IEEE 802.1AS时钟统计信息。\n\n该函数用于根据提供的会话对象和统计项，从测试系统中检索IEEE 802.1AS时钟的统计结果。它封装了底层数据查询逻辑，支持对一个或多个会话进行统计信息的获取，并可指定需要返回的具体统计项。\n\n参数:\n\n    Session (object / list, optional):\n        Ieee802.1as会话对象或者由其组成的列表。如果提供的是集合类型（如list、set、tuple），则会提取每个会话对象的`.Name`属性作为会话ID。\n        如果为None，则不应用特定会话过滤条件，默认值为None。\n\n    StaItems (list / str, optional):\n        指定要获取的统计项目（列名）。可以是一个字符串（将被转换为单元素列表）或一个包含多个统计项的列表。\n        若为None，则返回所有可用统计项的数据。目前支持的统计项包括：\n\n            State\n            LocalMultiplexerAction\n\n返回值:\n\n    dict / pd.DataFrame / bool:\n        - 如果找到唯一一行匹配数据：返回一个字典，键为统计项名称，值为其对应的结果。\n        - 如果找到多行匹配数据：返回一个pandas DataFrame，包含所有匹配的行。\n        - 如果没有找到任何匹配数据：返回False。\n\n异常:\n\n    ContinuableFailure: 如果底层调用返回False，表示操作失败，抛出此异常。\n\n示例:\n\n    .. code:: RobotFramework\n\n        | @{StaItems} | Create List | AdjacencyState | TxUpdate |\n        | Subscribe Result | Types=Ieee802.1asSessionStatistic |\n        | Start Protocol |\n        | Sleep | 60 |\n        | &{Result} | Get Ieee802.1as Session Statistic | Session=${Session} | StaItems=@{StaItems} |\n        | Clear Result |\n\n注意事项:\n\n    - 在调用此函数前，必须确保已经正确启动协议并等待足够时间以生成统计数据。\n    - 需要先通过 `Subscribe Result` 订阅相关统计类型，以保证统计结果能够被捕获。\n    - 返回的数据结构取决于匹配到的行数，调用者应根据实际情况处理返回类型。",
  "TesterLibrary.Protocol.ieee8021as.get_ieee8021as_clock_sync_statistic": "获取IEEE 802.1AS时钟同步统计信息\n\n该函数用于检索指定IEEE 802.1AS会话的时钟同步相关统计信息。它封装了底层统计获取方法，并支持根据提供的会话和统计项进行过滤。\n\n参数:\n\n    Session (object 或 list/set/tuple of objects, optional): IEEE 802.1AS会话对象或会话对象集合。\n        每个对象必须包含一个`Name`属性，表示会话句柄。如果为None，则不进行会话过滤，默认为None。\n\n    StaItems (list 或 str, optional): 需要获取的统计项（列名）。如果为None，则返回所有可用属性；\n        如果是字符串，则会被转换为列表。必须是IEEE 802.1AS时钟同步统计中可用属性的子集，默认为None。\n\n返回值:\n\n    dict 或 pd.DataFrame 或 bool:\n        - 如果仅匹配一行：返回一个字典，键对应于`StaItems`中的统计项。\n        - 如果匹配多行：返回一个pandas DataFrame，包含过滤后的IEEE 802.1AS时钟同步统计信息。\n        - 如果没有找到匹配结果：返回False。\n\n异常:\n\n    - ContinuableFailure: 如果统计信息获取失败，将抛出可继续执行的失败异常。\n    - TesterException: 可能传播在命令执行或数据检索过程中引发的异常。\n    - sqlite3.Error: 如果在相关函数中发生数据库访问错误。\n    - KeyError: 如果`StaItems`中存在不存在的列名。\n\n注意事项:\n\n    - 在调用此函数前需确保已正确启动协议并等待足够时间以产生统计数据。\n    - 若使用Robot Framework示例代码，请确保已订阅正确的统计类型（Ieee802.1asSessionStatistic）。\n\n示例:\n\n    .. code:: RobotFramework\n\n        | @{StaItems} | Create List | ClockOffset | FrequencyOffset |\n        | Subscribe Result | Types=Ieee802.1asSessionStatistic |\n        | Start Protocol |\n        | Sleep | 60 |\n        | &{Result} | Get Ieee802.1as Session Statistic | Session=${Session} | StaItems=@{StaItems} |\n        | Clear Result |",
  "TesterLibrary.Protocol.ieee8021as.get_ieee8021as_message_rate_statistic": "获取IEEE 802.1AS消息速率统计信息。\n\n该函数用于检索指定IEEE 802.1AS会话的消息速率统计信息，支持按会话过滤以及指定需要返回的统计项。其内部调用底层方法 `_get_statictis` 来获取数据，并根据匹配结果的数量返回不同格式的结果。\n\nArgs:\n\n    Session (:obj:`Ieee802.1as` or list/set/tuple of :obj:`Ieee802.1as` or None, optional):\n        指定要查询的IEEE 802.1AS会话对象或多个会话对象的集合。如果为None，则不进行会话过滤。\n        如果传入单个会话对象，则使用其 `Name` 属性作为过滤条件；如果传入多个会话对象的集合，则提取每个对象的 `Name` 进行批量过滤。\n\n    StaItems (list or str or None, optional):\n        指定需要获取的统计项（列名）。如果为None，则返回所有可用统计项；\n        如果是字符串，则将其转换为包含一个元素的列表处理。\n        支持的统计项必须是 'Ieee8021asMessageRateStatistic' 类型的有效属性。\n\nReturns:\n\n    dict or pd.DataFrame or bool:\n        - 如果找到唯一一行匹配的数据：返回一个字典，键为请求的 StaItems，值为对应的统计值。\n        - 如果找到多行匹配数据：返回一个 pandas DataFrame，包含所有匹配行的统计信息。\n        - 如果未找到任何匹配结果：返回 False。\n\nRaises:\n\n    ContinuableFailure: 如果底层调用返回失败（即 result is False），则抛出可继续执行的错误异常。\n\nExamples:\n\n    .. code:: RobotFramework\n\n        | @{StaItems} | Create List | TxOrgSpecPduCounter | RxOrgSpecPduCounter |\n        | Subscribe Result | Types=Ieee802.1asSessionStatistic |\n        | Start Protocol |\n        | Sleep | 60 |\n        | &{Result} | Get Ieee802.1as Session Statistic | Session=${Session} | StaItems=@{StaItems} |\n        | Clear Result |\n\nSide Effects:\n\n    - 内部可能会调用 `.get()` 方法刷新对象数据以确保获取最新统计信息。\n    - 若需分页获取结果，可能执行如 GotoResultPageCommand 等命令。\n    - 在 ResultView 模式下切换页面时，会使用 time.sleep(3) 保证数据一致性。\n    - 调试时会记录获取到的 DataFrame 数据。\n\nNote:\n\n    - 该函数封装了底层复杂性，包括分页、过滤和结果视图选择等逻辑。\n    - 若传入无效的 StaItems 或数据库访问异常，可能引发 KeyError、sqlite3.Error 等异常。",
  "TesterLibrary.Protocol.ieee8021as.get_ieee8021as_parent_clock_info_statistic": "获取IEEE 802.1AS父时钟信息统计结果\n\n该函数用于检索指定会话的IEEE 802.1AS父时钟信息统计，支持按会话过滤并可指定需要返回的统计项。它封装了底层方法以获取相关的统计数据，并根据匹配的会话行数返回字典、DataFrame或布尔值。\n\nArgs:\n\n    Session (:obj:`Ieee802.1as` or list or set or tuple or None): \n        - 如果为None，则不使用会话句柄进行过滤。\n        - 如果为单个对象，则使用其`.Name`属性作为会话句柄。\n        - 如果为集合类型（如list, set, tuple），则提取其中所有元素的`.Name`属性形成一个会话句柄列表用于过滤。\n        表示需要获取统计的一个或多个Ieee802.1as会话对象。\n\n    StaItems (list or str or None):\n        - 如果为None，则查询所有可用的统计属性。\n        - 如果为字符串，则将其转换为单元素列表作为统计项。\n        - 如果为列表，则表示要获取的具体统计项（列名），应为'Ieee8021asParentClockInfoStatistic'下的有效列名。\n        目前支持的统计项包括：\n        \n            State\n            \n            LocalMultiplexerAction\n\nReturns:\n\n    dict or pd.DataFrame or bool:\n        - 如果恰好匹配一行：返回一个字典，键为请求的统计项，值为对应的数值。\n        - 如果匹配多行：返回一个pandas DataFrame，包含所有匹配的行，并仅保留请求的统计项。\n        - 如果没有找到匹配结果：返回False。\n\nRaises:\n\n    ContinuableFailure: 如果底层调用返回False，抛出此异常以表示统计获取失败。\n\nExamples:\n    .. code:: RobotFramework\n\n        | @{StaItems} | Create List | State | LocalMultiplexerAction |\n        | Subscribe Result | Types=Ieee802.1asSessionStatistic |\n        | Start Protocol |\n        | Sleep | 60 |\n        | &{Result} | Get Ieee802.1as Parent Clock Info Statistic | Session=${Session} | StaItems=@{StaItems} |\n        | Clear Result |",
  "TesterLibrary.Protocol.ieee8021as.get_ieee8021as_state_summary_statistic": "获取IEEE 802.1AS状态摘要统计信息\n\n该函数用于检索指定端口的IEEE 802.1AS状态摘要统计信息。它是一个封装函数，专门用于获取类型为'Ieee8021asStateSummaryStatistic'的统计数据。如果未提供端口参数，则会尝试在不进行端口过滤的情况下获取统计信息。\n\n参数:\n    Port (object or list of objects, optional): 端口对象或端口对象列表，每个端口对象必须包含'Name'属性作为标识符。\n        如果为None（默认值），则不按端口过滤获取统计信息。\n    StaItems (list, optional): 指定需要获取的统计项（即表格中的列）。如果为None（默认值），\n        则查询所有可用属性。目前支持的统计项包括：\n        \n            State\n            LocalMultiplexerAction\n\n返回值:\n    dict: 包含请求的统计项及其对应值的字典。例如::\n    \n        {\n            'State': 'Enabled',\n            'LocalMultiplexerAction': 'Forward'\n        }\n\n异常:\n    ContinuableFailure: 如果数据检索失败（即返回False），将抛出此异常。\n\n示例:\n    .. code:: RobotFramework\n\n        | @{StaItems} | Create List | State | LocalMultiplexerAction |\n        | Subscribe Result | Types=Ieee802.1asSessionStatistic |\n        | Start Protocol |\n        | Sleep | 60 |\n        | &{Result} | Get Ieee802.1as Session Statistic | Port=${Port} | StaItems=@{StaItems} |\n        | Clear Result |",
  "TesterLibrary.Protocol.ieee8021as.get_ieee8021as_time_properties_statistic": "获取IEEE 802.1AS时间属性统计信息。\n\n该函数用于检索指定会话的IEEE 802.1AS时间相关统计属性，支持按需过滤统计项，并可控制结果视图模式。该接口是对 `_get_statictis` 的封装调用，专用于查询类型为 'Ieee8021asTimePropertiesStatistic' 的统计数据。\n\n参数:\n\n    Session (object / list / None):\n        - 如果为None：不进行会话过滤，全局获取统计信息。\n        - 如果是一个具有 `.Name` 属性的对象：使用其名称作为统计索引过滤条件。\n        - 如果是包含多个此类对象的列表：提取所有名称用于多会话过滤。\n        对应内部传递给 `_get_statictis` 函数的 `Idx` 参数中的 'SessionHandle' 键。\n\n    StaItems (list 或 str 或 None):\n        指定需要获取的时间属性统计项（列名），如果为None则获取所有可用项；\n        若传入字符串将自动转换为单元素列表；\n        所有项必须是有效的IEEE 802.1AS时间属性字段。\n\n返回值:\n\n    dict / pd.DataFrame / bool:\n        - 若仅匹配一行：返回一个字典，键为请求的StaItems，值为对应统计值。\n        - 若匹配多行：返回pandas DataFrame，包含所有匹配的行。\n        - 若无匹配结果：返回False。\n\n异常:\n\n    - TesterException: 当执行命令失败或数据获取过程中发生错误。\n    - sqlite3.Error: 若涉及数据库操作（如性能统计）时发生访问异常。\n    - KeyError: 提供的列名不存在于结果DataFrame中。\n\n副作用:\n\n    - 调用`.get()`方法刷新会话或统计状态。\n    - 在ResultView模式下可能执行 GotoResultPageCommand 来翻页获取结果。\n    - 引入短暂延迟以确保页面切换后数据一致性。\n    - 日志输出表格化调试信息。\n\n示例:\n    .. code:: RobotFramework\n\n        | @{StaItems} | Create List | AdjacencyState | TxUpdate |\n        | Subscribe Result | Types=Ieee802.1asSessionStatistic |\n        | Start Protocol |\n        | Sleep | 60 |\n        | &{Result} | Get Ieee802.1as Session Statistic | Session=${Session} | StaItems=@{StaItems} |\n        | Clear Result |",
  "TesterLibrary.Protocol.igmp.create_igmp": "创建IGMP协议会话对象\n\n该函数用于在指定端口上创建并配置一个新的IGMP协议实例。它初始化一个Igmp对象，并将其绑定到提供的端口（作为其父对象或上层层），并通过关键字参数应用额外的配置参数。新创建的IGMP实例会被注册到全局协议对象映射中，使用其句柄作为键，以便后续引用和管理。\n\nArgs:\n    Port (:obj:`Port`): 测试仪表端口对象，类型为object，表示IGMP协议将绑定的物理或逻辑端口。\n\nKeyword Args:\n    Name (str): IGMP会话名称，类型为字符串。\n\n    Enable (bool): 是否启用IGMP协议会话，取值范围：True或False，默认值：True。\n\n    Version (str): IGMP协议版本，支持值包括IGMPV1、IGMPV2、IGMPV3，默认值为IGMPV2。\n\n    PackReports (bool): 是否合并报告报文，取值范围：True或False，默认值：False。\n\n    InitialJoin (bool): 是否发送单个初始加入组的报文，取值范围：True或False，默认值：False。\n\n    RobustJoin (bool): 是否发送多个初始加入组的报文，取值范围：True或False，默认值：False。\n\n    RobustnessVariable (int): IGMP鲁棒性变量值，取值范围：2-255，默认值：2。\n\n    UnsolicitedReportInterval (int): 发送无请求报告报文的时间间隔（秒），取值范围：0-65535，默认值：10。\n\n    ForceLeave (bool): 是否强制发送Leave报文，取值范围：True或False，默认值：True。\n\n    RouterPresentTimeout (int): IGMPv1路由器存在的超时时间（秒），取值范围：0-65535，默认值：400。\n\n    NotFragment (bool): 设置IP头部不分片标志位，取值范围：True或False，默认值：False。\n\n    TosValue (Hex or int): 设置IP头部的TOS值（十进制或十六进制格式），取值范围：0x00-0xFF，默认值：0xc0。\n\nReturns:\n    (:obj:`Igmp`): 返回新创建和配置的IGMP协议会话对象，类型为object。\n\nExamples:\n    .. code:: RobotFramework\n\n        | Create Igmp | Port=${Port} | Version=IGMPV3 |",
  "TesterLibrary.Protocol.igmp.edit_igmp": "编辑IGMP协议会话对象的属性。\n\n该函数用于更新指定IGMP会话对象（Session）的属性。通过关键字参数传递需要修改的属性名和对应的值，函数会检查会话对象中是否存在该属性，并在存在时更新其值。所有参数除Session外均为可选。\n\nArgs:\n\n    Session (:obj:`Igmp`): 要编辑的IGMP协议会话对象，类型为对象实例。\n\nKeyword Args:\n\n    Name (str): IGMP会话的名称，字符串类型。\n\n    Enable (bool): 是否启用该IGMP会话，布尔类型，默认值：True。\n\n    Version (str): IGMP协议版本，支持值包括：\n\n        IGMPV1\n\n        IGMPV2\n\n        IGMPV3\n\n        默认值：IGMPV2。\n\n    PackReports (bool): 是否合并报告报文，布尔类型，默认值：False。\n\n    InitialJoin (bool): 是否使用单个初始报文加入组播组，布尔类型，默认值：False。\n\n    RobustJoin (bool): 是否使用多个初始报文加入组播组，布尔类型，默认值：False。\n\n    RobustnessVariable (int): IGMP鲁棒性变量值，整数类型，取值范围：2-255，默认值：2。\n\n    UnsolicitedReportInterval (int): 发送无请求报告报文的时间间隔（单位：秒），整数类型，取值范围：0-65535，默认值：10。\n\n    ForceLeave (bool): 是否强制发送Leave报文，布尔类型，默认值：True。\n\n    RouterPresentTimeout (int): IGMPv1路由器存在超时时间（单位：秒），整数类型，取值范围：0-65535，默认值：400。\n\n    NotFragment (bool): 是否禁止IP分片，布尔类型，默认值：False。\n\n    TosValue (bool): 是否设置IP头部的TOS字段（以Hex表示），布尔类型，默认值：False。\n\nReturns:\n\n    bool: 操作是否成功完成。注意：即使没有实际修改任何属性，只要操作未发生错误即返回True。\n\nExamples:\n\n    .. code:: RobotFramework\n\n        | Edit Igmp | Session=${igmp_session} | Version=IGMPV1 | RouterPresentTimeout=500 |",
  "TesterLibrary.Protocol.igmp.select_source_interface": "Selects the source interface for a given session based on the provided memberships and interface.\n\nThis function is used to bind the multicast group filter source address of a protocol session to a specific test instrument interface. It wraps the underlying `renix.select_source_interface` function and includes additional failure handling logic: if the result is `False`, it raises a `ContinuableFailure` exception; otherwise, it returns the result.\n\nParameters:\n-----------\nSession : object\n    The IGMP/MLD session object (type: Igmp) on which the source interface will be selected.\n    Must support the `select_source_interface` method.\n\nMemberships : object\n    A multicast protocol-group binding configuration object (type: MldMembershipsConfig), defining which interfaces are associated with which multicast groups.\n\nInterface : object\n    The test instrument interface object (type: Interface) to be set as the source interface.\n\nReturns:\n--------\nbool\n    Returns `True` if the source interface selection is successful; `False` otherwise.\n\nRaises:\n-------\nContinuableFailure\n    If the underlying operation fails (i.e., returns `False`), a `ContinuableFailure` exception is raised to indicate the issue while allowing test execution to continue.\n\nExample Usage:\n--------------\n.. code:: RobotFramework\n\n    | ${Interface} |  create_interface | Port=${Port} |\n    | ${Group} | Create Multicast Group | Version=IPV4 | Start=225.0.1.1 | Number=20 |\n    | ${Session} | Create Igmp | Port=${Port} | Version=IGMPV3 |\n    | ${Memberships} | Create Memberships | Session=${Session} | Start=225.0.1.1 | DeviceGroupMapping=ONETOONE |\n    | binding_multicast_group | Session=${Session} | Memberships=${Memberships} | MulticastGroup=${Group} |\n    | Select Source Interface | Session=${Session} | Memberships=${Memberships} | Interface=${Interface} |\n\nDescription:\n------------\nThis function is typically used in network testing scenarios involving multicast traffic control. It allows dynamic assignment of a source interface for multicast traffic filtering within an IGMP or MLD session, enabling precise control over test traffic paths and sources.",
  "TesterLibrary.Protocol.igmp.wait_igmp_state": "等待IGMP协议会话达到指定状态。\n\n该函数用于监控一个或多个IGMP协议会话的状态，并持续等待直到所有会话都达到指定的目标状态之一。函数以固定的时间间隔轮询每个会话的当前状态，如果在设定的超时时间内所有会话均达到目标状态，则返回True；否则将抛出TesterException。\n\n参数说明：\n- Sessions (list): IGMP协议会话对象列表。每个会话应为Igmp类型对象。\n- State (str, optional): 期望等待达到的目标状态，默认值为 'MEMBER'。支持以下状态：\n    - NONMEMBER\n    - JOINING\n    - MEMBER (默认)\n    - LEAVING\n  函数将忽略大小写进行状态比较。\n- Interval (int, optional): 状态查询的时间间隔（单位：秒），默认值为1秒。\n- TimeOut (int, optional): 等待状态的最大超时时间（单位：秒），默认值为60秒。若超时仍未满足条件，则抛出异常。\n\n返回值：\n- bool: 如果所有会话在超时时间内达到目标状态之一，则返回True；否则抛出TesterException。\n\n异常：\n- Failure: 如果底层调用返回False，则抛出Failure异常，表示操作失败。\n\n注意事项：\n- 若Sessions中包含的是IgmpProtocolConfig类型的对象，则函数将监控其'IgmpHostState'属性；否则监控其'State'属性。\n- 所有未匹配到目标状态的会话会在每次检查时通过logging.info输出当前状态信息。\n- 该函数内部调用renix.wait_igmp_state实现核心逻辑。\n\n示例：\n.. code:: RobotFramework\n\n    | Wait Igmp State | Sessions=${Sessions} | State=MEMBER | Interval=2 | TimeOut=120 |",
  "TesterLibrary.Protocol.igmp.igmp_send_report": "Sends an IGMP report for each session in the provided Sessions collection.\n\nThis function is used to trigger the sending of IGMP reports by invoking the `send_report()` method on each session object passed to it. It supports both single session objects and collections (lists, sets, or tuples) of session objects. If a single session is provided, it will be automatically wrapped into a list for processing.\n\nEach session object must implement the `send_report()` method; otherwise, a TypeError will be raised during execution.\n\nParameters:\n-----------\nSessions : object or iterable\n    A single session object or an iterable (list, set, or tuple) containing session objects.\n    Each session object must have a `send_report()` method that is called during execution.\n\nReturns:\n--------\nbool\n    Always returns True to indicate successful execution of the IGMP report sending process.\n\nRaises:\n-------\nTypeError\n    If any item in Sessions does not have a `send_report()` method.\nContinuableFailure\n    If the underlying C++ API returns False, indicating a failure in sending IGMP reports, this function raises a ContinuableFailure exception with a descriptive error message.\n\nExamples:\n---------\n.. code:: RobotFramework\n\n    | Igmp Send Report | Sessions=${Session} |\n\nSee Also:\n---------\n`renix.igmp_send_report` - The underlying backend implementation responsible for interacting with the test equipment's API.",
  "TesterLibrary.Protocol.igmp.igmp_send_leave": "Sends an IGMP Leave message for each session in the provided Sessions collection.\n\nThis function is used to end multicast group membership for one or more IGMP sessions by sending an IGMP Leave message. It supports both single session objects and collections of session objects (such as lists, sets, or tuples). If a single session is provided, it is internally converted into a list for uniform processing. Each session's `send_leave()` method is called to transmit the IGMP Leave message.\n\nParameters:\n-----------\nSessions : Igmp session object or iterable of Igmp session objects (list, set, tuple)\n    A single IGMP session object or a collection of IGMP session objects for which IGMP Leave messages are to be sent.\n\nReturns:\n--------\nbool\n    Always returns True to indicate successful execution of the operation. If the operation fails, a `ContinuableFailure` exception is raised.\n\nRaises:\n-------\nContinuableFailure\n    If the underlying IGMP Leave message transmission fails (e.g., if `renix.igmp_send_leave` returns False), a `ContinuableFailure` exception is raised with an appropriate error message.\n\nDescription:\n------------\nThis function abstracts away the type-checking and iteration logic, allowing the caller to seamlessly pass either a single session or multiple sessions. It ensures that IGMP Leave messages are properly sent for all specified sessions, facilitating the termination of multicast group memberships.\n\nExample Usage:\n--------------\n.. code:: RobotFramework\n\n    | Igmp Send Leave | Sessions=${Session} |",
  "TesterLibrary.Protocol.igmp.igmp_resend_report": "Re-sends IGMP reports for the specified session(s).\n\nThis function ensures that each provided session retransmits its IGMP report.\nIf a single session is provided, it will be converted into a list to maintain consistency\nin processing. Each session's `resend_report()` method is called in turn.\n\nParameters:\n-----------\nSessions : object or iterable of objects\n    A single session object or an iterable (list, set, tuple) of session objects.\n    Each session must have a `resend_report()` method defined.\n\nReturns:\n--------\nbool\n    Always returns True, indicating the operation was processed successfully.\n\nRaises:\n-------\nContinuableFailure\n    If the underlying implementation (renix.igmp_resend_report) returns False,\n    indicating a failure in retransmitting the IGMP reports.\n\nExamples:\n---------\n.. code:: RobotFramework\n\n    | Igmp Resend Report | Sessions=${Session} |",
  "TesterLibrary.Protocol.igmp.get_igmp_host_statistic": "获取IGMP主机相关的统计信息，返回指定会话的IGMP统计项或包含多个结果的DataFrame。\n\nArgs:\n\n    Session (object or list or set or tuple or None):\n        - 如果为None：不进行会话过滤，可能返回所有可用的IGMP主机统计数据。\n        - 如果是具有`.Name`属性的对象：使用该对象的名称作为'IgmpHostBlockId'的值。\n        - 如果是此类对象的集合（列表、集合、元组）：将它们的名称收集到一个列表中，并作为'IgmpHostBlockId'的值。\n        默认为: None\n\n    StaItems (list or str or None):\n        - 指定要检索的'IgmpHostResults'中的统计项目（列）。\n        - 如果为None：查询所有可用属性（通过ListROMPropertiesCommand获取）。\n        - 如果是字符串：将其转换为单元素列表。\n        - 必须是可用的IGMP主机结果属性的子集。支持的统计项包括：\n            IgmpTxFrames\n            IgmpRxFrames\n            IgmpRxUnknownTypes\n            IgmpRxChecksumErrors\n            IgmpRxLengthErrors\n        默认为: None\n\nReturns:\n\n    dict or pd.DataFrame or bool:\n        - 如果找到恰好一行匹配：返回一个字典，键为请求的统计项(`StaItems`)，值为对应的数值。\n        - 如果找到多行匹配：返回一个pandas DataFrame，包含所有匹配的行，并根据'IgmpHostBlockId'和请求的`StaItems`进行过滤。\n        - 如果没有找到匹配行：返回False\n\nRaises:\n\n    ContinuableFailure: 如果调用返回False，表示获取统计失败。\n\n    TesterException: 可能传播在命令执行或数据检索过程中引发的异常。\n\n    sqlite3.Error: 如果底层函数（例如性能相关统计检索）发生数据库访问错误。\n\n    KeyError: 如果提供的列名在结果DataFrame中不存在。\n\nSide Effects:\n\n    - 内部调用`_get_statictis`函数，可能会刷新相关对象的状态（例如通过调用`.get()`方法）。\n    - 在某些模式下使用`time.sleep(3)`以确保页面切换时的数据一致性。\n    - 使用GotoResultPageCommand处理分页结果。\n    - 将结果DataFrame以表格形式记录日志，用于调试。\n\nExamples:\n    .. code:: RobotFramework\n\n        | @{StaItems} | Create List | IgmpTxFrames | IgmpRxFrames |\n        | Subscribe Result | Types=IgmpHostResults |\n        | Start Protocol |\n        | Sleep | 60 |\n        | &{Result} | Get Igmp Host Statistic | Session=${Session} | StaItems=@{StaItems} |\n        | Clear Result |",
  "TesterLibrary.Protocol.igmp.get_igmp_port_statistic": "获取IGMP端口级统计信息，返回指定统计项的聚合结果。\n\n该函数用于从一个或多个测试仪表端口对象中检索IGMP协议相关的端口级统计数据。它封装了内部方法 `_get_statictis` 来执行实际的数据获取逻辑，并对输入参数进行预处理以适配底层接口要求。\n\n### 参数说明：\n\n- **Port** (`Port` 对象 或 由 `Port` 对象组成的列表/集合/元组, 可选)  \n  指定需要获取统计信息的端口对象或对象集合。每个端口对象应包含 `Name` 属性用于唯一标识。  \n  如果为 `None`（默认值），则不指定特定端口过滤条件，返回所有相关端口的统计信息。\n\n- **StaItems** (`list`, `str`, 或 `None`, 可选)  \n  指定需要获取的统计项列表。若为 `None`（默认值），则获取所有可用的 IGMP 端口统计项；  \n  若传入字符串，则将其转换为单元素列表处理。  \n  支持的统计项包括：\n\n  - IgmpTxFrames\n  - IgmpRxFrames\n  - IgmpTxV1Reports\n  - IgmpTxV2Reports\n  - IgmpTxLeaveGroups\n  - IgmpTxV3Reports\n  - IgmpTxV3ModeInclude\n  - IgmpTxV3ModeExclude\n  - IgmpTxV3ModeChangeToInclude\n  - IgmpTxV3ModeChangeToExclude\n  - IgmpTxV3ModeAllowNewSources\n  - IgmpTxV3ModeBlockOldSources\n  - IgmpRxV1Queries\n  - IgmpRxV2Queries\n  - IgmpRxV3Queries\n  - IgmpRxGeneralQueries\n  - IgmpRxGroupSpecificQueries\n  - IgmpRxGroupAndSourceSpecificQueries\n  - IgmpRxUnknownTypes\n  - IgmpRxChecksumErrors\n  - IgmpRxLengthErrors\n\n### 返回值：\n\n- `dict`: 当仅匹配到一个统计结果时，返回键值对形式的字典，键为请求的统计项名称，值为对应统计值。\n- `pandas.DataFrame`: 当匹配到多个端口的统计结果时，返回一个 DataFrame，每一行代表一个端口的 IGMP 统计信息。\n- `False`: 当未找到任何匹配的统计结果时返回 `False`。\n\n### 异常抛出：\n\n- `ContinuableFailure`: 当底层调用返回 `False` 表示失败时，将抛出此异常并附带相应错误信息。\n- 其他异常继承自以下可能引发的错误类型（来自后端）：\n  - `TesterException`: 命令执行或数据检索过程中发生错误。\n  - `sqlite3.Error`: 数据库访问问题导致性能相关统计获取失败。\n  - `KeyError`: 内部生成索引列名在结果 DataFrame 中不存在。\n\n### 使用示例：\n\n```robotframework\n| @{StaItems} | Create List | IgmpTxFrames | IgmpRxFrames |\n| Subscribe Result | Types=IgmpPortAggregatedResults |\n| Start Protocol |\n| Sleep | 60 |\n| &{Result} | Get Igmp Port Statistic | Session=${Session} | StaItems=@{StaItems} |\n| Clear Result |\n```\n\n### 注意事项：\n\n- 本函数内部会调用 `.get()` 方法刷新数据，可能会引起状态变化。\n- 在处理分页结果时，会自动执行类似 `GotoResultPageCommand` 的导航操作。\n- 函数日志中会记录最终返回的 DataFrame（以表格格式输出），便于调试和验证结果。",
  "TesterLibrary.Protocol.igmp.create_igmp_querier": "创建IGMP Querier协议会话对象\n\n该函数用于在指定的端口上创建并配置一个新的IGMP Querier实例。它不仅初始化IgmpQuerier对象，还将通过关键字参数提供额外的配置选项应用到该实例或其关联的会话对象上。此外，该函数还会将创建的IgmpQuerier实例通过其句柄注册到全局协议对象映射中，以便后续操作或查询使用。\n\nArgs:\n\n    Port (:obj:`Port`): 测试仪表端口对象，表示IGMP Querier绑定的物理或逻辑端口，类型为object\n\nKeyword Args:\n\n    Name (str): IGMP Querier会话名称，类型为字符串\n\n    Enable (bool): 是否启用IGMP Querier协议会话，取值范围：True 或 False，默认值：True\n\n    Version (str): IGMP协议版本，类型为字符串，默认值：IGMPV2，支持值：\n\n        IGMPV1\n\n        IGMPV2\n\n        IGMPV3\n\n    RobustnessVariable (int): 健壮系数，用于控制查询器对成员报告丢失的容忍度，取值范围：2-255，默认值：2\n\n    Interval (int): 普通查询报文发送间隔（单位：秒），取值范围：0-4294967295，默认值：125\n\n    QueryResponseInterval (int): 查询响应时间间隔（单位：毫秒），取值范围：0-4294967295，默认值：10000\n\n    StartupQueryCount (int): 启动时发送的初始查询报文数量，取值范围：1-255，默认值：2\n\n    LastMemberQueryInterval (int): 最后一个成员查询的时间间隔（单位：毫秒），取值范围：0-4294967295，默认值：1000\n\n    LastMemberQueryCount (int): 最后一个成员查询的次数，取值范围：0-255，默认值：2\n\n    IPv4DoNotFragment (bool): 设置IP头中的不分片标志位，取值范围：True 或 False，默认值：False\n\n    IPv4TosValue (hex): 设置IPv4头部的TOS字段值，类型为十六进制，取值范围：0x0-0xff，默认值：0xc0\n\nReturns:\n\n    (:obj:`IgmpQuerier`): 创建的IGMP Querier协议会话对象，可用于后续操作和配置，类型为object\n\nRaises:\n\n    ContinuableFailure: 如果创建IGMP Querier失败，则抛出此异常，提示函数执行失败，但测试可以继续进行\n\nExamples:\n    .. code:: RobotFramework\n\n        | Create Igmp Querier | Port=${Port} | Version=IGMPV3 | Interval=100 |",
  "TesterLibrary.Protocol.igmp.edit_igmp_querier": "编辑IGMP Querier协议会话对象\n\n该函数用于更新指定IGMP Querier会话(Session)的属性配置。通过传入的关键字参数，动态地修改Session对象中已存在的属性值。仅支持修改Session对象中原本就存在的属性，若传入未知属性则会被忽略。\n\nArgs:\n\n    Session(:obj:`IgmpQuerier`): 要编辑的IGMP Querier协议会话对象，类型为object，必须是有效的IgmpQuerier实例。\n\nKeyword Args (可选):\n\n    Name (str): 设置或修改该IGMP Querier会话的名称。\n\n    Enable (bool): 启用或禁用该IGMP Querier会话，默认为True表示启用。\n\n    Version (str): 指定IGMP协议版本，支持'IGMPV1'、'IGMPV2'、'IGMPV3'，默认为'IGMPV2'。\n\n    RobustnessVariable (int): IGMP查询健壮系数，取值范围2-255，默认为2。\n\n    Interval (int): 查询报文发送的时间间隔（单位：秒），取值范围0-4294967295，默认为125秒。\n\n    ResponseInterval (int): 主机响应查询的最大延迟时间（单位：毫秒），取值范围0-4294967295，默认为10000毫秒。\n\n    StartupQueryCount (int): 开始阶段发送初始查询报文的数量，取值范围1-255，默认为2。\n\n    LastMemberQueryInterval (int): 最后成员查询的时间间隔（单位：毫秒），取值范围0-4294967295，默认为1000毫秒。\n\n    LastMemberQueryCount (int): 最后成员查询的次数，取值范围0-255，默认为2次。\n\n    IPv4DoNotFragment (bool): 是否设置IP头中的不分片标志位，True表示设置，False表示不设置，默认为False。\n\n    IPv4TosValue (hex): 设置IPv4头部的TOS字段值，以十六进制表示，取值范围0x0-0xff，默认为0xc0。\n\nReturns:\n\n    bool: 如果成功更新了Session对象的属性，则返回True；如果失败或遇到异常，则返回False。\n\nExamples:\n    .. code:: RobotFramework\n\n        | Edit Igmp Querier | Session=${igmp_querier_session} | Version=IGMPV3 | IPv4TosValue=0xff |\n\n说明：\n\n- 本函数底层调用Renix API实现属性更新。\n- 若操作失败，将抛出ContinuableFailure异常，提示当前函数执行失败。\n- 所有关键字参数均为可选，仅当提供对应参数时才会尝试更新对应的属性。",
  "TesterLibrary.Protocol.igmp.apply_igmp_querier": "Applies the IGMP querier configuration to one or more session objects.\n\nThis function sends an IGMP querier configuration incrementally to the backend for processing.\nIt accepts either a single session object or a collection of session objects (such as a list, set,\nor tuple), and invokes the `apply()` method on each session to configure the IGMP querier settings.\nThe function ensures that all provided sessions are properly processed, regardless of their\ncontainer type.\n\nParameters:\n    Sessions (object or iterable): A single session object or an iterable containing multiple\n                                   session objects. Each session must have an `apply()` method\n                                   that handles the actual configuration logic.\n\nReturns:\n    bool: Always returns True, indicating successful application of the IGMP querier\n          configuration to all provided sessions.\n\nRaises:\n    AttributeError: If any of the provided session objects does not have an `apply()` method.\n    TypeError: If the `Sessions` argument is not a valid session object nor an iterable\n               of session objects.\n    ContinuableFailure: If the underlying C++ API returns False, indicating a failure in\n                        applying the configuration.\n\nExamples:\n    .. code:: RobotFramework\n\n        | Apply Igmp Querier |",
  "TesterLibrary.Protocol.igmp.wait_igmp_querier_state": "等待Igmp Querier协议会话达到指定状态\n\nArgs:\n\n    Sessions (list (:obj:`IgmpQuerier`)): Igmp Querier协议会话对象列表。可以传入单个会话对象或可迭代的多个会话对象。\n\n    State (str or list, optional): 等待Igmp Querier协议会话达到的状态，默认值为 'UP'。支持以下状态：\n\n        NOTSTARTED\n\n        UP\n\n    该参数可以是单个状态字符串，也可以是一个包含多个状态的列表。所有状态值将被转换为字符串，并且与实际会话状态进行不区分大小写的比较。\n\n    Interval (int, optional): 查询协议会话状态的间隔时间，单位为秒，默认值：1 秒。\n\n    TimeOut (int, optional): 等待协议会话状态超时的时间，单位为秒，默认值：60 秒。\n        如果在指定时间内会话未达到目标状态，将抛出TesterException异常。\n\nReturns:\n\n    bool: 如果所有会话在超时时间内达到目标状态之一，则返回True；否则抛出异常。\n\nRaises:\n\n    TesterException: 如果在TimeOut时间内不是所有的会话都达到期望的状态。\n\nExamples:\n    .. code:: RobotFramework\n\n        | Wait Igmp Querier State | Sessions=${Sessions} | State=UP | Interval=2 | TimeOut=120 |\n\nNotes:\n    - 该函数内部调用 `_wait_state` 方法，可用于监控任意会话属性的状态变化。\n    - 每次检查时，如果会话状态未达到期望状态，将会通过 logging.info 记录当前状态。\n    - 如果会话状态属性是 Enum 类型，其名称将用于比较。",
  "TesterLibrary.Protocol.igmp.get_igmp_querier_statistic": "获取IGMP Querier协议会话的统计信息\n\n该函数用于查询一个或多个IGMP Querier协议会话的统计结果。它封装了内部统计方法，支持根据会话对象过滤统计结果，并可指定需要获取的统计项。\n\n参数:\n    Session (:obj:`IgmpQuerier` 或 由 IgmpQuerier 对象组成的列表/集合/元组, 可选):\n        - 如果为 None，则不进行会话过滤，返回所有可用的 IGMP Querier 统计。\n        - 如果为单个 IgmpQuerier 对象，则提取其 Name 属性作为会话标识符。\n        - 如果为 IgmpQuerier 对象的集合，则提取每个对象的 Name 属性形成会话标识符列表。\n\n    StaItems (list, str, 可选):\n        指定要获取的统计项目列表，默认为 None 表示获取所有可用统计项。\n        支持的统计项包括:\n\n            QuerierTxFrames - 发送的数据帧数量  \n            QuerierRxFrames - 接收的数据帧数量  \n            QuerierRxUnknownTypes - 接收到的未知类型报文数量  \n            QuerierRxChecksumErrors - 校验错误的接收报文数量  \n            QuerierRxLengthErrors - 长度错误的接收报文数量  \n\n        如果传入字符串，将自动转换为包含单个元素的列表。\n\n返回值:\n    dict 或 pandas.DataFrame 或 bool:\n        - 如果仅匹配到一行数据：返回字典，键为统计项名称，值为对应的统计值。\n        - 如果匹配到多行数据：返回 pandas DataFrame，包含所有匹配的统计结果。\n        - 如果没有找到匹配的结果：返回 False。\n\n异常:\n    ContinuableFailure: 当底层调用失败时抛出此异常。\n    TesterException: 在执行过程中如果发生命令执行或数据检索错误，可能抛出此异常。\n    sqlite3.Error: 如果在性能相关统计的数据库访问过程中发生错误，可能抛出此异常。\n    KeyError: 如果索引列（如 QuerierId）在结果中不存在，可能引发此异常。\n\n副作用:\n    - 内部可能会调用 `.get()` 方法刷新对象状态以获取最新数据。\n    - 可能执行分页导航命令（如 GotoResultPageCommand）来获取完整结果。\n    - 会记录返回的 DataFrame 用于调试目的。\n\n示例:\n    .. code:: RobotFramework\n\n        | @{StaItems} | Create List | QuerierTxFrames | QuerierRxFrames |\n        | Subscribe Result | Types=IgmpQuerierResults |\n        | Start Protocol |\n        | Sleep | 60 |\n        | &{Result} | Get Igmp Querier Statistic | Session=${Session} | StaItems=@{StaItems} |\n        | Clear Result |",
  "TesterLibrary.Protocol.igmp.edit_igmp_port_config": "修改IGMP端口配置\n\n用途：\n该函数用于为一个或多个指定的测试仪表端口修改IGMP端口配置，例如设置IGMP的最大输出速率。\n\n参数：\n    Ports (:obj:`Port` 或 list of :obj:`Port`): 测试仪表端口对象，可以是一个单独的端口对象或者包含多个端口对象的列表。\n    \n关键字参数（kwargs）：\n    IgmpMaximumOutputRate (int): IGMP报文的最大发送速率（单位：包/秒），取值范围为1到1000000000，默认值为100。\n\n返回值：\n    bool: 如果IGMP端口配置成功修改，则返回True；否则返回False。\n\n异常：\n    当配置失败时，将抛出ContinuableFailure异常，并附带相应的错误信息。\n\n示例：\n    .. code:: RobotFramework\n\n        | Edit Igmp Port Config | Ports=${Ports} | IgmpMaximumOutputRate=100 |",
  "TesterLibrary.Protocol.isis.create_isis": "创建ISIS协议会话对象\n\n该函数用于在指定的端口上创建并初始化一个ISIS协议配置实例。它会在底层调用`renix.create_isis`方法，并将创建后的协议对象通过其句柄注册到全局的协议对象映射中，以便后续可以通过句柄访问该协议配置。\n\nArgs:\n\n    Port (:obj:`Port`): 测试仪表端口对象，表示当前要绑定的物理或逻辑端口，类型为object。\n\nKeyword Args:\n\n    Name (str): ISIS协议会话名称，用于标识该ISIS会话的字符串，默认值由系统自动分配。\n\n    Enable (bool): 是否启用该ISIS协议会话，默认值为True。\n\n    IpVersion (str): 指定IP版本，支持以下取值：\n        - IPV4（默认）\n        - IPV6\n        - IPV4IPV6\n\n    Level (str): 区域级别（Level），支持以下取值：\n        - L2（默认）\n        - L1\n        - L1L2\n\n    NetworkType (str): 网络类型，支持以下取值：\n        - BROADCAST（默认）\n        - P2P\n\n    SystemId (str): 系统ID，通常为MAC地址格式，默认值为00:00:00:00:00:01。\n\n    Priority (int): 路由器优先级，范围0-127，默认值为0。\n\n    AuthMethod (str): 认证方式，支持以下选项：\n        - NONE（默认）\n        - SIMPLE\n        - MD5\n\n    Password (str): 4字节自治域跳变密码，默认值为\"Xinertel\"。\n\n    AuthSendOnly (bool): 如果为True，则仅发送认证信息而不验证，默认为False。\n\n    CircuitId (int): 电路ID，范围0-255，默认值为1。\n\n    Area1 (str): 区域ID 1，十六进制格式（如0x10），默认值为0x10。\n\n    Area2 (str): 区域ID 2，十六进制格式，默认为空。\n\n    Area3 (str): 区域ID 3，十六进制格式，默认为空。\n\n    MetricMode (str): 度量模式，支持以下取值：\n        - NARROW\n        - WIDE\n        - NARROWWIDE（默认）\n\n    TeRouterId (str): TE路由器IPv4地址，默认值为192.168.1.1。\n\n    TeRouterIdIpv6 (str): TE路由器IPv6地址，默认值为3000::1。\n\n    HelloInterval (int): Hello PDU发送间隔（秒），范围1-300，默认值为10。\n\n    HelloMultiplier (int): Hello时间间隔倍数，范围1-100，默认值为3。\n\n    PsnInterval (int): PSNP发送间隔（秒），范围1-20，默认值为2。\n\n    LspRefreshTime (int): LSP刷新时间（秒），范围1-65535，默认值为900。\n\n    RetransInterval (int): LSP重传间隔（秒），范围1-100，默认值为5。\n\n    HelloPadding (bool): 是否启用Hello报文填充，默认为True。\n\n    LspSize (int): LSP最大大小（字节），范围100-1492，默认值为1492。\n\n    ValidateIpAddr (bool): 是否校验接口IP地址，默认为False。\n\n    EnableGracefulRestart (bool): 是否启用平滑重启功能，默认为False。\n\n    EnableViewRoutes (bool): 是否启用查看路由功能，默认为False。\n\n    EnableBFD (bool): 是否启用BFD检测机制，默认为False。\n\n    MtParams (int): 多拓扑参数数量，范围0-2，默认值为0。\n\n    PerPduAuthentication (int): 每个PDU的认证数量，范围0-4，默认值为0。\n\n    ReportLabel (bool): 是否启用ReportLabel功能，默认为True。\n\n    LearnRoute (bool): 是否启用LearnRoute功能，默认为True。\n\n    RecordLspNextSequenceNum (bool): 是否记录LSP下一个序列号，默认为True。\n\n    L1NarrowMetric (int): L1的窄度量值，范围0-63，默认值为1。\n\n    L1WideMetric (int): L1的宽度量值，范围0-16777214，默认值为1。\n\n    L2NarrowMetric (int): L2的窄度量值，范围0-63，默认值为1。\n\n    L2WideMetric (int): L2的宽度量值，范围0-16777214，默认值为1。\n\n    FloodLsp (bool): 邻居建立后是否通告LSP信息，默认为True。\n\n    HostName (str): 设备主机名，默认为空。\n\nReturns:\n\n    (:obj:`IsisRouter`): 返回一个代表ISIS协议会话的IsisRouter对象，可用于后续配置或操作。\n\nSide Effects:\n    - 创建的IsisRouter实例会被注册到全局协议对象映射中，使用其handle作为键。\n    - 如果底层调用失败，抛出ContinuableFailure异常。\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${Session} | Create Isis | Port=${Port} |\n        | ${MtId} | Create List | IPV4 | IPV6 |\n        | ${MtFlags} | Create List | ABIT | OBIT |\n        | Edit Isis | Session=${Session} | EnableViewRoutes=True | MtParams=1 |",
  "TesterLibrary.Protocol.isis.edit_isis": "编辑ISIS协议会话对象的参数配置。\n\n该函数用于更新给定Session对象中的属性值，依据提供的关键字参数进行设置。函数内部会对每个关键字参数检查Session对象是否存在对应的属性，若存在，则将其更新为新值。此操作不会添加新的属性到Session对象中，也不会引发错误对于不存在的属性。\n\n参数说明：\n\n- Session (:obj:`IsisRouter`): 需要编辑的ISIS协议会话对象实例。\n- **kwargs (任意关键字参数): 表示需要更新的属性及其对应的新值。所有支持的参数及其描述与默认值详见下方列出的关键字参数部分。\n\n关键字参数（**kwargs）支持的选项如下：\n\n- Name (str): ISIS协议会话名称，默认值：未指定。\n- Enable (bool): 是否启用ISIS协议会话，默认值：True。\n- IpVersion (str): IP版本，可选值包括 IPV4、IPV6 和 IPV4IPV6，默认值：IPV4。\n- Level (str): 区域类型，可选值包括 L1、L2 和 L1L2，默认值：L2。\n- NetworkType (str): 网络类型，可选值包括 BROADCAST 和 P2P，默认值：BROADCAST。\n- SystemId (str): 系统ID，格式为MAC地址，默认值：00:00:00:00:00:01。\n- Priority (int): 路由器优先级，取值范围 0-127，默认值：0。\n- AuthMethod (str): 认证方式，可选值包括 NONE、SIMPLE 和 MD5，默认值：NONE。\n- Password (str): 密码字符串，默认值：Xinertel。\n- CircuitId (int): 电路ID，取值范围 0-255，默认值：1。\n- Area1 (str): 区域ID 1，十六进制数值，取值范围 0x0-0xff，默认值：0x10。\n- Area2 (str): 区域ID 2，十六进制数值，取值范围 0x0-0xff，默认值：空。\n- Area3 (str): 区域ID 3，十六进制数值，取值范围 0x0-0xff，默认值：空。\n- MetricMode (str): 度量模式，可选值包括 NARROW、WIDE 和 NARROWWIDE，默认值：NARROWWIDE。\n- TeRouterId (str): TE路由器IPv4地址，默认值：192.168.1.1。\n- TeRouterIdIpv6 (str): TE路由器IPv6地址，默认值：3000::1。\n- HelloInterval (int): Hello PDU发送间隔，单位秒，取值范围 1-300，默认值：10。\n- HelloMultiplier (int): Hello时间间隔倍数，取值范围 1-100，默认值：3。\n- PsnInterval (int): PSNP发送间隔，单位秒，取值范围 1-20，默认值：2。\n- LspRefreshTime (int): LSP刷新时间，单位秒，取值范围 1-65535，默认值：900。\n- RetransInterval (int): LSP重传间隔，单位秒，取值范围 1-100，默认值：5。\n- HelloPadding (bool): 是否启用Hello报文填充，默认值：True。\n- LspSize (int): LSP最大数据单元大小，取值范围 100-1492，默认值：1492。\n- ValidateIpAddr (bool): 是否校验接口IP地址，默认值：False。\n- EnableGracefulRestart (bool): 是否启用平滑重启功能，默认值：False。\n- EnableViewRoutes (bool): 是否启用查看路由信息功能，默认值：False。\n- EnableBFD (bool): 是否启用BFD检测机制，默认值：False。\n- MtParams (int): 多拓扑参数数量，取值范围 0-2，默认值：0。\n- PerPduAuthentication (int): 每个PDU独立认证的数量，取值范围 0-4，默认值：0。\n- ReportLabel (bool): 是否启用ReportLabel功能，默认值：True。\n- LearnRoute (bool): 是否启用LearnRoute功能，默认值：True。\n- RecordLspNextSequenceNum (bool): 是否记录LSP下一个序列号，默认值：True。\n- L1NarrowMetric (int): L1 Narrow Metric值，取值范围 0-63，默认值：1。\n- L1WideMetric (int): L1 Wide Metric值，取值范围 0-16777214，默认值：1。\n- L2NarrowMetric (int): L2 Narrow Metric值，取值范围 0-63，默认值：1。\n- L2WideMetric (int): L2 Wide Metric值，取值范围 0-16777214，默认值：1。\n- FloodLsp (bool): 控制是否在邻居建立后广播LSP信息，默认值：True。\n- AuthSendOnly (bool): 控制是否仅发送认证信息而不验证，默认值：False。\n\n返回值：\n\n- bool: 操作结果状态，成功返回True，失败返回False。\n\n示例代码：\n\n.. code:: RobotFramework\n\n    | ${Session} | Create Isis | Port=${Port} |\n    | ${MtId} | Create List | IPV4 | IPV6 |\n    | ${{MtFlags} | Create List | ABIT | OBIT |\n    | Edit Isis | Session=${Session} | EnableViewRoutes=True | MtParams=1 |",
  "TesterLibrary.Protocol.isis.edit_isis_global_options": "编辑ISIS协议全局选项参数。\n\n该函数用于修改系统配置中的ISIS（Intermediate System to Intermediate System）协议全局参数。它通过获取系统条目下的第一个 'IsisGlobalTypeOption' 子对象，并调用其 `edit` 方法来应用提供的配置更改。通常用于调整与ISIS路由协议相关的全局设置。\n\n支持的配置项包括：\n\nKeyword Args:\n\n    SRMSPerfType (int): SRMS Pref sub-TLV 类型值。\n    \n    SRv6CapabilityType (int): SRv6 Capabilities sub-TLV 类型值。\n    \n    SRv6LocatorType (int): SRv6 Locator TLV 类型值。\n    \n    SRv6EndType (int): SRv6 End SID sub-TLV 类型值。\n    \n    SRv6EndXType (int): SRv6 End.X SID sub-TLV 类型值。\n    \n    SRv6LanEndXType (int): SRv6 LAN End.X SID sub-TLV 类型值。\n    \n    SRNodeMSDType (int): SR Node MSD sub-TLV 类型值。\n    \n    SRLinkMSDType (int): SR Link MSD sub-TLV 类型值。\n    \n    SRFAPM (int): Flex-Algo Prefix Metric sub-TLV 类型值。\n    \n    ScalabilityMode (str): 可选值为 NORMAL 和 DISCARD，表示扩展性模式。\n\nReturns:\n\n    bool: 操作成功返回 True；如果在编辑过程中发生异常，则可能根据 `abnormal_check` 装饰器或底层API的实现抛出错误。\n\nExamples:\n    .. code:: RobotFramework\n\n        | edit_isis_global_options | SRMSPerfType=3 |",
  "TesterLibrary.Protocol.isis.edit_isis_per_pdu": "编辑ISIS协议会话的Per PDU认证参数。\n\n该函数用于修改指定ISIS协议会话中某个PDU类型的认证设置。它接受一个会话对象或包含会话对象的列表结构，并确保只使用第一个会话对象进行操作。如果提供的Session参数不支持`edit_per_pdu_authentication`方法，或者是一个空的可迭代对象，则可能抛出TypeError或IndexError异常。\n\n参数:\n\n    Session (:obj:`IsisRouter` 或 list/set/tuple): 一个ISIS协议会话对象，或者是包含会话对象的可迭代结构。\n        如果是可迭代结构，则会使用其中的第一个会话对象。\n\n    Index (int): 指定要编辑的PDU条目索引，取值范围为0-1，默认为0。\n\n    **kwargs: 可选的关键字参数，用于指定具体的认证参数，包括：\n\n        PdusType (str): PDU类型，默认值：L1_HELLO，支持的参数：\n\n            L1_HELLO\n\n            L2_HELLO\n\n            L1_AREA_PDUS\n\n            L2_DOMAIN_PDUS\n\n        AuthMethod (str): 认证类型，默认值：NONE，支持的参数：\n\n            NONEReportLabel\n\n            SIMPLE\n\n            MD5\n\n        Password (str): 认证密码，默认值：Xinertel.\n\n        AuthSendOnly (bool): 默认值为False，当设置为True时，仅发送认证信息而不进行验证。\n\n返回值:\n\n    bool: 始终返回True，表示操作成功执行。\n\n异常:\n\n    TypeError: 如果Session不支持`edit_per_pdu_authentication`方法。\n\n    IndexError: 如果Session是一个空的可迭代结构且无法提供有效的会话对象。\n\n示例:\n    .. code:: RobotFramework\n\n        | ${Session} | Create Isis | Port=${Port} |\n        | ${{MtFlags} | Create List |  ABIT | OBIT |\n        | Edit Isis | Session=${Session} | EnableViewRoutes=True | PerPduAuthentication=1 |\n        | Edit Isis Per Pdu | Session=${Session} | PdusType=L2_HELLO | AuthMethod=SIMPLE | Password=Test |",
  "TesterLibrary.Protocol.isis.get_isis_per_pdu": "获取ISIS协议会话Per Pdu Authentication参数\n\n该函数用于检索指定ISIS会话对象中某个索引位置的PDU级认证信息。若传入的Session为可迭代类型（如列表、集合、元组），则使用其第一个元素作为实际操作的会话对象。\n\nArgs:\n\n    Session (:obj:`IsisRouter` 或 iterable of :obj:`IsisRouter`): 一个支持 `get_per_pdu_authentication` 方法的ISIS协议会话对象或其可迭代容器。\n        如果是可迭代对象，则取第一个元素进行操作。\n\n    Index (int): 指定要获取的PDU认证信息的索引位置，类型为整数，取值范围为0到4，默认值为0。\n\nReturns:\n\n    dict: 包含PDU认证相关信息的字典，示例如下::\n\n        {\n            'PdusType': 'L1_HELLO',\n            'AuthMethod': 'SIMPLE',\n            'Password': 'Xinertel',\n        }\n\n    返回的数据结构和内容取决于底层API返回的结果，通常包含PDU类型、认证方式及密码等字段。\n\nRaises:\n\n    ContinuableFailure: 如果底层调用失败（返回False），则抛出此异常，表示操作未成功但测试可以继续执行。\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${Session} | Create Isis | Port=${Port} |\n        | ${{MtFlags} | Create List |  ABIT | OBIT |\n        | ${Session} | Create Isis | Port=${Port} |\n        | ${{MtFlags} | Create List |  ABIT | OBIT |\n        | Edit Isis | Session=${Session} | EnableViewRoutes=True | PerPduAuthentication=1 |\n        | Edit Isis Per Pdu Authentication | Session=${Session} | PdusType=L2_HELLO | AuthMethod=SIMPLE | Password=Test |\n        | Get Isis Per Pdu Authentication | Session=${Session} | Index=0 |",
  "TesterLibrary.Protocol.isis.edit_isis_mt_params": "Edits the MT (Multi-Topology) parameters for an ISIS session at the specified index.\n\nThis function allows modification of Multi-Topology ID (MtId) and flags (MtFlags) for a given ISIS session. If the provided Session is a list, set, or tuple, only the first element will be used for editing. The Index parameter specifies which MT parameter set to modify within the session, with allowed values 0 and 1.\n\nParameters:\n    Session (:obj:`IsisRouter` or iterable): An ISIS protocol session object or a collection of session objects.\n                                            If it's a collection (e.g., list or tuple), only the first item will be modified.\n    Index (int): The index of the MT parameter set to edit. Allowed values: 0 or 1. Default: 0.\n    MtId (str, optional): The Multi-Topology Identifier to configure. Supported values are:\n\n        - IPV4\n        - IPV6\n\n        Default: IPV4.\n    MtFlags (list, optional): A list of Multi-Topology flags to set. Supported flag values include:\n\n        - NOSHOW\n        - ABIT\n        - OBIT\n\n        Default: ['NOSHOW']\n\nReturns:\n    bool: True if the operation was successful; False otherwise.\n\nRaises:\n    ContinuableFailure: If the underlying backend call fails (returns False), an exception is raised with a failure message.\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${Session} | Create Isis | Port=${Port} |\n        | ${{MtFlags} | Create List | ABIT | OBIT |\n        | Edit Isis | Session=${Session} | EnableViewRoutes=True | MtParams=1 |\n        | Edit Isis Mt Params | Session=${Session} | MtId=IPV6 | MtFlags=${{MtFlags} |",
  "TesterLibrary.Protocol.isis.get_isis_mt_params": "Retrieves the MT (Multi-Topology) parameters for an ISIS protocol session at the specified index.\n\nThis function accepts a Session object or a collection containing a Session object (e.g., list, set, or tuple), and retrieves the MT parameters from that Session. If a collection is provided, the first element of the collection will be used as the Session object. The Index parameter specifies which MT parameter set to retrieve, with valid values being 0 or 1.\n\nThe returned value is a dictionary containing the MT parameters, such as 'MtId' (indicating the address family, e.g., IPv4 or IPv6) and 'MtFlags' (a list of flags associated with the MT configuration).\n\nIn case the underlying call fails (returns `False`), this function raises a `ContinuableFailure` exception indicating the failure.\n\nParameters:\n-----------\nSession : object or collection\n    An ISIS protocol session object (`IsisRouter`) or a collection (list, set, tuple) containing one.\n    If a collection is passed, the first item will be used as the session object.\n\nIndex : int, optional\n    The index specifying which MT parameter set to retrieve. Valid values are 0 or 1. Default is 0.\n\nReturns:\n--------\ndict\n    A dictionary containing the retrieved MT parameters. Example format:\n\n    .. code:: python\n\n        {\n            'MtId': 'IPv4',\n            'MtFlags': ['ABIT', 'OBIT']\n        }\n\nRaises:\n-------\nContinuableFailure\n    If the underlying API call fails (returns `False`), this exception is raised to indicate the failure.\n\nExamples:\n---------\n.. code:: RobotFramework\n\n    | ${Session} | Create Isis | Port=${Port} |\n    | ${{MtFlags} | Create List | ABIT | OBIT |\n    | Edit Isis | Session=${Session} | EnableViewRoutes=True | MtParams=2 |\n    | Edit Isis Mt Params | Session=${Session} | Index=0 | MtId=IPv4 | MtFlags=${{MtFlags} |\n    | Edit Isis Mt Params | Session=${Session} | Index=1 | MtId=IPv6 | MtFlags=${{MtFlags} |\n    | Get Isis Mt Params | Session=${Session} | Index=0 |\n    | Get Isis Mt Params | Session=${Session} | Index=1 |",
  "TesterLibrary.Protocol.isis.create_isis_lsp": "创建ISIS LSP（链路状态PDU）对象。\n\n该函数用于通过指定的ISIS协议会话（Session）创建一个ISIS LSP（Link State PDU）对象。其底层调用的是会话对象的 `create_lsp` 方法，并将所有关键字参数透传给该方法。\n\nArgs:\n\n    Session (:obj:`IsisRouter`): 一个或多个ISIS协议会话对象，类型为对象实例，通常由 `Create Isis` 接口创建。\n    \nKeyword Args:\n\n    Name (str): ISIS LSP对象的名称，类型为字符串。\n\n    Enable (bool): 是否启用该ISIS LSP。取值范围：True 或 False，默认值：True。\n\n    SystemId (str): 系统ID，格式为MAC地址，默认值：00:00:00:00:00:01。\n\n    Level (str): 区域级别（L1 或 L2），默认值：L2。\n\n    PseudonodeId (int): 伪节点ID，取值范围：1-100，默认值：0。\n\n    TeRouterId (str): TE（流量工程）路由器IPv4地址，默认值：192.168.1.1。\n\n    TeRouterIdIpv6 (str): TE路由器IPv6地址，默认值：3000::1。\n\n    SequenceNumber (int): 序列号，用于LSP更新，取值范围：1-300，默认值：10。\n\n    RemainingLifeTime (int): LSP剩余生存时间（秒），取值范围：1-100，默认值：3。\n\n    Checksum (int): 校验和字段值，用于校验LSP完整性，取值范围：1-20，默认值：2。\n\n    AttachedBit (int): 区域关联位（Attached Bit），表示本路由器是否连接到其他区域，取值范围：1-65535，默认值：900。\n\n    OverloadBit (int): 过载标志位，表示本路由器是否处于过载状态，取值范围：1-100，默认值：5。\n\n    HostName (str): 主机名，可读性用途。\n\nReturns:\n\n    (:obj:`IsisLspConfig`): 创建成功的ISIS LSP配置对象，可用于后续操作如修改、删除或查询LSP状态。\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${Session} | Create Isis | Port=${Port} |\n        | Create Isis Lsp | Session=${Session} | SystemId=00:00:00:00:00:02 | Level=L1 | Name=MyLSP |",
  "TesterLibrary.Protocol.isis.create_isis_ipv4_tlv": "创建ISIS IPv4 TLV对象并将其关联到指定的LSP（链路状态协议数据单元）。\n\n参数:\n    Lsp (:obj:`IsisLspConfig`): 指定要将此IPv4 TLV绑定到的ISIS LSP对象。必须为object类型。\n\n    **kwargs (可选): 用于配置IPv4 TLV的附加关键字参数，包括以下可选参数：\n\n        Name (str): ISIS IPv4 TLV对象名称。\n\n        Enable (bool): 是否启用该TLV。默认值：True。\n\n        RouteType (str): 路由类型，支持INTERNAL或EXTERNAL，默认值：INTERNAL。\n\n        RouteCount (int): 路由条目数量，取值范围1-4294967295，默认值：1。\n\n        Increment (int): 前缀递增步长，取值范围1-4294967295，默认值：1。\n\n        MetricType (str): 度量类型，支持INTERNAL或EXTERNAL，默认值：INTERNAL。\n\n        WideMetric (int): 扩展度量值，取值范围0-16777214，默认值：10。\n\n        UpDownBit (bool): Up/Down位标志，表示路由是否从Level-2向下泄漏。默认值：False。\n\n        StartIpv4Prefix (str): IPv4路由起始前缀，格式应为合法IPv4地址，默认值：192.168.1.1。\n\n        PrefixLength (int): IPv4前缀长度，取值范围1-32，默认值：24。\n\n        NarrowMetric (int): 标准度量值，取值范围0-63，默认值：10。\n\n返回值:\n    (:obj:`IsisIpv4TlvConfig`): 创建并配置好的ISIS IPv4 TLV对象实例，可用于进一步操作或应用到协议栈中。\n\n描述:\n    此函数用于构建和配置IS-IS协议中的IPv4 TLV（Type-Length-Value）结构，通常用于模拟网络设备生成或处理包含IPv4路由信息的LSP（链路状态PDU）。该TLV对象通过Lsp参数与一个LSP对象相关联，并可以通过关键字参数进行详细配置。\n\n示例:\n    .. code:: RobotFramework\n\n        | ${Session} | Create Isis | Port=${Port} |\n        | ${LSP} | Create Isis Lsp | Session=${Session} | SystemId=00:00:00:00:00:02 |\n        | Create Isis Ipv4 Tlv | Lsp=${LSP} | SystemId=00:00:00:00:00:02 |",
  "TesterLibrary.Protocol.isis.create_isis_ipv6_tlv": "创建ISIS IPv6 TLV对象，用于在IS-IS协议中配置IPv6路由信息的TLV（Type-Length-Value）结构。\n\n该函数用于为指定的IS-IS LSP（Link State PDU）创建一个IPv6 TLV配置对象，并支持通过关键字参数对TLV进行详细配置。该TLV对象通常用于在IS-IS链路状态通告中携带IPv6路由前缀信息。\n\nArgs:\n    Lsp (:obj:`IsisLspConfig`): 与该IPv6 TLV相关联的IS-IS LSP对象。该LSP对象定义了TLV所处的上下文环境。\n\nKeyword Args:\n    Name (str): IPv6 TLV对象的名称，默认自动生成。类型为字符串。\n    \n    Enable (bool): 是否启用该IPv6 TLV。默认值：True。取值范围：True 或 False。\n    \n    RouteType (str): 路由条目类型。默认值：INTERNAL。可选值包括：\n        - INTERNAL：内部路由\n        - EXTERNAL：外部路由\n    \n    RouteCount (int): 要生成的IPv6路由条目数量。默认值：1。取值范围：1 到 4294967295。\n    \n    Increment (int): 每个连续IPv6地址之间的步长（以IP地址数值形式递增）。默认值：1。取值范围：1 到 4294967295。\n    \n    MetricType (str): 度量值类型，用于决定使用哪种度量系统。默认值：INTERNAL。可选值包括：\n        - INTERNAL：内部度量\n        - EXTERNAL：外部度量\n        \n    WideMetric (int): 扩展度量值，用于支持更大范围的路径成本计算。默认值：10。取值范围：0 到 16777214。\n    \n    UpDownBit (bool): Up/Down位，用于防止环路，表示路由信息是源自本区域还是从其他区域泄漏过来。默认值：False。取值范围：True 或 False。\n    \n    StartIpv6Prefix (str): 起始IPv6地址前缀。默认值：\"2000::1\"。格式应为合法的IPv6地址。\n    \n    PrefixLength (int): IPv6前缀长度。默认值：24。取值范围：1 到 32。\n\nReturns:\n    :obj:`IsisIpv6TlvConfig`: 创建并配置完成的IS-IS IPv6 TLV对象，可用于进一步修改或应用配置。\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${Session} | Create Isis | Port=${Port} |\n        | ${LSP} | Create Isis Lsp | Session=${Session} | SystemId=00:00:00:00:00:02 |\n        | Create Isis Ipv6 Tlv | Lsp=${LSP} | RouteCount=10 | StartIpv6Prefix=2001::1 | PrefixLength=64 |",
  "TesterLibrary.Protocol.isis.get_isis_router_from_tlv": "获取ISIS TLV对应的绑定流源或目的端点对象\n\n该函数用于从给定的ISIS TLV配置对象中检索与其绑定的ISIS路由器对象。它接受一个配置对象或多个配置对象的集合，并为每个配置对象查找其在源方向上的 'GenerateLsp' 相关对象，该对象表示与TLV配置关联的ISIS路由器。\n\n参数:\n    Configs (object 或 iterable [list, set, tuple])\n        单个配置对象或多个配置对象的集合。这些对象通常是 :obj:`IsisIpv4TlvConfig` 或 :obj:`IsisIpv6TlvConfig` 类型，\n        并且必须支持 `get_relatives` 方法以查找相关联的 LSP 对象。\n\n返回值:\n    list\n        返回一个 ISIS 路由器对象列表，每个条目对应输入配置对象的源方向上的 'GenerateLsp' 对象。\n\n注意事项:\n    - 如果传入的是单个非可迭代对象，函数内部会将其封装为列表。\n    - 输入对象必须与内部使用的 `get_relatives` 方法兼容，否则可能导致运行时错误。\n\n示例:\n    .. code:: RobotFramework\n\n        | ${Session} | Create Isis | Port=${Port} |\n        | ${LSP} | Create Isis Lsp | Session=${Session} | SystemId=00:00:00:00:00:02 |\n        | ${TLV} | Create Isis Ipv4 Tlv | Lsp=${LSP} | SystemId=00:00:00:00:00:02 |\n        | Get Isis Router From Tlv | Configs=${TLV} |",
  "TesterLibrary.Protocol.isis.wait_isis_state": "等待ISIS协议会话达到指定状态。\n\n该函数用于等待提供的ISIS协议会话对象达到指定的目标状态。如果会话对象类型为 `IsisProtocolConfig`，则默认监控其 `'RouterState'` 属性；否则，监控通用的 `'State'` 属性。支持多个会话对象输入，并在超时时间内持续轮询状态，轮询间隔可配置。\n\n参数:\n\n- **Sessions** (object 或 iterable)\n  - 单个或多个 ISIS 协议会话对象（如 `IsisRouter` 或 `IsisProtocolConfig`）。若提供多个会话，仅第一个会话用于判断类型。\n  \n- **State** (str 或 list, optional，默认: 'UP')\n  - 要等待的目标状态。可以是一个字符串或字符串列表，表示一个或多个允许的状态值。默认值为 `'UP'`。\n  - 支持的状态包括：`NOTSTART`, `IDLE`, `INIT`, `UP`, `GR`, `GRHELPER`, `DISABLE`。\n  - 状态比较不区分大小写。\n\n- **Interval** (int 或 str 可转换为 int, optional，默认: 1)\n  - 每次状态检查之间的间隔时间（单位：秒）。\n\n- **TimeOut** (int 或 str 可转换为 int, optional，默认: 60)\n  - 等待会话达到目标状态的最大时间（单位：秒）。超过此时间未达到状态将引发异常。\n\n返回值:\n\n- **bool**\n  - 如果所有会话在超时时间内达到目标状态，则返回 `True`。\n  - 如果超时前未达到目标状态，则返回 `False` 并抛出 `TesterException` 异常。\n\n异常:\n\n- **TesterException**\n  - 当超时时间到达但至少有一个会话未达到预期状态时抛出。\n\n注意事项:\n\n- 如果传入多个会话对象，仅第一个会话用于判断是否为 `IsisProtocolConfig` 类型。\n- 对于 `IsisProtocolConfig` 类型，实际监控的是 `'RouterState'` 属性；其他类型则监控 `'State'` 属性。\n- 所有状态值都会被转换为字符串并与实际属性值进行不区分大小写的比较。\n\n示例:\n\n```robotframework\n| Wait Isis State | Sessions=${Sessions} | State=GR | Interval=2 | TimeOut=120 |\n```",
  "TesterLibrary.Protocol.isis.wait_isis_three_way_p2p_adj_state": "等待ISIS协议会话的ThreeWayP2pAdjState状态达到指定的目标状态。\n\n该函数用于等待一个或多个ISIS点对点（P2P）会话的ThreeWayP2pAdjState属性达到指定的状态（如UP、INIT、DOWN等）。默认情况下，它会等待状态变为'UP'，但也可以通过参数指定其他目标状态。函数以指定的时间间隔定期检查会话状态，并在所有会话都达到目标状态时返回True；如果超时仍未满足条件，则抛出异常。\n\n**参数说明：**\n\n- **Sessions** (list of `IsisRouter` objects):  \n  需要监控的ISIS P2P会话对象列表。\n\n- **State** (str, optional, default='UP'):  \n  等待的目标状态，支持以下值：\n  \n      UP\n\n      INIT\n\n      DOWN\n\n      NOTSTART\n\n      NA\n\n  默认为 'UP'，比较时不区分大小写。\n\n- **Interval** (int, optional, default=1):  \n  检查会话状态的时间间隔（单位：秒），默认每1秒检查一次。\n\n- **TimeOut** (int, optional, default=60):  \n  等待的最大超时时间（单位：秒），默认最多等待60秒。\n\n**返回值：**\n\n- **bool**  \n  如果所有会话在超时时间内达到目标状态则返回 `True`。\n\n**异常：**\n\n- **TesterException**  \n  如果在指定的超时时间内并非所有会话都达到目标状态，则抛出 `TesterException` 异常。\n\n**注意事项：**\n\n- 函数内部将状态转换为字符串进行比较，且不区分大小写。\n- 若某个会话的当前状态与目标状态不符，会记录日志（logging.info）。\n- 如果状态属性是枚举类型（Enum），则使用其名称进行比较。\n\n**示例：**\n\n```robotframework\n| Wait Isis Three Way P2p Adj State | Sessions=${Sessions} | State=INIT | Interval=2 | TimeOut=120 |\n```",
  "TesterLibrary.Protocol.isis.wait_isis_l1_broadcast_adj_state": "等待ISIS协议会话的L1广播邻接状态（L1BroadcastAdjState）达到指定的一个或多个目标状态。\n\n该函数用于监控一个或多个ISIS协议会话的L1广播邻接状态，直到所有会话的状态都达到指定的目标状态之一，或者超时。它按照设定的时间间隔轮询每个会话的状态，并检查其是否匹配任意一个期望状态。如果在超时时间内所有会话都达到了期望状态，则返回True；否则抛出异常。\n\n参数:\n\n    Sessions (list of :obj:`IsisRouter`): 要监控的ISIS协议会话对象列表。每个对象应具有'L1BroadcastAdjState'属性。\n\n    State (str 或 list, optional): 期望达到的一个或多个状态。默认为['DISOTHER', 'DIS']。支持的状态包括：\n    \n        NOTSTART\n        \n        IDLE\n        \n        INIT\n        \n        DISOTHER\n        \n        DIS\n        \n        GR\n        \n        GRHELPER\n        \n        NA\n\n    Interval (int, optional): 检查会话状态的时间间隔（单位：秒），默认为1秒。\n\n    TimeOut (int, optional): 等待状态的最大时间（单位：秒），默认为60秒。若超过此时间仍未全部达到期望状态，则抛出TesterException。\n\n返回值:\n\n    bool: 如果所有会话在超时时间内达到指定状态之一，则返回True。\n\n异常:\n\n    Failure: 如果在指定的TimeOut时间内并非所有会话都达到期望状态，则抛出Failure异常。\n\n注意事项:\n\n    - 该函数内部调用底层RENIX API实现状态监控。\n    - 所有状态比较不区分大小写。\n    - 如果'L1BroadcastAdjState'是枚举类型，则使用其名称进行比较。\n    - 如果结果为False，函数将抛出带有详细信息的Failure异常；否则返回True。\n\n示例:\n    .. code:: RobotFramework\n\n        | Wait Isis L1 Broadcast Adj State | Sessions=${Sessions} | State=DISOTHER | Interval=2 | TimeOut=120 |",
  "TesterLibrary.Protocol.isis.wait_isis_l2_broadcast_adj_state": "等待ISIS协议会话的L2广播邻接状态（L2 Broadcast Adjacency State）达到指定的目标状态。\n\n该函数用于监控一个或多个ISIS协议会话的L2广播邻接状态，直到所有会话的状态均达到指定的目标状态之一。函数以指定的时间间隔轮询会话状态，并在超时时间内持续尝试。若所有会话在超时时间内达到目标状态，则返回True；否则将抛出异常。\n\n参数:\n    Sessions (list of :obj:`IsisRouter`): 要监控的ISIS协议会话对象列表。\n    State (str or list, optional): 期望达到的L2广播邻接状态，支持多个状态值，默认为['DISOTHER', 'DIS']。可选状态包括：\n        NOTSTART\n        IDLE\n        INIT\n        DISOTHER\n        DIS\n        GR\n        GRHELPER\n        NA\n    Interval (int, optional): 状态检查的轮询间隔时间，单位为秒，默认为1秒。\n    TimeOut (int, optional): 等待状态达成就绪的最大超时时间，单位为秒，默认为60秒。\n\n返回值:\n    bool: 如果所有会话在指定时间内达到目标状态之一，则返回True；否则抛出异常。\n\n异常:\n    Failure: 当超过TimeOut设定时间后，仍有部分会话未达到目标状态，则抛出Failure异常。\n\n示例:\n    .. code:: RobotFramework\n\n        | Wait Isis L2 Broadcast Adj State | Sessions=${Sessions} | State=DISOTHER | Interval=2 | TimeOut=120 |",
  "TesterLibrary.Protocol.isis.create_isis_neighbor_tlv": "创建ISIS邻居TLV对象。该函数用于在指定的ISIS LSP（链路状态协议数据单元）上下文中生成一个ISIS邻居TLV配置对象，并支持通过关键字参数对TLV进行进一步配置。\n\nArgs:\n\n    Lsp (:obj:`IsisLspConfig`): 与该邻居TLV关联的ISIS LSP对象，作为该TLV的上层容器。用于将创建的邻居TLV绑定到特定的LSP中。\n\nKeyword Args:\n\n    SystemId (str, optional): 邻居系统的唯一标识符，格式为MAC地址字符串，默认值：\"00:00:00:00:00:01\"\n\n    PseudonodeSystemId (int, optional): 伪节点系统ID，用于表示伪节点的编号，取值范围：0-255，默认值：0\n\n    NarrowMetric (int, optional): 窄度量值，用于表示到达邻居的默认路径成本，取值范围：0-63，默认值：1\n\n    WideMetric (int, optional): 宽度量值，扩展的路径成本度量，取值范围：0-16777214，默认值：10\n\nReturns:\n\n    (:obj:`IsisNeighborConfig`): 返回一个ISIS邻居TLV配置对象，可用于后续查询或修改该邻居TLV的属性。\n\nRaises:\n\n    Failure: 如果创建操作失败，则抛出Failure异常，并附带相应的错误信息。\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${Session} | Create Isis | Port=${Port} |\n        | ${LSP} | Create Isis Lsp | Session=${Session} | SystemId=00:00:00:00:00:02 |\n        | Create Isis Neighbor Tlv | Lsp=${LSP} | SystemId=00:00:00:00:00:02 |",
  "TesterLibrary.Protocol.isis.create_isis_neighbor_te_config": "创建ISIS邻居TLV的Te Config对象，并根据提供的参数配置或更新对应的流量工程（TE）设置。\n\nArgs:\n\n    Neighbor (:obj:`IsisNeighborConfig`): 一个ISIS邻居配置对象，该对象必须包含至少一个类型为'IsisTEConfig'的子配置。用于从中检索或创建TE配置。\n\nKeyword Args:\n\n    EnableInterfaceIp (bool): 是否启用本地IPv4地址字段，默认值：False\n\n    InterfaceIp (str): 本地IPv4地址，格式应为有效的IPv4地址，默认值：'0.0.0.0'\n\n    EnableNeighborIp (bool): 是否启用邻居IPv4地址字段，默认值：False\n\n    NeighborIp (str): 邻居IPv4地址，格式应为有效的IPv4地址，默认值：'10.0.0.1'（原定义为int=10，建议修正为标准IP表示方式）\n\n    EnableInterfaceIpv6 (bool): 是否启用本地IPv6地址字段，默认值：False\n\n    InterfaceIpv6 (str): 本地IPv6地址，格式应为有效的IPv6地址，默认值：'2000::1'\n\n    EnableNeighborIpv6 (bool): 是否启用邻居IPv6地址字段，默认值：False\n\n    NeighborIpv6 (str): 邻居IPv6地址，格式应为有效的IPv6地址，默认值：'2000::1'\n\n    EnableTeGroup (bool): 是否启用TE组字段，默认值：False\n\n    TeGroup (int): TE组编号，取值范围：0-4294967295，默认值：1\n\n    EnableMaxBandwidth (bool): 是否启用最大带宽字段，默认值：False\n\n    MaximunLink (int): 最大链路带宽（字节/秒），取值范围：0-4294967295，默认值：1000\n\n    EnableResBandwidth (bool): 是否启用最大可预留带宽字段，默认值：False\n\n    MaximumReservableLink (int): 最大可预留带宽（字节/秒），取值范围：0-4294967295，默认值：1000\n\n    EnableUnresBandwidth (bool): 是否启用未预留带宽字段，默认值：False\n\n    UnreservedBandwidth0 (int): 优先级0的未预留带宽（字节/秒），取值范围：0-4294967295，默认值：0\n\n    UnreservedBandwidth1 (int): 优先级1的未预留带宽（字节/秒），取值范围：0-4294967295，默认值：0\n\n    UnreservedBandwidth2 (int): 优先级2的未预留带宽（字节/秒），取值范围：0-4294967295，默认值：0\n\n    UnreservedBandwidth3 (int): 优先级3的未预留带宽（字节/秒），取值范围：0-4294967295，默认值：0\n\n    UnreservedBandwidth4 (int): 优先级4的未预留带宽（字节/秒），取值范围：0-4294967295，默认值：0\n\n    UnreservedBandwidth5 (int): 优先级5的未预留带宽（字节/秒），取值范围：0-4294967295，默认值：0\n\n    UnreservedBandwidth6 (int): 优先级6的未预留带宽（字节/秒），取值范围：0-4294967295，默认值：0\n\n    UnreservedBandwidth7 (int): 优先级7的未预留带宽（字节/秒），取值范围：0-4294967295，默认值：0\n\nReturns:\n\n    (:obj:`IsisTEConfig`): 返回与给定Neighbor关联的IsisTEConfig对象。如果提供了kwargs参数，则返回的对象已被相应地更新。\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${Session} | Create Isis | Port=${Port} |\n        | ${LSP} | Create Isis Lsp | Session=${Session} | SystemId=00:00:00:00:00:02 |\n        | ${Neighbor} | Create Isis Neighbor Tlv | Lsp=${LSP} | SystemId=00:00:00:00:00:02 |\n        | Create Isis Neighbor Te Config | Neighbor=${Neighbor} | EnableInterfaceIp=True | InterfaceIp=192.168.1.1 | TeGroup=10 | MaximunLink=1000000 |\n\nDescription:\n该方法用于封装底层API调用 `IsisRouter.create_neighbor_te_config`，主要功能是从提供的Neighbor对象中获取第一个类型为 'IsisTEConfig' 的子配置，若存在则直接返回；若不存在则新建一个TE配置对象并返回。如果提供了额外的关键字参数(kwargs)，则会将这些参数应用到该TE配置对象上以完成配置更新。最终返回的是更新后的或已存在的TE配置对象。",
  "TesterLibrary.Protocol.isis.create_isis_neighbor_sr_adj_sid_sub_tlv": "创建ISIS邻居Segment Routing Adjacency SID子TLV对象\n\n该函数用于在指定的ISIS会话中，为给定的ISIS邻居配置并创建一个Segment Routing Adjacency SID子TLV（Type-Length-Value）结构。这通常用于在ISIS协议中支持段路由功能，并允许在网络中定义特定的转发路径。\n\n参数:\n    Session (:obj:`IsisRouter`): \n        一个ISIS协议会话对象，代表与测试设备之间的连接和交互通道。\n        必须是通过 `Create Isis` 等方法正确初始化的 ISIS 路由器会话对象。\n\n    Neighbor (:obj:`IsisNeighborConfig`): \n        一个已配置的ISIS邻居对象，表示要为其添加SR Adjacency SID子TLV的邻居。\n        必须是通过 `Create Isis Neighbor Tlv` 等方法正确初始化的 ISIS 邻居配置对象。\n\n关键字参数（可选）:\n    Flags (list of str):\n        指定包含在Adj-SID TLV中的标志位。默认值为 ['NOSHOW', 'VALUE', 'LOCAL']。\n        可选标志包括：'NOSHOW', 'ADDRESS', 'BACKUP', 'VALUE', 'LOCAL', 'SET', 'PERSISTENT'。\n        标志决定了SID的行为及其在网络中的使用方式。\n\n    Sid (int):\n        当Flags中包含 'LOCAL' 和 'VALUE' 时，此参数指定具体的标签值；\n        如果未设置 'VALUE' 或 'INDEX' 标志，则表示SID/Label范围内的偏移值。\n        默认值为 0，取值范围为 0 到 4294967295。\n\n    Weight (int):\n        Adj-SID 的权重值，用于负载均衡，默认值为 0，取值范围为 0 到 255。\n\n返回值:\n    :obj:`IsisSrAdjSidSubTlv`\n        创建成功的ISIS SR Adjacency SID子TLV对象。可用于后续操作或验证。\n\n异常:\n    如果创建失败，抛出 ContinuableFailure 异常，表明无法完成创建操作。\n\n示例:\n    .. code:: RobotFramework\n\n        | ${Session} | Create Isis | Port=${Port} |\n        | ${LSP} | Create Isis Lsp | Session=${Session} | SystemId=00:00:00:00:00:02 |\n        | ${Neighbor} | Create Isis Neighbor Tlv | Lsp=${LSP} | SystemId=00:00:00:00:00:02 |\n        | Create Isis Neighbor Sr Adj Sid Sub Tlv | Neighbor=${Neighbor} | Flags=['LOCAL', 'VALUE'] | Sid=100 | Weight=1 |",
  "TesterLibrary.Protocol.isis.create_isis_neighbor_sr_lan_adj_sid_sub_tlv": "创建ISIS邻居的Segment Routing LAN邻接SID子TLV对象\n\n该函数用于在ISIS协议中为指定邻居创建一个Segment Routing LAN邻接SID（Adjacency SID）子TLV对象。它基于提供的会话和邻居上下文，支持通过关键字参数进行详细配置。\n\n参数:\n    Session (:obj:`IsisRouter`): ISIS协议会话对象，用于与底层系统交互，必须具有`create_neighbor_sr_lan_adj_sid_sub_tlv`方法。\n\n    Neighbor (:obj:`IsisNeighborConfig`): 与LAN邻接SID关联的ISIS邻居对象，通常表示特定的ISIS邻居上下文。\n\n    **kwargs : dict\n        可选的关键字参数，用于进一步配置Sub-TLV：\n\n        Flags (list): 指定包含在TLV中的标志位，默认值：['NOSHOW', 'VALUE', 'LOCAL']，可选值包括：\n\n            NOSHOW\n\n            ADDRESS\n\n            BACKUP\n\n            VALUE\n\n            LOCAL\n\n            SET\n\n            PERSISTENT\n\n        Sid (int): 当Flags包含L.Local和V.Value时，指定标签值；否则指定SID/Label范围内的标签偏移值，默认值：0，取值范围：0-4294967295。\n\n        Weight (int): Adj-SID的权重，用于负载均衡，默认值：0，取值范围：0-255。\n\n        SystemId (str): 指定LAN上邻居的系统ID，默认值：\"00:00:00:00:00:01\"。\n\n返回值:\n    (:obj:`IsisSrAdjSidSubTlv`): 创建的ISIS邻居SR LAN邻接SID子TLV对象。如果操作失败，将抛出ContinuableFailure异常。\n\n示例:\n    .. code:: RobotFramework\n\n        | ${Session} | Create Isis | Port=${Port} |\n        | ${LSP} | Create Isis Lsp | Session=${Session} | SystemId=00:00:00:00:00:02 |\n        | ${Neighbor} | Create Isis Neighbor Tlv | Lsp=${LSP} | SystemId=00:00:00:00:00:02 |\n        | Create Isis Neighbor Sr Lan Adj Sid Sub Tlv | Neighbor=${Neighbor} |",
  "TesterLibrary.Protocol.isis.create_isis_neighbor_srv6_endx_sid_sub_tlv": "创建ISIS邻居的SRv6 End.X SID子TLV对象\n\n该函数用于在ISIS协议中为指定邻居创建一个SRv6 End.X SID子TLV（Type-Length-Value）结构，用于定义SRv6网络中的段标识符（SID），支持IPv6转发路径上的分段路由。\n\n参数说明:\n    Session (:obj:`IsisRouter`): \n        ISIS协议会话对象，用于管理与底层系统或API的通信上下文。必须是提供`create_neighbor_srv6_endx_sid_sub_tlv`方法的有效会话对象。\n    \n    Neighbor (:obj:`IsisNeighborConfig`): \n        指定要配置SRv6 End.X SID的ISIS邻居对象。该对象应由会话识别并有效。\n\n关键字参数（可选）:\n    Flags (list): \n        一组标志位，用于控制SID的行为。默认值为 `UNKNOWN`。允许的值包括：\n        \n            UNKNOWN, BACKUP, SET, PERSISTENT, UNUSED3, UNUSED4, UNUSED5, UNUSED6, UNUSED7\n\n    Algorithm (int): \n        指定SID关联的算法编号。默认值为0，取值范围：0-255。\n\n    Weight (int): \n        定义End.X SID的权重，用于负载均衡。默认值为100，取值范围：0-255。\n\n    EndpointFunc (str): \n        端点行为类型，默认值为 `END_NO`。可选项包括：\n\n            END_NO, END_PSP, END_USP, END_PSP_USP, END_X_NO, END_X_PSP, END_X_USP, END_X_PSP_USP,\n            END_T_NO, END_T_PSP, END_T_USP, END_T_PSPS_USP, END_B6, END_B6_ENCAPS, END_BM,\n            END_DX6, END_DX4, EDN_DT6, END_DT4, END_DT46, END_DX2, END_DX2V, END_DX2U, END_DX2M,\n            END_S, END_B6_RED, END_B6_ENCAPS_RED, END_WITH_USD, END_PSP_USD, END_USP_USD,\n            END_PSP_USP_USD, END_X_USD, END_X_PSP_USD, END_X_USP_USD, END_X_PSP_USP_USD,\n            END_T_USD, END_T_PSP_USD, END_T_USP_USD, END_T_PSP_USP_USD\n\n    EnableCustom (bool): \n        是否启用自定义端点行为。默认值为 `False`。\n\n    CustomFunc (int): \n        自定义端点行为标识码。仅在 `EnableCustom=True` 时生效，默认值为0，取值范围：0-65535。\n\n    SID (str): \n        指定通告的SRv6 SID地址。默认值为 \"::1\"，必须是一个有效的IPv6地址。\n\n返回值:\n    :obj:`IsisSrv6EndXSidSubTlv`: 表示成功创建的SRv6 End.X SID子TLV对象。如果创建失败，则抛出异常 `ContinuableFailure`。\n\n使用示例:\n    .. code:: RobotFramework\n\n        | ${Session} | Create Isis | Port=${Port} |\n        | ${LSP} | Create Isis Lsp | Session=${Session} | SystemId=00:00:00:00:00:02 |\n        | ${Neighbor} | Create Isis Neighbor Tlv | Lsp=${LSP} | SystemId=00:00:00:00:00:02 |\n        | Create Isis Neighbor Srv6 EndX Sid Sub Tlv | Neighbor=${Neighbor} | SID=\"2001:db8::1\" | Weight=50 | EndpointFunc=END_X_PSP |",
  "TesterLibrary.Protocol.isis.create_isis_neighbor_srv6_lan_endx_sid_sub_tlv": "创建ISIS邻居SRv6 LAN End.X SID子TLV对象，用于在LAN环境中配置与SRv6相关的转发行为。\n\n该函数用于创建一个SRv6 LAN End.X SID子TLV，并将其关联到指定的ISIS邻居。该TLV用于Segment Routing over IPv6（SRv6）中，定义数据包在LAN段上的转发行为，支持灵活的路径控制和负载均衡。\n\nArgs:\n    Session (:obj:`IsisRouter`): ISIS协议会话对象，表示与测试设备或被测设备的连接。必须包含方法 `create_neighbor_srv6_lan_endx_sid_sub_tlv` 来执行实际创建操作。\n\n    Neighbor (:obj:`IsisNeighborConfig`): 要配置SRv6 LAN End.X SID的ISIS邻居对象。通常代表在LAN段上发现或配置的ISIS对等体。\n\nKeyword Args:\n    SystemIdLan (str): LAN系统标识符，默认值：\"00:10:96:00:00:01\"\n\n    Flags (list): 一个或多个标志位，用于指示SID的行为或状态，默认值：UNKNOWN。可选值包括：\n\n        UNKNOWN\n\n        BACKUP\n\n        SET\n\n        PERSISTENT\n\n        UNUSED3\n\n        UNUSED4\n\n        UNUSED5\n\n        UNUSED6\n\n        UNUSED7\n\n    Algorithm (int): 指定与SID相关联的算法，默认值：0，取值范围：0-255\n\n    Weight (int): 指定End.X SID的权重，用于负载分担，默认值：100，取值范围：0-255\n\n    EndpointFunc (list): 端点行为类型，默认值：END_NO，表示无端点行为。可选值包括：\n\n        END_NO\n\n        END_PSP\n\n        END_USP\n\n        END_PSP_USP\n\n        END_X_NO\n\n        END_X_PSP\n\n        END_X_USP\n\n        END_X_PSP_USP\n\n        END_T_N\n\n        END_T_PSP\n\n        END_T_USP\n\n        END_T_PSPS_USP\n\n        END_B6\n\n        END_B6_ENCAPS\n\n        END_BM\n\n        END_DX6\n\n        END_DX4\n\n        EDN_DT6\n\n        END_DT4\n\n        END_DT46\n\n        END_DX2\n\n        END_DX2V\n\n        END_DX2U\n\n        END_DX2M\n\n        END_S\n\n        END_B6_RED\n\n        END_B6_ENCAPS_RED\n\n        END_WITH_USD\n\n        END_PSP_USD\n\n        END_USP_USD\n\n        END_PSP_USP_USD\n\n        END_X_USD\n\n        END_X_PSP_USD\n\n        END_X_USP_USD\n\n        END_X_PSP_USP_USD\n\n        END_T_USD\n\n        END_T_PSP_USD\n\n        END_T_USP_USD\n\n        END_T_PSP_USP_USD\n\n    EnableCustom (bool): 是否启用自定义端点行为，默认值：False\n\n    CustomFunc (int): 自定义端点行为编号，默认值：0\n\n    SID (str): 指定通告的SRv6 SID地址，默认值：\"::1\"，取值为有效的IPv6地址\n\nReturns:\n    (:obj:`IsisSrv6LanEndXSidSubTlv`): 创建的SRv6 LAN End.X SID子TLV对象，可用于进一步配置或查询与该邻居相关的SRv6属性。\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${Session} | Create Isis | Port=${Port} |\n        | ${LSP} | Create Isis Lsp | Session=${Session} | SystemId=00:00:00:00:00:02 |\n        | ${Neighbor} | Create Isis Neighbor Tlv | Lsp=${LSP} | SystemId=00:00:00:00:00:02 |\n        | Create Isis Neighbor Srv6 Lan EndX Sid Sub Tlv | Neighbor=${Neighbor} | SID=\"2001:db8::1\" | Weight=50 | EndpointFunc=END_X_PSP |",
  "TesterLibrary.Protocol.isis.create_isis_neighbor_sr_link_msd_sub_tlv": "创建ISIS邻居段路由（SR）链路MSD（最大堆栈深度）子TLV对象，用于指定会话和邻居的SR链路MSD参数。\n\n该函数用于在网络测试或自动化场景中为指定的ISIS邻居配置Segment Routing（SR）链路MSD（Maximum Stack Depth）子TLV。MSD定义了节点可以向数据包施加的最大段数，用于控制SRv6行为的SID堆叠深度限制。\n\n参数说明：\n-----------\nSession : :obj:`IsisRouter`\n    ISIS协议会话对象，必须包含 `create_neighbor_sr_link_msd_sub_tlv` 方法，用于与底层API交互。\n    \nNeighbor : :obj:`IsisNeighborConfig`\n    要配置SR链路MSD子TLV的ISIS邻居对象，应为由会话认可的有效邻居对象。\n\nKeyword Args:\n    Flags (list): 指定要包含在TLV中的标志位，默认值：UNKNOWN，可选值包括：\n\n        UNKNOWN\n\n        MAX_SEG_LELT\n\n        MAX_END_POP\n\n        MAX_T_INSERT\n\n        MAX_T_ENCAPS\n\n        MAX_END_D\n\n    MaxSegmentLeft (int): 在执行与SID关联的SRv6 Endpoint Function指令前，接收报文的SRH中SL（Segment Left）字段的最大值，默认值：8，取值范围：0-255。\n\n    MaxEndPop (int): SRH栈顶端SID的最大数量，用于End Pop操作，默认值：8，取值范围：0-255。\n\n    MaxInsert (int): 执行T.Insert行为时允许插入的SID最大数量，默认值：8，取值范围：0-255。\n\n    MaxEncap (int): 执行T.Encap行为时允许封装的SID最大数量，默认值：8，取值范围：0-255。\n\n    MaxEndD (int): 执行End.DX6和End.DT6功能时，SRH中SID的最大数量，默认值：8，取值范围：0-255。\n\n返回值：\n--------\n:obj:`IsisSrLinkMsdSubTlv`\n    创建的ISIS邻居SR链路MSD子TLV对象，表示成功创建的MSD子TLV结构。\n\n示例：\n-------\n.. code:: RobotFramework\n\n    | ${Session} | Create Isis | Port=${Port} |\n    | ${LSP} | Create Isis Lsp | Session=${Session} | SystemId=00:00:00:00:00:02 |\n    | ${Neighbor} | Create Isis Neighbor Tlv | Lsp=${LSP} | SystemId=00:00:00:00:00:02 |\n    | Create Isis Neighbor Sr Link Msd Sid Sub Tlv | Neighbor=${Neighbor} | MaxSegmentLeft=10 | Flags=[MAX_SEG_LELT] |",
  "TesterLibrary.Protocol.isis.create_isis_neighbor_custom_sub_tlv": "创建Isis Neighbor Custom Sub Tlv对象，用于配置自定义ISIS MSD（Maximum Stack Depth）子TLV。\n\n参数:\n    SubTlv (:obj:`IsisSrLinkMsdSubTlv`): 父级Sub-TLV对象，新创建的自定义MSD子TLV将依附于该对象。\n    \n关键字参数:\n    SubType (int): 该Sub-TLV的Type字段值，默认值为0，取值范围：0-255。\n    SubValue (int): 该Sub-TLV的Value字段值，默认值为08，以十六进制表示。\n\n返回值:\n    (:obj:`IsisCustomMsdSubTlv`): 返回一个代表新建自定义MSD子TLV的对象（IsisCustomMsdSubTlv实例）。\n    如果提供了关键字参数，则返回的对象会应用这些设置。\n\n描述:\n    此函数用于在ISIS协议中创建并配置一个自定义MSD子TLV对象。它通过调用底层API `renix.create_isis_neighbor_custom_sub_tlv` 实现功能，并且可以附加到现有Sub-TLV结构上。\n    主要用于高级ISIS路由配置场景，以支持扩展或修改路由行为的自定义TLV需求。\n\n示例:\n    .. code:: RobotFramework\n\n        | ${Session} | Create Isis | Port=${Port} |\n        | ${LSP} | Create Isis Lsp | Session=${Session} | SystemId=00:00:00:00:00:02 |\n        | ${Neighbor} | Create Isis Neighbor Tlv | Lsp=${LSP} | SystemId=00:00:00:00:00:02 |\n        | ${Msd} | Create Isis Neighbor Sr Link Msd Sid Sub Tlv | Neighbor=${Neighbor} |\n        | Isis Neighbor Custom Sub Tlv | SubTlv=${Msd} |",
  "TesterLibrary.Protocol.isis.create_isis_tlv_prefix_sid_sub_tlv": "创建ISIS TLV Prefix SID子TLV对象\n\n用途：\n该函数用于在给定的TLV上下文中创建一个ISIS Prefix SID子TLV对象，通常用于IS-IS协议的源路由扩展(Segment Routing)配置测试。\n\n参数说明：\n\n    Session (:obj:`object`): 会话对象，必须是已经初始化并与有效端口或上下文关联的会话。\n    \n    Tlv (:obj:`IsisIpv4TlvConfig`): 父TLV对象，在其中创建Prefix SID子TLV。该TLV实例必须支持子TLV结构。\n\n    **kwargs (dict): 可选的关键字参数，用于配置Prefix SID子TLV的属性，包括但不限于以下参数：\n    \n        Flags (list): 指定包含在TLV中的标志位，默认值：['NOSHOW', 'NOPHP']，可取值包括：\n        \n            NOSHOW\n            \n            ADVERTISEMENT\n            \n            NODESID\n            \n            NOPHP\n            \n            EXPLICIT\n            \n            VALUE\n            \n            LOCAL\n        \n        Sid (int): SID/Label值，默认值：0，取值范围：0 - 4294967295\n        \n        Algorithm (int): 指定与SID关联的算法，默认值：0，取值范围：0 - 255\n        \n        PrefixSidStep (int): 前缀SID步长，默认值：1\n\n返回值：\n\n    (:obj:`IsisSrPrefixSidSubTlv`): 创建成功的ISIS Prefix SID子TLV对象，可用于后续配置或引用。\n\n异常处理：\n\n    如果创建失败，函数将抛出ContinuableFailure异常，并提示调用失败信息。\n\n示例代码：\n.. code:: RobotFramework\n\n    | ${Session} | Create Isis | Port=${Port} |\n    | ${LSP} | Create Isis Lsp | Session=${Session} | SystemId=00:00:00:00:00:02 |\n    | ${Ipv4} | Create Isis Ipv4 Tlv | Lsp=${LSP} | SystemId=00:00:00:00:00:02 |\n    | Create Isis Tlv Prefix Sid Sub Tlv | Tlv=${Ipv4} |",
  "TesterLibrary.Protocol.isis.create_isis_tlv_flex_algorithm_prefix_metric_sub_tlv": "创建ISIS Flex Algorithm Prefix Metric Sub-TLV对象\n\n该函数用于在指定的父TLV对象下创建并配置一个ISIS Flex Algorithm Prefix Metric Sub-TLV实例。  \n该Sub-TLV通常用于在IS-IS协议中携带与Flex Algorithm相关的前缀度量信息，支持更灵活的路径计算和转发行为。\n\nArgs:\n    Tlv (:obj:`IsisIpv4TlvConfig`): 父级TLV对象，类型为IsisIpv4TlvConfig或其子类，表示新创建的Flex Algorithm Prefix Metric Sub-TLV将被添加到该TLV中。\n\nKeyword Args:\n    Algorithm (int, optional): 关联的Flex算法ID，取值范围128~255，默认值为128。\n                              该值标识了用于该前缀度量的特定Flex算法。\n\n    Metric (int, optional): 度量值，取值范围0~4294967295，默认值为0。\n                            表示该前缀在Flex算法中的路径选择权重。\n\nReturns:\n    :obj:`IsisFlexAlgoPrefixMetricSubTlv`: 创建并配置完成的Flex Algorithm Prefix Metric Sub-TLV对象。\n                                         如果提供了关键字参数，则返回的对象会根据这些参数进行相应的配置。\n\nRaises:\n    ContinuableFailure: 如果底层调用失败（返回False），则抛出异常，提示当前操作未成功完成。\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${Session} | Create Isis | Port=${Port} |\n        | ${LSP} | Create Isis Lsp | Session=${Session} | SystemId=00:00:00:00:00:02 |\n        | ${Ipv4} | Create Isis Ipv4 Tlv | Lsp=${LSP} | SystemId=00:00:00:00:00:02 |\n        | Create Isis Tlv Flex Algorithm Prefix Metric Sub Tlv | Tlv=${Ipv4} | Algorithm=130 | Metric=100 |",
  "TesterLibrary.Protocol.isis.create_isis_tlv_bier_sub_tlv": "创建ISIS TLV BIER子TLV对象，用于在ISIS协议中配置BIER（Bit Index Explicit Replication）扩展。\n\n此函数用于创建并配置一个与给定父TLV相关联的ISIS BIER子TLV对象。BIER子TLV通常用于支持基于比特索引的显式复制，以实现高效的多播转发。该函数封装了底层`IsisRouter.create_tlv_bier_sub_tlv`方法，便于在测试脚本中使用。\n\nArgs:\n    Tlv (:obj:`IsisIpv4TlvConfig`): 父TLV对象，表示一个已创建的ISIS TLV，例如IPv4 TLV。该TLV应支持BIER扩展。\n\nKeyword Args:\n    BFRId (int, optional): 指定BFR（Bit Forwarding Router，比特转发路由器）ID，取值范围为1到65535，默认值为1。\n    SubDomainId (int, optional): 指定BIER子域ID，取值范围为0到255，默认值为1。\n    IgpAlgorithm (int, optional): IGP算法标识符，取值范围为0到255，默认值为0。\n    BierAlgorithm (int, optional): BIER算法标识符，取值范围为0到255，默认值为0。\n\nReturns:\n    :obj:`IsisBierSubTlv`: 返回新创建并配置好的ISIS BIER子TLV对象，可用于进一步操作或添加到其他结构中。\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${Session} | Create Isis | Port=${Port} |\n        | ${LSP} | Create Isis Lsp | Session=${Session} | SystemId=00:00:00:00:00:02 |\n        | ${Ipv4} | Create Isis Ipv4 Tlv | Lsp=${LSP} | SystemId=00:00:00:00:00:02 |\n        | Create Isis Tlv Bier Sub Tlv | Tlv=${Ipv4} | BFRId=100 | SubDomainId=10 | IgpAlgorithm=1 | BierAlgorithm=1 |",
  "TesterLibrary.Protocol.isis.create_isis_tlv_bier_Mpls_sub_sub_tlv": "创建ISIS BIER MPLS子子TLV对象，用于在BIER配置上下文中构建或修改IS-IS协议中的MPLS相关TLV信息。\n\n参数：\n    Bier (:obj:`IsisBierSubTlv`): 父级BIER配置对象，表示该MPLS子子TLV所属的BIER上下文。\n    **kwargs (dict): 可选配置参数，用于进一步定制该TLV对象的属性，支持以下关键字参数：\n        MaxSI (int): 设置最大Set ID值，默认为1，取值范围0-255。\n        LabelorBiftId (int): 指定标签范围的起始标签或BIFT ID，默认值为100，取值范围0-4294967295。\n        BSLength (int): 指定本地比特串长度，默认值为1，取值范围0-15。\n\n返回值：\n    :obj:`IsisBierMplsSubTlv`: 创建并配置好的ISIS BIER MPLS子子TLV对象，可用于后续IS-IS路由协议中BIER/MPLS功能的配置与管理。\n\n示例：\n    .. code:: RobotFramework\n\n        | ${Session} | Create Isis | Port=${Port} |\n        | ${LSP} | Create Isis Lsp | Session=${Session} | SystemId=00:00:00:00:00:02 |\n        | ${Ipv6} | Create Isis Ipv6 Tlv | Lsp=${LSP} | SystemId=00:00:00:00:00:02 |\n        | Create Isis Tlv Bier Sub Tlv | Tlv=${Ipv6} |\n        | Create Isis Tlv Bier Mpls Sub Sub Tlv | Bier=${Ipv6} | MaxSI=255 | LabelorBiftId=200 | BSLength=8 |\n\n说明：\n    该函数通过调用底层RenixAPI接口实现ISIS BIER MPLS子子TLV的创建和配置。它封装了IsisRouter模块中的相应方法，允许用户通过传入父级BIER对象和可选参数构造出完整的TLV结构。生成的对象可以被集成到IS-IS路由协议的BIER/MPLS配置中以完成复杂网络测试任务。",
  "TesterLibrary.Protocol.isis.create_isis_tlv_bierv6_sub_sub_tlv": "创建ISIS BIERv6 MPLS子子TLV对象，用于在ISIS协议中配置BIERv6多播转发扩展。\n\nArgs:\n    Bier (:obj:`IsisBierSubTlv`): 父级或上下文对象，表示与该BIERv6 MPLS子子TLV关联的BIERv6配置上下文。\n\nKeyword Args:\n    MaxSI (int): 设置最大Set Identifier(SI)，默认值为1，取值范围0-255。\n    LabelorBiftId (int): 指定标签范围中的起始标签值或BIFT-ID，用于多播转发索引， 默认值为100，取值范围0-4294967295。\n    BSLength (int): 设置本地比特串（BitString）长度，默认值为1，取值范围0-15，用于定义多播组成员标识的位字段大小。\n\nReturns:\n    (:obj:`IsisBierMplsSubTlv`): 返回一个配置好的IsisBierMplsSubTlv实例，代表一个BIERv6 MPLS子子TLV对象，用于支持在ISIS协议中进行高效多播数据包转发。\n\nDescription:\n    该方法封装了BIERv6 MPLS子子TLV的创建和配置。它通过调用底层API函数实现TLV对象的生成，并允许通过关键字参数进一步定制其属性。此TLV结构是BIERv6在ISIS协议中实现多播转发的重要组成部分，用于标识多播拓扑和转发信息。\n\nExample:\n    .. code:: RobotFramework\n\n        | ${Session} | Create Isis | Port=${Port} |\n        | ${LSP} | Create Isis Lsp | Session=${Session} | SystemId=00:00:00:00:00:02 |\n        | ${Ipv6} | Create Isis Ipv6 Tlv | Lsp=${LSP} | SystemId=00:00:00:00:00:02 |\n        | Create Isis Tlv Bier Sub Tlv | Tlv=${Ipv6} |\n        | Create Isis Tlv Bierv6 Sub Sub Tlv | Bier=${Ipv6} | MaxSI=3 | LabelorBiftId=200 | BSLength=4 |",
  "TesterLibrary.Protocol.isis.create_isis_tlv_end_bier_sub_tlv": "创建ISIS END BIER Sub-TLV对象，用于在IS-IS协议中配置END BIER（Bit Index Explicit Replication）子TLV。\n\n参数:\n    Bier (:obj:`IsisIpv6TlvConfig`): 父级ISIS TLV对象，表示要关联此END BIER Sub-TLV的上下文，通常与IPv6 TLV相关联。\n    **kwargs (dict): 可选关键字参数，用于在创建时配置该END BIER Sub-TLV对象的属性。支持以下可选参数：\n        - Type (int): 指定Sub-TLV的Type字段值，取值范围为0-255，默认值为3。\n        - EndBierAddr (str): 指定End.BIER SID地址，默认值为\"::1\"，必须为有效的IPv6地址。\n\n返回值:\n    :obj:`IsisEndBierSubTlv`: 创建并配置后的ISIS END BIER Sub-TLV对象实例。该对象与提供的父级Bier对象相关联，并可用于后续的IS-IS Segment Routing配置。\n\n描述:\n该方法用于封装Renix底层API调用，创建一个ISIS END BIER Sub-TLV对象并将其绑定到指定的父级TLV对象上。END BIER Sub-TLV用于Segment Routing中的高效多播转发场景。创建过程中可通过关键字参数传入初始配置参数，这些参数将通过IsisEndBierSubTlv类的edit()方法应用。\n\n示例:\n    .. code:: RobotFramework\n\n        | ${Session} | Create Isis | Port=${Port} |\n        | ${LSP} | Create Isis Lsp | Session=${Session} | SystemId=00:00:00:00:00:02 |\n        | ${Ipv6} | Create Isis Ipv6 Tlv | Lsp=${LSP} | SystemId=00:00:00:00:00:02 |\n        | Create Isis Tlv End Bier Sub Tlv | Tlv=${Ipv6} |",
  "TesterLibrary.Protocol.isis.create_isis_tlv_bierv6_bift_id_sub_tlv": "创建ISIS TLV中的BIERv6 BIFT-ID子TLV对象，并将其关联到指定的父级TLV对象上。\n\n该函数用于创建一个ISIS协议中TLV（Type-Length-Value）结构的BIERv6 BIFT-ID子TLV对象。BIERv6是基于IPv6的BIER（Bit Index Explicit Replication）转发技术，BIFT-ID（Bit Forwarding Table ID）用于标识特定的转发表。此子TLV通常用在支持多播的ISIS路由协议配置中。\n\n参数:\n    Bier (:obj:`IsisIpv6TlvConfig`): 父级TLV对象，表示将要关联此BIERv6 BIFT-ID子TLV的上层结构。\n\n关键字参数:\n    Type (int): 指定TLV的Type字段值，默认为7，取值范围0-255。\n    MPRA (str): 指定MPRA（Multi-Prefix Routed Anycast）地址，默认值为'::1'，必须是一个有效的IPv6地址。\n\n返回值:\n    :obj:`IsisBierBiftIdSubTlv`: 创建并配置好的BIERv6 BIFT-ID子TLV对象，可用于进一步的协议配置或附加到其他TLV结构中。\n\n示例:\n    .. code:: RobotFramework\n\n        | ${Session} | Create Isis | Port=${Port} |\n        | ${LSP} | Create Isis Lsp | Session=${Session} | SystemId=00:00:00:00:00:02 |\n        | ${Ipv6} | Create Isis Ipv6 Tlv | Lsp=${LSP} | SystemId=00:00:00:00:00:02 |\n        | Create Isis Tlv Bierv6 Bift Id Sub Tlv | Tlv=${Ipv6} |",
  "TesterLibrary.Protocol.isis.create_isis_capability_tlv": "创建ISIS Capability TLV对象\n\n该函数用于在指定的ISIS会话和链路状态包（LSP）中创建一个Capability TLV（类型-长度-值）结构。它封装了Capability TLV的创建逻辑，并通过会话对象的方法进行实际创建操作，提供了一个简洁的接口。\n\n参数:\n    Session (:obj:`IsisRouter`): ISIS协议会话对象，负责管理ISIS协议的交互。必须包含`create_capability_tlv`方法来处理TLV的实际创建。\n    Lsp (:obj:`IsisLspConfig`): 要附加Capability TLV的链路状态包（LSP）。通常表示在ISIS中用于广播路由信息的数据单元。\n    **kwargs : dict\n        传递给会话对象的`create_capability_tlv`方法的额外关键字参数。可能包括创建Capability TLV所需的标志、选项或其他配置数据。\n\n关键字参数:\n    Option (list): Capability TLV的选项标志，默认值为['NOSHOW', 'SBIT']，可选值包括：\n\n        NOSHOW - 不显示该TLV内容\n\n        SBIT - 支持特定功能位\n\n        DBIT - 数据库同步相关位\n\n    RouterId (str): 路由器ID，必须是有效的IPv4地址，默认值为\"192.0.0.1\"\n\n返回值:\n    (:obj:`IsisCapabilityTlv`): 成功时返回新创建的ISIS Capability TLV对象；如果创建失败，则抛出异常。\n\n示例:\n    .. code:: RobotFramework\n\n        | ${Session} | Create Isis | Port=${Port} |\n        | ${LSP} | Create Isis Lsp | Session=${Session} | SystemId=00:00:00:00:00:02 |\n        | Create Isis Capability Tlv | Session=${Session} | Lsp=${LSP} | RouterId=1.1.1.1 |\n\n描述:\n    此函数通过调用底层会话对象的方法实现Capability TLV的创建，并提供了灵活的接口设计，支持未来扩展而不必修改该函数签名。若底层调用失败，函数将抛出ContinuableFailure异常。",
  "TesterLibrary.Protocol.isis.create_isis_capability_sr_capability_sub_tlv": "创建ISIS SR（Segment Routing）能力子TLV对象，用于在ISIS协议中通告段路由能力信息。\n\n该函数基于提供的会话和能力参数，生成一个ISIS SR能力子TLV对象。该子TLV通常用于在网络中传播段路由相关的功能标识，例如支持的标志位、SID格式等。\n\nArgs:\n\n    Session (:obj:`IsisRouter`): 表示ISIS协议会话的对象，提供与测试设备或系统的上下文连接。\n\n    Capability (:obj:`IsisCapabilityTlv`): 要编码到子TLV中的SR能力信息，通常是包含SR全局块范围（SRGB）、能力标志或其他SR相关参数的对象。\n\nKeyword Args:\n\n    Flags (list): 指定包含在TLV中的一个或多个标志位，默认值为 ['NOSHOW', 'IPv4_CAPABLE']。可选值包括：\n\n        NOSHOW\n\n        IPv4_CAPABLE\n\n        IPv6_CAPABLE\n\n    ValueType (str): 指定标识符类型（如SID或标签），默认值为 BIT32。可选值包括：\n\n        BIT20\n\n        BIT32\n\nReturns:\n\n    (:obj:`IsisSrCapabilitySubTlv`): 创建的ISIS SR能力子TLV对象，用于后续配置或插入到LSP中进行传输。\n\nRaises:\n\n    ContinuableFailure: 如果底层调用失败，则抛出此异常，表示操作未成功完成。\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${Session} | Create Isis | Port=${Port} |\n        | ${LSP} | Create Isis Lsp | Session=${Session} | SystemId=00:00:00:00:00:02 |\n        | ${Capability} | Create Isis Capability Tlv | Lsp=${LSP} | SystemId=1.1.1.1 |\n        | Create Isis Capability Sr Capability Sub Tlv | Session={Session} | Capability=${Capability} | ValueType=BIT20 | Flags=['IPv6_CAPABLE'] |",
  "TesterLibrary.Protocol.isis.create_isis_capability_sr_algorithm_sub_tlv": "创建ISIS Segment Routing算法能力子TLV对象，用于在ISIS协议中声明支持的Segment Routing算法。\n\n参数:\n    Capability (:obj:`IsisCapabilityTlv`): 父级ISIS能力TLV对象，该子TLV将作为其组成部分。\n    \n关键字参数:\n    Algorithm (list of int): 表示Segment Routing算法类型的列表，默认值为[0]。可选值包括但不限于：\n        0: SPF最短路径优先算法\n        1: 基于带宽约束的SPF（CSPF）\n        其他值依据具体实现和标准定义。\n\n返回值:\n    :obj:`IsisSrAlgorithmSubTlv`: 创建并配置好的ISIS Segment Routing算法能力子TLV对象。\n\n功能说明:\n该方法用于在ISIS协议中构建SR（Segment Routing）能力信息的一部分，即SR Algorithm Sub-TLV。该子TLV用于通告设备所支持的路由计算算法，影响Segment Routing路径的计算方式。通过Capability参数将其关联到已有的ISIS能力TLV对象，并可通过Algorithm等参数进行配置。\n\n示例:\n.. code:: RobotFramework\n\n    | ${Session} | Create Isis | Port=${Port} |\n    | ${LSP} | Create Isis Lsp | Session=${Session} | SystemId=00:00:00:00:00:02 |\n    | ${Capability} | Create Isis Capability Tlv | Lsp=${LSP} | SystemId=1.1.1.1 |\n    | Create Isis Capability Sr Algorithm Sub Tlv | Capability=${Capability} | Algorithm=[0,1] |",
  "TesterLibrary.Protocol.isis.create_isis_capability_srv6_capability_sub_tlv": "创建ISIS Capability SRv6 Capability Sub TLV对象\n\n该函数用于在ISIS协议上下文中创建SRv6（基于IPv6的段路由）能力子TLV。它提供了一个接口，通过传递会话和能力参数，并支持通过关键字参数进行灵活配置，来生成SRv6能力相关信息。\n\n参数:\n    Session (:obj:`IsisRouter`): ISIS协议会话对象列表，类型为：object。\n    \n    Capability (:obj:`IsisCapabilityTlv`): 基础能力信息或对象，定义要设置的SRv6能力属性，如节点能力、服务功能或其他SRv6特定设置。\n\n关键字参数:\n    Flags (list, optional): 选择一个或多个包含在TLV中的标志位，默认值为 `UNKNOWN`。取值范围包括：\n        UNKNOWN\n        UNUSED0\n        O_BIT\n        UNUSED2\n        UNUSED3\n        UNUSED4\n        UNUSED5\n        UNUSED6\n        UNUSED7\n        UNUSED8\n        UNUSED9\n        UNUSED10\n        UNUSED11\n        UNUSED12\n        UNUSED13\n        UNUSED14\n        UNUSED15\n\n返回值:\n    (:obj:`IsisSrv6CapabilitySubTlv`): 创建的ISIS Capability SRv6 Capability Sub TLV对象。具体类型和结构取决于Session实现。\n\n示例:\n    .. code:: RobotFramework\n\n        | ${Session} | Create Isis | Port=${Port} |\n        | ${LSP} | Create Isis Lsp | Session=${Session} | SystemId=00:00:00:00:00:02 |\n        | ${Capability} | Create Isis Capability Tlv | Lsp=${LSP} | SystemId=1.1.1.1 |\n        | Create Isis Capability Srv6 Capability Sub Tlv | Session=Session | Capability=${Capability} |",
  "TesterLibrary.Protocol.isis.create_isis_capability_sr_node_msd_sub_tlv": "创建ISIS Capability Sr Node Msd Sub TLV对象，用于扩展ISIS Segment Routing节点的MSD（Maximum Stack Depth）能力。\n\n该函数封装了会话级别的方法，允许通过关键字参数传递额外的配置选项，具有灵活的配置性。\n\nArgs:\n    Session (:obj:`IsisRouter`): ISIS协议会话对象列表，用于与底层系统或API交互。必须包含一个名为`create_isis_capability_sr_node_msd_sub_tlv`的方法，接受Capability和任意关键字参数。\n\n    Capability (:obj:`IsisCapabilityTlv`): 定义SR（Segment Routing）节点MSD（Maximum Stack Depth）能力的具体TLV对象。\n\nKeyword Args:\n    Flags (list, optional): 选择一个或多个要包含在TLV中的标志位，默认值为['UNKNOWN']。可选标志包括：\n        UNKNOWN\n        MAX_SEG_LELT\n        MAX_END_POP\n        MAX_T_INSERT\n        MAX_T_ENCAPS\n        MAX_END_D\n\n    MaxSegmentLeft (int, optional): 在应用SID关联的SRv6 Endpoint Function指令之前，接收报文的SRH中SL（Segment Left）字段的最大值。默认值：8，取值范围：0-255。\n\n    MaxEndPop (int, optional): SRH栈顶端SID的最大数量。默认值：8，取值范围：0-255。\n\n    MaxInsert (int, optional): 执行T.Insert行为时可包含SID的最大数量。默认值：8，取值范围：0-255。\n\n    MaxEncap (int, optional): 执行T.Encap行为时可包含SID的最大数量。默认值：8，取值范围：0-255。\n\n    MaxEndD (int, optional): 执行End.DX6和End.DT6功能时，SRH中SID的最大数量。默认值：8，取值范围：0-255。\n\nReturns:\n    (:obj:`IsisSrMsdSubTlv`): 创建的ISIS Capability SR Node MSD子TLV对象。如果创建失败，则抛出ContinuableFailure异常。\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${Session} | Create Isis | Port=${Port} |\n        | ${LSP} | Create Isis Lsp | Session=${Session} | SystemId=00:00:00:00:00:02 |\n        | ${Capability} | Create Isis Capability Tlv | Lsp=${LSP} | SystemId=1.1.1.1 |\n        | Create Isis Capability Sr Node Msd Sub Tlv | Capability=${Capability} | MaxSegmentLeft=10 | Flags=[MAX_SEG_LELT, MAX_END_POP]",
  "TesterLibrary.Protocol.isis.create_isis_capability_sr_fad_sub_tlv": "创建ISIS Capability Sr Fad Sub TLV对象，用于定义Segment Routing灵活算法（Flexible Algorithm）的子TLV配置。\n\n该函数通过调用底层会话(Session)对象的`create_capability_sr_fad_sub_tlv`方法来实际创建SR FAD子TLV。它封装了与协议交互的复杂性，并提供了一个用户友好的接口用于配置和创建相关对象。\n\n### 参数说明\n\n- **Session** (:obj:`IsisRouter`)  \n  ISIS协议会话对象，负责管理与底层API或系统的连接和交互。必须包含`create_capability_sr_fad_sub_tlv`方法。\n\n- **Capability** (:obj:`IsisCapabilityTlv`)  \n  一个包含SR FAD子TLV所需配置或元数据的对象或字典，通常由`Create Isis Capability Tlv`等前置操作生成。\n\n- **\\*\\*kwargs** (dict)  \n  可选参数，用于进一步定制SR FAD子TLV的配置，具体如下：\n\n  - **FlexAlgo** (int)  \n    灵活算法ID，默认值：128，取值范围：128-255。\n\n  - **MetricType** (str)  \n    指定路径计算使用的度量类型，默认值：IGP_METRIC，可选项：\n    - IGP_METRIC\n    - MIN_LINK_DELAY\n    - TE_METRIC\n\n  - **CalType** (int)  \n    特定IGP算法的计算类型，默认值：0，取值范围：0-255。\n\n  - **Priority** (int)  \n    子TLV优先级，默认值：0。\n\n  - **FlexAlgoSubTlv** (list)  \n    定义灵活算法路径计算应遵循的约束条件，默认值：['UNKNOWN']，可选项：\n    - UNKNOWN\n    - EXCLUDE_ADMIN\n    - INCLUDE__ANY_ADMIN\n    - INCLUDE_ALL_ADMIN\n    - DEFINITION_FLAGS\n    - EXCLUDE_SRLG\n\n  - **ExcludeAdmin** (int)  \n    排除的管理组掩码，默认值：0，取值范围：0-4294967295。\n\n  - **IncludeAnyAdmin** (int)  \n    包含任意管理组掩码，默认值：0，取值范围：0-4294967295。\n\n  - **IncludeAllAdmin** (int)  \n    必须包含所有管理组掩码，默认值：0，取值范围：0-4294967295。\n\n  - **DefinitionFlags** (list)  \n    定义标志位，默认值：[0x80]，取值范围：0-FF（十六进制整数列表）。\n\n  - **ExcludeSRLG** (list)  \n    排除的共享风险链路组(SRLG)，默认值：[0x10020000]，取值范围：0-4294967295（十六进制整数列表）。\n\n### 返回值\n\n- **(:obj:`IsisFelxAlgoDefinitionSubTlv`)**  \n  创建的ISIS SR FAD子TLV对象，可用于后续的LSP更新或协议交互。\n\n### 示例\n\n```robotframework\n| ${Session} | Create Isis | Port=${Port} |\n| ${LSP} | Create Isis Lsp | Session=${Session} | SystemId=00:00:00:00:00:02 |\n| ${Capability} | Create Isis Capability Tlv | Lsp=${LSP} | SystemId=1.1.1.1 |\n| Create Isis Capability Sr Fad Sub Tlv | Session=${Session} | Capability=${Capability} | FlexAlgo=130 | MetricType=TE_METRIC |\n```\n\n### 描述\n\n此函数简化了ISIS SR FAD子TLV的创建流程，将复杂的会话层交互抽象为高层次的调用接口。支持传入基础能力对象(Capability)及扩展配置参数(kwargs)，适用于多种测试场景下的SR灵活算法定义需求。",
  "TesterLibrary.Protocol.isis.create_isis_capability_srms_preference_sub_tlv": "创建ISIS Capability Srms Preference Sub TLV对象，用于配置SR Mapping Server的优先级偏好。\n\n该函数将为指定的ISIS能力对象（Capability）创建一个SRMS Preference子TLV，并可选地通过关键字参数进行配置。内部调用底层API完成实际创建操作，若创建失败则抛出异常，成功则返回创建的子TLV对象。\n\nArgs:\n\n    Capability (:obj:`IsisCapabilityTlv`): 要绑定的上层ISIS能力TLV对象，必须是一个支持SRMS Preference扩展的ISIS能力对象。\n\nKeyword Args:\n\n    Preference (int): 设置本节点作为SR Mapping Server的优先级，取值范围为0到255，默认值为0。\n\nReturns:\n\n    (:obj:`IsisSrSRMSPrefSubTlv`): 创建并可能已配置的ISIS SRMS Preference子TLV对象，可用于进一步操作或查询属性。\n\nRaises:\n\n    ContinuableFailure: 如果底层创建操作返回False，表示创建失败，则抛出此异常。\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${Session} | Create Isis | Port=${Port} |\n        | ${LSP} | Create Isis Lsp | Session=${Session} | SystemId=00:00:00:00:00:02 |\n        | ${Capability} | Create Isis Capability Tlv | Lsp=${LSP} | SystemId=1.1.1.1 |\n        | Create Isis Capability Srms Preference Sub Tlv | Capability=${Capability} | Preference=100 |",
  "TesterLibrary.Protocol.isis.create_isis_sr_binding_tlv": "创建ISIS Segment Routing Binding TLV对象，用于在指定会话和LSP上配置SR绑定信息。\n\n参数:\n\n    Session (:obj:`IsisRouter`): ISIS协议会话对象，用于管理与ISIS设备的连接和配置\n\n    Lsp (:obj:`IsisLspConfig`): 已配置的ISIS LSP对象，表示需要绑定SR属性的链路状态路径\n\n关键字参数（可选）:\n\n    EnableMt (bool): 是否启用多拓扑模式，默认为False\n\n    MtId (str): 多拓扑ID，仅当EnableMt为True时有效，默认值：STANDARD。可选值包括：\n\n        STANDARD: 标准拓扑\n\n        IPV6_ROUTING: IPv6路由拓扑\n\n    Flags (list of str): 绑定TLV的标志位列表，默认值：['NOSHOW']。可选标志包括：\n\n        NOSHOW: 不显示该条目\n\n        FBIT: 拒绝转发位\n\n        MBIT: 映射服务器位\n\n        SBIT: 源节点位\n\n        DBIT: 删除位\n\n        ABIT: 本地管理位\n\n    Weight (int): 权重值，用于负载均衡，默认值：0，取值范围：0-255\n\n    Range (int): SR前缀范围，默认值：1，取值范围：0-65535\n\n    Ipv4Version (bool): 是否启用IPv4地址族，默认值：True\n\n    Ipv4Prefix (str): IPv4前缀地址，默认值：\"192.0.0.1\"\n\n    Ipv4PrefixLength (int): IPv4前缀长度，默认值：1，取值范围：1-32\n\n    Ipv6Prefix (str): IPv6前缀地址，默认值：\"2000::1\"\n\n    Ipv6PrefixLength (int): IPv6前缀长度，默认值：64，取值范围：1-128\n\n返回值:\n\n    (:obj:`IsisSrBindingTlv`): 创建的ISIS SR Binding TLV对象，可用于进一步配置或验证\n\n示例:\n\n    .. code:: RobotFramework\n\n        | ${Session} | Create Isis | Port=${Port} |\n        | ${LSP} | Create Isis Lsp | Session=${Session} | SystemId=00:00:00:00:00:02 |\n        | Create Isis Binding Tlv | Session={Session} | Lsp=${LSP} | Ipv4Version=False | Weight=10 |\n\n说明:\n\n    此函数用于封装底层API调用，简化用户对ISIS协议中Segment Routing Binding TLV的创建流程。它通过传入的Session对象和Lsp配置创建SR Binding TLV，并支持多种可选参数进行定制化配置。若创建失败，则抛出ContinuableFailure异常。",
  "TesterLibrary.Protocol.isis.create_isis_binding_sr_sid_sub_tlv": "创建ISIS SR SID子TLV绑定对象\n\n该函数用于在指定的Binding对象上创建并配置一个ISIS SR SID（Segment Routing Segment Identifier）子TLV。\n它通常用于段路由（Segment Routing）功能中，将SID或标签值绑定到特定的TLV结构中。\n\nArgs:\n\n    Binding (:obj:`IsisSrBindingTlv`): 父级ISIS TLV对象，表示要绑定SR SID子TLV的上下文环境。\n        通常是通过 `Create Isis Binding Tlv` 接口创建的绑定对象。\n\nKeyword Args:\n\n    ValueType (str, optional): 指定SID的位宽类型，默认为 BIT32。可选值包括：\n\n        BIT20: 表示使用20位标签（Label）\n\n        BIT32: 表示使用32位SID\n\n    Sid (int, optional): 根据ValueType设置对应的SID或起始标签值：\n\n        当ValueType为BIT20时，Sid表示起始标签值\n\n        当ValueType为BIT32时，Sid表示起始SID值\n\n        默认值：12000\n\nReturns:\n\n    (:obj:`IsisSrSidSubTlv`): 配置完成的ISIS SR SID子TLV对象，已绑定到提供的Binding对象上。\n        返回的对象可用于进一步配置或插入到协议栈中。\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${Session} | Create Isis | Port=${Port} |\n        | ${LSP} | Create Isis Lsp | Session=${Session} | SystemId=00:00:00:00:00:02 |\n        | ${Binding} | Create Isis Binding Tlv | Lsp=${LSP} | Ipv4Version=False |\n        | ${SidSubTlv} | Create Isis Binding Sr Sid Sub Tlv | Binding=${Binding} | ValueType=BIT32 | Sid=15000 |",
  "TesterLibrary.Protocol.isis.create_isis_srv6_location_tlv": "创建ISIS SRv6 Location TLV对象，用于在ISIS协议中配置SRv6定位器信息。\n\nArgs:\n    Session (:obj:`IsisRouter`): ISIS协议会话对象，表示一个ISIS路由器实例，负责管理TLV的创建上下文和生命周期。\n    Lsp (:obj:`IsisLspConfig`): ISIS LSP（链路状态协议数据单元）配置对象，表示与该TLV关联的LSP路径信息。\n\nKeyword Args:\n    MtId (str): 多拓扑ID，用于标识不同的拓扑实例，默认值为STANDARD。\n    Metric (int): 指定该TLV的度量值，用于路由计算中的优先级排序，默认值0，取值范围0-4294967295。\n    Flags (list): 标志位列表，用于控制TLV的行为特性。默认值['UNKNOWN']，可选值包括：\n        UNKNOWN, D_BIT, A_BIT, UNUSED2, UNUSED3, UNUSED4, UNUSED5, UNUSED6, UNUSED7\n    Algorithm (int): 定位器使用的算法编号，默认值0，取值范围0-255。\n    NumLocator (int): 定位器数量，默认值1，表示生成多少个定位器条目，取值范围0-4294967295。\n    LocatorSize (int): 定位器大小，表示每个定位器的前缀长度，默认值64，取值范围1-128。\n    Locator (str): 定位器IPv6地址，默认值\"aaaa:1:1:1::\"，必须是合法的IPv6格式字符串。\n    LocatorStep (int): 定位器步长，用于批量生成定位器时的递增步长，默认值1，取值范围0-65535。\n\nReturns:\n    (:obj:`IsisSrv6LocatorTlv`): 创建的ISIS SRv6 Location TLV对象，可用于后续的配置或查询操作。\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${Session} | Create Isis | Port=${Port} |\n        | ${LSP} | Create Isis Lsp | Session=${Session} | SystemId=00:00:00:00:00:02 |\n        | Create Isis Srv6 Location Tlv | Session={Session} | Lsp=${LSP} | Algorithm=1 |",
  "TesterLibrary.Protocol.isis.create_isis_srv6_end_sid_sub_tlv": "创建ISIS SRv6 End SID子TLV对象\n\n该函数用于在ISIS协议上下文中创建SRv6 End SID子TLV（Type-Length-Value）对象。该子TLV用于通告SRv6（Segment Routing over IPv6）的End SID（Segment Identifier）及其相关属性，是配置SRv6功能的重要组成部分。\n\nArgs:\n    Session (:obj:`Session`): 会话对象，表示与测试平台或API的连接，必须包含`create_srv6_end_sid_sub_tlv`方法以执行实际的TLV创建操作。\n    Location (:obj:`IsisSrv6LocatorTlv`): 表示SRv6定位符TLV对象，用于指定End SID所属的定位符。\n\nKeyword Args:\n    Flags (list, optional): 包含在TLV中的标志位列表。默认值为['UNKNOWN']。可选标志包括：\n\n        UNKNOWN\n\n        UNUSED0\n\n        UNUSED1\n\n        UNUSED2\n\n        UNUSED3\n\n        UNUSED4\n\n        UNUSED5\n\n        UNUSED6\n\n        UNUSED7\n\n    EndpointFunc (str, optional): 端点行为标识，定义SID被匹配时应执行的行为。默认值为'END_NO'。常见取值包括：\n\n        END_NO\n\n        END_PSP\n\n        END_USP\n\n        END_PSP_USP\n\n        END_X_NO\n\n        END_X_PSP\n\n        END_X_USP\n\n        END_X_PSP_USP\n\n        END_T_NO\n\n        END_T_PSP\n\n        END_T_USP\n\n        END_T_PSPS_USP\n\n        END_B6\n\n        END_B6_ENCAPS\n\n        END_BM\n\n        END_DX6\n\n        END_DX4\n\n        EDN_DT6\n\n        END_DT4\n\n        END_DT46\n\n        END_DX2\n\n        END_DX2V\n\n        END_DX2U\n\n        END_DX2M\n\n        END_S\n\n        END_B6_RED\n\n        END_B6_ENCAPS_RED\n\n        END_WITH_USD\n\n        END_PSP_USD\n\n        END_USP_USD\n\n        END_PSP_USP_USD\n\n        END_X_USD\n\n        END_X_PSP_USD\n\n        END_X_USP_USD\n\n        END_X_PSP_USP_USD\n\n        END_T_USD\n\n        END_T_PSP_USD\n\n        END_T_USP_USD\n\n        END_T_PSP_USP_USD\n\n    EnableCustom (bool, optional): 是否启用自定义端点行为，默认为False。\n    CustomFunc (int, optional): 自定义端点行为值，仅当EnableCustom为True时有效，默认值为0，取值范围为0到65535。\n    SID (str, optional): 要通告的SRv6 SID地址，默认值为\"::1\"，必须是一个有效的IPv6地址。\n\nReturns:\n    :obj:`IsisSrv6EndSidSubTlv`: 创建成功的ISIS SRv6 End SID子TLV对象，可用于后续的协议配置或测试操作。\n\nRaises:\n    ContinuableFailure: 如果底层调用失败，则抛出此异常，并附带函数名称作为错误信息的一部分。\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${Session} | Create Isis | Port=${Port} |\n        | ${LSP} | Create Isis Lsp | Session=${Session} | SystemId=00:00:00:00:00:02 |\n        | ${Location} | Create Isis Srv6 Location Tlv | Lsp=${LSP} | Algorithm=1 |\n        | Create Isis Srv6 End Sid Sub Tlv | Session={Session} | Location=${Location} | SID=\"2001:db8::1\" | EndpointFunc=END_PSP |",
  "TesterLibrary.Protocol.isis.advertise_isis": "通告Isis协议会话lsp\n\n该函数用于通过底层 `IsisRouter.advertise` 方法通告指定的 IS-IS 链路状态数据包 (LSP)。它封装了 LSP 的通告操作，通常用于在 IS-IS 路由环境中模拟或控制 LSP 的传播行为。\n\nArgs:\n\n    Lsps (:obj:`IsisLspConfig` 或 list/set/tuple of :obj:`IsisLspConfig`): 要通告的一个或多个ISIS LSP对象。\n        每个 LSP 对象必须包含一个唯一的标识符属性 `handle`，用以在系统中识别该 LSP。\n\nReturns:\n\n    bool: 如果LSP通告成功则返回True；如果失败则抛出异常（不会显式返回False）。\n\nRaises:\n\n    ContinuableFailure: 当LSP通告失败时抛出此异常，并附带失败信息。\n\nExamples:\n    .. code:: RobotFramework\n\n        | Advertise Isis | Lsp=${Lsp} |\n\n注意事项：\n\n    - 传入的每个 LSP 对象必须具有 `handle` 属性。\n    - 此方法是 RenixAPI 实例方法的封装调用，因此应确保 Renix 环境已正确初始化并存在有效的 ISIS LSP 对象。",
  "TesterLibrary.Protocol.isis.withdraw_isis": "Withdraw ISIS Link State Packets (LSPs) using the ISIS routing protocol.\n\nThis function is used to withdraw one or more ISIS LSPs by invoking the underlying `RenixAPI.withdraw_isis` method. It wraps the actual withdrawal logic and provides failure handling by raising a `ContinuableFailure` exception if the operation fails.\n\nArgs:\n\n    Lsps (:obj:`IsisLspConfig` or list of :obj:`IsisLspConfig`): One or more ISIS LSP objects to be withdrawn.\n        Each LSP object must have a 'handle' attribute that uniquely identifies it for the withdrawal command.\n        If a single LSP is provided, it will be processed as-is; if multiple LSPs are provided, they should be passed as a list.\n\nReturns:\n\n    bool: True if the withdrawal was successful; False otherwise.\n\nRaises:\n\n    ContinuableFailure: If the withdrawal fails, this exception is raised to indicate failure while allowing test execution to continue.\n\nExamples:\n    .. code:: RobotFramework\n\n        | Withdraw Isis | Lsp=${Lsp} |",
  "TesterLibrary.Protocol.isis.graceful_restart_isis": "Performs a graceful restart of the IS-IS sessions provided.\n\nThis function takes one parameter, `Sessions`, which can be a single session object or an iterable \n(such as a list, set, or tuple) of session objects. If a single session is provided, it is converted \ninto a list containing that session. The function then iterates through each session and invokes \nthe `graceful_restart()` method on it.\n\nParameters:\n-----------\nSessions : Union[object, List[object], Set[object], Tuple[object]]\n    A session object or an iterable of session objects representing the IS-IS sessions to restart.\n    Each session must have a `graceful_restart()` method defined for this function to work properly.\n\nReturns:\n--------\nbool\n    Always returns True to indicate that the graceful restart process has been initiated successfully \n    for all provided sessions.\n\nRaises:\n-------\nTypeError\n    If any of the items in the `Sessions` parameter do not support the `graceful_restart()` method.",
  "TesterLibrary.Protocol.isis.get_isis_session_stats": "获取ISIS会话的统计信息，根据提供的会话对象和指定的统计项返回对应的统计结果。\n\nArgs:\n\n    Session (object or list or set or tuple or None):\n        - Isis协议会话对象或其集合。如果为None，则不应用会话过滤，检索所有可用的ISIS会话统计。\n        - 如果是具有'Name'属性的对象，使用该名称作为过滤条件。\n        - 如果是会话对象的集合（list, set, tuple），提取它们的'Name'属性用于过滤。\n        - 用于构造传递给内部方法的'SessionHandle'索引。\n\n    StaItems (list or str or None):\n        - 需要获取的统计项列表。支持的统计项包括：\n\n            TxP2pHello\n            RxP2pHello\n            TxLanL1Hello\n            RxLanL1Hello\n            TxLanL2Hello\n            RxLanL2Hello\n            TxL1Lsp\n            RxL1Lsp\n            TxL2Lsp\n            RxL2Lsp\n            TxL1Csnp\n            RxL1Csnp\n            TxL2Csnp\n            RxL2Csnp\n            TxL1Psnp\n            RxL1Psnp\n            TxL2Psnp\n            RxL2Psnp\n\n        - 如果为None，默认查询所有可用的统计属性。\n        - 如果为字符串，将转换为单元素列表。\n\nReturns:\n\n    dict or pd.DataFrame:\n        - 如果找到唯一匹配的会话行，返回一个字典，键为指定的StaItems，值为其对应的统计值。\n        - 如果找到多个匹配的会话行，返回一个包含筛选后的ISIS会话统计信息的pandas DataFrame。\n        - 如果未找到任何匹配的会话，返回False。\n\nRaises:\n\n    ContinuableFailure: 当无法获取统计信息时抛出异常。\n\nExamples:\n    .. code:: RobotFramework\n\n        | @{StaItems} | Create List | TxL1Lsp | RxL1Lsp |\n        | Subscribe Result | Types=IsisSessionStats |\n        | Start Protocol |\n        | Sleep | 60 |\n        | &{Result} | Get Isis Session Stats | Session=${Session} | StaItems=@{StaItems} |\n        | Clear Result |",
  "TesterLibrary.Protocol.isis.get_isis_tlv_stats": "获取ISIS TLV统计信息\n\nArgs:\n\n    Session (:obj:`IsisRouter` 或 None): Isis协议会话对象，用于指定统计的会话范围。支持以下类型：\n\n        - 单个IsisRouter对象：使用其Name属性作为会话标识\n        - 多个IsisRouter对象的集合（列表/集合/元组）：同时查询多个会话的统计\n        - None：不进行会话过滤，返回全局统计结果\n\n    StaItems (list, str 或 None): 需要获取的统计项列表，支持以下形式：\n\n        - None：返回所有可用统计项\n        - 字符串：返回单个统计项\n        - 列表：返回指定的多个统计项\n\n        支持的统计项包括：\n\n            TxPrefixSid, RxPrefixSid, TxAdjSid, RxAdjSid, TxLanAdjSid, RxLanAdjSid,\n            TxSidBinding, RxSidBinding, TxSrv6Loc, RxSrv6Loc, TxSrv6EndX, RxSrv6EndX,\n            TxSrv6LanEndX, RxSrv6LanEndX\n\nReturns:\n\n    返回值类型根据匹配结果数量可能为以下三种类型：\n\n        - dict: 当仅找到一条匹配记录时，返回键值对字典\n        - pd.DataFrame: 当找到多条匹配记录时，返回包含所有结果的DataFrame\n        - bool: 当没有找到任何匹配记录时返回False\n\nRaises:\n\n    ContinuableFailure: 当底层接口返回False时抛出可继续异常\n\nExamples:\n    .. code:: RobotFramework\n\n        | @{StaItems} | Create List | AdjacencyState | TxUpdate |\n        | Subscribe Result | Types=IsisTlvStats |\n        | Start Protocol |\n        | Sleep | 60 |\n        | &{Result} | Get Isis Tlv Stats | Session=${Session} | StaItems=@{StaItems} |\n        | Clear Result |\n\n注意事项：\n    - 需要先调用Subscribe Result订阅对应类型的统计结果\n    - 统计数据需要协议运行一段时间后才会累积\n    - 返回结果包含发送(Tx)和接收(Rx)两个方向的统计数值",
  "TesterLibrary.Protocol.isis.edit_isis_port_config": "Edits the ISIS port configuration for one or more specified ports.\n\n    Purpose:\n        This function modifies the ISIS port configuration, specifically related to route transmission rate and other parameters,\n        for one or more test instrument ports. It calls the backend method to apply the changes and returns the result.\n\n    Parameters:\n        Ports (list or object): A single Port object or a list of Port objects representing the test instrument ports\n                                for which the ISIS configuration needs to be updated.\n        **kwargs: Keyword arguments specifying the configuration parameters to update in the IsisPortRateConfig object.\n                  For example, 'UpdateRoutesTransmitRate' can be used to set the IS-IS Tx Hello Rate in messages per second.\n                  Valid values are between 1 and 10000, with a default value of 1000 if not specified.\n\n    Returns:\n        bool: True if the ISIS port configuration was successfully edited for all specified ports.\n              False if an error occurred during the configuration update.\n\n    Raises:\n        ContinuableFailure: If the backend call returns False, indicating failure, an exception is raised with a failure message.\n\n    Example:\n        .. code:: RobotFramework\n\n            | Edit Isis Port Config | Ports=${Ports} | UpdateRoutesTransmitRate=100 |\n\n    Notes:\n        - The function internally converts a single Port object into a list for consistency when processing multiple ports.\n        - Configuration changes are applied via the `edit` method of the `IsisPortRateConfig` object on each port.\n        - Multiple configuration parameters can be passed as additional keyword arguments.",
  "TesterLibrary.Protocol.l2tp.create_l2tp": "创建L2TP协议会话对象并进行配置\n\n该函数用于在指定端口上创建一个L2TP协议实例，并根据提供的参数对其进行初始化配置。创建完成后，该L2TP实例将被注册到全局协议对象映射表中，以便后续可以通过其句柄引用。\n\nParameters:\n-----------\nPort : object\n    测试仪表的端口对象，表示该L2TP协议会话将关联的物理或逻辑端口。此端口对象必须包含有效的`handle`属性。\n\n**kwargs : dict\n    用于配置L2TP协议实例的可选关键字参数。每个参数对应L2TP的一个配置属性。如果对应的属性存在于L2TP对象中，则会在初始化时应用该值。\n    \n    支持的关键字参数及其描述如下：\n\n    Name (str): L2TP会话的名称，默认为自动生成。\n\n    Enable (bool): 是否启用该L2TP协议会话，默认为True。\n\n    EmulationMode (str): 指定L2TP角色，可取值：LAC（L2TP Access Concentrator）或LNS（L2TP Network Server），默认为LAC。\n\n    TunnelCountPerNode (int): 每个LAC/LNS节点创建的隧道数量，取值范围1-32768，默认为1。\n\n    SessionCountPerTunnel (int): 每个隧道中的会话数，取值范围0-65535，默认为0。\n\n    TunnelStartingId (int): 隧道起始ID编号，取值范围1-65535，默认为1。\n\n    SessionStartingId (int): 会话起始ID编号，取值范围1-65535，默认为1。\n\n    UdpSourcePort (int): UDP源端口号，通常为1701，默认为1701。\n\n    UdpChecksumEnabled (bool): 是否启用UDP校验和，默认为True。\n\n    RetryTunnelCreationEnabled (bool): 是否启用隧道重试机制，默认为False。\n\n    TunnelCreationTimeout (int): 隧道建立超时时间（单位：秒），取值范围1-65535，默认为5。\n\n    MaxTunnelCreationTimes (int): 隧道建立的最大尝试次数，取值范围1-65535，默认为5。\n\n    HostName (str): 主机名，长度限制1-255字符，默认为\"xinertel\"。\n\n    EnableAuthentication (bool): 是否启用认证，默认为True。\n\n    IncomingTunnelPassword (str): 接收隧道密码，长度限制1-255字符，默认为\"xinertel\"。\n\n    OutgoingTunnelPassword (str): 发送隧道密码，长度限制1-255字符，默认为\"xinertel\"。\n\n    HelloEnabled (bool): 是否启用Hello消息机制，默认为False。\n\n    HelloInterval (int): Hello消息发送间隔（单位：秒），取值范围1-255，默认为60。\n\n    TxBitRate (int): 发送比特率（单位：bits/sec），取值范围1-65535，默认为56000。\n\n    BearerCapabilities (str): 负载能力，可取值：DIGITAL、ANALOG、BOTH，默认为ANALOG。\n\n    BearerType (str): 负载类型，可取值：DIGITAL、ANALOG，默认为ANALOG。\n\n    FrameCapabilities (str): 帧传输能力，可取值：SYNC、ASYNC、BOTH，默认为SYNC。\n\n    FrameType (str): 帧类型，可取值：SYNC 或 ASYNC，默认为SYNC。\n\n    CallingNumberEnabled (bool): 是否启用Calling Number字段，默认为False。\n\n    CallingNumber (str): 隧道的Calling Number字段内容，默认为\"xinertel\"。\n\n    RxWindowSize (int): 接收窗口大小，取值范围1-65535，默认为4。\n\n    UseGatewayAsRemoteIp (bool): 是否使用网关作为远端IP地址，默认为True。\n\n    RemoteIpv4Address (str): 远端IPv4地址，默认为\"2.1.1.1\"。\n\n    RemoteIpv4AddressStep (str): IPv4地址变化步长，默认为\"0.0.0.1\"。\n\n    RemoteIpv6Address (str): 远端IPv6地址，默认为\"2000::1\"。\n\n    RemoteIpv6AddressStep (str): IPv6地址变化步长，默认为\"::1\"。\n\n    LcpProxyMode (str): LCP代理模式，可取值：NONE、LCP、LCP_AUTH，默认为NONE。\n\n    ForceLcpRenegotiation (bool): 是否强制LCP重新协商，默认为False。\n\n    Ipv4TosValue (hex int): IPv4 TOS字段值，默认为0xc0。\n\n    Ipv6TrafficClassValue (hex int): IPv6 Traffic Class字段值，默认为0x0。\n\n    HideFramingCapabilities (bool): 是否隐藏帧能力信息，默认为False。\n\n    HideBearerCapabilities (bool): 是否隐藏承载能力信息，默认为False。\n\n    HideAssignedTunnelId (bool): 是否隐藏分配的隧道ID，默认为False。\n\n    HideChallenge (bool): 是否隐藏挑战信息，默认为False。\n\n    HideChallengeResponse (bool): 是否隐藏挑战响应信息，默认为False。\n\n    HideAssignedSessionId (bool): 是否隐藏分配的会话ID，默认为False。\n\n    HideCallSerialNumber (bool): 是否隐藏呼叫序列号，默认为False。\n\n    HideFramingType (bool): 是否隐藏帧类型信息，默认为False。\n\n    HideCallingNumber (bool): 是否隐藏Calling Number字段，默认为False。\n\n    HideTxConnectSpeed (bool): 是否隐藏连接速率信息，默认为False。\n\n    HideLastSentLcpConfReq (bool): 是否隐藏最后发送的LCP配置请求，默认为False。\n\n    HideLastReceivedLcpConfReq (bool): 是否隐藏最后接收的LCP配置请求，默认为False。\n\n    HideProxyAuthenType (bool): 是否隐藏代理认证类型，默认为False。\n\n    HideProxyAuthenName (bool): 是否隐藏代理认证用户名，默认为False。\n\n    HideProxyAuthenChallenge (bool): 是否隐藏代理认证挑战信息，默认为False。\n\n    HideProxyAuthenId (bool): 是否隐藏代理认证ID，默认为False。\n\n    HideProxyAuthenResponse (bool): 是否隐藏代理认证响应信息，默认为False。\n\nReturns:\n--------\nL2tp\n    新创建并配置好的L2tp协议实例对象。若创建失败则抛出ContinuableFailure异常。\n\nSide Effects:\n-------------\n- 创建的L2TP实例会被注册到全局的`map_protocol_object`字典中，键为其实例的`handle`属性，便于后续通过句柄访问或操作该实例。\n\nExamples:\n---------\n.. code:: RobotFramework\n\n    | Create L2tp | Port=${Port} | EmulationMode=LNS | TunnelCountPerNode=2 | SessionCountPerTunnel=5 |",
  "TesterLibrary.Protocol.l2tp.edit_l2tp": "修改L2TP协议会话的配置参数。\n\n该函数用于更新指定的L2TP会话对象（Session）的属性，支持通过关键字参数传递任意数量的属性进行修改。每个关键字参数对应会话对象的一个可配置属性，并将其设置为新的值。此函数通常用于调整现有L2TP会话的配置。\n\n参数：\n- Session (:obj:`L2tpProtocolConfig`): 要修改的L2TP会话对象。该对象应包含与关键字参数对应的属性。\n- **kwargs (任意关键字参数): 用于指定要更新的会话属性及其新值。支持的关键字参数包括但不限于以下内容：\n\n    - Name (str): L2TP会话名称。\n    - Enable (bool): 是否启用L2TP会话，默认True。\n    - EmulationMode (str): L2TP角色模式，可选\"LAC\"或\"LNS\"，默认\"LAC\"。\n    - TunnelCountPerNode (int): 每个节点的隧道数，范围1-32768，默认1。\n    - SessionCountPerTunnel (int): 每个隧道的会话数，范围0-65535，默认0。\n    - TunnelStartingId (int): 隧道起始ID，范围1-65535，默认1。\n    - SessionStartingId (int): 会话起始ID，范围1-65535，默认1。\n    - UdpSourcePort (int): UDP源端口，范围1-65535，默认1701。\n    - UdpChecksumEnabled (bool): 是否启用UDP校验和，默认True。\n    - RetryTunnelCreationEnabled (bool): 是否启用隧道重试创建，默认False。\n    - TunnelCreationTimeout (int): 隧道建立超时时间（秒），范围1-65535，默认5。\n    - MaxTunnelCreationTimes (int): 最大隧道建立尝试次数，范围1-65535，默认5。\n    - HostName (str): 主机名，长度范围1-255，默认\"xinertel\"。\n    - EnableAuthentication (bool): 是否启用认证，默认True。\n    - IncomingTunnelPassword (str): 入站隧道密码，长度范围1-255，默认\"xinertel\"。\n    - OutgoingTunnelPassword (str): 出站隧道密码，长度范围1-255，默认\"xinertel\"。\n    - HelloEnabled (bool): 是否启用Hello消息，默认False。\n    - HelloInterval (int): Hello消息间隔时间（秒），范围1-255，默认60。\n    - TxBitRate (int): 发送比特率（bits/sec），范围1-65535，默认56000。\n    - BearerCapabilities (str): 承载能力，可选\"ANALOG\"、\"DIGITAL\"或\"BOTH\"，默认\"ANALOG\"。\n    - BearerType (str): 承载类型，可选\"ANALOG\"或\"DIGITAL\"，默认\"ANALOG\"。\n    - FrameCapabilities (str): 帧能力，可选\"SYNC\"、\"ASYNC\"或\"BOTH\"，默认\"SYNC\"。\n    - FrameType (str): 帧类型，可选\"SYNC\"或\"ASYNC\"，默认\"SYNC\"。\n    - CallingNumberEnabled (bool): 是否启用Calling Number，默认False。\n    - CallingNumber (str): Calling Number值，默认\"xinertel\"。\n    - RxWindowSize (int): 接收窗口大小，范围1-65535，默认4。\n    - UseGatewayAsRemoteIp (bool): 是否使用网关作为远端IP地址，默认True。\n    - RemoteIpv4Address (str): 远端IPv4地址，默认\"2.1.1.1\"。\n    - RemoteIpv4AddressStep (str): IPv4地址步进值，默认\"0.0.0.1\"。\n    - RemoteIpv6Address (str): 远端IPv6地址，默认\"2000::1\"。\n    - RemoteIpv6AddressStep (str): IPv6地址步进值，默认\"::1\"。\n    - LcpProxyMode (str): LCP代理模式，可选\"NONE\"、\"LCP\"或\"LCP_AUTH\"，默认\"NONE\"。\n    - ForceLcpRenegotiation (bool): 是否强制LCP重新协商，默认False。\n    - Ipv4TosValue (hex int): IPv4 TOS字段值，默认0xc0。\n    - Ipv6TrafficClassValue (hex int): IPv6 Traffic Class值，默认0x0。\n    - HideFramingCapabilities (bool): 是否隐藏帧能力信息，默认False。\n    - HideBearerCapabilities (bool): 是否隐藏承载能力信息，默认False。\n    - HideAssignedTunnelId (bool): 是否隐藏分配的隧道ID信息，默认False。\n    - HideChallenge (bool): 是否隐藏挑战信息，默认False。\n    - HideChallengeResponse (bool): 是否隐藏挑战响应信息，默认False。\n    - HideAssignedSessionId (bool): 是否隐藏分配的会话ID信息，默认False。\n    - HideCallSerialNumber (bool): 是否隐藏呼叫序列号信息，默认False。\n    - HideFramingType (bool): 是否隐藏帧类型信息，默认False。\n    - HideCallingNumber (bool): 是否隐藏Calling Number信息，默认False。\n    - HideTxConnectSpeed (bool): 是否隐藏连接速率信息，默认False。\n    - HideLastSentLcpConfReq (bool): 是否隐藏最近发送的LCP配置请求信息，默认False。\n    - HideLastReceivedLcpConfReq (bool): 是否隐藏最近收到的LCP配置请求信息，默认False。\n    - HideProxyAuthenType (bool): 是否隐藏代理认证类型信息，默认False。\n    - HideProxyAuthenName (bool): 是否隐藏代理认证名称信息，默认False。\n    - HideProxyAuthenChallenge (bool): 是否隐藏代理认证挑战信息，默认False。\n    - HideProxyAuthenId (bool): 是否隐藏代理认证ID信息，默认False。\n    - HideProxyAuthenResponse (bool): 是否隐藏代理认证响应信息，默认False。\n\n返回值：\n- bool: 返回True表示操作已执行，但不保证所有属性都成功更新（例如无效属性将被忽略）。\n\n示例：\n.. code:: RobotFramework\n\n    | Edit L2tp | Session=${Session} | Name=NewL2tpSession | Enable=False |",
  "TesterLibrary.Protocol.l2tp.edit_l2tp_port_config": "Edits the L2TP protocol configuration for one or more specified ports.\n\nArgs:\n    Ports (:obj:`Port`): A single test instrument port object or a list of port objects. Each port must have a valid L2TP protocol configuration that can be accessed via the `get_children` method.\n\nKeyword Args:\n    TunnelConnectRate (int): The session initiation rate in sessions per second. Valid values are between 1 and 1000. Default value is 100.\n\nReturns:\n    (:obj:`L2tpPortConfig`): A single modified L2TP port configuration object if one port is edited, or a list of modified L2TP port configuration objects if multiple ports are edited.\n\nDescription:\n    This function modifies the L2TP protocol configuration on the provided port(s). It ensures that the input `Ports` is treated as a list, even if a single port is passed. It then retrieves the associated `L2tpProtocolConfig` object for each port and applies the provided keyword arguments to update the configuration using the `edit` method.\n\n    If the backend call fails (returns `False`), this function raises a `ContinuableFailure` exception. Otherwise, it returns the updated configuration object(s).\n\nRaises:\n    ContinuableFailure: If the underlying `renix.edit_l2tp_port_config` call fails.\n\nExamples:\n    .. code:: RobotFramework\n\n        | Edit L2tp Port Config | Ports=${Port} | TunnelConnectRate=200 |",
  "TesterLibrary.Protocol.l2tp.connect_l2tp": "Establishes an L2TP connection for one or more session objects.\n\n    Parameters:\n    -----------\n    Sessions : object or iterable of objects\n        A single session object or an iterable (list, set, or tuple) of session objects.\n        Each session object is expected to have a `connect()` method that handles the actual connection logic.\n\n    Returns:\n    --------\n    bool\n        Always returns True if all sessions are processed successfully. If any session fails during connection,\n        the error will be propagated by the `connect()` method of the respective session object.\n\n    Raises:\n    -------\n    ContinuableFailure\n        If the underlying connection attempt fails (as indicated by a return value of False),\n        this exception is raised to signal failure while allowing test execution to continue.\n\n    Description:\n    ------------\n    This function attempts to connect each session provided in the `Sessions` parameter. If `Sessions` is not an\n    iterable, it will be converted into a list containing a single session object. The function then iterates\n    over all session objects and invokes their `connect()` method. It acts as a wrapper to handle multiple\n    sessions uniformly and ensures consistent behavior regardless of whether a single or multiple session\n    objects are passed.\n\n    This function serves as a user interface that wraps the backend `renix.connect_l2tp()` function, providing\n    additional error handling and integration with the test framework's failure handling mechanism.\n\n    Examples:\n    ---------\n    .. code:: RobotFramework\n\n        | Connect L2tp | Sessions=${Sessions} |",
  "TesterLibrary.Protocol.l2tp.disconnect_l2tp": "断开L2tp协议会话\n\nArgs:\n\n    Sessions (Union[object, list, set, tuple]): 要断开的一个或多个L2TP协议会话对象。可以是单个会话对象，也可以是包含多个会话对象的列表、集合或元组。\n\nReturns:\n\n    bool: 如果所有提供的会话都成功断开，则返回True；否则返回False。\n\nRaises:\n\n    ContinuableFailure: 如果底层调用返回False，表示断开操作失败，并抛出此异常以通知调用者。\n\nDescription:\n\n    该函数用于断开一个或多个L2TP协议会话。它接受一个会话对象或者可迭代的会话集合（如列表、集合或元组），并对每个会话调用disconnect()方法来执行断开操作。在底层调用成功时返回True，如果底层调用失败（返回False），则抛出ContinuableFailure异常。\n\nExamples:\n    .. code:: RobotFramework\n\n        | Disconnect L2tp | Sessions=${Sessions} |",
  "TesterLibrary.Protocol.l2tp.abort_l2tp": "中断L2TP协议会话\n\n**Description:**  \n该函数用于中断一个或多个L2TP协议会话。如果传入的是单个会话对象，它将被自动转换为列表以进行统一处理。函数通过遍历所有提供的会话对象，并调用每个对象的 `abort()` 方法来终止会话。\n\n**Parameters:**\n\n- **Sessions** (`object` 或 `list`/`set`/`tuple` of `object`)：一个单独的L2TP会话对象，或者包含多个会话对象的集合（如列表、集合或元组）。这些对象必须支持 `abort()` 方法。\n\n**Returns:**\n\n- `True` (`bool`)：如果操作成功完成，返回 True。\n- 如果操作失败，将抛出 `ContinuableFailure` 异常，提示当前函数执行失败。\n\n**Raises:**\n\n- `ContinuableFailure`：当底层调用返回 False 时，表示中断操作失败，抛出此异常以便上层逻辑捕获并继续执行。\n- 如果任意一个会话对象没有实现 `abort()` 方法，运行时可能会引发 `AttributeError`。\n\n**Examples:**\n.. code:: RobotFramework\n\n    | Abort L2tp | Sessions=${Sessions} |\n\n**Notes:**\n- 此函数封装了对底层 API `RenixLibrary.common.base.RenixAPI.abort_l2tp` 的调用。\n- 提供了统一的错误处理机制，在操作失败时抛出可被捕获的异常，便于测试框架中流程控制。",
  "TesterLibrary.Protocol.l2tp.wait_l2tp_state": "等待L2tp协议会话达到指定状态。\n\n该函数用于定期检查一个或多个L2TP会话的状态，直到它们达到指定的目标状态或超过最大等待时间（超时）。每个会话对象的 `wait_session_state` 方法会被调用以执行实际的状态等待逻辑。\n\n### 参数说明：\n\n- **Sessions** : object 或 iterable  \n  一个会话对象或可迭代的会话对象集合（如 list、set、tuple），表示需要监控的 L2TP 会话。\n\n- **State** : str, optional  \n  目标状态。如果未指定，默认值为 `CONNECTED`。支持的状态包括：\n  - `NONE`\n  - `IDLE`\n  - `CONNECTING`\n  - `CONNECTED`\n  - `DISCONNECTING`\n\n- **Interval** : int 或 float, optional  \n  每次状态检查之间的间隔时间（单位：秒），默认为 1 秒。\n\n- **TimeOut** : int 或 float, optional  \n  等待会话状态的最大时间（单位：秒）。如果在该时间内未能达到目标状态，底层 `wait_session_state` 方法可能会抛出异常，默认为 60 秒。\n\n### 返回值：\n\n- **bool**  \n  如果所有会话都在指定时间内达到了目标状态，则返回 `True`。如果任意会话未达到目标状态且底层方法抛出异常，则可能引发异常（如 `ContinuableFailure`）。\n\n### 异常：\n\n- **ContinuableFailure**  \n  如果 `renix.wait_l2tp_state` 返回 `False`，则会抛出此异常，表示操作失败但可以继续执行后续测试步骤。\n\n### 注意事项：\n\n- 此函数内部调用 `renix.wait_l2tp_state` 来执行实际的等待操作。\n- 如果传入单个会话对象而非列表，函数会自动将其封装为列表进行处理。\n- 示例中展示了如何在 Robot Framework 中使用该函数，并指定了非默认的 `State`、`Interval` 和 `TimeOut` 参数。\n\n### 示例代码：\n\n```robotframework\n| Wait L2tp State | Sessions=${Sessions} | State=CONNECTED | Interval=2 | TimeOut=120 |\n```",
  "TesterLibrary.Protocol.l2tp.get_l2tp_port_statistic": "获取L2tp端口统计信息\n\n该函数用于获取指定端口的L2TP端口级统计信息，支持按需查询多个统计项，并可作用于单个或多个端口。其内部调用`_get_statictis`方法并限定统计类型为'L2tpPortStatistic'。\n\nArgs:\n    Port (object or list or set or tuple or None, optional): \n        - 若为None，默认查询所有端口的L2TP统计信息。\n        - 若为单个端口对象，则查询该端口的统计信息（要求对象包含'Name'属性）。\n        - 若为端口对象的列表、集合或元组，则查询这些端口的统计信息。\n    \n    StaItems (list or str or None, optional):\n        指定需要获取的统计项，即统计表中的列名。若为None，则默认获取所有可用统计项；\n        若为字符串，将自动转换为单元素列表；目前支持以下统计项：\n\n            LacCount\n\n            LnsCount\n\n            TunnelCount\n\n            SessionCount\n\n            TunnelUp\n\n            TunnelDown\n\n            SessionUp\n\n            SessionDown\n\nReturns:\n    dict or pd.DataFrame or bool:\n        - 若仅查到一行结果（如指定一个端口且匹配唯一记录），返回一个字典，键为请求的StaItems，值为对应的统计值。\n        - 若查到多行结果（如查询多个端口或多条记录），返回一个pandas DataFrame，包含所有匹配的记录。\n        - 若未找到任何匹配结果，则返回False。\n\nRaises:\n    ContinuableFailure: 如果底层调用返回False，表示获取统计失败，抛出可继续执行的异常。\n\nExamples:\n    .. code:: RobotFramework\n\n        # 示例1：获取所有端口的默认统计信息\n        | &{Result} | Get L2tp Port Statistic |\n\n        # 示例2：获取特定端口的指定统计项\n        | @{StaItems} | Create List | TunnelUp | SessionUp |\n        | &{Result} | Get L2tp Port Statistic | Port=${port_obj} | StaItems=@{StaItems} |\n\n        # 示例3：获取多个端口的所有统计项\n        | &{Result} | Get L2tp Port Statistic | Port=@{port_list} | StaItems=None |",
  "TesterLibrary.Protocol.l2tp.get_l2tp_session_statistic": "获取L2TP会话的统计信息。\n\n该函数用于检索指定L2TP会话对象、节点索引以及统计项的统计结果。它是一个封装了 `_get_statictis` 的接口，专门用于获取 'L2tpSessionStatistic' 类型的数据。可以通过提供一个或多个会话对象、指定节点索引和选择性地指定需要查询的统计项来过滤统计结果。\n\n参数:\n    Session (object 或 list 或 set 或 tuple, optional): 要查询统计信息的会话对象。\n        - 如果未提供（None），则不进行会话过滤。\n        - 如果是单个会话对象，则使用其 Name 属性作为过滤条件。\n        - 如果是多个会话对象，则提取它们的 Name 属性用于过滤。\n        默认值: None\n\n    NodeIndexInBlock (int, optional): 在L2TP块中的节点索引，用于更精细的统计粒度。\n        该参数将作为 `Idx` 过滤字典的一部分传入 `_get_statictis`。\n        默认值: 1\n\n    StaItems (list or str or None, optional): 指定要获取的统计项（即数据库列名）。\n        - 如果为 None，则查询所有可用属性（通过调用 ListROMPropertiesCommand 获取）。\n        - 如果是字符串，则将其转换为包含一个元素的列表。\n        - 必须是可用属性的子集。\n        默认值: None\n\n返回值:\n    dict or pd.DataFrame or bool:\n        - 如果只找到一行匹配的结果：返回一个字典，键为统计项名称（StaItems），值为对应的统计值。\n        - 如果找到多行匹配的结果：返回一个 pandas DataFrame，其中每一行代表一条统计记录。\n        - 如果没有找到匹配的结果：返回 False。\n\n异常:\n    TesterException: 可能抛出由命令执行或数据检索过程中引发的异常。\n    sqlite3.Error: 如果在相关函数中发生数据库访问错误。\n    KeyError: 如果生成的索引中的列名在结果 DataFrame 中不存在。\n\n副作用:\n    - 内部调用 `_get_statictis`，可能会涉及使用 GotoResultPageCommand 进行分页导航。\n    - 在查询前可能会对内部对象调用 `.get()` 方法以刷新数据。\n    - 为了调试目的，会以表格形式记录返回的 DataFrame。\n    - 如果处于 ResultView 模式，会在页面切换之间调用 time.sleep(3) 以确保数据一致性。\n\n示例:\n    .. code:: RobotFramework\n\n        | @{StaItems} | Create List | AdjacencyState | TxUpdate |\n        | Subscribe Result | Types=L2tpSessionStatistic |\n        | Start Protocol |\n        | Sleep | 60 |\n        | &{Result} | Get L2tp Session Statistic | Session=${Session} | NodeIndexInBlock=1 | StaItems=@{StaItems} |\n        | Clear Result |",
  "TesterLibrary.Protocol.l2tp.get_l2tp_block_statistic": "获取L2tp Block统计信息，用于查询指定L2TP会话的统计结果。\n\n**参数说明：**\n\n- **Session** (:obj:`L2tp` 或 list/set/tuple/None):  \n  L2TP协议会话对象或会话对象的集合。若为None，则不指定具体会话，可能返回全局或默认会话的数据；若为单个会话对象，则根据其Name属性提取会话ID进行查询；若为多个会话对象组成的列表、集合或元组，则会提取所有会话ID进行批量查询。\n\n- **StaItems** (list or str or None):  \n  需要获取的统计项，类型为列表、字符串或None。若为None，表示获取所有可用统计项；若为字符串，将被自动转换为包含该字符串的列表；必须是支持的统计项的子集。  \n  支持的统计项包括：\n\n  - TunnelCount\n  - SessionCount\n  - TunnelUp\n  - TunnelDown\n  - SessionUp\n  - SessionDown\n  - TunnelSetupRate\n  - SessionSetupRate\n  - AverageTunnelSetupTime\n  - MaxTunnelSetupTime\n  - MinTunnelSetupTime\n  - AverageSessionSetupTime\n  - MaxSessionSetupTime\n  - MinSessionSetupTime\n  - TxPackets\n  - RxPackets\n  - TxSccrq\n  - RxSccrq\n  - TxSccrp\n  - RxSccrp\n  - TxScccn\n  - RxScccn\n  - TxIcrq\n  - RxIcrq\n  - TxIcrp\n  - RxIcrp\n  - TxIccn\n  - RxIccn\n  - TxSli\n  - RxSli\n  - TxStopCcn\n  - RxStopCcn\n  - TxWen\n  - RxWen\n  - TxHello\n  - RxHello\n  - TxCdn\n  - RxCdn\n  - TxZlb\n  - RxZlb\n\n**返回值：**\n\n- dict 或 pd.DataFrame 或 False:\n  - 如果仅匹配到一个会话块，返回一个字典，键为请求的统计项（StaItems），值为对应的统计值。\n  - 如果匹配到多个会话块，返回一个 pandas DataFrame，每行代表一个会话块，列对应请求的统计项。\n  - 如果没有找到匹配的会话块，返回False。\n\n**异常：**\n\n- `TesterException`: 在命令执行或数据检索过程中发生错误时抛出。\n- `sqlite3.Error`: 如果底层数据库访问出现错误。\n- `KeyError`: 如果索引中的列名在结果中不存在。\n\n**示例：**\n\n.. code:: RobotFramework\n\n    | @{StaItems} | Create List | TxPackets | RxPackets |\n    | Subscribe Result | Types=L2tpBlockStatistic |\n    | Start Protocol |\n    | Sleep | 60 |\n    | &{Result} | Get L2tp Block Statistic | Session=${Session} | StaItems=@{StaItems} |\n    | Clear Result |",
  "TesterLibrary.Protocol.l2tp.get_l2tp_tunnel_statistic": "获取L2TP隧道统计信息\n\n该函数用于查询指定L2TP会话的隧道统计信息。支持根据会话对象、节点索引以及指定的统计项进行过滤查询，返回结果可以是字典、DataFrame或布尔值，具体取决于匹配到的行数。\n\n参数:\n    Session (:obj:`L2tp`, optional): L2TP协议会话对象，默认为None，不设置时将不应用会话过滤。\n    NodeIndexInBlock (int, optional): 会话索引，表示在块中的节点位置，默认为1。\n    StaItems (list, str or None, optional): 需要查询的统计项列表。若为字符串则自动转为单元素列表；\n        若为None，则查询所有可用统计项。支持以下统计项：\n\n        - LocalTunnelId\n        - RemoteTunnelId\n        - TunnelState\n        - UdpSourcePort\n        - UdpDestinationPort\n        - LocalIpAddress\n        - RemoteIpAddress\n        - LocalIpv6Address\n        - RemoteIpv6Address\n        - SessionCount\n        - SessionUp\n        - SessionDown\n        - TxPackets\n        - RxPackets\n        - TxSccrq\n        - RxSccrq\n        - TxSccrp\n        - RxSccrp\n        - TxScccn\n        - RxScccn\n        - TxSli\n        - RxSli\n        - TxStopCcn\n        - RxStopCcn\n        - TxWen\n        - RxWen\n        - TxHello\n        - RxHello\n\n返回值:\n    dict or pd.DataFrame or bool: 查询结果：\n    \n    - 如果只匹配到一行：返回一个字典，键为统计项名称，值为其对应的值。\n    - 如果匹配到多行：返回pandas DataFrame，列对应请求的StaItems，索引可能包含会话和节点信息。\n    - 如果没有匹配行：返回False。\n\n异常:\n    - ContinuableFailure: 如果查询失败（返回False），将抛出此异常。\n    - TesterException: 可能传播内部调用过程中引发的异常。\n    - sqlite3.Error: 如果底层数据库访问发生错误。\n    - KeyError: 如果指定的列名在结果中不存在。\n\n注意事项:\n    - 函数内部调用`renix.get_l2tp_tunnel_statistic`实现实际查询逻辑。\n    - 如果返回结果为False，表明未找到匹配数据，此时抛出ContinuableFailure以便测试框架处理。\n    - 支持多种返回格式以适应不同使用场景。\n    - 日志中可能会记录查询结果的表格形式用于调试。\n\n示例(RobotFramework):\n    .. code:: RobotFramework\n\n        | @{StaItems} | Create List | AdjacencyState | TxUpdate |\n        | Subscribe Result | Types=L2tpTunnelStatistic |\n        | Start Protocol |\n        | Sleep | 60 |\n        | &{Result} | Get L2tp Tunnel Statistic | Session=${Session} | NodeIndexInBlock=1 | StaItems=@{StaItems} |\n        | Clear Result |",
  "TesterLibrary.Protocol.lacp.create_lacp": "创建 LACP (Link Aggregation Control Protocol) 协议会话对象，用于将指定的端口聚合为一个链路聚合组（LAG）。\n\n该函数通过传入的端口列表初始化一个 LACP 会话，并创建一个 Lacp 对象来代表这个 LAG。创建成功后，该 Lacp 对象会被添加到全局协议对象映射表中，以便后续通过其句柄进行引用。此操作会在底层系统上实际初始化 LACP 会话并聚合指定端口。\n\n参数:\n    Ports (Union[port.Port, List[port.Port]]): 要聚合成 LAG 的端口对象，可以是单个端口或端口列表。\n        每个端口必须是一个系统认可的有效端口对象。\n\n返回值:\n    Lacp: 表示所创建 LACP 会话的 Lacp 对象。该对象提供了对 LACP 协议会话及其相关功能的访问。\n\n异常:\n    Exception: 如果提供的端口无效，或者在创建 LAG 或 LACP 会话过程中发生内部错误，则抛出异常。\n\n副作用:\n    - 修改全局字典 `map_protocol_object`，使用新创建的 Lacp 会话的句柄作为键添加或更新条目。\n    - 在底层系统上初始化 LACP 会话，并聚合所提供的端口。",
  "TesterLibrary.Protocol.lacp.lacp_add_members": "为LACP协议会话对象添加指定的端口成员对象。\n\n参数：\n    Lacp (:obj:`Lacp`): 要操作的LACP协议会话对象，类型为object。\n    Ports (:obj:`Port` 或 list of :obj:`Port`): 一个或多个测试仪表端口对象，以列表或可迭代形式提供，表示要添加到LACP组的物理端口。\n\n返回值：\n    object: LACP对象上`add_members`操作的结果。这可能是一个布尔值（如True/False）或其他与实现相关的返回类型，例如操作成功状态或更新后的LACP配置信息。\n\n异常行为处理：\n    如果底层操作返回结果为False，则会触发ContinuableFailure异常并附带错误信息，否则返回操作结果。\n\n示例：\n    .. code:: RobotFramework\n\n        | Lacp Add Members | Lacp=${Lacp} | Ports=${Ports} |\n\n描述：\n    此函数是对底层LACP对象`add_members`方法的封装调用，用于将指定端口添加为LACP组的成员，并通过`@abnormal_check()`装饰器对异常输入或运行时条件进行检查，可能会在出现异常时记录警告或抛出异常。",
  "TesterLibrary.Protocol.lacp.edit_lacp_aggregation_group": "修改LACP协议会话对象的Aggregation Group（链路聚合组）配置。\n\n该函数用于编辑指定LACP协议会话对象中的链路聚合组参数，允许用户设置如哈希算法、系统ID、优先级、活动端口数量限制、抢占模式等关键配置项。其内部调用LACP对象的`edit_aggregation_group`方法来完成实际的配置更改操作。\n\nArgs:\n\n    Lacp (:obj:`Lacp`): 一个LACP协议会话对象，必须包含有效的`edit_aggregation_group`方法以执行底层配置修改。\n\nKeyword Args:\n\n    L2HashOption (list): 指定L2层哈希使用的字段，默认值：['ETHERNET_SOURCE_MAC', 'ETHERNET_DESTINATION_MAC', 'VLAN', 'MPLS']。可选值包括：\n\n        ETHERNET_SOURCE_MAC\n\n        ETHERNET_DESTINATION_MAC\n\n        VLAN\n\n        MPLS\n\n    L3HashOption (list): 指定L3层哈希使用的字段，默认值：['IPV4_SOURCE', 'IPV4_DESTINATION', 'UDP']。可选值包括：\n\n        ETHERNET_SOURCE_MAC\n\n        ETHERNET_DESTINATION_MAC\n\n        VLAN\n\n        MPLS\n\n        IPV4_SOURCE\n\n        IPV4_DESTINATION\n\n        IPV6_SOURCE\n\n        IPV6_DESTINATION\n\n        TCP\n\n        UDP\n\n    ActorSystemId (str): 设置Actor系统的MAC地址标识，默认值：'00:00:00:00:00:01'，必须为合法的MAC地址格式。\n\n    ActorSystemPriority (int): 设置Actor系统的优先级，默认值：32768，取值范围：0 - 65535。\n\n    MaxActiveNumber (int): 设置聚合组中最大同时活跃端口数，默认值：8，取值范围：0 - 65535。\n\n    MinActiveNumber (int): 设置聚合组中最小同时活跃端口数，默认值：0，取值范围：0 - 65535。\n\n    TransmitAlgorithm (str): 设置数据传输所使用的算法，默认值：'HASHING'，当前仅支持：\n\n        HASHING\n\n    Preempt (bool): 是否启用抢占功能，默认值：False。取值范围：\n\n        True（启用抢占）\n\n        False（不启用）\n\n    PreemtDelay (int): 抢占延迟时间（单位：秒），默认值：30，取值范围：0 - 65535。\n\n    AggregationMode (str): 设置聚合组的工作模式，默认值：'LACP'，可选值包括：\n\n        LACP（动态LACP模式）\n\n        STATIC（静态聚合模式）\n\n    LocalPreference (bool): 设置是否优先使用本地端口进行转发，默认值：True。取值范围：\n\n        True（优先本地）\n\n        False（不优先）\n\nReturns:\n\n    bool: 返回操作结果状态。若成功返回True，失败返回False。\n\nExamples:\n    .. code:: RobotFramework\n\n        | Edit Lacp Aggregation Group | Lacp=${Lacp} | ActorSystemPriority=4096 | MaxActiveNumber=4 |",
  "TesterLibrary.Protocol.lacp.lacp_delete_members": "删除指定的成员端口从给定的 LACP（Link Aggregation Control Protocol）实例中。\n\n该函数是一个封装函数，用于调用所提供 LACP 对象的 `delete_members` 方法，从而将一个或多个成员端口从现有的 LACP 链路聚合组中移除。\n\n参数:\n    Lacp (:obj:`Lacp`): lacp协议会话对象, 类型：object。该对象必须包含一个 `delete_members` 方法，该方法接受 'Ports' 参数。\n\n    Ports (:obj:`Port`): 测试仪表端口对象列表, 类型为：list 或可迭代对象。这些是需要从 LACP 组中移除的端口对象或标识符集合。\n\n返回值:\n    bool: 布尔值 (范围：True / False)。表示删除操作是否成功。如果底层 `delete_members` 方法返回 False，则抛出一个可继续的失败异常；否则返回 True。\n\n描述:\n    该函数用于管理 LACP 链路聚合组中的成员端口，通过调用底层实现的方法来完成实际的删除逻辑。\n    \n示例:\n    .. code:: RobotFramework\n\n        | Lacp Delete Members | Lacp=${Lacp} | Ports=${Ports} |",
  "TesterLibrary.Protocol.lacp.edit_lacp_members_port_config": "修改LACP端口成员的Port Config对象，用于编辑一个或多个给定端口的LACP端口配置属性。\n\n该函数作为对 :meth:`RenixLibrary.protocol.lacp.Lacp.edit_members_port_config` 静态方法的封装调用，将提供的 `Ports` 和关键字参数传递给该方法，由其获取并更新与给定端口相关联的LACP端口配置对象。\n\n**参数说明**\n\n- **Ports** (:class:`Port` 或 list[:class:`Port`])  \n  一个或多个测试仪表端口对象，需要对其LACP端口配置进行编辑。端口对象必须在当前测试上下文中有效。\n\n- **kwargs** (dict)  \n  任意关键字参数，每个键对应 :class:`LacpPortConfig` 对象的属性名，值为要设置的新值。仅更新有效的 :class:`LacpPortConfig` 属性；无效或不存在的属性将被忽略。\n\n**返回值**\n\n- bool  \n  成功更新所有有效配置时返回 ``True``。如果没有找到有效配置或任何更新失败，可能返回 ``False`` 或根据内部错误处理抛出异常。\n\n**功能描述**\n\n对于输入中的每一个端口，该方法会查找其关联的LACP端口配置。如果找到有效的配置，则应用 `kwargs` 中的每一项键值对来更新配置对象中对应的属性。只有存在的属性会被修改，无效或不存在的属性将被静默忽略。",
  "TesterLibrary.Protocol.lacp.pause_send_lacp_pdus": "暂停发送LACP协议数据单元（PDU）。\n\n该函数用于在指定的一个或多个端口上暂停LACP PDU的发送操作。它调用底层协议实现来执行具体的操作，是一个用户接口层的方法封装。\n\n参数:\n\n    Ports (:class:`Port` 或 list[:class:`Port`]): 要暂停发送LACP PDU的一个端口对象或端口对象列表。\n\n返回值:\n\n    bool: 如果成功执行暂停命令，则返回 ``True``；否则返回 ``False``。\n\n示例:\n    .. code:: RobotFramework\n\n        | Pause Send Lacp Pdus | Ports=${Ports} |\n\n描述:\n    该方法通过将请求转发给LACP模块来暂停指定端口上的LACP PDU发送。内部会获取所提供端口的LACP端口配置，并执行适当的命令以暂停传输。若操作成功则返回 ``True``，否则返回 ``False`` 并可能引发异常。",
  "TesterLibrary.Protocol.lacp.resume_send_lacp_pdus": "继续发送LACP PDU（链路聚合控制协议数据单元）。\n\n该函数用于在指定的一个或多个端口上恢复LACP PDU的发送。它是一个封装函数，调用底层 `Lacp` 类中的对应方法来执行实际操作。\n\n参数:\n    Ports (:class:`Port` 或 list[:class:`Port`]): 要恢复发送LACP PDU的一个端口对象或端口对象列表。\n\n返回值:\n    bool: 如果成功执行恢复发送LACP PDU命令，则返回 ``True``；否则返回 ``False``。\n\n异常:\n    当返回结果为 ``False`` 时，会抛出一个可继续执行的失败异常 `ContinuableFailure`，包含函数名和失败信息。\n\n描述:\n    该函数通过向关联的LACP端口句柄发送恢复命令，重新启用在一个或多个指定端口上的LACP PDU传输。\n    内部实现中，它获取所提供端口的LACP配置，提取其句柄，并执行 `ResumeSendLACPPDUsCommand`，\n    从而恢复在这些链路聚合成员端口上周期性发送的LACP控制报文。\n\n示例:\n    .. code:: RobotFramework\n\n        | Resume Send Lacp Pdus | Ports=${Ports} |",
  "TesterLibrary.Protocol.lacp.send_in_sync_pdus": "发送In-Sync PDU以确保LACP同步\n\n该函数用于触发在一个或多个启用了LACP的端口上发送In-Sync PDU，确保链路聚合组（LAG）中的设备之间实现正确的同步。\n\n参数:\n\n    Ports (:obj:`Port` 或 list[:obj:`Port`]): 要发送In-Sync PDU的一个或多个测试仪表端口对象。类型可以是单个端口对象或端口对象列表。\n\n返回值:\n\n    bool: 如果成功发送In-Sync PDU，则返回 ``True``；否则返回 ``False``。\n\n示例:\n    .. code:: RobotFramework\n\n        | Send In Sync Pdus | Ports=${Ports} |\n\n注意:\n    此函数是对 :meth:`Lacp.send_in_sync_pdus` 方法的封装，通过 `renix.send_in_sync_pdus` 实现具体功能。\n    如果发送失败，将抛出一个可继续执行的异常 `ContinuableFailure`。",
  "TesterLibrary.Protocol.lacp.send_out_of_sync_pdus": "发送LACP“异步”协议数据单元(PDUs)，用于通知对端设备配置或状态发生变化需要同步。\n\n参数:\n    Ports (:class:`Port` 或 list[:class:`Port`]): 要发送LACP异步PDU的一个或多个测试仪表端口对象。\n\n返回值:\n    bool: 如果成功执行发送异步PDU命令则返回 ``True``，否则返回 ``False``（但当前实现中失败时会抛出异常而不是直接返回False）。\n\n描述:\n    该函数用于在指定的端口上触发发送LACP协议中的“Out of Sync”PDUs。通常在LACP配置发生变更后调用此函数，以确保链路对端设备感知到新的状态并发起重新同步。\n    函数内部调用了 :meth:`Lacp.send_out_of_sync_pdus` 方法完成实际操作。\n    返回值 ``True`` 表示命令被成功执行，但并不保证对端设备已正确接收或处理这些PDUs。\n\n示例:\n    .. code:: RobotFramework\n\n        | Send Out of Sync Pdus | Ports=${Ports} |",
  "TesterLibrary.Protocol.lacp.start_lacp_port": "..  function:: start_lacp_port(Ports)\n    :noindex:\n\n    启动指定端口上的 LACP 协议。该函数通过获取端口关联的 LACP 配置并执行启动命令来激活 LACP。\n\n    :param Ports: 要启动 LACP 的单个端口对象或端口对象列表。\n    :type Ports: :class:`Port` 或 list[:class:`Port`]\n\n    :return: 如果成功执行 LACP 启动命令，则返回 ``True``；如果失败，则抛出异常。\n    :rtype: bool\n\n    :raises ContinuableFailure: 如果底层调用返回 False，表示 LACP 启动失败。\n\n    :description:\n        此函数用于在指定的一个或多个测试仪表端口上启动链路聚合控制协议（LACP）。它会将提供的端口传递给底层 Renix API 方法\n        :meth:`RenixLibrary.protocol.lacp.Lacp.start_lacp_port`，该方法会检索这些端口的 LACP 成员配置，并构造一个\n        :class:`StartLacpPortCommand` 命令来激活 LACP。返回值表示命令是否成功执行，但不保证 LACP 在物理端口上的协商一定成功。\n\n    :example:\n        .. code:: RobotFramework\n\n            | Start Lacp Port | Ports=${Ports} |",
  "TesterLibrary.Protocol.lacp.stop_lacp_port": "..  method:: stop_lacp_port(Ports)\n    :noindex:\n\n    停止指定端口上的 LACP（链路聚合控制协议）操作。\n\n    该函数是对 :meth:`RenixLibrary.protocol.lacp.Lacp.stop_lacp_port` 静态方法的封装调用，\n    用于在一个或多个提供的端口对象上停止 LACP 协议操作，实际功能由 :class:`Lacp` 类中的静态方法实现。\n\n    :param Ports: 要停止 LACP 的单个端口对象或端口对象列表。\n    :type Ports: :class:`Port` 或 list[:class:`Port`]\n\n    :return: 如果在所有提供的端口上成功停止 LACP 协议，则返回 ``True``，否则返回 ``False``。\n    :rtype: bool\n\n    :description:\n        此方法用于停止给定端口上的 LACP（Link Aggregation Control Protocol）操作。\n        它首先通过 :meth:`get_members_port_config` 获取所提供端口的关联 LACP 端口配置信息，\n        然后使用这些配置中的句柄构建并执行一个停止 LACP 的命令。\n        如果命令执行成功，则返回 ``True``，表示已成功终止指定端口上的 LACP 协议；\n        如果执行失败，则返回 ``False`` 并抛出异常 :class:`ContinuableFailure`。\n\n    :raises ContinuableFailure: 如果 LACP 停止失败，则抛出此异常，并附带失败的方法名作为错误信息。\n\n    :example:\n        .. code:: RobotFramework\n\n            | Stop Lacp Port | Ports=${Ports} |",
  "TesterLibrary.Protocol.lacp.get_lacp_port_statistic": "获取LACP端口统计信息\n\n该函数用于获取指定端口的链路聚合控制协议（LACP）端口级统计信息。它封装了底层的 `_get_statictis()` 函数以检索统计数据，并处理不同类型的输入参数，如单个端口对象或多个端口集合。\n\n参数:\n    Port (:obj:`Port` 或 list/set/tuple, optional): 测试仪表端口对象或其集合，默认为 None。\n        每个端口对象应具有唯一标识符 'Name' 属性。若未指定，则可能返回默认或所有端口的统计信息。\n\n    StaItems (list or str, optional): 需要获取的统计项列表，默认为 None。\n        支持的统计项包括:\n\n            ActorState\n            PartnerState\n            LacpState\n            ActorOperationalKey\n            ActorSystemId\n            ActorSystemPriority\n            ActorPortId\n            ActorPortPriority\n            PartnerOperationalKey\n            PartnerSystemId\n            PartnerSystemPriority\n            PartnerPortId\n            PartnerPortPriority\n            PartnerCollectorMaxDelay\n            LacpPdusSent\n            LacpPdusReceived\n            MarkerPdusSent\n            MarkerPdusReceived\n            MarkerResponsePdusSent\n            MarkerResponsePdusReceived\n\n返回值:\n    dict or pd.DataFrame or bool:\n        - 如果只找到一个匹配行：返回一个字典，键为请求的统计项，值为对应的统计值。\n        - 如果找到多行匹配结果（例如多个端口或多条记录）：返回一个 pandas DataFrame，每行代表一个端口的统计信息。\n        - 如果没有找到匹配结果：返回 False。\n\n异常:\n    - TesterException: 若在命令执行或数据检索过程中发生错误。\n    - sqlite3.Error: 数据库访问错误。\n    - KeyError: 过滤条件中包含不存在于结果中的列名。\n\n副作用:\n    - 修改内部状态，可能会通过调用底层对象的 `.get()` 方法刷新数据。\n    - 在分页模式下执行 GotoResultPageCommand 命令。\n    - 在某些模式下使用 time.sleep(3) 保证数据一致性。\n    - 将结果 DataFrame 以表格形式记录日志用于调试。\n\n示例:\n    .. code:: RobotFramework\n\n        | Get Lacp Port Statistic | Session=${Session} | StaItems=@{StaItems} |",
  "TesterLibrary.Protocol.lacp.get_lag_port_statistic": "获取LAG端口的统计信息。\n\n该函数用于根据提供的LACP配置和指定的统计项，检索LAG（Link Aggregation Group）端口的统计信息。内部调用 `_get_statictis` 方法来获取 LagPortStats 类型的统计数据。它会处理输入的 `Lacp` 参数以提取会话名称，并将其用作过滤统计信息的标识符。\n\n参数:\n    Lacp (:obj:`Lacp` 或 list 或 set 或 tuple 或 None): 指定要查询其端口统计信息的 LACP 对象或对象集合。\n        如果为 None，则不通过 LACP 句柄进行过滤。如果是一个具有 `session.Name` 属性的对象，则使用该属性作为索引值。\n        如果是集合类型（如 list、set、tuple），则其中每个元素都应包含 `session.Name` 属性，所有这些名称都将用于过滤。\n\n    StaItems (list or str or None): 指定从 LagPortStats 表中检索哪些统计项（列）。\n        - 如果为 None，则查询所有可用属性（通过 ListROMPropertiesCommand 获取）。\n        - 如果为字符串，则将其转换为只包含该字符串的列表。\n        - 必须为有效统计项名称的子集。\n\n返回值:\n    dict or pd.DataFrame or bool:\n        - 如果仅找到一行匹配：返回一个字典，键为统计项名称，值为对应的统计值。\n        - 如果找到多行匹配：返回一个 pandas DataFrame，包含所有匹配的 LagPortStats 数据。\n        - 如果没有找到匹配结果：返回 False。\n\n异常:\n    - TesterException: 如果在命令执行或数据检索过程中发生错误（由内部调用传播）。\n    - sqlite3.Error: 如果访问数据库存储的统计信息时出现数据库访问问题。\n    - KeyError: 如果指定的列名不存在于最终生成的 DataFrame 中。\n\n副作用:\n    - 内部可能会调用对象的 `.get()` 方法来刷新数据。\n    - 在分页结果视图中导航时会执行 GotoResultPageCommand。\n    - 在 ResultView 模式下切换结果页面时会使用 time.sleep(3) 同步等待。\n    - 为了调试目的，会将结果的 DataFrame 以表格形式记录日志。\n\n示例:\n\n    .. code:: Python\n\n        result = get_lag_port_statistic(Lacp_=lacp_obj, StaItems=['Tx Frames', 'Rx Frames'])\n        print(result)\n        # Output: {'Tx Frames': 12345, 'Rx Frames': 67890}",
  "TesterLibrary.Protocol.ldp.create_ldp": "创建LDP（标签分发协议）协议实例并与指定端口关联。\n\n该函数用于在指定的端口上创建并配置一个LDP协议对象。它会调用底层API来实际创建LDP会话，并将所有提供的关键字参数作为配置属性应用到该LDP对象上。如果创建失败，将抛出异常；成功则返回新创建的LDP对象。\n\n参数:\n    Port (:obj:`Port`): 测试仪表端口对象，表示LDP协议所关联的物理或逻辑端口。\n\n    **kwargs (dict): 任意数量的关键字参数，用于配置LDP协议的相关属性。支持的配置项包括但不限于：\n        - Name (str): LDP会话名称。\n        - Enable (bool): 是否启用该LDP会话，默认为True。\n        - HelloType (str): Hello报文类型，可选值包括DIRECT、TARGETED、DIRECT_TARGETED，默认为DIRECT。\n        - LabelAdvertType (str): 标签分配方式，DU（下游自主）或DOD（下游按需），默认为DU。\n        - TransportMode (str): Transport Address TLV模式，可选TESTER_IP、ROUTER_ID、NONE，默认为TESTER_IP。\n        - DutIpv4Address (str): DUT的IPv4地址，默认为\"2.1.1.1\"。\n        - DirectHelloInterval (int): 直连Hello发送间隔（秒），默认5秒，范围1-21845。\n        - TargetedHelloInterval (int): 远端Hello发送间隔（秒），默认15秒，范围1-21845。\n        - KeepAliveInterval (int): 保活时间间隔（秒），默认60秒，范围1-21845。\n        - LabelReqRetryCount (int): 标签请求重试次数，默认10次，范围1-65535。\n        - LabelReqRetryInterval (int): 标签请求重试间隔（秒），默认60秒，范围1-65535。\n        - Authentication (str): 鉴权类型，可选NONE或MD5，默认为NONE。\n        - Password (str): 鉴权密码，默认为\"xinertel\"。\n        - EgressLabel (str): 出标签方式，可选NEXT_AVAILABLE、IMPLICIT、EXPLICIT，默认为NEXT_AVAILABLE。\n        - MinLabel (int): 最小可用标签值，默认16，范围0-1048575。\n        - EnableLspResult (bool): 是否启用LSP统计，默认False。\n        - EnablePseudowireLspResult (bool): 是否启用伪线LSP统计，默认False。\n        - LspBindMode (str): LSP绑定模式，可选TX_RX、TX、RX、NONE，默认TX_RX。\n        - VcLspBindMode (str): 虚拟电路LSP绑定模式，默认TX_RX。\n        - GeneralizedLspBindMode (str): 通用伪线LSP绑定模式，默认TX_RX。\n\n返回值:\n    :obj:`Ldp`: 创建成功的LDP协议会话对象，可用于后续操作如启动、停止或查询状态。\n\n副作用:\n    - 修改全局变量 `map_protocol_object`，将LDP对象的句柄与对象本身进行映射，便于后续查找和管理。\n\n示例:\n    .. code:: RobotFramework\n\n        | Create Ldp | Port=${Port} | HelloType=TARGETED | DutIpv4Address=192.168.1.1 | Enable=True",
  "TesterLibrary.Protocol.ldp.edit_ldp": "编辑LDP协议会话对象的参数配置。\n\n该函数用于更新指定LDP协议会话对象（Session）的属性值，通过关键字参数传递需要修改的配置项。所有提供的合法关键字参数将被设置到Session对象中以完成参数编辑。\n\nArgs:\n\n    Session (:obj:`Ldp`): 需要编辑参数的LDP协议会话对象，类型为object。\n\nKeyword Args:\n\n    Name (str): 设置LDP会话的名称。\n\n    Enable (bool): 控制是否启用LDP会话，默认值：True。\n\n    HelloType (str): 指定Hello报文的类型，默认值：DIRECT，可选值包括：\n        \n        - DIRECT: 直连发现\n        - TARGETED: 远端发现\n        - DIRECT_TARGETED: 同时支持直连和远端发现\n\n    LabelAdvertType (str): 标签分配方式，默认值：DU（下游主动），可选值包括：\n\n        - DU: 下游主动\n        - DOD: 下游按需\n\n    TransportMode (str): Transport Address TLV模式，默认值：TESTER_IP，可选值包括：\n\n        - TESTER_IP: 使用测试仪IP地址\n        - ROUTER_ID: 使用路由器ID\n        - NONE: 不发送Transport Address TLV\n\n    DutIpv4Address (str): 指定DUT的IPv4地址，默认值：\"2.1.1.1\"。\n\n    DirectHelloInterval (int): 直连Hello报文发送间隔（秒），默认值：5，取值范围：1-21845。\n\n    TargetedHelloInterval (int): 远端Hello报文发送间隔（秒），默认值：15，取值范围：1-21845。\n\n    KeepAliveInterval (int): 保活时间间隔（秒），默认值：60，取值范围：1-21845。\n\n    LabelReqRetryCount (int): 标签请求重试次数，默认值：10，取值范围：1-65535。\n\n    LabelReqRetryInterval (int): 标签请求重试间隔（秒），默认值：60，取值范围：1-65535。\n\n    Authentication (str): LDP会话鉴权类型，默认值：NONE，可选值包括：\n\n        - NONE: 不启用鉴权\n        - MD5: 启用MD5鉴权\n\n    Password (str): 鉴权密码，默认值：\"xinertel\"。\n\n    EgressLabel (str): 出标签分配方式，默认值：NEXT_AVAILABLE，可选值包括：\n\n        - NEXT_AVAILABLE: 自动分配下一个可用标签\n        - IMPLICIT: 隐式空标签\n        - EXPLICIT: 显式指定标签\n\n    MinLabel (int): 最小可用标签值，默认值：16，取值范围：0-1048575。\n\n    EnableLspResult (bool): 是否启用LSP统计功能，默认值：False。\n\n    EnablePseudowireLspResult (bool): 是否启用伪线LSP统计功能，默认值：False。\n\n    LspBindMode (str): LSP绑定模式，默认值：TX_RX，可选值包括：\n\n        - TX_RX: 双向绑定\n        - TX: 仅发送方向绑定\n        - RX: 仅接收方向绑定\n        - NONE: 不绑定\n\n    VcLspBindMode (str): 虚拟电路LSP绑定模式，默认值：TX_RX，选项同LspBindMode。\n\n    GeneralizedLspBindMode (str): 通用伪线LSP绑定模式，默认值：TX_RX，选项同LspBindMode。\n\nReturns:\n\n    bool: 操作成功返回True，否则抛出ContinuableFailure异常。\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${Session} | Create Ldp | Port=${Port} |\n        | Edit Ldp | Session=${Session} | HelloType=DIRECT_TARGETED |",
  "TesterLibrary.Protocol.ldp.create_ldp_ipv4_egress": "创建LDP IPv4 Egress对象，用于配置LDP协议中的IPv4出口LSP（标签交换路径）。\n\nArgs:\n\n    Session (:obj:`Ldp` 或 list/set/tuple): LDP协议会话对象或包含会话对象的可迭代集合。如果传入的是列表、集合或元组，则使用其中的第一个元素作为实际的LDP会话对象。\n\nKeyword Args:\n\n    Name (str): LDP IPv4 Egress对象的名称，类型为字符串。\n\n    Enable (bool): 是否启用LDP IPv4 Egress，取值范围为True或False，默认值为True。\n\n    FecType (str): FEC（转发等价类）类型，取值包括PREFIX_FEC（前缀FEC）和HOST_FEC（主机FEC），默认值为PREFIX_FEC。\n\n    LspCount (int): 创建的LSP数量，取值范围为1到65535，默认值为1。\n\n    StartIpv4Prefix (str): LSP的起始IPv4前缀地址，默认值为192.0.1.0，必须是合法的IPv4地址格式。\n\n    PrefixLength (int): IPv4前缀长度，表示子网掩码长度，取值范围为1到32，默认值为24。\n\n    PrefixStep (int): 前缀变化步长，用于连续生成多个LSP时的前缀递增步长，取值范围为1到65535，默认值为1。\n\n    Ipv4PrefixStep (str): IPv4地址步长，用于定义每次生成LSP时IP地址的变化步长，默认值为0.0.1.0，必须是合法的IPv4地址格式。\n\nReturns:\n\n    object: 返回由会话对象的create_ipv4_egress方法生成的结果，通常代表创建的IPv4 egress配置对象或对其的引用。\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${Session} | Create Ldp | Port=${Port} |\n        | Edit Ldp | Session=${Session} | HelloType=DIRECT_TARGETED |\n        | ${Egress} | Create Ldp Ipv4 Egress | Session=${Session} |\n\nDescription:\n该函数封装了通过提供的LDP会话对象创建IPv4出口配置的过程。它简化了创建LDP IPv4 Egress的流程，支持将Session参数作为单个对象或可迭代结构传入，并将所有其他关键字参数直接传递给底层会话对象的create_ipv4_egress方法，以进行灵活的配置。",
  "TesterLibrary.Protocol.ldp.create_ldp_ipv4_ingress": "创建LDP IPv4 Ingress对象\n\n该函数用于为指定的LDP会话创建一个或多个IPv4入方向标签交换路径（Ingress LSP）配置。它基于提供的会话对象并结合关键字参数来定义具体的IPv4前缀、步长、FEC类型等属性。\n\nArgs:\n\n    Session (:obj:`Ldp` 或 iterable of :obj:`Ldp`): LDP协议会话对象。如果传入的是会话对象的集合（如列表、元组或集合），则仅使用第一个会话对象。\n\nKeyword Args:\n\n    Name (str): LDP IPv4 Ingress对象名称，类型为字符串，默认值由系统自动生成。\n\n    Enable (bool): 是否启用该LDP IPv4 Ingress，类型为布尔值，默认值：True。\n\n    FecType (str): FEC（转发等价类）类型，类型为字符串，默认值：PREFIX_FEC，可选值包括：\n\n        PREFIX_FEC - 基于IP前缀的FEC\n\n        HOST_FEC - 主机路由类型的FEC\n\n    LspCount (int): 创建的LSP数量，类型为整数，默认值：1，取值范围：1-65535。\n\n    StartIpv4Prefix (str): 起始IPv4前缀地址，类型为字符串，默认值：192.0.1.0，格式必须是合法的IPv4地址。\n\n    PrefixLength (int): IPv4前缀长度，类型为整数，默认值：24，取值范围：1-32。\n\n    PrefixStep (int): 每个LSP的前缀递增步长（以IP子网数量为单位），类型为整数，默认值：1，取值范围：1-65535。\n\n    Ipv4PrefixStep (str): IPv4地址块之间的步长，类型为字符串，默认值：0.0.1.0，格式必须是合法的IPv4地址。\n\nReturns:\n\n    (:obj:`LdpIpv4IngressLspConfig` or list): 返回创建的LDP IPv4 Ingress对象或对象列表，具体取决于底层实现。\n\nRaises:\n\n    ContinuableFailure: 如果调用失败（返回False），将抛出ContinuableFailure异常，并包含函数名作为错误信息的一部分。\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${Session} | Create Ldp | Port=${Port} |\n        | Edit Ldp | Session=${Session} | HelloType=DIRECT_TARGETED |\n        | ${Ingress} | Create Ldp Ipv4 Ingress | Session=${Session} | Name=MyIngress | LspCount=5 | StartIpv4Prefix=192.0.1.0 | PrefixLength=24 | PrefixStep=1 | Ipv4PrefixStep=0.0.1.0 |",
  "TesterLibrary.Protocol.ldp.create_ldp_fec_128": "创建LDP FEC 128对象\n\n该函数用于通过提供的会话对象创建一个LDP FEC（Forwarding Equivalence Class，转发等价类）类型为128的对象。如果提供的Session是一个列表、集合或元组，则将使用集合中的第一个元素。\n\nArgs:\n\n    Session (Union[object, list, set, tuple]): LDP协议会话对象，该对象应包含方法`create_fec_128`。如果传入的是列表、集合或元组，则会使用其中的第一个元素。\n\nKeyword Args:\n\n    Name (str): LDP FEC 128对象的名称，类型为字符串。\n\n    Enable (bool): 是否启用LDP FEC 128，取值范围为True或False，默认值为True。\n\n    ControlWordEnable (bool): 控制字使能状态，取值范围为True或False，默认值为False。\n\n    Encapsulation (str): 封装类型，取值包括ETHERNET_TAGGED_MODE、ETHERNET和CEM，默认值为PREFIX_FEC。\n\n    GroupId (int): 组ID，取值范围为1到65535，默认值为1。\n\n    InterfaceMtu (int): 接口MTU大小，取值范围为1到65535，默认值为1500。\n\n    IncludePwStatusTlv (bool): 是否启用伪线状态码TLV，取值范围为True或False，默认值为False。\n\n    PwStatusCode (list): 伪线状态码列表，可选值包括PW_NOT_FORWARDING、LOCAL_AC_RX_FAULT、LOCAL_AC_TX_FAULT、LOCAL_PSN_PW_RX_FAULT和LOCAL_PSN_PW_TX_FAULT，默认值为[PW_NOT_FORWARDING]。\n\n    UseCustomPwStatusTlv (bool): 是否使用自定义伪线状态码TLV，取值范围为True或False，默认值为False。\n\n    CustomPwStatusCode (int): 自定义伪线状态码，取值范围为0到4294967295，默认值为0。\n\n    VcCount (int): VC（虚通道）数量，取值范围为0到4294967295，默认值为1。\n\n    StartVcId (int): 起始VC ID，取值范围为0到4294967295，默认值为1。\n\n    VcIdStep (int): VC ID递增步长，取值范围为0到4294967295，默认值为1。\n\nReturns:\n\n    object: 返回调用底层`Session.create_fec_128(**kwargs)`方法的结果，通常表示所创建的LDP FEC 128对象。\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${Session} | Create Ldp | Port=${Port} |\n        | Edit Ldp | Session=${Session} | HelloType=DIRECT_TARGETED |\n        | ${Ingress} | Create Ldp Fec 128 | Session=${Session} |",
  "TesterLibrary.Protocol.ldp.create_ldp_fec_129": "创建LDP FEC 129对象，用于配置LDP协议中的伪线（Pseudowire）相关参数。\n\n该函数通过提供的会话对象或会话对象集合（仅使用第一个会话）调用底层会话方法`create_fec_129`，将所有关键字参数直接传递给该方法。可用于创建和配置LDP FEC 129类型的伪线隧道，支持多种封装模式、控制字使能、PW状态码配置、AGI/Saii/Taii地址设置等功能。\n\nArgs:\n\n    Session (:obj:`Ldp` 或 list/set/tuple of :obj:`Ldp`): \n        LDP协议会话对象或会话对象集合。如果提供的是集合，则仅使用第一个会话对象。\n\nKeyword Args:\n\n    Name (str): LDP FEC 129对象名称，默认由系统自动生成。\n\n    Enable (bool): 是否启用FEC 129对象，默认值：True。\n\n    ControlWordEnable (bool): 是否启用控制字字段，默认值：False。\n\n    Encapsulation (str): 封装类型，默认值：PREFIX_FEC，可选值包括：\n\n        ETHERNET_TAGGED_MODE\n\n        ETHERNET\n\n        CEM\n\n    GroupId (int): 伪线组ID，取值范围：1-65535，默认值：1。\n\n    InterfaceMtu (int): 接口MTU值，取值范围：1-65535，默认值：1500。\n\n    IncludePwStatusTlv (bool): 是否包含PW状态TLV，默认值：False。\n\n    PwStatusCode (list): PW状态码列表，默认值：['PW_NOT_FORWARDING']，可选值包括：\n\n        PW_NOT_FORWARDING\n\n        LOCAL_AC_RX_FAULT\n\n        LOCAL_AC_TX_FAULT\n\n        LOCAL_PSN_PW_RX_FAULT\n\n        LOCAL_PSN_PW_TX_FAULT\n\n    UseCustomPwStatusTlv (bool): 是否使用自定义PW状态码，默认值：False。\n\n    CustomPwStatusCode (int): 自定义PW状态码，取值范围：0-4294967295，默认值：0。\n\n    PwCount (int): 创建的PW数量，取值范围：0-65535，默认值：1。\n\n    Agi (str): 起始AGI（Attachment Group Identifier），IPv6格式地址，默认值：'100:1'。\n\n    AgiStep (str): AGI步长，IPv6格式地址，默认值：'0:1'。\n\n    Saii (str): 起始SAII（Source Attachment Individual Identifier），IPv4格式地址，默认值：'10.0.0.1'。\n\n    SaiiStep (str): SAII步长，IPv4格式地址，默认值：'0.0.0.1'。\n\n    Taii (str): 起始TAII（Target Attachment Individual Identifier），IPv4格式地址，默认值：'192.0.0.1'。\n\n    TaiiStep (str): TAII步长，IPv4格式地址，默认值：'0.0.0.1'。\n\nReturns:\n\n    (:obj:`LdpFec129LspConfig`): 返回创建的LDP FEC 129对象实例，通常包含LSP配置信息，如路径、标签等。\n\nRaises:\n\n    TypeError: 如果Session不支持索引访问，或者Session对象没有`create_fec_129`方法。\n\n    可能抛出由底层会话`create_fec_129`方法引发的任何异常。\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${Session} | Create Ldp | Port=${Port} |\n        | Edit Ldp | Session=${Session} | HelloType=DIRECT_TARGETED |\n        | ${Ingress} | Create Ldp Fec 129 | Session=${Session} | PWCount=5 | Encapsulation=ETHERNET | Enable=True |",
  "TesterLibrary.Protocol.ldp.get_ldp_point_from_lsp": "Retrieves the associated LDP (Label Distribution Protocol) point objects for the provided LSP (Label Switched Path) configurations.\n\nThis function accepts either a single LSP configuration object or a list of such objects. It processes them uniformly by converting a single object into a list if necessary. For each configuration, it retrieves the source-relative 'GenerateLdpLsp' object, which represents the LDP point associated with the given LSP configuration.\n\nArgs:\n    Configs (list or object): A single LSP configuration object or a list of LSP configuration objects. These objects are expected to have a method `get_relatives()` to retrieve related objects based on relationship type and direction.\n\nReturns:\n    list: A list of LDP point objects associated with the provided LSP configurations. The objects can be of types `LdpIpv4EgressLspConfig`, `LdpIpv4IngressLspConfig`, `LdpFec128LspConfig`, or `LdpFec129LspConfig`.\n\nRaises:\n    ContinuableFailure: If the underlying API call fails, an exception is raised with a descriptive message.\n\nExample:\n    .. code:: RobotFramework\n\n        | Get Ldp Point From Lsp | Configs=${IPv4EgressLsp} |",
  "TesterLibrary.Protocol.ldp.wait_ldp_state": "等待LDP协议会话达到指定状态。\n\n该函数用于等待一个或多个LDP协议会话的“State”属性达到指定的目标状态。默认情况下，它会等待会话进入“OPERATIONAL”状态。函数支持多种LDP会话状态，并通过轮询机制定期检查会话状态，直到所有会话都达到目标状态或超时发生。\n\n参数：\n- Sessions (list): LDP协议会话对象列表。每个会话应为有效的LDP会话对象。\n- State (str, optional): 期望达到的目标状态，默认为 'OPERATIONAL'。支持的状态包括：DISABLED、NOT_STARTED、NON_EXISTENT、INITIAL、OPEN_SENT、OPEN_REC、OPERATIONAL、RESTARTING、HELPING。\n- Interval (int, optional): 查询LDP会话状态的时间间隔（单位：秒），默认值为1秒。\n- TimeOut (int, optional): 等待会话状态变化的总超时时间（单位：秒），默认值为60秒。\n\n返回值：\n- bool: 如果所有LDP会话在超时时间内成功达到指定状态，则返回 True；否则抛出异常。\n\n异常：\n- 如果在指定的超时时间内，有任何一个会话未达到目标状态，则抛出 TesterException 异常，并标记此次操作失败。\n\n注意事项：\n- 函数内部调用底层 `_wait_state` 方法进行状态监控，适用于更广泛的属性监控场景。\n- 如果传入多个会话，函数将等待所有会话都达到目标状态。\n- 如果提供的是单个会话，函数将仅监控该会话的状态。\n\n示例：\n.. code:: RobotFramework\n\n    | Wait Ldp State | Sessions=${Sessions} | State=RESTARTING | Interval=2 | TimeOut=120 |",
  "TesterLibrary.Protocol.ldp.establish_ldp": "Establishes the LDP (Label Distribution Protocol) session(s) provided.\n\nThis function accepts a single session object or an iterable (list, set, or tuple)\nof session objects and invokes the `establish()` method on each one. It ensures\nthat all given sessions are properly initialized and ready for use.\n\nParameters:\n-----------\nSessions : object or iterable of objects\n    A single session object or an iterable containing multiple session objects.\n    If a single object is passed, it will be converted into a list internally.\n    Each session object is expected to have an `establish()` method.\n\nReturns:\n--------\nbool\n    Always returns True to indicate successful establishment of all provided sessions.\n\nRaises:\n-------\nContinuableFailure\n    If the underlying API call returns False, indicating that establishing the LDP session(s) failed.\nAttributeError\n    If any of the session objects do not have an `establish()` method.\nTypeError\n    If the input is not a session object or an iterable of session objects.\n\nExample:\n--------\n.. code:: RobotFramework\n\n    | Establish Ldp | Sessions=${Sessions} |",
  "TesterLibrary.Protocol.ldp.stop_ldp_hello": "..  method:: stop_ldp_hello(Sessions)\n\n    停止提供的LDP协议会话的Hello发送。该函数用于优雅地终止一个或多个LDP会话的Hello消息发送机制。支持传入单个会话对象或包含多个会话对象的可迭代对象（如列表、集合、元组），并在内部统一转换为列表格式进行处理。每个会话对象需具有`stop_hello()`方法。\n\n    :param Sessions: 单个会话对象或可迭代的会话对象集合，类型应为Session对象或包含Session对象的list、set、tuple。\n    :type Sessions: Session object or iterable of Session objects\n\n    :return: 若操作成功则返回True；若调用底层API失败则返回False，并抛出ContinuableFailure异常。\n    :rtype: bool\n\n    **Description:**  \n    该函数通过调用底层实现renix.stop_ldp_hello()来执行实际的停止操作。在接收到结果后，如果返回值为False，则抛出ContinuableFailure异常以供上层逻辑捕获和处理；否则返回原始结果。此函数适用于需要显式控制LDP会话生命周期的测试场景。\n\n    Examples:\n        .. code:: RobotFramework\n\n            | Stop Ldp Hello | Sessions=${Sessions} |",
  "TesterLibrary.Protocol.ldp.stop_ldp_keepalive": "停止LDP协议会话的Keepalive发送机制。\n\n:param Sessions: 一个LDP会话对象或多个会话对象的可迭代集合（如列表、集合、元组），用于停止其Keepalive机制。\n:type Sessions: Session 或 list 或 set 或 tuple\n\n:return: 布尔值，表示操作是否成功。始终返回 ``True`` 表示执行成功。\n:rtype: bool\n\n功能说明：\n该函数用于停止一个或多个LDP协议会话的Keepalive发送机制。用户可以传入单个会话对象或者包含多个会话对象的可迭代结构（如列表、集合、元组）。对于传入的每个会话对象，函数内部会调用其 `stop_keepalive()` 方法以停止对应的Keepalive机制。若传入的是单个会话对象，函数会将其转换为列表形式以便统一处理。\n\n异常行为：\n如果底层调用失败（即返回 False），函数将抛出一个 ContinuableFailure 异常，提示当前操作失败但允许测试继续执行。\n\n使用示例：\n .. code:: RobotFramework\n\n     | Stop Ldp Keepalive | Sessions=${Sessions} |",
  "TesterLibrary.Protocol.ldp.resume_ldp_hello": "Resumes the LDP hello process for one or more session objects.\n\nParameters:\n-----------\nSessions : object or iterable of objects\n    A single session object or an iterable (list, set, tuple) of session objects\n    for which the LDP hello process should be resumed. If a single session is\n    provided, it will be wrapped into a list internally.\n\nReturns:\n--------\nbool\n    Always returns True to indicate successful execution of the operation.\n\nDescription:\n------------\nThis function resumes the LDP hello process on each session provided in the\n`Sessions` parameter. It first ensures that the input is in an iterable format,\nthen iterates over each session and calls the `resume_hello()` method on it.\nThe function is decorated with `@abnormal_check()`, which may perform additional\nchecks or logging around abnormal conditions during execution. If any underlying\noperation fails, a `ContinuableFailure` exception is raised to indicate the issue.",
  "TesterLibrary.Protocol.ldp.resume_ldp_keepalive": "Resumes the LDP keepalive mechanism for one or more session objects.\n\nThis function is used to resume the Keepalive sending process for one or more LDP protocol session objects.\nIt can accept either a single session object or an iterable (list, set, or tuple) of session objects.\nEach provided session must implement the `resume_keepalive()` method which is called internally to resume the keepalive process.\n\nThe function returns True to indicate successful execution. If any of the provided session objects do not support\nthe `resume_keepalive()` method, or if the operation is attempted in an invalid context as determined by the\n`abnormal_check` decorator, exceptions may be raised.\n\nParameters:\n-----------\nSessions : object or iterable of objects\n    A single session object or a collection (list, set, or tuple) of session objects that support the\n    `resume_keepalive()` method. If a single non-iterable object is passed, it will be automatically wrapped in a list.\n\nReturns:\n--------\nbool\n    Always returns True to indicate that the operation was successfully initiated.\n\nRaises:\n-------\nContinuableFailure: \n    Raised if the underlying implementation fails (e.g., communication issues, invalid session states).\n\nOther Exceptions:\n    May also raise exceptions if the session objects are invalid, missing required methods, or if invoked in an abnormal context.\n\nExample Usage:\n--------------\n.. code:: RobotFramework\n\n    | Resume Ldp Keepalive | Sessions=${Sessions} |",
  "TesterLibrary.Protocol.ldp.restart_ldp": "重启LDP（Label Distribution Protocol）协议会话。\n\n该函数用于重启一个或多个LDP协议会话。它接受单个会话对象或会话对象的集合（如列表、集合、元组），并对每个会话调用其`restart()`方法。如果传入的是单个会话对象，它将被自动封装成列表进行统一处理。\n\n参数:\n    Sessions (object 或 iterable): 要重启的LDP会话对象或多个会话对象的集合（如list, set, tuple）。每个对象必须实现`restart()`方法。\n\n返回值:\n    bool: 始终返回True，表示重启操作已成功执行。\n\n异常:\n    AttributeError: 如果任何一个会话对象没有`restart()`方法，则抛出此异常。\n\n示例:\n    .. code:: RobotFramework\n\n        | Restart Ldp | Sessions=${Sessions} |\n\n注意:\n    该函数在底层调用了`renix.restart_ldp()`，并在此基础上增加了失败时抛出`ContinuableFailure`异常的逻辑。",
  "TesterLibrary.Protocol.ldp.request_ldp_label": "LDP协议会话LSP请求标签\n\n该函数用于发送LDP标签请求，基于提供的LSP配置对象或配置对象的集合。它封装了底层`Ldp.request_label`方法的调用，并确保传入的配置格式正确。此外，该函数通过`@abnormal_check()`装饰器对执行过程中的异常行为进行检查和处理。\n\n参数说明：\n\n- Configs (Union[object, list, set, tuple]): 一个LSP配置对象，或者包含多个LSP配置对象的可迭代结构（如列表、集合或元组）。\n  每个配置对象必须包含一个`handle`属性，该属性是LSP的唯一标识符。如果传入的是单个对象，则会被内部转换为列表形式以兼容底层方法。\n\n返回值：\n\n- bool: 如果标签请求命令成功执行，则返回 ``True``；否则返回 ``False``。\n\n示例：\n\n.. code:: RobotFramework\n\n    | Request Ldp Label | Configs=${Configs} |\n\n注意事项：\n- 如果函数返回 `False`，则会抛出一个 `ContinuableFailure` 异常，表示操作失败但测试可以继续执行后续步骤。",
  "TesterLibrary.Protocol.ldp.abort_request_ldp_label": "中止LDP协议会话的LSP标签请求\n\n该方法用于中止一个或多个LDP配置中的标签请求。它封装了底层`Ldp.abort_request_label`函数，确保输入被正确格式化为列表后再调用底层协议方法。\n\n参数:\n    Configs (Union[object, list, set, tuple]): 一个LDP配置对象或者可迭代的LDP配置对象集合（如列表、集合或元组），用于中止其关联的标签请求。每个配置对象必须包含一个`handle`属性，该属性唯一标识LDP LSP配置。\n\n返回值:\n    bool: 如果中止命令成功执行，则返回``True``；如果执行过程中发生错误，可能抛出异常或返回``False``，具体取决于底层方法的实现逻辑。\n\n示例:\n    >>> api = RenixAPI()\n    >>> config1 = get_ldp_config(...)  # 假设此函数返回一个有效的LDP配置对象\n    >>> config2 = get_ldp_config(...)\n    >>> api.abort_request_ldp_label(config1)  # 中止单个配置的标签请求\n    True\n    >>> api.abort_request_ldp_label([config1, config2])  # 中止多个配置的标签请求\n    True\n\n注意:\n    该方法内部将非列表输入封装为列表以便统一处理。此外，它依赖于每个配置对象中`handle`属性的正确性，以定位协议引擎中对应的LDP会话。",
  "TesterLibrary.Protocol.ldp.withdraw_ldb_label": "撤销LDP协议会话LSP标签\n\n该函数用于根据提供的配置对象撤销一个或多个LDB（Label Distribution Binding）标签。它是对`Ldp.withdraw_lsp`方法的封装，用于撤回与一个或多个LDP LSP（Label Switched Path）相关的标签绑定。该函数确保输入始终被视为配置对象的列表，即使传入的是单个配置对象也会被自动包装为列表。撤回操作会向底层协议栈发送相应的命令以移除指定的标签绑定。\n\n参数:\n    Configs (LdpLspConfig 或可迭代对象)\n        可以是一个单独的`LdpLspConfig`对象，也可以是包含多个`LdpLspConfig`对象的可迭代对象（如 list, set, tuple）。\n        每个对象必须具有一个`handle`属性，该属性表示要撤回标签绑定的LSP的唯一标识符。\n\n返回值:\n    bool\n        始终返回True，表示标签撤回操作已成功发起。\n\n注意事项:\n    - 如果传入的是单个`LdpLspConfig`对象，它会被自动包装成一个列表后再传递给内部的LDP撤回方法。\n    - 该方法依赖于`Ldp.withdraw_lsp`来实际执行LSP及其关联标签的撤回操作。\n\n示例:\n    .. code:: RobotFramework\n\n        | Withdraw Ldp Label | Configs=${Configs} |",
  "TesterLibrary.Protocol.ldp.advertise_ldp_label": "Advertises LDP (Label Distribution Protocol) labels based on the provided configuration(s).\n\nThis function is used to initiate or re-initiate the advertisement of one or more LDP Label Switched Paths (LSPs) in the network. It wraps a call to the underlying `Ldp.advertise_lsp` method, ensuring that the input is properly formatted as a list of configuration objects before being passed to the backend.\n\nParameters:\n-----------\nConfigs : list\n    A list of LDP LSP configuration objects. Each object must contain at least a 'handle' attribute that uniquely identifies the LSP within the LDP context. If a single object is provided, it will be automatically wrapped into a list.\n\nReturns:\n--------\nbool\n    Returns True if the advertisement command was successfully executed. If the operation fails, a `ContinuableFailure` exception is raised.\n\nRaises:\n-------\nContinuableFailure\n    If the result of the underlying operation is False, indicating a failure in advertising the LDP label, this exception is raised to signal the failure while allowing test execution to continue.\n\nNotes:\n------\n- This function internally uses `LdpReAdvertiseLspCommand` to construct and execute the corresponding LDP control message for label advertisement.\n- The function ensures robustness by handling both iterable and non-iterable inputs, converting them into a list format expected by the backend system.\n- This function is typically used in test automation scenarios where precise control over LDP label advertisement is required during network testing.",
  "TesterLibrary.Protocol.ldp.start_ldp": "启动LDP（Label Distribution Protocol）协议会话，用于在一个或多个会话对象上启动LDP。\n\n参数:\n- Sessions (list): LDP协议会话对象列表。类型必须为 list、set 或 tuple。\n  如果传入的是单个会话对象，将会在内部转换为列表处理。\n  \n返回值:\n- bool: 如果LDP成功启动，返回 True；如果启动失败，返回 False 并抛出 ContinuableFailure 异常。\n\n异常:\n- TypeError: 如果 `Sessions` 中的任意元素不是具有 `start_ldp()` 方法的有效会话对象。\n- ContinuableFailure: 如果调用底层API启动LDP失败，则抛出此异常。\n\n示例:\n.. code:: RobotFramework\n\n    | Start Ldp | Sessions=${Sessions} |\n\n描述:\n该函数将传入的会话对象或会话对象集合（list、set、tuple）传递给底层RenixAPI的 `start_ldp` 方法，\n尝试为所有提供的会话启动LDP协议。若所有会话的LDP均启动成功，则返回True；\n若任一会话启动失败，则返回False并抛出ContinuableFailure异常，表示测试可以继续执行但当前操作失败。",
  "TesterLibrary.Protocol.ldp.stop_ldp": "停止LDP协议会话\n\nArgs:\n\n    Sessions (list, set, tuple 或单个会话对象): 要停止的LDP协议会话对象，可以是一个单独的会话对象或者一个包含多个会话对象的可迭代结构（如 list、set 或 tuple）\n\nReturns:\n\n    bool: 布尔值Bool (范围：True / False)，表示操作是否成功。如果所有提供的LDP会话都被成功停止，则返回 True；否则返回 False。\n\nDescription:\n    该函数用于停止指定的一个或多个LDP（Label Distribution Protocol）会话。参数 `Sessions` 支持多种类型输入：若传入的是单个会话对象，则自动将其转换为只包含该对象的列表；若传入的是列表、集合或元组，则依次对其中的每个会话调用其 `stop_ldp()` 方法以停止对应的LDP会话。函数最终返回一个布尔值表示整体操作是否成功。\n\nExamples:\n    .. code:: RobotFramework\n\n        | Stop Ldp | Sessions=${Sessions} |",
  "TesterLibrary.Protocol.ldp.get_ldp_session_statistic": "获取LDP会话的统计信息。\n\n该函数用于查询一个或多个LDP会话的统计结果，支持指定需要返回的统计项（如发送和接收的各种LDP消息数量）。内部调用底层接口 `_get_statictis` 获取数据，并根据匹配结果的数量返回不同类型的值：单个匹配时返回字典，多个匹配时返回 pandas DataFrame，无匹配时返回 False。\n\n参数:\n    Session (object 或 list/set/tuple of objects, optional): \n        LDP会话对象或多个会话对象的集合，用于指定要查询的会话。每个对象必须包含 'Name' 属性作为会话标识。\n        如果不指定，则不进行会话过滤。\n\n    StaItems (list or str or None, optional): \n        指定需要获取的统计项列表。如果为 None，则返回所有可用统计项。如果传入字符串，则会被转换为单元素列表。\n        支持的统计项包括:\n\n            TxAddressWithdraw\n            RxAddressWithdraw\n            TxAddress\n            RxAddress\n            TxDirectHello\n            RxDirectHello\n            TxInitialization\n            RxInitialization\n            TxKeepAlive\n            RxKeepAlive\n            TxLabelAbort\n            RxLabelAbort\n            TxLabelMapping\n            RxLabelMapping\n            TxLabelRelease\n            RxLabelRelease\n            TxLabelRequest\n            RxLabelRequest\n            TxLabelWithdraw\n            RxLabelWithdraw\n            TxNotification\n            RxNotification\n            TxTargetHello\n            RxTargetHello\n            TxIPv6DirectHello\n            RxIPv6DirectHello\n            TxIPv6TargetHello\n            RxIPv6TargetHello\n\n返回:\n    dict or pd.DataFrame or bool:\n        - 如果只有一个匹配的会话统计项：返回字典，键为统计项名称，值为对应的数值。\n        - 如果有多个匹配的会话统计项：返回 pandas DataFrame，每行代表一个会话，列对应请求的统计项。\n        - 如果没有匹配的统计结果：返回 False。\n\n异常:\n    TesterException: 如果在执行过程中发生错误（例如命令执行失败或数据获取异常）。\n    KeyError: 如果请求的统计项在结果中不存在。\n    sqlite3.Error: 如果访问数据库过程中出现异常（如性能数据读取问题）。\n\n副作用:\n    - 内部调用 `_get_statictis` 方法，可能会刷新会话数据或处理分页视图。\n    - 在 ResultView 模式下切换页面时可能会调用 time.sleep() 以保证数据一致性。\n\n示例:\n    .. code:: RobotFramework\n\n        | @{StaItems} | Create List | AdjacencyState | TxUpdate |\n        | Subscribe Result | Types=LdpSessionStatistic |\n        | Start Protocol |\n        | Sleep | 60 |\n        | &{Result} | Get Ldp Session Statistic | Session=${Session} | StaItems=@{StaItems} |\n        | Clear Result |",
  "TesterLibrary.Protocol.ldp.get_ldp_lsp_statistic": "获取LDP LSP（Label Switched Path）统计信息。\n\n该函数用于查询并返回一个或多个LDP会话的LDP LSP统计结果。可以通过指定会话对象过滤统计数据，并选择性地获取特定的统计项。\n\n参数:\n    Session (:obj:`Ldp` 或 list/set/tuple of :obj:`Ldp`, optional):\n        要查询统计信息的LDP会话对象或对象集合。每个会话对象需包含 `Name` 属性，用于作为索引 ('LdpSessionId')。\n        如果为 None，则不应用会话过滤器；如果提供多个会话对象，将返回这些会话的所有LDP LSP统计信息。\n\n    StaItems (list or str, optional):\n        指定要获取的统计项列表。支持的统计项包括：\n\n            FECInfo\n            FECType\n            LabelValue\n            LspMode\n            LspState\n            LspType\n\n        如果为 None，默认返回所有可用统计项。如果提供字符串，将自动转换为单元素列表。\n\n返回值:\n    dict or pd.DataFrame or bool:\n        - 如果仅找到一条匹配的LDP LSP统计记录：返回一个字典，键为请求的统计项 (`StaItems`)，值为对应的统计值。\n        - 如果找到多条匹配记录：返回一个 pandas DataFrame，每行代表一个LDP LSP的统计信息。\n        - 如果未找到匹配记录：返回 False。\n\n异常:\n    ContinuableFailure: 如果数据检索失败，抛出可继续执行的错误。\n\n示例:\n    .. code:: RobotFramework\n\n        | @{StaItems} | Create List | LabelValue | LspMode |\n        | Subscribe Result | Types=LdpLspStatistic |\n        | Start Protocol |\n        | Sleep | 60 |\n        | &{Result} | Get Ldp Lsp Statistic | Session=${Session} | StaItems=@{StaItems} |\n        | Clear Result |",
  "TesterLibrary.Protocol.ldp.edit_ldp_port_config": "Edits the LDP (Label Distribution Protocol) port configuration for one or more specified ports.\n\nThis function retrieves the 'LdpPortConfig' child object(s) associated with the provided port(s)\nand applies the given configuration changes using keyword arguments. If a single port is provided,\nit returns the updated configuration object directly; otherwise, it returns a list of all updated\nconfiguration objects.\n\nParameters:\n    Ports (Union[object, list]): A single port object or a list of port objects whose LDP port\n                                 configuration needs to be edited.\n\nKeyword Args:\n    EstablishRate (int): LDP session establishment rate in messages per second. Range: 1-10000. Default: 100.\n    AdvertiseRate (int): LDP session advertisement rate in sessions per second. Range: 1-10000. Default: 100.\n    ReleaseRate (int): LDP session release rate in sessions per second. Range: 1-10000. Default: 100.\n    FecPerLdpMsg (int): Number of FECs (Forwarding Equivalence Classes) per LDP message. Range: 1-65535. Default: 65535.\n\nReturns:\n    object or list: If a single port is passed, returns the modified LdpPortConfig object.\n                    If multiple ports are passed, returns a list of all modified LdpPortConfig objects.\n\nRaises:\n    IndexError: If a port does not have an associated 'LdpPortConfig' child object.\n    TypeError: If any of the provided values in kwargs are incompatible with the expected types\n               for the LdpPortConfig attributes.\n\nDescription:\n    The function ensures that the input `Ports` is always treated as a list for uniform processing.\n    It then iterates through each port, fetches its first 'LdpPortConfig' child, and applies any\n    provided configuration changes via the `edit` method. The updated configuration objects\n    are collected and returned either as a single object or a list based on the number of ports.",
  "TesterLibrary.Protocol.lsp_ping.create_lsp_ping": "创建Lsp Ping会话对象\n\n该函数用于创建并配置一个与指定端口关联的LspPing实例。它初始化一个LspPing配置对象，并使用提供的Port参数作为上层引用（通常表示网络接口或通信端点）。函数还接受可选的关键字参数，用于动态设置LspPing实例的其他配置属性。\n\n在创建LspPing对象后，该函数会将其注册到全局协议对象映射（map_protocol_object）中，以便后续通过其句柄进行检索和管理。\n\nArgs:\n\n    Port (:obj:`Port`): 测试仪表端口对象，类型为object，表示LspPing会话所关联的网络接口或通信端点。\n\nKeyword Args:\n\n    Name (str): Lsp Ping会话名称，类型为字符串，用于标识该LspPing会话。\n\n    Enable (bool): 是否启用Lsp Ping会话，类型为布尔值，取值范围：True 或 False，默认值为 True。\n\nReturns:\n\n    (:obj:`LspPing`): 创建的LspPing会话对象，可用于后续操作和配置，类型为object。\n\nRaises:\n\n    ContinuableFailure: 如果底层调用失败（返回False），则抛出可继续执行的异常，并附带相应的错误信息。\n\nSide Effects:\n\n    - 将新创建的LspPing实例注册到全局 `map_protocol_object` 字典中，以便后续通过其句柄进行检索和管理。\n\nExamples:\n    .. code:: RobotFramework\n\n        | Create Lsp Ping | Port=${Port} |",
  "TesterLibrary.Protocol.lsp_ping.create_lsp_ping_echo_request": "创建Lsp Ping Echo Request对象并发送LSP（Label Switched Path）Ping Echo请求\n\n该函数用于在指定的Lsp Ping会话上发送LSP Ping Echo请求。它封装了每个提供会话对象的`echo_request`方法，并返回对应的结果。如果传入单个会话对象，将直接返回该会话的Echo请求结果；如果传入多个会话对象，则返回每个会话结果组成的列表。\n\n参数:\n    Sessions (:obj:`LspPing` 或 list of :obj:`LspPing`): 一个或多个Lsp Ping会话对象，支持传入单个对象或对象列表/元组/集合\n\n关键字参数 (**kwargs):\n    OperationMode (list): 操作模式，默认值：['PING']，可选值包括：\n\n        PING - 发送Ping探测\n\n        TRACE - 发送Trace探测路径信息\n\n    ReplyMode (str): Echo Reply响应模式，默认值：REPLYVIAUDP，可选值包括：\n\n        NOTREPLY - 不需要回复\n\n        REPLYVIAUDP - 通过UDP协议进行回复\n\n    PingInterval (int): Ping测试包发送间隔时间（单位秒），默认值：4，取值范围：1-65535\n\n    PingTimeOut (int): Ping探测超时时间（单位秒），默认值：2，取值范围：1-60\n\n    TraceInterval (int): Trace测试包发送间隔时间（单位秒），默认值：120，取值范围：1-65535\n\n    TraceTimeOut (int): Trace探测超时时间（单位秒），默认值：2，取值范围：1-60\n\n    InnerLabel (str): 内层标签类型，默认值：NONE，可选值包括：\n\n        NONE - 无标签\n\n        LDPIPv4 - LDP IPv4标签\n\n        VPNIPv4 - VPN IPv4标签\n\n        SEGMENT_ROUTING - Segment Routing标签\n\n    OuterLabel (str): 外层标签类型，默认值：NONE，可选项同InnerLabel\n\n    TimeToLive (int): 报文生存时间（TTL），默认值：255，取值范围：1-255\n\n    ExpBits (int): 实验比特位（EXP Bits）的值，默认值：0，取值范围：0-7\n\n    PadMode (str): 填充模式，默认值：WITHOUT_PAD，可选值包括：\n\n        WITHOUT_PAD - 不填充\n\n        DROP_PAD - 填充并丢弃\n\n        COPY_PAD - 填充并复制\n\n    Data (int): 填充数据内容，默认值：''（空），取值范围：0-255\n\n    DesIpv4Addr (str): 探测的目标IPv4地址，默认值：\"127.0.0.1\"，必须为合法IPv4地址\n\n    ValidateFecStack (bool): 是否校验FEC Stack，默认值：False，可选值：True / False\n\n    DownstreamMappingTlvType (str): 下游映射TLV类型，默认值：DOWNSTREAM_DETAILED_MAPPING_TLV，可选值包括：\n\n        DOWNSTREAM_MAPPING_TLV - 简要下游映射TLV\n\n        DOWNSTREAM_DETAILED_MAPPING_TLV - 详细下游映射TLV\n\n返回值:\n    (:obj:`LspPingEchoRequestConfig` 或 list of :obj:`LspPingEchoRequestConfig`) 返回Lsp Ping Echo请求配置对象。\n    如果传入单个Session则返回单个对象；如果传入多个Session则返回对象列表，顺序与输入一致。\n\n示例:\n    .. code:: RobotFramework\n\n        | ${LspPing} | Create Lsp Ping | Port=${Port} |\n        | Create Lsp Ping Echo Request | Sessions=${LspPing} | PingInterval=5 | PingTimeOut=3",
  "TesterLibrary.Protocol.lsp_ping.create_lsp_ping_fec_ldp_ipv4": "创建Lsp Ping Fec Ldp Ipv4对象\n\n该函数用于为一个或多个LSP Ping Echo Request对象创建并配置基于LDP IPv4的FEC（转发等价类）对象。每个Echo Request将关联一个对应的LDP IPv4 FEC配置，并支持通过关键字参数进行批量配置。\n\nArgs：\n\n    EchoRequests (:obj:`LspPingEchoRequestConfig` 或其列表): 一个或多个Lsp Ping Echo Request对象，用于绑定FEC配置。如果传入单个对象，内部会将其转换为列表处理。\n\nKeyword Args:\n\n    Count (int): 创建的FEC对象数量，默认值：1，取值范围：1-65535。\n\n    StartAddr (str): 起始IPv4地址，默认值：\"172.0.0.1\"，取值必须是有效的IPv4地址。\n\n    PrefixLength (int): 前缀长度，默认值：24，取值范围：1-32。\n\n    Step (int): 步长，用于连续地址之间的增量，默认值：1，取值范围：1-255。\n\nReturns:\n\n    (:obj:`LspPingFecLdpIpv4PrefixConfig` 或其列表): 返回与EchoRequests一一对应的Lsp Ping Fec Ldp Ipv4对象。若输入只有一个EchoRequest，则返回单个对象；否则返回对象列表。\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${LspPing} | Create Lsp Ping | Port=${Port} |\n        | ${EchoRequest} | Create Lsp Ping Echo Request | Sessions=${LspPing} |\n        | Create Lsp Ping Fec Ldp Ipv4 | EchoRequests=${EchoRequest} |\n\nSide Effects:\n    - 对于每一个EchoRequest：\n        - 设置其'InnerLabel'属性为`EnumFECLabel.LDPIPv4`。\n        - 将生成的FEC对象以TARGET方向与EchoRequest绑定。\n        - 设置FEC对象的OperationMode为`EnumFECLabel.LDPIPv4`。\n        - 使用提供的关键字参数对FEC对象进行进一步配置。",
  "TesterLibrary.Protocol.lsp_ping.create_lsp_ping_fec_vpn_ipv4": "创建Lsp Ping Fec Vpn Ipv4对象，用于配置LSP Ping的VPN IPv4前缀FEC（转发等价类）。\n\n该函数的主要作用是为一个或多个LspPingEchoRequestConfig对象创建对应的LspPingFecVPNIpv4PrefixConfig FEC配置，并使用提供的可选参数进行配置。若传入多个EchoRequests对象，则返回对应的配置对象列表；若仅传入一个，则返回单个配置对象。\n\nArgs:\n    EchoRequests (:obj:`LspPingEchoRequestConfig` 或其组成的列表): 一个或多个LspPingEchoRequestConfig对象，代表LSP Ping的Echo Request请求控制包。每个EchoRequest将关联一个新创建的FEC配置。\n\nKeyword Args:\n    Count (int, optional): 配置对象的数量，默认值：1，取值范围：1-65535。用于指定生成的FEC条目数量。\n\n    StartAddr (str, optional): 起始IPv4地址，默认值：\"172.0.0.1\"，取值必须为有效的IPv4地址格式字符串。\n\n    PrefixLength (int, optional): 前缀长度，默认值：24，取值范围：1-32。\n\n    Step (int, optional): 步长，用于连续FEC之间的地址递增，默认值：1，取值范围：1-255。\n\n    RouteDistinguisher (str, optional): 路由标识符，用于区分不同的VPN实例，默认值：\"100:1\"。其格式需满足以下之一：\n        - uint16:uint32\n        - ipv4:uint16\n        - uint32:uint16\n        - uint16.uint16:uint16\n\nReturns:\n    :obj:`LspPingFecVPNIpv4PrefixConfig` 或其组成的列表:\n        返回与输入的EchoRequests对应的LspPingFecVPNIpv4PrefixConfig配置对象。若输入为单个EchoRequest，则返回单个对象；若输入为多个EchoRequest，则返回对象列表。\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${LspPing} | Create Lsp Ping | Port=${Port} |\n        | ${EchoRequest} | Create Lsp Ping Echo Request | Sessions=${LspPing} |\n        | Create Lsp Ping Fec Vpn Ipv4 | EchoRequests=${EchoRequest} |",
  "TesterLibrary.Protocol.lsp_ping.create_lsp_ping_fec_segment_routing": "创建Lsp Ping Fec Segment Routing对象，用于配置基于Segment Routing的FEC（Forwarding Equivalence Class）参数。\n\n该函数用于为一个或多个Lsp Ping Echo Request对象创建Segment Routing FEC配置。它封装了底层`LspPing.fec_segment_routing`方法，并支持对单个或多个EchoRequest实例进行统一配置。如果传入的是单个EchoRequest对象，则返回对应的单个FEC配置对象；如果传入的是多个EchoRequest（如列表、元组或集合），则按顺序返回对应的FEC配置对象列表。\n\n参数:\n    EchoRequests (:obj:`LspPingEchoRequestConfig` 或 iterable of :obj:`LspPingEchoRequestConfig`):\n        一个或多个EchoRequest实例，用于配置Segment Routing FEC设置。\n        每个EchoRequest必须支持 `set_relatives` 和 `edit` 方法，并应关联到有效的协议结构。\n\n关键字参数:\n    IgpProtocol (str, optional): FEC校验所使用的IGP协议，默认值：'ISIS'，可选值包括：\n\n        'OSPF'\n\n        'ISIS'\n\n    PrefixCount (int, optional): 前缀数量，默认值：1，取值范围：1 - 4294967295\n\n    PrefixAddrIncrement (int, optional): 地址步长，默认值：1，取值范围：1 - 4294967295\n\n返回值:\n    :obj:`LspPingFecSrConfig` 或 :obj:`list` of :obj:`LspPingFecSrConfig`:\n        如果传入的是单个EchoRequest，返回对应的Lsp Ping FEC Segment Routing配置对象；\n        如果传入的是多个EchoRequest，返回与之对应的Lsp Ping FEC Segment Routing对象列表，顺序保持一致。\n\n示例:\n    .. code:: RobotFramework\n\n        | ${LspPing} | Create Lsp Ping | Port=${Port} |\n        | ${EchoRequest} | Create Lsp Ping Echo Request | Sessions=${LspPing} |\n        | Create Lsp Ping Fec Segment Routing | EchoRequests=${EchoRequest} | IgpProtocol=OSPF | PrefixCount=5 |\n\n注意事项:\n    - 内部会将非迭代类型输入（例如单个EchoRequest）转换为列表以实现统一处理。\n    - 对于每个EchoRequest对象，调用底层`LspPing.fec_segment_routing`生成对应的FEC配置。\n    - 返回的配置对象可通过其setter方法或进一步的`**kwargs`进行修改。",
  "TesterLibrary.Protocol.lsp_ping.create_lsp_ping_fec_sr_prefix": "创建Lsp Ping Fec Sr Prefix对象，用于在分段路由(SR)上下文中配置LSP Ping的SR前缀FEC（转发等价类）。\n\n该函数用于为一个或多个SR上下对象创建对应的SR前缀FEC配置。如果传入单个SR对象，则返回对应的SR前缀FEC配置对象；如果传入多个SR对象（以列表、元组或集合形式），则返回相应数量的SR前缀FEC配置对象列表。该函数封装了底层`LspPing.fec_sr_prefix`方法，并统一处理单个或多个对象的调用逻辑。\n\n参数：\n\n    Srs (:obj:`LspPingFecSrConfig`): 一个或多个Lsp Ping Fec Segment Routing对象，类型可以是单个对象或者包含多个对象的列表/元组/集合。\n\n关键字参数（**kwargs）：\n\n    Prefix (str): 前缀地址，默认值：\"192.0.0.1\"，必须为有效的IPv4地址格式。\n\n    Length (int): 前缀地址长度，默认值：24，取值范围：1-32。\n\n    Algorithm (int): 算法标识符，默认值：0，取值范围：uint8（0-255）。\n\n返回值：\n\n    (:obj:`LspPingFecSrDetailConfig`): 返回一个或多个创建好的Lsp Ping Fec Sr Detail配置对象。若输入为单个SR对象，则返回单个配置对象；若输入为多个SR对象，则返回与输入顺序一致的配置对象列表。\n\n异常：\n\n    如果底层调用失败（如`renix.create_lsp_ping_fec_sr_prefix`返回False），将抛出ContinuableFailure异常。\n\n示例：\n    .. code:: RobotFramework\n\n        | ${LspPing} | Create Lsp Ping | Port=${Port} |\n        | ${EchoRequest} | Create Lsp Ping Echo Request | Sessions=${LspPing} |\n        | ${Sr} | Create Lsp Ping Fec Segment Routing | EchoRequests=${EchoRequest} |\n        | Create Lsp Ping Fec Sr Prefix | Srs=${Sr} |",
  "TesterLibrary.Protocol.lsp_ping.create_lsp_ping_fec_sr_adjacency": "创建Lsp Ping Fec Sr Adjacency对象，用于配置LSP Ping操作中的SR邻接FEC（转发等价类）信息\n\nArgs：\n\n    Srs (:obj:`LspPingFecSrConfig` 或 iterable of objects): 一个或多个Lsp Ping Fec Segment Routing对象，类型为：object / list。表示要为其创建SR邻接FEC的Segment Routing上下文或配置块。\n\nKeyword Args:\n\n    IsisSystemId (str): ISIS系统ID, 默认值：\"00:00:94:00:00:01\"，取值范围：有效的mac地址\n\n    IsisLanSystemId (str): ISIS LAN系统ID, 默认值：\"00:00:00:00:00:00\"，取值范围：有效的mac地址\n\n    IsisNeighborId (str): ISIS邻居ID, 默认值：\"00:00:94:00:00:01\"，取值范围：有效的mac地址\n\n    IsisNodeId (int): ISIS节点ID, 默认值：0, 取值范围：uint8\n\n    OspfLinkType (str): OSPF链路类型, 默认值：P2P, 取值范围：\n\n        P2P\n\n        TRANSITNETWORK\n\n        STUBNETWORK\n\n        VIRTUALLINK\n\n    OspfLinkId (str): OSPF链路ID, 默认值：\"0.0.0.0\"，取值范围：有效的ipv4地址\n\n    OspfLinkData (str): OSPF链路数据, 默认值：\"0.0.0.0\"，取值范围：有效的ipv4地址\n\n    LocalRouterId (str): 本地路由器ID, 默认值：\"192.168.1.1\"，取值范围：有效的ipv4地址\n\n    RemoteRouterId (str): 远端路由器ID, 默认值：\"192.168.1.1\"，取值范围：有效的ipv4地址\n\n    LocalInterfaceId (str): 本地接口ID, 默认值：\"0.0.0.0\"，取值范围：有效的ipv4地址\n\n    RemoteInterfaceId (str): 远端接口ID, 默认值：\"0.0.0.0\"，取值范围：有效的ipv4地址\n\nReturns:\n\n    (:obj:`LspPingFecSrDetailConfig` 或 list of LspPingFecSrDetailConfig): 返回配置好的Lsp Ping Fec Sr Detail对象或其列表。若输入单个SR对象，则返回单个；若输入多个SR对象，则返回对应数量的配置对象列表。\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${LspPing} | Create Lsp Ping | Port=${Port} |\n        | ${EchoRequest} | Create Lsp Ping Echo Request | Sessions=${LspPing} |\n        | ${Sr} | Create Lsp Ping Fec Segment Routing | EchoRequests=${EchoRequest} |\n        | Create Lsp Ping Fec Sr Ajacency | Srs=${Sr} |\n\nDescription:\n    此函数用于批量创建和配置LSP Ping操作所需的SR邻接FEC配置。它封装了 :meth:`LspPing.fec_sr_adjacency` 方法，支持对单个或多个SR对象进行统一配置。\n    提供的 `Srs` 参数可以是单个对象或可迭代的SR对象集合，所有提供的SR对象都将使用相同的关键词参数进行配置。\n    内部逻辑会将输入标准化为列表形式，并为每个SR对象调用相应的配置方法。\n    返回值类型取决于输入的 `Srs`：若输入单个对象则返回单个配置对象，若输入多个对象则返回对应的配置对象列表。",
  "TesterLibrary.Protocol.lsp_ping.edit_lsp_ping_port_config": "Edits the LSP Ping port configuration for one or more specified ports.\n\n    This function retrieves the 'LspPingPortConfig' child object associated with each provided port\n    and updates its attributes using the keyword arguments supplied. If a single port is provided,\n    it returns the updated configuration for that port directly; otherwise, it returns a list of all\n    updated configurations.\n\n    Parameters:\n        Ports (object or list of objects): A single port object or a list of port objects for which\n                                          the LSP Ping configuration needs to be edited.\n        **kwargs: Arbitrary keyword arguments representing the configuration parameters to be updated.\n                  Valid options include:\n                      - UpdateTransmitRate (int): Default value: 1000, Range: 1-10000\n                      - FrequencyPing (int): Ping test interval in seconds, Default: 60, Range: 1-2147483647\n                      - FrequencyTrace (int): Trace test interval in seconds, Default: 60, Range: 60-2147483647\n\n    Returns:\n        object or list of objects: If a single port is provided, returns the updated LspPingPortConfig\n                                   object for that port. If multiple ports are provided, returns a\n                                   list of all updated LspPingPortConfig objects.\n\n    Raises:\n        ContinuableFailure: If the operation fails, an exception is raised with a failure message.\n\n    Description:\n        - The function accepts a port or a list of ports and applies the provided configuration changes to each.\n        - Each port's 'LspPingPortConfig' child object is retrieved and modified with the given keyword arguments.\n        - If no changes are requested (i.e., `**kwargs` is empty), the function will still return the existing\n          configuration(s) without error.\n        - The function internally ensures uniform processing by converting a single port into a list if necessary.\n        - After editing, all updated configurations are returned either as a single object or a list, based on input.\n\n    Examples:\n        .. code:: RobotFramework\n\n            | Edit Lsp Ping Port Config | Ports=${Port} | FrequencyTrace=10 |",
  "TesterLibrary.Protocol.lsp_ping.start_lsp_ping": "开始发送LSP Ping消息\n\n该函数用于在提供的LspPing会话对象上启动LSP（标签交换路径）Ping操作。它封装了底层会话对象的 `start_lsp_ping()` 方法，并支持对单个或多个会话对象执行操作。\n\n参数:\n    Sessions (:obj:`LspPing` 或 list): LspPing会话对象，可以是单个对象或包含多个对象的列表、元组或集合\n\n返回值:\n    bool: 如果成功在所有提供的会话上启动LSP Ping，则返回 ``True``；否则返回 ``False``\n\n异常:\n    如果底层 `Session.start_lsp_ping()` 方法抛出异常，则该异常将通过此函数传播\n\n行为描述:\n    - 该函数首先确保传入的 `Sessions` 参数为可迭代格式\n    - 如果传入的是单个会话对象，则将其转换为包含该对象的列表\n    - 然后对每个会话调用其 `start_lsp_ping()` 方法以启动LSP Ping\n    - 如果所有会话均成功启动LSP Ping，则返回 ``True``\n    - 如果任一会话启动失败，则返回 ``False`` 并抛出 `ContinuableFailure` 异常\n\n示例:\n    .. code:: RobotFramework\n\n        | Start Lsp Ping | Sessions=${Sessions} |",
  "TesterLibrary.Protocol.lsp_ping.stop_lsp_ping": "Stops the LSP (Label Switched Path) ping operation for the given session(s).\n\nThis function allows the user to stop one or more ongoing LSP Ping sessions. It can accept either a single `LspPing` session object or a collection (list, tuple, or set) of such session objects. Internally, it ensures uniform handling of input types by converting non-collection inputs into a list and then iterates through each session to stop the LSP Ping operation.\n\nIf any underlying call to `Session.stop_lsp_ping()` fails, this function will raise a `ContinuableFailure` exception indicating that the operation did not complete successfully. Otherwise, it returns True to indicate success.\n\nParameters:\n-----------\nSessions : object or iterable\n    A single `LspPing` session object or an iterable (list, tuple, or set) containing multiple `LspPing` session objects for which the LSP ping should be stopped.\n\nReturns:\n--------\nbool\n    Returns True if all provided LSP Ping sessions were successfully stopped.\n\nRaises:\n-------\nContinuableFailure\n    If the underlying `renix.stop_lsp_ping()` call returns False, indicating failure in stopping one or more sessions.\n\nExample:\n--------\n.. code:: RobotFramework\n\n    | Stop Lsp Ping | Sessions=${Sessions} |",
  "TesterLibrary.Protocol.lsp_ping.pause_lsp_ping": "暂停发送LSP Ping消息。\n\n该函数用于暂停一个或多个LSP（Label Switched Path）Ping会话的探测消息发送。用户可以传入单个会话对象或包含多个会话对象的列表、元组或集合。如果是单个会话，函数内部会将其转换为列表进行统一处理。函数会对每个会话依次调用底层实现的 `pause_lsp_ping()` 方法以执行暂停操作。\n\n参数:\n    Sessions (Session object 或 list/tuple/set of Session): \n        一个或多个LSP Ping会话对象。类型可以是单个会话对象，也可以是包含多个会话的可迭代对象（如列表、元组或集合）。\n\n返回值:\n    bool: 始终返回 True，表示操作成功执行。\n\n异常:\n    TypeError: 如果提供的Sessions中包含无效的会话对象（由底层实现判断有效性）。\n\n示例:\n    .. code:: RobotFramework\n\n        | Pause Lsp Ping | Sessions=${Sessions} |\n\n注意:\n    该函数在底层调用 `renix.pause_lsp_ping()` 执行实际操作。如果返回值为 False，将抛出一个可继续的失败异常 (`ContinuableFailure`)，提示当前函数执行失败。",
  "TesterLibrary.Protocol.lsp_ping.resume_lsp_ping": "继续发送LSP Ping消息。\n\n该函数用于恢复一个或多个LSP Ping会话的Ping消息发送操作。它接受单个会话对象或包含多个会话对象的列表，并对每个会话调用底层实现的`resume_lsp_ping`方法以恢复操作。若所有操作成功完成，返回True；否则抛出异常并标记为可继续失败（ContinuableFailure）。\n\n参数:\n    Sessions (:obj:`LspPing` 或 list of :obj:`LspPing`)\n        LspPing会话对象或其列表。如果传入的是单个对象，则会被自动包装为列表进行统一处理。\n\n返回值:\n    bool\n        如果函数执行成功并完成LSP Ping的恢复操作，返回True；\n        否则，抛出ContinuableFailure异常，表示操作失败但测试可以继续执行其他步骤。\n\n异常:\n    该函数可能在以下情况下抛出异常：\n    - 提供的会话对象无效；\n    - 会话对象未实现`resume_lsp_ping`方法；\n    - 底层调用返回False，此时将引发ContinuableFailure异常。\n\n示例:\n    RobotFramework 示例：\n\n    .. code:: RobotFramework\n\n        | Resume Lsp Ping | Sessions=${Sessions} |",
  "TesterLibrary.Protocol.lsp_ping.pause_lsp_trace": "Pauses the LSP (Label Switched Path) trace for the given session(s).\n\nThis function sends a command to pause the transmission of LSP Trace messages for one or more LspPing sessions. It supports both single session objects and collections of sessions (e.g., list, tuple, set). Internally, if a single session is provided, it is converted into a list for uniform processing. The function then forwards the request to the backend API to pause the LSP trace operation.\n\nParameters:\n- Sessions (:obj:`LspPing` or list of :obj:`LspPing`): A single LspPing session object or a collection (list, tuple, or set) of LspPing session objects for which the LSP trace needs to be paused.\n\nReturns:\n- bool: Returns True if the LSP trace was successfully paused for all provided sessions. If the underlying API returns False, an exception (`ContinuableFailure`) is raised to indicate failure.\n\nRaises:\n- `ContinuableFailure`: If the operation fails at the backend level (e.g., communication error, invalid session state), this exception is raised to allow test frameworks like Robot Framework to handle and continue execution.\n\nExample Usage:\n.. code:: RobotFramework\n\n    | Pause Lsp Trace | Sessions=${Sessions} |\n\nNote:\nEnsure that the provided session(s) are valid and in a state where LSP tracing can be paused. Invalid or improperly configured sessions may result in failure.",
  "TesterLibrary.Protocol.lsp_ping.resume_lsp_trace": "Resumes the LSP (Label Switched Path) trace for the given session(s).\n\nThis function accepts a single session or a collection of sessions (list, tuple, or set).\nIf a single session is provided, it is converted into a list internally.\nThe function then iterates through each session and calls the `resume_lsp_trace()` method on it.\n\nParameters:\n-----------\nSessions : object or iterable of objects\n    A single session object or an iterable (list, tuple, or set) of session objects for which the LSP trace should be resumed.\n    The session objects are expected to be of type `LspPing`.\n\nReturns:\n--------\nbool\n    Returns True after successfully resuming the LSP trace for all provided sessions.\n\nRaises:\n-------\nContinuabableFailure\n    If the underlying `renix.resume_lsp_trace()` call returns False, indicating a failure condition,\n    this function raises a `ContinuableFailure` exception with a descriptive error message.\n\nNotes:\n------\n- Each session in `Sessions` is expected to have a `resume_lsp_trace()` method that performs the actual operation.\n- This function is decorated with `@abnormal_check()`, which likely checks for abnormal conditions before execution.",
  "TesterLibrary.Protocol.lsp_ping.wait_lsp_state": "等待指定的LSP（Label Switched Path）会话达到给定的状态。\n\n参数:\n-------\nSessions : object 或 object 的可迭代对象（如 list, set, tuple）\n    需要监控状态的 LSP 会话对象或多个会话集合。每个对象应为 `LspPing` 类型。\n\nState : str, 可选 (默认值: 'UP')\n    期望会话达到的目标状态。支持以下状态字符串：\n    \n        - 'DISABLE'  \n        - 'NOTSTART'  \n        - 'UP' （默认）\n        - 'DOWN'\n\n    如果未提供状态，则使用默认行为（通常为 'UP'）。\n\nInterval : int 或 float, 可选 (默认值: 1 秒)\n    检查 LSP 状态的时间间隔（以秒为单位），用于控制轮询频率。\n\nTimeOut : int 或 float, 可选 (默认值: 60 秒)\n    等待所有会话到达目标状态的最大时间（以秒为单位）。若超时前仍有会话未达到目标状态，将引发异常。\n\n返回值:\n-------\nbool\n    若所有会话在超时时间内成功达到目标状态，返回 True。\n    如果底层调用失败或部分会话未满足条件，将抛出异常，函数不会返回 False。\n\n说明:\n-------\n此函数是对底层会话对象 `wait_lsp_state` 方法的封装，简化了对一个或多个 LSP 会话进行状态等待的操作。它按照指定间隔定期检查每个会话的状态，直到全部达到目标状态或发生超时。\n\n示例:\n-------\n.. code:: RobotFramework\n\n    | Wait Lsp State | Sessions=${Sessions} | State=UP | Interval=2 | TimeOut=120 |",
  "TesterLibrary.Protocol.lsp_ping.wait_lsp_ping_state": "Waits for the specified LSP (Label Switched Path) ping session(s) to reach the desired state.\n\nThis function checks the state of one or more LSP ping sessions at regular intervals until they reach the specified target state or the timeout is reached. If a session is not in the expected state, the function will keep polling its state until either the state matches the desired one or the timeout occurs. If the timeout is reached before all sessions are in the desired state, an exception may be raised or False may be returned depending on how the underlying session logic and `abnormal_check` decorator handle timeouts.\n\nParameters:\n-----------\nSessions : object or iterable\n    A single session object or an iterable (list, set, tuple) of session objects representing \n    the LSP ping sessions to monitor. If a non-iterable is provided, it will be converted into \n    a list containing that single session.\n\nState : str or None, optional\n    The target state that the LSP ping session(s) are expected to reach. Valid values include:\n\n        IDLE\n\n        PAUSE_SEND (default)\n\n        RESUME_SEND\n\n    If None, the function may wait for a default final state, depending on the implementation of the session's `wait_lsp_ping_state` method.\n\nInterval : int or float, optional\n    The time interval (in seconds) between consecutive state checks. Defaults to 1 second.\n\nTimeOut : int, optional\n    The maximum time (in seconds) to wait for all sessions to reach the target state. Defaults to 60 seconds.\n\nReturns:\n--------\nbool\n    Returns True if all sessions reach the target state within the given timeout period.\n    If any session fails to reach the expected state within the timeout, an exception may \n    be raised due to the `@abnormal_check()` decorator, or it might return False, depending \n    on the decorator's implementation.\n\nExamples:\n---------\n.. code:: RobotFramework\n\n    | Wait Lsp Ping State | Sessions=${Sessions} | State=PAUSE_SEND | Interval=2 | TimeOut=120 |\n\nNotes:\n------\n- This function internally calls `wait_lsp_ping_state` on each session object.\n- The use of the `@abnormal_check()` decorator suggests that this function performs \n  additional validation or error handling around abnormal conditions, such as timeouts \n  or unexpected states.",
  "TesterLibrary.Protocol.lsp_ping.wait_lsp_trace_state": "等待LSP Ping会话的Trace消息达到指定状态。\n\n该函数用于等待一个或多个LSP Ping会话的Trace消息状态达到指定的目标状态。如果传入的是单个会话对象，它会被自动包装成列表以保证统一处理。函数通过轮询方式检测状态变化，并支持自定义轮询间隔和超时时间。\n\n参数:\n    Sessions (object 或 iterable): Lsp Ping会话对象，可以是单个对象或包含多个对象的可迭代结构（如 list、set、tuple）。\n    State (str, optional): 等待LSP Ping会话的Trace消息达到的目标状态，默认值为 PAUSE_SEND。支持的状态包括：\n        \n        IDLE\n        PAUSE_SEND\n        RESUME_SEND\n        \n    Interval (int 或 float, optional): 查询LSP Trace状态的时间间隔（单位：秒），默认值为 1 秒。\n    TimeOut (int 或 float, optional): 等待状态达成的最大超时时间（单位：秒），默认值为 60 秒。若在该时间内未达成目标状态，可能会抛出异常或返回错误，具体取决于底层实现。\n\n返回值:\n    bool: 如果所有会话都在规定时间内达到了目标状态，则返回 True；否则根据底层实现可能抛出异常或返回 False。\n\n异常:\n    可能会在以下情况抛出异常：\n    \n    - 某一会话未能在指定时间内达到目标状态；\n    - 提供的会话对象无效或处于非法状态。\n\n示例:\n    .. code:: RobotFramework\n\n        | Wait Lsp Trace State | Sessions=${Sessions} | State=RESUME_SEND | Interval=2 | TimeOut=120 |",
  "TesterLibrary.Protocol.lsp_ping.get_lsp_ping_session_statistic": "获取LSP Ping会话的统计信息\n\n该函数用于获取一个或多个LSP Ping会话的指定统计项结果。它封装了底层的 `_get_statictis` 方法，能够根据传入的会话对象提取其名称，并据此查询相关的统计信息。\n\nArgs:\n\n    Session (:obj:`LspPing` 或 list 或 None, optional): \n        LSP Ping会话对象或对象列表，默认为None。若提供单个会话对象，则使用其 `.Name` 属性作为标识；若提供列表，则遍历其中所有会话对象的 `.Name`。如果为None，则不进行会话过滤。\n    \n    StaItems (list 或 str 或 None, optional): \n        需要获取的统计项列表，默认为None。支持的统计项包括：\n\n            TxEchoRequest: 发送的Echo请求报文数\n            RxEchoRequest: 接收的Echo请求报文数\n            TxEchoReply:   发送的Echo响应报文数\n            RxEchoReply:   接收的Echo响应报文数\n\n        如果提供字符串，会被转换为单元素列表。如果为None，则返回所有可用统计项。\n\nReturns:\n\n    dict or pd.DataFrame or bool:\n        - 如果仅匹配到一行统计数据：返回字典，键为 `StaItems` 中的统计项，值为对应数值。\n        - 如果匹配到多行统计数据：返回 pandas DataFrame，包含所有匹配的行及其对应的统计项列。\n        - 如果没有找到匹配的统计数据：返回 False。\n\nRaises:\n\n    ContinuableFailure: 如果内部调用失败（如无匹配数据），抛出可继续执行的异常。\n\nExamples:\n\n    .. code:: RobotFramework\n\n        | @{StaItems} | Create List | TxEchoReply | RxEchoReply |\n        | Subscribe Result | Types=LspPingSessionStats |\n        | Start Protocol |\n        | Sleep | 60 |\n        | &{Result} | Get Lsp Ping Session Statistic | Session=${Session} | StaItems=@{StaItems} |\n        | Log Dictionary | ${Result} |\n\n    .. code:: Python\n\n        session = LspPing(...)  # 假设已创建会话对象\n        stats = get_lsp_ping_session_statistic(Session=session, StaItems=['TxEchoRequest', 'RxEchoReply'])\n        print(stats)  # {'TxEchoRequest': 5, 'RxEchoReply': 4}",
  "TesterLibrary.Protocol.lsp_ping.get_lsp_ping_echo_request_statistic": "获取LSP Ping Echo Request的统计信息。\n\n该函数用于查询与LSP Ping Echo Request相关的统计数据。它基于提供的会话（Session）和Echo Request对象作为过滤条件，并可指定需要获取的统计项（StaItems）。\n\n参数：\n    Session (object 或 list/set/tuple of objects, 可选): \n        LSP Ping会话对象或对象集合，用于过滤统计数据。如果为None，则不按会话进行过滤。\n        通常类型为`LspPing`的对象。\n    \n    EchoRequest (object 或 list/set/tuple of objects, 可选): \n        LSP Ping Echo Request配置对象或对象集合，用于过滤统计数据。如果为None，则不按Echo Request进行过滤。\n        通常类型为`LspPingEchoRequestConfig`的对象。\n    \n    StaItems (list, str 或 None, 可选): \n        指定要获取的统计项列表。若为字符串，将被自动转换为单元素列表。若为None，默认返回所有可用统计项。\n        支持的统计项包括：\n\n            FailCount       - 失败次数\n\n            SuccessCount    - 成功次数\n\n            FecInfo         - FEC信息\n\n            MaxPingLatency  - 最大Ping时延\n\n            AvgPingLatency  - 平均Ping时延\n\n            MinPingLatency  - 最小Ping时延\n\n            RxReturnCode    - 接收返回码\n\n返回值：\n    dict 或 pd.DataFrame:\n        - 如果只匹配到一行数据，返回一个字典，键为统计项名称，值为对应的统计值。\n        - 如果匹配到多行数据，返回一个pandas DataFrame，列对应所请求的统计项。\n        - 如果没有匹配到任何数据，返回False。\n\n异常：\n    ContinuableFailure: 如果底层调用返回False，抛出此异常。\n    TesterException: 在执行命令或从底层视图检索数据时可能引发。\n    sqlite3.Error: 如果在数据库操作中发生错误。\n    KeyError: 如果索引列名在结果DataFrame中不存在。\n\n注意事项：\n    - 该函数是封装了 `_get_statictis` 的一种特定使用方式，专门用于处理 'LspPingEchoRequestStats' 类型的统计。\n    - 内部可能会调用 `_get_statictis` 函数来处理分页、刷新统计信息等操作。\n    - 会调用对象的 `.get()` 方法以确保获取最新的数据。\n\n示例：\nRobotFramework 示例：\n\n    .. code:: RobotFramework\n\n        | @{StaItems} | Create List | FailCount | SuccessCount |\n        | Subscribe Result | Types=LspPingEchoRequestStats |\n        | Start Protocol |\n        | Sleep | 60 |\n        | &{Result} | Get Lsp Ping Echo Request Statistic | Session=${Session} | StaItems=@{StaItems} |\n        | Clear Result |\n\nPython 示例：\n\n    >>> api.get_lsp_ping_echo_request_statistic(Session=session_obj, EchoRequest=echo_request_obj, StaItems=['FailCount', 'SuccessCount'])\n    {'FailCount': 2, 'SuccessCount': 10}",
  "TesterLibrary.Protocol.lsp_ping.get_lsp_trace_echo_request_statistic": "获取LSP Trace Echo Request的统计信息\n\n该函数用于检索与LSP（Label Switched Path）追踪相关的Echo Request统计数据。它基于提供的过滤条件（如会话、Echo Request对象等）从底层系统中提取性能和状态指标。\n\n参数:\n    Session (:obj:`LspPing` 或 多个对象的集合, optional): Lsp Ping会话对象或多个会话对象的集合（如列表、集合、元组），用于按会话过滤统计信息。如果提供的是单个对象，使用其 `Name` 属性作为会话ID；如果为集合，则使用所有元素的 `Name` 属性。默认为 None，表示不按会话过滤。\n\n    EchoRequest (:obj:`LspPingEchoRequestConfig` 或 多个对象的集合, optional): Lsp Ping Echo Request配置对象或多个对象的集合（如列表、集合、元组），用于按组过滤统计信息。如果提供的是单个对象，使用其 `Name` 属性作为组ID；如果为集合，则使用所有元素的 `Name` 属性。默认为 None，表示不按组过滤。\n\n    StaItems (list or str, optional): 指定需要获取的统计项。支持的统计项包括：\n\n        FailCount\n        SuccessCount\n        FecInfo\n        MaxPingLatency\n        AvgPingLatency\n        MinPingLatency\n        RxReturnCode\n\n    如果未指定（None），则返回所有可用的统计项。如果传入字符串，将自动转换为包含该字符串的列表。\n\n返回值:\n    dict or pd.DataFrame or bool:\n        - 如果找到唯一匹配的记录：返回一个字典，键为请求的统计项（StaItems），值为其对应的统计值。\n        - 如果找到多条匹配记录：返回一个 pandas DataFrame，包含所有匹配的记录。\n        - 如果没有找到匹配记录：返回 False。\n\n异常:\n    - `TesterException`: 如果在命令执行或数据检索过程中发生错误。\n    - `sqlite3.Error`: 如果访问数据库时发生错误（例如性能统计项检索时）。\n    - `KeyError`: 如果过滤器中的列名在结果DataFrame中不存在。\n\n副作用:\n    - 内部调用 `_get_statictis` 方法，可能会通过 `.get()` 方法刷新内部状态数据。\n    - 如果启用了分页结果视图，可能会执行 `GotoResultPageCommand` 命令来导航到其他页面。\n    - 在分页切换时，会调用 `time.sleep(3)` 以确保数据一致性。\n    - 调试时会将结果DataFrame以表格形式记录日志。\n\n示例:\n    .. code:: RobotFramework\n\n        | @{StaItems} | Create List | MinPingLatency | RxReturnCode |\n        | Subscribe Result | Types=LspPingEchoRequestStats |\n        | Start Protocol |\n        | Sleep | 60 |\n        | &{Result} | Get Lsp Trace Echo Request Statistic | Session=${Session} | EchoRequest=${EchoRequest} | StaItems=@{StaItems} |\n        | Clear Result |\n\n返回示例:\n    >>> &{Result}\n    {'MinPingLatency': 10, 'RxReturnCode': 10}",
  "TesterLibrary.Protocol.mld.create_mld": "创建并配置与指定端口关联的MLD（组播侦听发现）协议实例，并更新协议对象全局映射。\n\n该函数使用提供的`Port`作为父层初始化一个新的Mld对象，并应用通过`**kwargs`传递的任何额外配置参数。新创建的Mld实例随后会被添加到一个全局字典中，该字典将协议句柄映射到其对应的协议对象。\n\n参数:\n    Port (:obj:`Port`): 测试仪表端口对象，用于标识与MLD协议实例相关联的网络接口。\n\n    **kwargs (dict, optional): 用于配置Mld实例的任意关键字参数。这些参数会直接传递给Mld构造函数，并可能包括Mld类支持的任何有效配置参数。这些参数将以两种方式进行处理：\n        - 如果Mld实例具有与关键字匹配的属性，则会更新该属性。\n        - 如果没有匹配属性且存在（或正在创建）会话对象，则会更新会话对象的属性。\n\n返回值:\n    (:obj:`Mld`): 新创建并配置好的MLD协议会话对象。\n\n副作用:\n    - 将新创建的Mld实例注册到全局`map_protocol_object`字典中，以便后续可以通过其`handle`属性进行引用。\n\n示例:\n    .. code:: RobotFramework\n\n        | Create Mld | Port=${Port} | Version=MLDV2 |",
  "TesterLibrary.Protocol.mld.edit_mld": "编辑现有的MLD协议会话对象的属性\n\n该函数用于更新提供的MLD协议会话对象（Session）的属性，通过关键字参数传递新的属性值。只有Session对象中存在的属性才会被更新，其他忽略。函数执行成功后返回True。\n\nArgs:\n\n    Session (:obj:`Mld`): 要更新的MLD协议会话对象\n\nKeyword Args:\n\n    Name (str): MLD会话名称，类型为字符串\n\n    Enable (bool): 是否启用MLD协议会话，取值范围：True或False，默认值：True\n\n    Version (str): 协议版本，取值范围：'MLDV1' 或 'MLDV2'，默认值：'MLDV1'\n\n    PackReports (bool): 是否合并报告报文，取值范围：True或False，默认值：False\n\n    InitialJoin (bool): 是否单个初始报文加入组，取值范围：True或False，默认值：False\n\n    RobustJoin (bool): 是否多个初始报文加入组，取值范围：True或False，默认值：False\n\n    RobustnessVariable (int): Robust值，取值范围：2-255，默认值：2\n\n    UnsolicitedReportInterval (int): 发送初始报文的时间间隔（单位：秒），取值范围：0-65535，默认值：10\n\n    ForceLeave (bool): 是否强制发送Leave报文，取值范围：True或False，默认值：True\n\n    TrafficClass (str): IP头部的Traffic Class字段值，格式为十六进制字符串（如\"0xc0\"），取值范围：0x0-0xff，默认值：\"0xc0\"\n\nReturns:\n\n    bool: 操作是否成功，True表示成功，False表示失败\n\nExamples:\n    .. code:: RobotFramework\n\n        | Edit Mld | Port=${Port} | Version=MLDV2 | Enable=True |",
  "TesterLibrary.Protocol.mld.wait_mld_state": "Waits until the MLD (Multicast Listener Discovery) state of each session reaches one of the specified target states.\n\nThis function is used to monitor the state of MLD sessions and blocks execution until all given sessions reach\none of the expected states or a timeout occurs. It internally calls `_wait_state` with appropriate parameters,\ndetermining whether the session objects are of type `MldProtocolConfig` or not to decide which attribute to monitor.\n\nParameters:\n-----------\nSessions : object or iterable\n    A single session object or an iterable (list, set, tuple) of session objects whose MLD state will be monitored.\n    If the session objects are of type `MldProtocolConfig`, the 'MldHostState' attribute is monitored;\n    otherwise, the default 'State' attribute is used.\n\nState : any or iterable, optional (default=['MEMBER'])\n    One or more acceptable values for the MLD state that the sessions are expected to reach.\n    If not provided, it defaults to ['MEMBER'].\n    All values are converted to strings and compared case-insensitively with the actual state values.\n\nInterval : int or str convertible to int, optional (default=1)\n    Polling interval in seconds between checks of the current MLD state of the sessions.\n\nTimeOut : int or str convertible to int, optional (default=60)\n    Maximum time in seconds to wait for all sessions to reach one of the desired MLD states before raising an exception.\n\nReturns:\n--------\nbool\n    Returns True if all sessions reach one of the desired MLD states within the timeout period.\n\nRaises:\n-------\nTesterException\n    If the timeout is reached and not all sessions have reached the expected MLD state(s).\n\nNotes:\n------\n- If the session's MLD state attribute is an Enum type, its name will be used for comparison.\n- Each session's current state is logged via logging.info if it does not match any of the expected states.\n- This function automatically handles different session types by checking if they are instances of `MldProtocolConfig`.",
  "TesterLibrary.Protocol.mld.mld_send_report": "Mld Send Report 功能用于发送 MLD 组播监听报告。\n\n该功能接收一个会话对象或多个会话对象的集合（如列表、集合或元组）。如果传入的是单个会话对象，它将被转换为列表以进行统一处理。然后，该功能会对所有会话逐一调用其 `send_report()` 方法。\n\n参数:\n\n    Sessions (Session 或 Session 对象的可迭代类型): 可以是一个单独的 Session 对象，\n                                                     或者是包含多个 Session 对象的可迭代对象。\n\n返回值:\n\n    bool: 始终返回 True，表示操作已成功完成。\n\n异常:\n\n    TypeError: 如果 Sessions 中的任意元素没有 `send_report()` 方法。\n\n示例:\n    .. code:: RobotFramework\n\n        | Mld Send Report | Sessions=${Session} |",
  "TesterLibrary.Protocol.mld.mld_send_leave": "发送MLD离开消息给指定的一个或多个会话。\n\n该函数用于向一个或多个MLD客户端会话发送离开组的消息。它可以接受单个会话对象或者包含多个会话对象的可迭代集合（如列表、集合或元组）。如果传入的是单个会话对象，它将被转换为包含该会话的列表。然后函数会依次调用每个会话对象的 `send_leave()` 方法以执行离开操作。\n\n参数:\n    Sessions (Mld session object 或 iterable of Mld session objects)\n        可以是一个单独的MLD会话对象，或者是一个包含多个MLD会话对象的可迭代集合（如 list、set 或 tuple）。\n        每个会话对象必须实现了 `send_leave()` 方法。\n\n返回值:\n    bool\n        如果所有会话的离开操作都成功执行，则始终返回 True。\n\n异常:\n    TypeError\n        如果某个会话对象未实现 `send_leave()` 方法，则会抛出类型错误。\n    ContinuableFailure\n        如果底层调用 `renix.mld_send_leave` 返回 False，表示发送离开消息失败，此时会抛出 `ContinuableFailure` 异常。\n\n示例:\n    .. code:: RobotFramework\n\n        | Mld Send Leave | Sessions=${Session} |",
  "TesterLibrary.Protocol.mld.mld_resend_report": "Mld Resend Report 函数用于触发一个或多个 MLD 会话对象重新发送报告的操作。该函数将调用每个提供的会话对象上的 `resend_report()` 方法以完成实际操作。\n\n### 参数说明：\n- **Sessions** (object 或 iterable of objects)\n    - 可以是一个单独的会话对象，也可以是多个会话对象的可迭代集合（如 list、set、tuple）。\n    - 每个会话对象必须实现 `resend_report()` 方法，否则运行时将可能引发异常。\n\n### 返回值：\n- **bool**\n    - 始终返回 `True`，表示所有会话对象的 `resend_report()` 方法已被成功调用。\n    - 如果底层调用失败（例如参数无效或方法不存在），则会抛出 `ContinuableFailure` 异常。\n\n### 功能描述：\n- 该函数内部将传入的会话对象统一转换为列表形式进行处理，以便简化后续迭代逻辑。\n- 遍历所有提供的会话对象，并调用其 `resend_report()` 方法。\n- 若底层调用返回 `False`，则抛出 `ContinuableFailure` 异常；若成功，则返回 `True`。\n\n### 示例：\n```robotframework\n| Mld Resend Report | Sessions=${Session} |\n```\n其中 `${Session}` 是一个包含一个或多个 Mld 会话对象的变量。",
  "TesterLibrary.Protocol.mld.get_mld_host_statistic": "Retrieves MLD host statistics based on the provided session(s) and statistical items.\n\nThis function wraps `_get_statictis()` to fetch MLD host-specific results. It prepares\nthe session identifiers from the input `Session` and delegates the actual data retrieval\nto `_get_statictis()`, filtering by 'MldHostBlockId'.\n\nParameters:\n    Session (object or list/set/tuple of objects, optional): \n        A session object or a collection of session objects representing MLD host blocks.\n        Each object must have a `Name` attribute used as the index for fetching statistics.\n        If None, no session filtering is applied. Defaults to None.\n    \n    StaItems (list or str or None, optional):\n        Specifies which statistical items (columns) to retrieve. If None, determined automatically\n        by querying ROM properties. If a string, it will be converted into a list. Must be a subset\n        of available properties related to MLD host statistics. Valid values include:\n\n            - MldTxFrames\n            - MldRxFrames\n            - MldRxUnknownTypes\n            - MldRxChecksumErrors\n            - MldRxLengthErrors\n\n        If not specified (None), all available items are retrieved.\n\nReturns:\n    dict or pd.DataFrame or bool:\n        - If exactly one matching row is found: Returns a dictionary with keys corresponding to `StaItems`.\n        - If multiple rows match the filters: Returns a pandas DataFrame containing filtered MLD host statistics.\n        - If no matching result is found: Returns False.\n\nRaises:\n    ContinuableFailure: If the underlying call returns False, indicating failure to retrieve statistics.\n    TesterException: May propagate exceptions raised during command execution or data retrieval.\n    sqlite3.Error: If any database access errors occur in related functions.\n    KeyError: If column names in the index do not exist in the resulting DataFrame.\n\nSide Effects:\n    - Internally modifies state by potentially refreshing data via performance-based methods.\n    - Executes navigation commands like GotoResultPageCommand if paginated results are involved.\n    - Uses time.sleep(3) to ensure data consistency when navigating pages in ResultView mode.\n    - Logs the retrieved data in tabulated format for debugging purposes.\n\nExamples:\n    .. code:: RobotFramework\n\n        | @{StaItems} | Create List | MldTxFrames | MldRxFrames |\n        | Subscribe Result | Types=MldHostResults |\n        | Start Protocol |\n        | Sleep | 60 |\n        | &{Result} | Get Mld Host Statistic | Session=${Session} | StaItems=@{StaItems} |\n        | Clear Result |",
  "TesterLibrary.Protocol.mld.get_mld_port_statistic": "获取MLD协议端口级别的统计信息，返回指定统计项的统计结果。\n\nArgs:\n    Port (:obj:`Port` 或 list/set/tuple of objects, optional): \n        测试仪表端口对象或多个端口对象的集合，用于指定要查询统计信息的端口。每个端口对象必须具有 `.Name` 属性作为查询标识。\n        如果为 None，则不进行端口过滤，默认可能返回所有端口的统计信息（取决于底层 `_get_statictis()` 的实现逻辑）。\n\n    StaItems (list or str, optional):\n        指定需要获取的 MLD 端口统计项（列名）。如果为 None，则获取所有支持的统计项。如果传入字符串，则将其视为单元素列表。\n        支持的统计项包括：\n\n            MldTxFrames: 发送的 MLD 帧总数  \n            MldRxFrames: 接收的 MLD 帧总数  \n            MldTxV1Reports: 发送的 MLDv1 报告数  \n            MldStopListenGroups: 停止监听的组播组数量  \n            MldTxV2Reports: 发送的 MLDv2 报告数  \n            MldTxV2ModeInclude: 以 INCLUDE 模式发送的 MLDv2 报告数  \n            MldTxV2ModeExclude: 以 EXCLUDE 模式发送的 MLDv2 报告数  \n            MldTxV2ModeChangeToInclude: 模式切换为 INCLUDE 的报告数  \n            MldTxV2ModeChangeToExclude: 模式切换为 EXCLUDE 的报告数  \n            MldTxV2ModeAllowNewSources: 允许新源的报告数  \n            MldTxV2ModeBlockOldSources: 阻断旧源的报告数  \n            MldRxV1Queries: 接收到的 MLDv1 查询数  \n            MldRxV2Queries: 接收到的 MLDv2 查询数  \n            MldRxGeneralQueries: 接收到的通用查询数  \n            MldRxGroupSpecificQueries: 接收到的组特定查询数  \n            MldRxGroupAndSourceSpecificQueries: 接收到的组和源特定查询数  \n            MldRxUnknownTypes: 接收到的未知类型 MLD 消息数  \n            MldRxChecksumErrors: 校验错误的 MLD 消息数  \n            MldRxLengthErrors: 长度错误的 MLD 消息数  \n\nReturns:\n    dict or pd.DataFrame or bool:\n        - 若仅匹配一行数据：返回一个字典，键为请求的统计项（来自 `StaItems`），值为其对应的数值，索引由 MLD 端口 ID 构成；\n        - 若匹配多行数据：返回 pandas DataFrame，每行对应一个 MLD 端口的统计信息；\n        - 若未找到匹配数据：返回 False。\n\nRaises:\n    ContinuableFailure: 如果内部调用失败（即返回值为 False 时），抛出可继续执行的异常；\n    TesterException: 如果在命令执行或从结果视图中检索数据时发生错误；\n    sqlite3.Error: 如果在性能相关统计检索过程中发生数据库访问错误；\n    KeyError: 如果 `Idx` 中提供了不存在于最终 DataFrame 中的列名。\n\nSide Effects:\n    - 内部调用 `_get_statictis()` 方法，该方法可能会刷新内部数据；\n    - 如果使用了分页机制，则会通过 GotoResultPageCommand 导航到正确的结果页面；\n    - 在 ResultView 模式下导航页面时，为了保证数据一致性，会调用 time.sleep(3)；\n    - 日志中可能会记录以表格形式检索到的数据用于调试目的。\n\nExamples:\n    .. code:: RobotFramework\n\n        | @{StaItems} | Create List | MldTxFrames | MldRxFrames |\n        | Subscribe Result | Types=MldPortAggregatedResults |\n        | Start Protocol |\n        | Sleep | 60 |\n        | &{Result} | Get Mld Port Statistic | Session=${Session} | StaItems=@{StaItems} |\n        | Clear Result |",
  "TesterLibrary.Protocol.mld.create_mld_querier": "创建并配置与指定端口关联的MLD（多播监听者发现）查询器协议实例。该函数初始化MldQuerier对象，设置其父级关系，并通过新创建的会话更新协议对象的全局映射。\n\n参数：\n-----------\nPort : object\n    该MldQuerier实例所属的父级或容器对象。通常这是一个端口或协议配置对象，用于管理协议栈的层次结构。它将作为`Upper`参数传递给MldQuerier构造函数。\n\n**kwargs : 任意关键字参数\n    可选的配置参数，用于对MldQuerier实例或其内部会话进行进一步配置。这些参数将动态解析：\n    - 如果MldQuerier类具有与关键字匹配的属性，则直接设置该属性。\n    - 否则，如果参数适用于内部会话对象，则会应用到会话配置中。\n\n行为说明：\n---------\n- 使用指定的`Port`创建MldQuerier实例，并通过`**kwargs`应用额外的配置。\n- 调用`set_protocol_object_map`方法，使用该实例的句柄将其注册到全局协议对象映射中。\n\n返回值：\n--------\nMldQuerier\n    创建并配置完成的MldQuerier实例，可用于进一步控制或配置关联端口上的MLD查询器行为。",
  "TesterLibrary.Protocol.mld.edit_mld_querier": "编辑MLD Querier协议会话对象的属性\n\n该函数用于更新指定MLD Querier协议会话对象(Session)的属性。它接受一系列关键字参数，这些参数对应Session对象的属性名称和新的值。如果某个关键字参数对应的属性存在于Session对象中，则更新该属性；否则忽略该参数。函数执行成功后返回True。\n\nArgs:\n\n    Session(:obj:`MldQuerier`): 要编辑的MLD Querier协议会话对象，类型为object，必须支持动态属性设置。\n\nKeyword Args:\n\n    Name (str): MLD Querier会话名称\n\n    Enable (bool): 是否启用ICMP Querier协议会话，取值范围：True或False，默认值：True\n\n    Version (str): 协议版本，取值范围：MLDV1、MLDV2，默认值：MLDV1\n\n    RobustnessVariable (int): 健壮系数，取值范围：2-255，默认值：2\n\n    Interval (int): 查询时间间隔（单位：秒），取值范围：0-4294967295，默认值：125\n\n    ResponseInterval (int): 查询响应时间间隔（单位：毫秒），取值范围：0-4294967295，默认值：10000\n\n    StartupQueryCount (int): 初始查询报文个数，取值范围：1-255，默认值：2\n\n    LastMemberQueryInterval (int): 最后成员查询时间间隔（单位：毫秒），取值范围：0-4294967295，默认值：1000\n\n    LastMemberQueryCount (int): 最后成员查询次数，取值范围：0-255，默认值：2\n\n    IPv6TrafficClassValue (str): 设置IPv6头中的TrafficClass字段值，取值范围：0x0-0xff，默认值：0x0\n\nReturns:\n\n    bool: 操作是否成功完成，返回值始终为True表示操作成功完成\n\nExamples:\n    .. code:: RobotFramework\n\n        | Edit Mld Querier | Session=${mld_querier_session} | Version=MLDV2 | IPv6TrafficClassValue=0xff |",
  "TesterLibrary.Protocol.mld.apply_mld_querier": "Applies the MLD querier configuration to the specified session(s).\n\nThis function is used to activate or configure MLD (Multicast Listener Discovery) querier settings on one or more session objects. It ensures that the provided `Sessions` argument is treated as a collection, even if it is a single session object. The function then iterates through each session and invokes its `apply()` method to apply the MLD querier configuration.\n\nParameters:\n-----------\n- Sessions : Union[object, list, set, tuple]\n    A single session object or a collection of session objects. Each session must have an `apply()` method that handles the actual configuration or activation of the MLD querier.\n\nReturns:\n--------\n- bool\n    Always returns True to indicate that the MLD querier settings were successfully applied to all provided session(s).\n\nRaises:\n-------\n- TypeError\n    If any of the provided session objects do not have an `apply()` method.\n- ContinuableFailure\n    If the underlying backend call (`renix.apply_mld_querier`) returns False, indicating a failure in applying the configuration.\n\nAdditional Information:\n-----------------------\nThis function is typically used in a test automation context where MLD querier functionality needs to be dynamically configured or re-applied during test execution. It integrates with a larger framework for managing network protocols and sessions.",
  "TesterLibrary.Protocol.mld.wait_mld_querier_state": "等待MLD Querier协议会话的状态达到指定的一个或多个目标状态。\n\nArgs:\n\n    Sessions (list (:obj:`MldQuerier`)): MLD Querier协议会话对象列表，用于监测其状态变化。\n\n    State (str or list, optional): 需要等待达到的目标状态，默认为 'UP'。支持以下状态：\n\n        NOTSTARTED\n\n        UP\n\n        可以传入单个状态字符串或包含多个状态的列表，函数会在任意一个状态匹配时视为成功。\n\n    Interval (int, optional): 检查协议会话状态的轮询间隔时间（单位：秒），默认值：1 秒。\n\n    TimeOut (int, optional): 等待状态变化的最大超时时间（单位：秒），默认值：60 秒。若在该时间内未达到目标状态，则抛出异常。\n\nReturns:\n\n    bool: 如果所有会话在超时时间内达到了指定的状态之一，则返回 True；否则抛出 TesterException 异常。\n\nRaises:\n\n    TesterException: 当超时时间内会话状态仍未达到任何期望状态时抛出。\n\nExamples:\n    .. code:: RobotFramework\n\n        | Wait Mld Querier State | Sessions=${Sessions} | State=UP | Interval=2 | TimeOut=120 |\n\nNotes:\n    - 默认情况下，函数等待会话状态变为 'UP'。\n    - 支持传入多个目标状态，只要会话状态变为其中任意一个即视为成功。\n    - 会话当前状态不匹配时会被记录日志（logging.info）。\n    - 若会话的 'State' 属性是 Enum 类型，将使用其名称进行比较。",
  "TesterLibrary.Protocol.mld.get_mld_querier_statistic": "获取MLD Querier协议会话统计结果\n\n该函数用于检索MLD（Multicast Listener Discovery）Querier协议的统计信息，支持根据指定的会话对象和统计项进行过滤查询。\n\nArgs:\n    Session (:obj:`MldQuerier` 或 list/set/tuple of objects, optional): \n        MLD Querier协议会话对象或多个会话对象的集合，默认为None表示不按会话过滤。\n        每个会话对象应具有`Name`属性，用于唯一标识对应的会话。\n\n    StaItems (list or str or None, optional):\n        需要获取的统计项目列表，默认为None表示获取所有可用统计项。可选的统计项包括：\n\n            QuerierTxFrames - 发送的数据帧数量  \n            QuerierRxFrames - 接收的数据帧数量  \n            QuerierRxUnknownTypes - 接收到未知类型的数据帧数量  \n            QuerierRxChecksumErrors - 校验和错误的数据帧数量  \n            QuerierRxLengthErrors - 数据长度错误的数据帧数量  \n\n        如果提供的是字符串，则会被转换为包含该字符串的列表。\n\nReturns:\n    dict or pd.DataFrame or bool:\n        - 如果仅匹配到一行数据：返回一个字典，键为统计项名称，值为对应的结果值。\n        - 如果匹配到多行数据：返回一个pandas DataFrame，每一行代表一个querier的统计结果。\n        - 如果没有找到任何匹配结果：返回False。\n\nRaises:\n    ContinuableFailure: 如果内部调用失败，将抛出此异常并标记当前操作为可继续执行的失败。\n\nExamples:\n    .. code:: RobotFramework\n\n        | @{StaItems} | Create List | QuerierTxFrames | QuerierRxFrames |\n        | Subscribe Result | Types=MldQuerierResults |\n        | Start Protocol |\n        | Sleep | 60 |\n        | &{Result} | Get Mld Querier Statistic | Session=${Session} | StaItems=@{StaItems} |\n        | Clear Result |\n\nNotes:\n    - 若未指定Session，则会返回所有相关querier的统计结果（DataFrame格式）。\n    - 内部可能涉及分页数据访问，并使用GotoResultPageCommand来切换页面以获取完整数据。\n    - 为了确保数据一致性，在分页处理时可能会调用time.sleep(3)。\n    - 查询结果会在日志中以表格形式输出，便于调试查看。",
  "TesterLibrary.Protocol.mld.edit_mld_port_config": "修改Mld端口配置，用于编辑一个或多个指定端口的MLD端口配置参数。\n\nArgs:\n\n    Ports (:obj:`Port` 或 Port对象列表): 需要编辑MLD端口配置的测试仪表端口对象，类型为Port对象或Port对象列表。每个Port对象必须包含一个关联的'MldPortRateConfig'子对象。\n\nKeyword Args:\n\n    MldMaximumOutputRate (int): 最大发包速率(包/秒)，取值范围：1-1000000000，默认值：100。该参数用于设置MLD协议在对应端口上的最大输出速率。\n\nReturns:\n\n    MldPortRateConfig object 或 list of MldPortRateConfig objects: 返回更新后的MLD端口配置对象。如果仅处理了一个端口，则返回单个MldPortRateConfig对象；如果处理了多个端口，则返回包含所有更新对象的列表。\n\nRaises:\n\n    ContinuableFailure: 如果操作失败，将抛出ContinuableFailure异常，并附带函数名作为错误信息的一部分。\n\nExamples:\n    .. code:: RobotFramework\n\n        | Edit Mld Port Config | Ports=${Ports} | MldMaximumOutputRate=100 |\n\n说明：\n该函数通过调用底层RenixAPI方法来实现对指定端口的MLD配置进行编辑。它首先确保输入的Ports参数被转换为列表形式，然后遍历每个端口，获取其对应的'MldPortRateConfig'子对象，并应用提供的配置更改。所有的修改后的MldPortRateConfig对象会被收集到结果列表中。若只处理一个端口，则返回单一对象；否则返回对象列表。如果底层接口返回False表示操作失败，则会抛出ContinuableFailure异常。",
  "TesterLibrary.Protocol.multicast.create_multicast_group": "创建全局组播组对象\n\n该函数用于创建并返回一个配置了指定IP版本和属性的MulticastGroup实例。它根据提供的IP版本（IPv4或IPv6）初始化组播组对象，并通过关键字参数传递其他配置参数。\n\nArgs:\n\n    Version (str): 组播组IP版本，类型为字符串，支持'ipv4'和'ipv6'（不区分大小写，默认值为'ipv4'）\n\nKeyword Args:\n\n    Count (int): 组播组数量, 类型为整数, 取值范围：0-65535, 默认值：1\n\n    Mode (str): 组播组地址模式, 类型为字符串, 默认值：RANGE, 可选值包括：\n\n        RANGE\n\n        LIST\n\n        RFC_4814\n\n    Start (str): 组播组地址起始值, 类型为IPv4或IPv6格式的字符串, 默认值分别为225.0.0.1（IPv4）或ff1e::1（IPv6）\n\n    Number (int): 组播组地址数量, 类型为整数, 取值范围：1-268435456, 默认值：1\n\n    Increment (int): 组播组地址步长, 类型为整数, 取值范围：1-268435456, 默认值：1\n\n    Prefix (int): 组播组地址掩码长度, 类型为整数, IPv4取值范围：1-32（默认值32），IPv6取值范围：1-128（默认值128）\n\nReturns:\n\n    (:obj:`MldSelectMulticastGroupCommand`): 返回创建的全局组播组对象，类型为object。根据传入的Version参数，返回的对象可以是Ipv4MulticastGroup或Ipv6MulticastGroup的实例。\n\nExamples:\n    .. code:: RobotFramework\n\n        | Create Multicast Group | Version=IPV4 | Start=225.0.1.1 | Number=20 |",
  "TesterLibrary.Protocol.multicast.create_memberships": "创建组播协议和组播组的绑定关系对象，并配置相关成员属性。\n\n该函数用于在指定的 IGMP 或 MLD 会话（Session）下创建组播组成员关系，支持多种映射模式、源地址过滤方式以及源地址列表配置。通过关键字参数传递任意数量的配置选项以定义成员行为。\n\nParameters:\n-----------\nSession : object (`Mld` or `Igmp`)\n    IGMP 或 MLD 协议会话对象，必须是 Renix API 支持的会话类型，并具备 create_memberships 方法。\n    \n**kwargs : dict\n    任意关键字参数，用于定义成员配置。包括但不限于以下可选参数：\n\n    DeviceGroupMapping : str, optional\n        主机与组播组之间的映射关系，默认值为 'MANYTOMANY'，可选值：\n        \n            - MANYTOMANY: 每个主机可以加入多个组播组，每个组播组也可以被多个主机加入。\n            - ONETOONE: 每个主机只加入一个组播组，且每个组播组仅由一个主机加入。\n            - ROUNDROBIN: 主机组播组之间轮询分配。\n\n    SourceFilterMode : str, optional\n        源地址过滤模式，默认值为 'EXCLUDE'，可选值：\n        \n            - INCLUDE: 只允许来自特定源的组播流量。\n            - EXCLUDE: 排除特定源的组播流量，即接收除指定源外的所有流量。\n\n    UserDefinedSources : bool, optional\n        是否启用自定义源地址，默认为 False。\n\n    SpecifySourcesAsList : bool, optional\n        是否将源地址配置为离散列表形式，默认为 False。\n\n    SourceAddressList : list of str, optional\n        离散源地址列表，包含 IPv4 或 IPv6 地址字符串。\n\n    NumberOfSources : int, optional\n        组播源地址数量，默认为 1，取值范围：0-16777215。\n\n    StartingSourceIp : str, optional\n        起始源地址，默认值根据地址族设定：\n        \n            - IPv4 默认：192.0.1.0\n            - IPv6 默认：2000::1\n\n    PrefixLength : int, optional\n        子网前缀长度，默认值根据地址族设定：\n        \n            - IPv4 默认：32，有效范围：1-32\n            - IPv6 默认：128，有效范围：1-128\n\n    Increment : int, optional\n        源地址递增步长，默认为 1，取值范围：0-16777215。\n\nReturns:\n--------\nobject (`MldMembershipsConfig`)\n    返回创建的组播协议与组播组绑定关系对象，可用于后续操作如查询或修改成员配置。\n\nRaises:\n-------\nContinuableFailure\n    如果底层调用失败（返回 False），则抛出可继续执行的异常。\n\nExamples:\n---------\n.. code:: RobotFramework\n\n    | ${Session} | Create Mld | Port=${Port} |\n    | Create Memberships | Session=${Session} | Start=225.0.1.1 | DeviceGroupMapping=ONETOONE | SourceFilterMode=INCLUDE | NumberOfSources=5 | StartingSourceIp=192.0.2.0 | Increment=1 |",
  "TesterLibrary.Protocol.multicast.binding_multicast_group": "将全局组播组绑定到组播协议会话上\n\n该函数用于将指定的组播组绑定到一个已经存在的 IGMP 或 MLD 会话中，通过提供的成员关系配置定义该会话应加入的组播组。此操作通常用于网络测试场景中模拟或验证组播通信行为。\n\nArgs:\n\n    Session (:obj:`Mld`, `Igmp`): 已创建并有效的 IGMP 或 MLD 协议会话对象，表示目标组播通信的客户端或服务端会话。\n\n    Memberships (:obj:`MldMembershipsConfig`): 组播成员关系配置对象，描述了会话应当加入的组播组及其相关过滤规则（如组地址和源列表）。\n\n    MulticastGroup (:obj:`MldSelectMulticastGroupCommand`): 要绑定到会话的全局组播组对象，包含组播组的 IP 地址等必要信息。\n\nReturns:\n\n    bool: 如果绑定操作成功则返回 True，否则返回 False，并在失败时抛出可继续执行的异常（ContinuableFailure）。\n\nRaises:\n\n    ContinuableFailure: 当绑定操作返回 False 表示失败时抛出，异常信息包含调用函数名。\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${Group} | Create Multicast Group | Version=IPV4 | Start=225.0.1.1 | Number=20 |\n        | ${Session} | Create Igmp | Port=${Port} | Version=IGMPV3 |\n        | ${Memberships} | Create Memberships | Session=${Session} | Start=225.0.1.1 | DeviceGroupMapping=ONETOONE |\n        | binding_multicast_group | Session=${Session} | Memberships=${Memberships} | MulticastGroup=${Group} |\n\nDescription:\n该函数通过调用底层 API 将给定的组播组与指定的会话进行绑定，使用传入的成员关系配置来确定会话所要加入的组播组及对应的过滤策略。若绑定失败，则抛出带有上下文信息的 ContinuableFailure 异常以便测试框架继续运行其他测试用例。",
  "TesterLibrary.Protocol.openflow.create_openflow_switch": "创建OpenFlow交换机协议会话对象并将其注册到全局协议对象映射中。\n\n该函数用于在指定的端口上创建一个OpenFlowSwitch实例，并通过提供的关键字参数对其进行初始化配置。所有关键字参数将被直接传递给OpenFlowSwitch构造函数，并尝试设置对应的实例属性（如果存在）。创建成功后，该OpenFlowSwitch实例会被注册到全局的协议对象映射中，以便后续通过其句柄访问。\n\n参数:\n    Port (object): 上层父对象（通常是测试仪表端口对象），用于关联此OpenFlow交换机。\n    **kwargs (dict): 任意用于配置OpenFlow交换机的关键字参数，包括以下可选参数：\n\n        TcpPort (int): TCP端口号，默认值：6633，取值范围：1-65535\n\n        ConnectionType (str): 连接类型，默认值：TCP，有效值包括：\n\n            'TCP'\n\n            'TCP_TLS'\n\n        EnableEchoRequest (bool): 是否启用Echo请求，默认值：False，有效值包括：\n\n            True\n\n            False\n\n        EchoRequestInterval (int): Echo请求间隔时间（秒），默认值：5，取值范围：0-4294967295\n\n        OpenFlowVersion (str): OpenFlow协议版本，默认值：v1_3，当前仅支持：\n\n            'v1_3'\n\n        DPID (int): 数据路径标识符（Datapath ID），默认值：0，取值范围：0-(2^64-1)\n\n        MaxBufferedPackets (int): 最大缓存数据包数量，默认值：65535，取值范围：0-4294967295\n\n        MaxTableCount (int): 最大流表数量，默认值：128，取值范围：0-255\n\n        Capabilities (int): 交换机能力位掩码，默认值：1，取值范围：0-4294967295\n\n返回值:\n    OpenFlowSwitch: 新创建并配置好的OpenFlow交换机协议会话对象。\n\n副作用:\n    - 将创建的OpenFlowSwitch实例注册到全局字典 `map_protocol_object` 中，使用其 `handle` 属性作为键。\n\n示例:\n    .. code:: RobotFramework\n\n        | Create Openflow Switch | Port=${Port} |",
  "TesterLibrary.Protocol.openflow.create_openflow_controller": "创建OpenFlow控制器协议会话对象\n\n该函数用于在指定端口上创建并配置一个OpenFlow控制器实例。它将初始化一个`OpenFlowController`类的对象，并使用提供的端口作为其上层对象。可以通过关键字参数传递额外的配置参数，这些参数将被设置为控制器实例的属性。创建完成后，该控制器会通过其handle属性注册到全局的`map_protocol_object`字典中，以便后续引用。\n\nArgs:\n    Port (:obj:`Port`): 测试仪表端口对象，表示控制器将运行在其上的物理或逻辑端口，类型为object\n\nkeyword Args:\n    TcpPort (int): TCP端口号，默认值：6633，取值范围：1-65535\n    ConnectionType (str): 连接类型，默认值：TCP，可选值包括：\n        'TCP' - 普通TCP连接\n        'TCP_TLS' - 使用TLS加密的TCP连接\n    EnableEchoRequest (bool): 是否启用Echo请求功能，默认值：False，可选值：\n        True - 启用Echo请求\n        False - 禁用Echo请求\n    EchoRequestInterval (int): Echo请求间隔时间（单位：秒），默认值：5，取值范围：0-4294967295\n    OpenFlowVersion (str): OpenFlow协议版本，默认值：v1_3，目前仅支持：\n        'v1_3' - OpenFlow 1.3版本\n    BarrierRequestTimeout (int): Barrier请求超时时间（单位：毫秒），默认值：10000，取值范围：0-4294967295\n    MaxFlowRate (int): 最大流表项下发速率，表示每秒可以处理的最大流表项数量，默认值：4294967295，取值范围：0-4294967295\n\nReturns:\n    (:obj:`OpenFlowController`): 创建并配置完成的OpenFlow控制器协议会话对象，可用于后续的OpenFlow操作\n\nRaises:\n    ContinuableFailure: 如果底层实现返回False，表示创建失败，将抛出此异常\n\nExamples:\n    .. code:: RobotFramework\n\n        | Create Openflow Controller | Port=${Port} |\n\n    .. code:: Python\n\n        controller = create_openflow_controller(Port=my_port, TcpPort=6653, ConnectionType='TCP_TLS', EnableEchoRequest=True)",
  "TesterLibrary.Protocol.openflow.wait_openflow_switch_state": "等待openflow switch协议会话达到指定状态\n\nArgs:\n\n    Sessions (list(:obj:`OpenFlowSwitch`)): openflow switch协议会话对象列表。可以是一个会话对象或多个会话对象的可迭代对象。若传入单个会话，内部将自动转换为列表。\n\n    State (str, optional): 等待openflow switch协议会话达到的目标状态。默认值为 None，表示等待任意状态变化。支持的状态包括：\n\n        IDLE\n\n        RUNNING\n\n        STOPPED\n\n        DISABLED\n\n    Interval (int or float): 查询协议会话状态的间隔时间（单位：秒）。默认值为1秒。\n\n    TimeOut (int): 等待协议会话状态的超时时间（单位：秒）。默认值为60秒。若在该时间内未达到目标状态，可能会抛出异常，具体行为取决于底层实现。\n\nReturns:\n\n    bool: 如果所有会话在超时时间内成功达到指定状态，则返回 True；否则根据底层实现可能抛出异常或返回 False。\n\nNotes:\n\n    - 该函数封装了每个会话对象的 `wait_session_state` 方法。\n    - 使用了装饰器 `@abnormal_check()`，可能会添加额外的错误检查或异常处理逻辑。\n\nExamples:\n    .. code:: RobotFramework\n\n        | Wait Openflow Switch State | Sessions=${Sessions} | State=IDLE | Interval=2 | TimeOut=120 |",
  "TesterLibrary.Protocol.openflow.wait_openflow_controller_state": "等待OpenFlow控制器会话达到指定状态。\n\n该函数用于阻塞执行，直到一个或多个OpenFlow控制器会话达到指定的目标状态，或者超时时间到达。它周期性地查询会话状态，间隔由Interval参数控制，并在所有会话达到目标状态后返回成功结果。如果在超时时间内未达到目标状态，将抛出异常。\n\n参数：\n- Sessions (list(:obj:`OpenFlowController`) or :obj:`OpenFlowController`): 一个或多个OpenFlow控制器会话对象。如果传入单个会话对象，内部会自动将其转换为列表进行统一处理。\n- State (str, optional): 要等待的会话状态。可选值包括：'IDLE', 'RUNNING', 'STOPPED', 'DISABLED'。默认值为 'RUNNING'。\n- Interval (int or float, optional): 每次检查会话状态之间的间隔时间（以秒为单位）。默认值为 1 秒。\n- TimeOut (int, optional): 等待会话状态的最大时间（以秒为单位）。如果在此时间内未达到目标状态，则抛出异常。默认值为 60 秒。\n\n返回值：\n- bool: 如果所有会话都在指定时间内达到目标状态，则返回 True。否则抛出异常（例如超时或会话异常）。\n\n示例：\n.. code:: RobotFramework\n\n    | Wait Openflow Controller State | Sessions=${Sessions} | State=IDLE | Interval=2 | TimeOut=120 |\n\n说明：\n此函数是对底层 `wait_session_state` 方法的封装，提供了一种集中监控OpenFlow控制器连接状态的方式，适用于初始化、恢复或其他需要同步的场景。",
  "TesterLibrary.Protocol.openflow.edit_controller_desc": "修改OpenFlow交换机/控制器对象的控制器描述配置。\n\n该函数用于修改一个或多个OpenFlow协议会话对象（如交换机或控制器）的控制器描述信息。支持单个对象或对象列表输入，并将提供的关键字参数传递给每个对象的`edit_controller_config`方法进行配置更新。\n\nArgs:\n\n    Sessions (object 或 iterable): 单个会话对象或者包含多个会话对象的可迭代结构（如list、set、tuple），这些对象的控制器描述将被修改。\n\nKeyword Args:\n\n    IpAddress (str): 控制器的IP地址，默认值为127.0.0.1，必须是有效的IPv4地址。\n\nReturns:\n\n    object 或 list: 如果输入为单个会话对象，则返回该会话的配置更新结果；如果输入为多个会话对象，则返回一个列表，包含每个会话的配置更新结果，顺序与输入一致。\n\nExamples:\n    .. code:: RobotFramework\n\n        | Edit Controller Desc | Sessions=${Sessions} | IpAddress=1.1.1.1 |",
  "TesterLibrary.Protocol.openflow.edit_switch_desc": "修改openflow switch / controller对象的交换机描述配置。\n\n该函数用于编辑一个或多个OpenFlow协议会话对象（switch/controller）的交换机描述信息。它封装了每个会话对象的`edit_switch_config`方法，统一处理单个或多个会话输入，并将提供的配置更改（通过关键字参数）应用到每个会话对象上。若仅处理一个会话，则返回单个结果；若处理多个会话，则返回结果列表，保持输入顺序。\n\nArgs:\n\n    Sessions (object or iterable): 一个或多个openflow switch/controller协议会话对象（类型为：list, set, tuple 或单个对象）\n\nkeyword Args:\n\n    IpAddress (str): IP地址，默认值：127.0.0.1，取值范围：有效的IPv4地址\n\n    DPID (int): 数据路径标识符（DPID），默认值：0，取值范围：0 到 2^64-1\n\nReturns:\n\n    object or list: 如果输入是单个会话对象，则返回对应的交换机描述配置结果对象；如果输入是多个会话对象，则返回结果对象的列表。\n\nRaises:\n\n    Failure: 当底层调用返回False时，抛出Failure异常，表示操作失败。\n\nExamples:\n    .. code:: RobotFramework\n\n        | Edit Switch Desc | Sessions=${Sessions} | IpAddress=1.1.1.1 |\n\nNote:\n    - 实际的配置修改由各个会话对象的 `edit_switch_config` 方法完成。\n    - 支持批量操作多个会话，并保留输入顺序于输出结果中。\n    - 返回的对象类型通常是 :obj:`OfpSwitchDescConfig` 或其子类。",
  "TesterLibrary.Protocol.openflow.openflow_start_vswitch": "启动虚拟交换机（vswitch）以进行OpenFlow协议测试。\n\n此函数用于启动一个或多个OpenFlow虚拟交换机。它接受单个会话对象或包含多个会话对象的可迭代结构（如列表、集合或元组），并为每个会话调用其`start_vswitch`方法以初始化对应的虚拟交换机。\n\n参数：\n- Sessions (object 或 iterable): 表示OpenFlow会话的对象或对象集合。如果提供的是单个会话对象，则直接对其调用`start_vswitch()`方法；如果是可迭代结构（如list、set、tuple），则遍历其中所有对象并逐个启动。每个会话对象必须具有`start_vswitch()`方法，该方法负责具体的启动逻辑。\n\n返回值：\n- bool: 操作成功时始终返回True。若在启动过程中发生错误，将抛出异常（例如通过ContinuableFailure）或记录日志，而不是返回False。\n\n说明：\n- 此函数主要用于初始化OpenFlow测试环境中的虚拟交换机。它封装了底层实现细节，并统一处理单个或多个会话的启动逻辑。\n- 如果传入的Sessions是列表或其他可迭代对象，函数会依次对每个Session执行start_vswitch操作。\n- 若任一Session的start_vswitch失败（返回False），将引发ContinuableFailure异常，表示操作未成功完成。\n\n示例：\n.. code:: RobotFramework\n\n    | Openflow Start Vswitch | Sessions=${Sessions} |",
  "TesterLibrary.Protocol.openflow.openflow_stop_vswitch": "Stops the virtual switch associated with each session in the provided Sessions.\n\nThis function processes each session object in the Sessions input, ensuring that the `stop_vswitch()` method is called on each one to stop its associated virtual switch. It supports both single session objects and iterable collections of sessions (such as lists, sets, or tuples). If any session does not have a valid `stop_vswitch()` method, a TypeError is raised. The function returns True upon successful completion.\n\nParameters:\n-----------\nSessions : object or iterable of objects\n    A single session object or an iterable (list, set, or tuple) of session objects.\n    Each session must implement the `stop_vswitch()` method which performs the actual stopping of the virtual switch.\n\nReturns:\n--------\nbool\n    Always returns True to indicate successful execution of the operation.\n\nRaises:\n-------\nTypeError\n    If any element in `Sessions` does not have the `stop_vswitch()` method.\nContinuableFailure\n    If the underlying implementation (`renix.openflow_stop_vswitch`) returns False, indicating a failure condition.\n\nNotes:\n------\n- This function is decorated with `@abnormal_check()`, which may perform additional checks or handle abnormal conditions before execution.\n- Designed for use in test automation frameworks, particularly for OpenFlow switch testing scenarios.",
  "TesterLibrary.Protocol.openflow.create_openflow_action_list": "Creates and returns an OpenFlow action list configuration object.\n\nThis function initializes an OfpActionListConfig instance with the system entry from the current Renix system instance. The action list can be further configured using optional keyword arguments passed to the function. If the creation fails, a ContinuableFailure exception is raised. Otherwise, the configured OfpActionListConfig object is returned.\n\nParameters:\n-----------\n**kwargs : dict\n    Optional keyword arguments used to configure the OpenFlow action list upon creation. Valid parameters include:\n\n    - Builtin (bool): Whether the action list is built-in. Defaults to False.\n    - IsDefault (bool): Whether the action list is the default one. Defaults to False.\n\nReturns:\n--------\nOfpActionListConfig\n    A configured OpenFlow action list object that can be used to define actions in an OpenFlow flow entry.\n\nRaises:\n-------\nContinuableFailure\n    If the creation of the OpenFlow action list fails, an exception is raised with a descriptive message.\n\nExamples:\n---------\n.. code:: RobotFramework\n\n    | Create Openflow Action List |\n    \n.. code:: RobotFramework\n\n    | Create Openflow Action List | Builtin=True | IsDefault=False |",
  "TesterLibrary.Protocol.openflow.create_openflow_action": "创建并配置OpenFlow动作对象，用于在RENIX测试框架中定义和设置OpenFlow交换机的流表项操作。\n\n**功能描述：**\n该函数用于在RENIX自动化测试框架中创建一个OpenFlow动作（`OfpActionConfig`）对象，并通过提供的参数进行配置。每个OpenFlow动作对应一种数据包处理行为，例如转发到特定端口、修改字段、丢弃等。\n\n**参数说明：**\n\n- `ActionList` (:obj:`OfpActionListConfig`)  \n  必填参数，表示当前动作所属的动作列表对象（通常是一个`OfpActionListConfig`实例）。此参数用于将新创建的动作添加到指定的列表中。\n\n- `**kwargs` 可选参数（关键字参数）用于配置具体的动作属性：\n\n  - `Type` (str)  \n    动作类型，默认值：`Output`。支持的取值包括：\n    \n    ```\n    Output, CopyTtlOut, CopyTtlIn, SetMplsTtl, DecMplsTtl, PushVlan, PopVlan,\n    PushMpls, PopMpls, SetQueue, Group, SetIPv4Ttl, DecIPv4Ttl, SetField,\n    PushPBB, PopPBB, Experimenter\n    ```\n\n  - `PortNumber` (int)  \n    端口号，默认值：1，取值范围：1 ~ 4294967295。\n\n  - `ControllerMaxLength` (int)  \n    控制器接收的数据包最大长度，默认值：128，取值范围：1 ~ 65535。\n\n  - `GroupID` (int)  \n    组ID，默认值：1，取值范围：1 ~ 4294967295。\n\n  - `QueueID` (int)  \n    队列ID，默认值：1，取值范围：1 ~ 4294967295。\n\n  - `TTL` (int)  \n    TTL值，默认值：1，取值范围：1 ~ 255。\n\n  - `Ethertype` (int)  \n    以太网类型，默认值：33024（0x8100，即VLAN标签），取值范围：1 ~ 65535。\n\n  - `FieldType` (str)  \n    字段类型，默认值：`InPort`。支持的取值包括但不限于：\n    \n    ```\n    InPort, InPhyPort, Metadata, EthDstAddr, EthSrcAddr, EthType, VlanID,\n    VlanPCP, IpDscp, IpEcn, IpProtocol, IPv4SrcAddr, IPv4DstAddr, TcpSrcPort,\n    TcpDstPort, UdpSrcPort, UdpDstPort, SctpSrcPort, SctpDstPort, ICMPv4Type,\n    ICMPv4Code, ArpOpcode, ArpSpa, ArpTpa, ArpSha, ArpTha, IPv6SrcAddr,\n    IPv6DstAddr, IPv6FlowLabel, ICMPv6Type, ICMPv6Code, IPv6NdTarget,\n    IPv6NdSll, IPv6NdTll, MplsLabel, MplsTc, MplsBos, PbbIsid, TunnelID, IPv6ExtHdr\n    ```\n\n  - `FieldValue` (list)  \n    字段值，为一个整数列表，元素取值范围为 0 ~ 255，默认为空列表 `[]`。\n\n  - `ExperimenterID` (int)  \n    厂商自定义动作的实验者ID，默认值：0，取值范围：1 ~ 4294967295。\n\n**返回值：**\n\n- :obj:`OfpActionConfig`  \n  返回创建并配置完成的OpenFlow动作对象。\n\n**示例：**\n\n```robotframework\n| Create Openflow Action | ActionList=${actions} | Type=SetField | FieldType=EthDstAddr | FieldValue=[0x00, 0x11, 0x22, 0x33, 0x44, 0x55] |\n```\n\n上述示例创建了一个“设置字段”类型的OpenFlow动作，将目标MAC地址设置为 `00:11:22:33:44:55`。",
  "TesterLibrary.Protocol.openflow.create_openflow_command_list": "创建OpenFlow命令列表\n\n该函数用于在RENIX API框架中创建并配置一个OpenFlow命令列表对象。它通过调用底层API初始化一个OfpCommandListConfig实例，并可选地通过关键字参数对命令列表进行配置。\n\nArgs:\n    **kwargs: 任意关键字参数，用于配置OpenFlow命令列表。这些参数会被直接传递给\n              OfpCommandListConfig对象的`edit`方法以进行配置。\n\nReturns:\n    OfpCommandListConfig: 一个已配置的OpenFlow命令列表对象，可用于后续操作，例如添加命令或应用配置。\n\nExamples:\n    >>> cmd_list = TesterLibrary.Protocol.openflow.create_openflow_command_list(name='MyOpenflowCmdList', description='Test command list')",
  "TesterLibrary.Protocol.openflow.create_openflow_command": "创建并配置OpenFlow命令对象\n\n该函数用于创建并配置一个OpenFlow控制器命令。它接收一个命令列表对象作为基础，并通过关键字参数提供额外的配置选项，支持设置多种OpenFlow操作类型及相关对象的引用。\n\nArgs:\n    CommandList (:obj:`OfpCommandListConfig`): OpenFlow命令列表对象，作为新创建命令的上级配置\n\nkeyword Args:\n    CmdType (str): 命令类型，默认值：AddFlow，可选值包括：\n        ConfigSwitch, ConfigTable, AddFlow, ModifyFlow, DeleteFlow,\n        AddGroup, ModifyGroup, DeleteGroup, AddMeter, ModifyMeter,\n        DeleteMeter, RoleRequest, PacketOut, Think, LoopBegin, LoopEnd\n    EnableBarrier (bool): 是否启用Barrier，默认False\n    StrictMatch (bool): 是否严格匹配流表项，默认False\n    Flags (int): 标志位，取值范围0-4294967295，默认0\n    ControllerMaxLength (int): 发送到控制器的数据最大长度，取值范围0-4294967295，默认0\n    TableID (int): 表ID，取值范围0-255，默认0\n    OutGroup (int): 输出组ID，取值范围0-4294967295，默认0\n    OutPort (int): 输出端口ID，取值范围0-4294967295，默认0\n    DesiredRole (str): 期望角色，默认Equal，可选：Equal, Master, Slave\n    GenerationID (int): 生成ID，取值范围0-(2^64-1)，默认0\n    PacketData (hex): 数据包数据（十六进制），默认空字符串\n    LoopCount (int): 循环次数，默认5，取值范围0-4294967295\n    ThinkDuration (int): 等待时间（毫秒），默认1000，取值范围0-4294967295\n    FlowEntry (:obj:`OfpFlowEntryConfig`): 关联的流表项对象\n    GroupTable (:obj:`OfpGroupTableConfig`): 关联的组表对象\n    MeterTable (:obj:`OfpMeterTableConfig`): 关联的计量表对象\n    ActionList (:obj:`OfpActionListConfig`): 关联的动作列表对象\n\nReturns:\n    :obj:`OfpControllerCommandConfig`: 配置好的OpenFlow控制器命令对象\n\nRaises:\n    ContinuableFailure: 当底层API调用失败时抛出此异常，测试可继续执行\n\nExamples:\n    .. code:: RobotFramework\n\n        | Create Openflow Command | CommandList=${commands} | CmdType=AddFlow | TableID=1 | FlowEntry=${flow_entry} |\n\n功能说明：\n    该函数会创建一个OpenFlow控制器命令，并将其添加到指定的命令列表中。支持多种类型的OpenFlow操作，\n    并允许关联流表项、组表、计量表等对象以构建完整的命令逻辑。\n    \n    支持的关键字参数分为两类：\n    1. 直接映射到命令对象属性的参数（如CmdType, EnableBarrier等）\n    2. 关联其他配置对象的参数（如FlowEntry, GroupTable等）",
  "TesterLibrary.Protocol.openflow.create_openflow_flow_table": "创建OpenFlow流表并进行配置。\n\n该函数用于创建并配置一个OpenFlow流表实例，通过提供的关键字参数对流表进行初始化设置。内部调用底层API（`renix.create_openflow_flow_table`）来实际创建流表对象，并应用传入的配置参数。如果创建失败，将抛出带有错误信息的可继续失败异常（ContinuableFailure），否则返回创建好的流表对象供后续使用。\n\nParameters:\n\n    Builtin (bool): 指定是否为内置流表，默认值：False。取值范围：\n        True\n        False\n\n    IsDefault (bool): 指定该流表是否为默认流表，默认值：False。取值范围：\n        True\n        False\n\n    ConfigId (int): 流表的唯一配置ID，默认值：1，有效取值范围：0 到 4294967295。\n\n    TableMissAction (str): 当没有匹配的流条目时采取的动作，默认值：Drop。可选值包括：\n        Drop - 丢弃数据包\n        Continue - 继续查找下一流表\n        Controller - 将数据包发送给控制器\n\nReturns:\n    OfpFlowTableConfig: 创建并配置完成的OpenFlow流表对象，可用于进一步操作或引用。\n\nExamples:\n    .. code:: RobotFramework\n\n        | Create Openflow Flow Table | ConfigId=2 | TableMissAction=Controller |\n\n该示例创建了一个ID为2、Table-miss动作为Controller的OpenFlow流表。",
  "TesterLibrary.Protocol.openflow.create_openflow_flow_entry": "创建OpenFlow流表项并配置其属性和关联关系\n\n该函数用于创建一个与指定流表关联的OpenFlow流表项（flow entry），并根据提供的参数配置其各种属性和关联对象。流表项是OpenFlow协议中用于定义数据包匹配规则和对应操作的核心结构。\n\nParameters:\n- FlowTable (:obj:`OfpCommandListConfig`): 要关联的上级流表对象，通常是流表配置类的实例\n- **kwargs: 用于配置流表项的任意关键字参数，支持以下参数：\n\n    - Priority (int): 流表项优先级，默认值：0，取值范围：0-65535\n    - IdleTimeout (int): 空闲超时时间（秒），默认值：100，取值范围：0-4294967295\n    - HardTimeout (int): 硬超时时间（秒），默认值：100，取值范围：0-4294967295\n    - Cookie (int): Cookie标识符，默认值：0，取值范围：0-(2^64-1)\n    - Flags (list of str): 标志位列表，字符串形式表示的枚举值，默认值：['SEND_FLOW_REM']，有效值包括：\n        - SEND_FLOW_REM\n        - CHECK_OVERLAP\n        - RESET_COUNTS\n        - NO_PKT_COUNTS\n        - NO_BYT_COUNTS\n    - PacketInAction (str): PacketIn事件触发后的动作，默认值：ApplyActions，有效值包括：\n        - ApplyActions\n        - AddFlow\n        - ModifyFlow\n    - FlowStreamMatch (str): 流匹配字段，默认值：\"\"\n    - InPort (int): 入端口号，默认值：1，取值范围：0-4294967295\n    - OutPort (int): 出端口号，默认值：1，取值范围：0-4294967295\n    - ActionList (:obj:`OfpActionListConfig`): 要关联的动作列表对象\n    - StreamTemplate (:obj:`StreamTemplate`): 要绑定的流量模板对象\n    - StreamChannel: 要绑定的流量通道对象\n\nReturns:\n- :obj:`OfpFlowEntryConfig`: 配置完成的OpenFlow流表项对象\n\n特殊处理说明：\n- ActionList、StreamTemplate和StreamChannel等参数通过特定方法建立关联关系，而非简单属性赋值\n- Flags参数中的字符串枚举值会被转换为对应的数值，并通过按位或运算组合成整数值进行设置\n\nRaises:\n- ContinuableFailure: 当底层实现返回False时抛出异常，表示创建失败\n\nExample:\n    .. code:: RobotFramework\n\n        | Create Openflow Flow Entry | FlowTable=${flowtable} | Priority=100 | IdleTimeout=300 | ActionList=${action_list} | Flags=['SEND_FLOW_REM','CHECK_OVERLAP']",
  "TesterLibrary.Protocol.openflow.create_openflow_instruction": "创建OpenFlow指令并关联到指定的流表项\n\n该函数用于创建并配置一个与OpenFlow流表项（FlowEntry）相关联的指令（Instruction）。通过关键字参数提供额外的配置选项，包括指令类型（Type）、元数据（Metadata）、实验者ID（ExperimenterID）等。如果提供了ActionList参数，则会将该指令与对应的动作列表建立关联。\n\nArgs:\n\n    FlowEntry (:obj:`OfpFlowEntryConfig`): 要关联的OpenFlow流表项对象，作为该指令的上级结构。\n\nkeyword Args:\n\n    Type (str, optional): 指令类型，默认值为\"ApplyActions\"，可选值包括：\n\n        GotoTable\n\n        WriteMetadata\n\n        WriteActions\n\n        ApplyActions\n\n        ClearActions\n\n        ApplyMeter\n\n        Experimenter\n\n    FlowTableID (int, optional): 流表ID，默认值为0，取值范围：0-255。\n\n    Metadata (int, optional): 元数据值，默认值为0，取值范围：0至2^64-1。\n\n    MetadataMask (int, optional): 元数据掩码，默认值为0，取值范围：0至2^64-1。\n\n    MeterID (int, optional): 计量表ID，默认值为0，取值范围：0-255。\n\n    ExperimenterID (int, optional): 实验者标识ID，默认值为0，取值范围：0-4294967295。\n\n    ActionList (:obj:`OfpActionListConfig`, optional): 要关联的OpenFlow动作列表对象。\n\nReturns:\n\n    :obj:`OfpInstructionConfig`: 配置完成的OpenFlow指令对象，已与指定流表项及可能的动作列表建立关联。\n\nRaises:\n\n    ContinuableFailure: 如果底层调用失败，则抛出可继续执行的失败异常。\n\nExamples:\n    .. code:: RobotFramework\n\n        | Create Openflow Instruction | FlowEntry=${flowentry} | Type=ApplyActions | ActionList=${action_list} |",
  "TesterLibrary.Protocol.openflow.create_openflow_match_field": "创建并配置与指定流表项关联的OpenFlow匹配域对象。\n\n该函数用于创建一个OfpMatchFieldConfig对象，并将其与提供的FlowEntry参数所代表的OpenFlow流表项进行绑定。此外，它还支持通过关键字参数传递额外的配置选项，以进一步定制匹配域对象的行为。\n\nParameters:\n- FlowEntry (:obj:`OfpFlowEntryConfig`): 必需的参数，表示匹配域将要绑定的OpenFlow流表项。\n  这个对象作为匹配域的父级上下文存在。\n- **kwargs: 可选参数，包含一系列配置选项，这些选项会直接应用于OfpMatchFieldConfig实例的edit()方法中。\n  支持的关键字参数包括：\n\n    - Type (str): 匹配域类型，默认值：InPort。可选值包括各种协议字段如EthDstAddr、IPv4SrcAddr等。\n    - Value (list): 匹配域的具体值，列表中的每个元素为0-255之间的十进制数，默认为空列表。\n    - Mask (list): 用于Value的掩码值，列表中的每个元素为0-255之间的十进制数，默认为空列表。\n    - ModifierType (str): 修改器类型，默认值：NONE，可选值包括NONE、Intra和Inter。\n    - ModifierStep (list): 修改器步长，列表中的每个元素为0-255之间的十进制数，默认为空列表。\n    - ModifierCount (int): 修改器计数，默认值：1，取值范围0-4294967295。\n\nReturns:\n- (:obj:`OfpMatchFieldConfig`): 返回一个OfpMatchFieldConfig类型的对象，表示已创建并可能已经过配置的OpenFlow匹配域对象。\n\nRaises:\n- ContinuableFailure: 如果底层实现返回False，则抛出此异常，表明操作失败。\n\nExamples:\n.. code:: RobotFramework\n\n    | Create Openflow Match Field | FlowEntry=${flowentry} | Type=EthDstAddr | Value=[0, 1, 2, 3, 4, 5] |\n\nDescription:\n函数首先使用给定的FlowEntry创建一个OfpMatchFieldConfig对象。如果提供了任何额外的配置选项（如Type、Value、Mask等），则调用OfpMatchFieldConfig对象的edit()方法应用这些配置。最终返回这个配置好的匹配域对象。如果底层实现失败，函数会抛出ContinuableFailure异常。",
  "TesterLibrary.Protocol.openflow.create_openflow_group_table": "创建OpenFlow组表配置。\n\n该函数用于在系统中创建并配置一个OpenFlow组表条目。通过关键字参数可对组表进行初始化配置，如组ID、组类型等。函数返回一个表示该组表配置的对象。\n\nKeyword Args:\n\n    Builtin (bool): 指定该组表是否为内置组表，默认值：False。取值范围：\n\n        True\n\n        False\n\n    IsDefault (bool): 指定该组表是否为默认组表，默认值：False。取值范围：\n\n        True\n\n        False\n\n    ConfigId (int): 组表的配置ID，默认值：1。取值范围：0-4294967295\n\n    Type (str): 组表的类型，默认值：All。取值范围：\n\n        All\n\n        Select\n\n        Indirect\n\n        FastFailover\n\nReturns:\n\n    (:obj:`OfpGroupTableConfig`): 返回创建并配置好的OfpGroupTableConfig对象，代表OpenFlow组表的配置。\n\nExamples:\n    .. code:: RobotFramework\n\n        | Create Openflow Group Table | ConfigId=2 | Type=Select | IsDefault=True |\n\n说明：\n该函数内部调用底层API来创建OpenFlow组表，并将传入的关键字参数用于初始配置。如果创建失败，会抛出ContinuableFailure异常；若成功，则返回配置好的OfpGroupTableConfig对象。用户可以通过此对象进一步操作或查询组表的状态和配置信息。",
  "TesterLibrary.Protocol.openflow.create_openflow_action_bucket": "创建与OpenFlow组表关联的行动桶对象，并配置其属性。\n\n该函数用于从指定的OpenFlow组表中获取或创建一个`OfpActionBucketConfig`类型的对象，并根据传入的参数配置其属性。如果提供了`ActionList`参数，该函数还会建立行动桶与指定行动列表之间的关系。\n\n### 参数说明：\n\n- **GroupTable**  \n  类型：`:obj:`OfpGroupTableConfig``  \n  描述：目标OpenFlow组表对象，从中获取或创建行动桶对象。该对象必须支持`get_children`方法以访问`OfpActionBucketConfig`类型的子对象。\n\n- **Weight** *(可选)*  \n  类型：`int`  \n  默认值：`0`  \n  取值范围：`0 - 65535`  \n  描述：设置该行动桶的权重值，用于负载均衡场景中决定流量分配比例。\n\n- **WatchGroup** *(可选)*  \n  类型：`int`  \n  默认值：`4294967295`  \n  取值范围：`0 - 4294967295`  \n  描述：监控组ID，用于Fast Failover组类型中指定该桶所依赖的组。\n\n- **WatchPort** *(可选)*  \n  类型：`int`  \n  默认值：`4294967295`  \n  取值范围：`0 - 4294967295`  \n  描述：监控端口ID，用于Fast Failover组类型中指定该桶所依赖的端口。\n\n- **ActionList** *(可选)*  \n  类型：`:obj:`OfpActionListConfig``  \n  描述：为该行动桶绑定一组动作（actions），并通过`OfpGetActionList`关系建立连接。\n\n### 返回值：\n\n- 类型：`:obj:`OfpActionBucketConfig``  \n  描述：配置完成后的OpenFlow行动桶对象。若操作失败，则抛出异常。\n\n### 异常处理：\n\n- 如果底层调用返回`False`，则会抛出`ContinuableFailure`异常，表示当前操作失败但测试可以继续执行。\n\n### 使用示例：\n\n```robotframework\n| Create Openflow Action Bucket | GroupTable=${grouptable} | Weight=100 | WatchPort=1 | ActionList=${action_list} |\n```\n\n### 后端逻辑补充说明：\n\n该函数通过调用Renix API内部接口`renix.create_openflow_action_bucket()`实现实际功能。它尝试从给定的`GroupTable`中检索第一个`OfpActionBucketConfig`对象并对其进行配置。若配置成功，则返回该对象；否则抛出异常。",
  "TesterLibrary.Protocol.openflow.create_openflow_meter_table": "创建openflow计量表\n\n该函数用于创建并配置一个OpenFlow计量表实例（OfpMeterTableConfig）。它通过传入的上下文信息初始化，并允许通过关键字参数进行进一步配置。\n\nkeyword Args:\n\n    Builtin (bool): 指定该计量表是否为内置，默认值：False，取值范围：\n\n        True\n\n        False\n\n    IsDefault (bool): 指定该计量表是否为默认，默认值：False，取值范围：\n\n        True\n\n        False\n\n    ConfigId (int): 计量表的配置ID，默认值：1，取值范围：0-4294967295\n\n    BandUnit (str): 带宽单位，默认值：kb，取值范围：\n\n        kb (千字节)\n\n        pkt (包数)\n\n    EnableBurstSize (bool): 是否启用突发大小限制，默认值：False，取值范围：\n\n        True\n\n        False\n\n    EnableStatistics (bool): 是否启用统计功能，默认值：False，取值范围：\n\n        True\n\n        False\n\nReturns:\n\n    (:obj:`OfpMeterTableConfig`): 返回一个配置好的OfpMeterTableConfig对象，表示创建的OpenFlow计量表。\n\nExamples:\n    .. code:: RobotFramework\n\n        | Create Openflow Meter Table | ConfigId=2 | BandUnit=pkt | EnableBurstSize=True",
  "TesterLibrary.Protocol.openflow.create_openflow_meter_band": "创建与指定OpenFlow计量表关联的计量带宽（Meter Band）对象，并对其进行配置。\n\n该函数用于从提供的MeterTable中获取第一个'OfpMeterBandConfig'类型的子对象，并使用传入的关键字参数对它进行配置。\n\n参数:\n    MeterTable (:obj:`OfpMeterTableConfig`): 一个包含OpenFlow计量表配置的对象，必须支持get_children方法以检索关联的计量带宽对象。\n\n关键字参数:\n    Type (str): 带宽类型，默认值：Drop，可选值包括：\n\n        Drop - 丢弃超过速率的数据包\n\n        DscpRemark - 根据DSCP值标记数据包\n\n        Experimenter - 实验者自定义行为\n\n    Rate (int): 每秒允许的数据包速率，默认值：100，取值范围：0-4294967295\n\n    BurstSize (int): 突发流量大小，默认值：10，取值范围：0-4294967295\n\n    PrecLevel (int): 丢弃优先级等级，默认值：1，取值范围：0-255\n\n    ExperimenterID (int): 实验者ID，默认值：0，取值范围：0-4294967295\n\n返回值:\n    (:obj:`OfpMeterBandConfig`): 配置完成的OpenFlow计量带宽对象，可用于后续操作或验证。\n\n示例:\n    .. code:: RobotFramework\n\n        | Create Openflow Meter Band | MeterTable=${MeterTable} |\n\n注意事项:\n    如果底层API调用失败，将抛出ContinuableFailure异常。",
  "TesterLibrary.Protocol.openflow.create_openflow_queue": "创建并配置一个OpenFlow队列对象，用于在网络测试中进行流量控制。\n\n该函数通过调用底层RENIX API初始化一个 `OfpQueueConfig` 实例，并允许通过关键字参数对队列的属性进行可选配置。这些配置参数会通过 `edit` 方法应用到队列配置中。\n\nKeyword Args:\n    port (str, optional): 要关联此队列的端口标识符。\n    queue_id (int, optional): 队列的唯一标识符（Queue ID），默认为1。\n    min_rate (int, optional): 为此队列保证的最小速率（单位：kbps）。\n    max_rate (int, optional): 此队列允许的最大速率（单位：kbps）。\n    Builtin (bool): 是否为内置队列，默认值：False。\n    IsDefault (bool): 是否为默认队列，默认值：False。\n    ConfigId (int): 队列配置ID，默认值：1，取值范围0-4294967295。\n\nReturns:\n    OfpQueueConfig: 创建并配置好的 `OfpQueueConfig` 对象，代表一个OpenFlow队列。该对象可用于后续操作或绑定到特定端口以进行流量管理。\n\nRaises:\n    ContinuableFailure: 如果队列创建失败，则抛出此异常，包含错误信息。\n\nExamples:\n    .. code:: RobotFramework\n\n        | Create Openflow Queue | queue_id=2 | min_rate=1000 | max_rate=5000 | port=Port1 |\n\nDescription:\n    该函数作为工厂方法，用于在网络测试场景中创建和配置OpenFlow队列。它封装了底层API的调用逻辑，支持灵活配置队列参数，以便模拟不同网络环境下的服务质量(QoS)策略。",
  "TesterLibrary.Protocol.openflow.create_openflow_queue_property": "创建OpenFlow队列属性并关联到指定的队列对象。\n\n参数:\n    Queue (:obj:`OfpQueueConfig`): 要关联的OpenFlow队列配置对象，作为该队列属性的上层/父对象。\n    **kwargs: 可选关键字参数，用于配置OpenFlow队列属性的具体参数。这些参数将直接传递给OfpQueuePropertyConfig实例的edit()方法进行配置。支持以下可选参数：\n\n        Type (str): 队列属性类型，默认值：'MinRate'，可选值包括：\n            \n            'MinRate' - 最小速率限制\n            \n            'MaxRate' - 最大速率限制\n            \n            'Experimenter' - 厂商自定义属性\n\n        Rate (int): 速率值（单位：1/1000），默认值：100，取值范围：0 到 4294967295。\n\n        ExperimenterID (int): 厂商ID（当Type为Experimenter时有效），默认值：0，取值范围：0 到 4294967295。\n\n        ExperimenterData (list): 厂商自定义数据（当Type为Experimenter时有效），默认值：空列表([])，取值范围：列表元素为0到255之间的整数。\n\n返回值:\n    :obj:`OfpQueuePropertyConfig`: 创建并配置完成的OpenFlow队列属性对象。\n\n异常:\n    如果底层调用失败，则抛出ContinuableFailure异常。\n\n描述:\n    此函数用于创建一个OfpQueuePropertyConfig对象，并将其与提供的Queue对象关联。如果通过**kwargs提供了额外的配置参数，这些参数将被应用到OfpQueuePropertyConfig实例上。最终返回配置好的OfpQueuePropertyConfig对象。\n\n示例:\n    .. code:: RobotFramework\n\n        | Create Openflow Queue Property | Queue=${Queue} | Type=MinRate | Rate=200 |",
  "TesterLibrary.Protocol.openflow.get_openflow_controller_statistic": "获取OpenFlow控制器的统计信息。\n\n该函数用于从一个或多个OpenFlow控制器中检索指定的统计项目。它支持多种统计项，并根据输入参数对控制器进行过滤。若未指定具体的控制器，则默认不进行过滤。\n\n### 参数说明：\n\n- **Controller** (:obj:`OpenFlowController` 或 list/tuple/set of :obj:`OpenFlowController`, optional):  \n  指定要查询统计信息的一个或多个OpenFlow控制器对象。每个控制器对象必须包含 `Name` 属性，用于标识对应的控制器。  \n  如果为 None（默认值），则不按控制器名称过滤结果。  \n\n- **StaItems** (list or str, optional):  \n  指定需要查询的统计项列表。如果为 None（默认值），则返回所有可用的统计项。  \n  若传入字符串，会自动将其转换为包含单个元素的列表。  \n  支持的统计项包括：  \n    - Duration  \n    - ConnectedSwitchCount  \n    - BarrierRequestCount  \n    - BarrierReplyCount  \n    - BarrierRequestTimeoutCount  \n    - BarrierRemainingCount  \n    - LastBarrierResponseTime  \n    - MissPacketInCount  \n    - MatchPacketInCount  \n    - TotalPacketOutCount  \n    - AddFlowCount  \n    - ModifyFlowCount  \n    - DeleteFlowCount  \n    - FlowModErrorCount  \n    - FlowRemovedCount  \n    - AddGroupCount  \n    - ModifyGroupCount  \n    - DeleteGroupCount  \n    - GroupModErrorCount  \n    - AddMeterCount  \n    - ModifyMeterCount  \n    - DeleteMeterCount  \n    - MeterModErrorCount  \n    - RoleRequestCount  \n    - RoleReplyCount  \n\n### 返回值：\n\n- **dict**: 当仅匹配到一条记录时，返回一个字典，键为请求的统计项名称，值为对应的统计值。\n- **pandas.DataFrame**: 当匹配到多条记录时，返回一个 DataFrame，每行代表一个控制器的统计信息，列对应请求的统计项。\n- **False**: 当没有匹配到任何记录时返回 False。\n\n### 示例：\n\n```robotframework\n| Get Openflow Controller Statistic | Controller=${Controller} | StaItems=@{StaItems} |\n```\n\n### 异常处理：\n\n- 如果内部调用失败或数据检索过程中发生错误，可能抛出如下异常：\n  - `TesterException`: 命令执行失败或视图访问错误。\n  - `sqlite3.Error`: 数据库访问错误（如分页加载或性能相关统计获取时）。\n  - `KeyError`: 过滤条件中的列名在结果 DataFrame 中不存在。\n\n### 其他说明：\n\n- 本函数底层调用 `_get_statictis` 方法，将控制器对象转换为其名称后作为索引传入。\n- 在涉及分页结果的情况下，可能会执行 `GotoResultPageCommand` 等命令。\n- 查询结果会被日志记录并以表格形式输出，便于调试。",
  "TesterLibrary.Protocol.openflow.get_openflow_switch_statistic": "获取OpenFlow交换机的统计信息。\n\n该函数用于检索指定OpenFlow交换机的统计信息。它基于提供的统计项（列）查询一个或多个交换机的数据，并根据匹配的交换机数量返回不同的结果格式。如果未指定统计项，则会查询所有可用属性。\n\n### 参数\n\n- **Switch** (`object`, `list`, `set`, `tuple` 或 `None`)  \n  指定要查询统计信息的一个或多个交换机对象。  \n  - 如果为 `None`，则不指定具体交换机（可能返回所有交换机的信息）。  \n  - 如果是包含 `Name` 属性的对象，则使用该名称进行查询。  \n  - 如果是对象列表、集合或元组，则提取每个对象的 `Name` 构成名称列表进行查询。\n\n- **StaItems** (`list`, `str` 或 `None`)  \n  指定需要获取的统计项（列名）。  \n  - 如果为 `None`，则查询所有可用属性。  \n  - 如果是字符串，则将其转换为只包含该字符串的列表。  \n  - 支持的统计项包括：\n\n    - Duration\n    - DPID\n    - ControllerRole\n    - CurrentGenerationID\n    - BarrierRequestCount\n    - BarrierReplyCount\n    - BarrierRequestTimeoutCount\n    - BarrierRemainingCount\n    - LastBarrierResponseTime\n    - MissPacketInCount\n    - MatchPacketInCount\n    - TotalPacketOutCount\n    - AddFlowCount\n    - AddFlowRate\n    - ModifyFlowCount\n    - ModifyFlowRate\n    - DeleteFlowCount\n    - DeleteFlowRate\n    - FlowModErrorCount\n    - FlowRemovedCount\n    - AddFlowSetupTime\n    - AddGroupCount\n    - AddGroupRate\n    - ModifyGroupCount\n    - ModifyGroupRate\n    - DeleteGroupCount\n    - DeleteGroupRate\n    - GroupModErrorCount\n    - AddMeterCount\n    - AddMeterRate\n    - ModifyMeterCount\n    - ModifyMeterRate\n    - DeleteMeterCount\n    - DeleteMeterRate\n    - MeterModErrorCount\n    - RoleRequestCount\n    - RoleReplyCount\n\n### 返回值\n\n- **dict**: 当恰好匹配到一个交换机时，返回一个字典，键为请求的统计项，值为对应的值。\n- **pandas.DataFrame**: 当匹配到多个交换机时，返回一个包含各交换机统计信息的表格。\n- **False**: 当没有匹配到任何交换机时返回 `False`。\n\n### 异常\n\n- **TesterException**: 在执行命令或检索数据过程中可能发生并抛出此异常。\n- **sqlite3.Error**: 如果在相关函数中发生数据库访问错误。\n- **KeyError**: 如果过滤条件中的列名在结果 DataFrame 中不存在。\n\n### 副作用\n\n- 内部可能会调用对象的 `.get()` 方法以刷新数据。\n- 可能会执行分页导航命令如 `GotoResultPageCommand` 来处理分页结果。\n- 日志中会记录结果的 DataFrame，用于调试目的。\n\n### 示例\n\n```robotframework\n| Get Openflow Switch Statistic | Switch=${Switch} | StaItems=@{StaItems} |\n```",
  "TesterLibrary.Protocol.ospfv2.create_ospf": "创建OSPFv2协议会话对象\n\n该函数用于在指定的端口上创建并初始化一个OSPFv2协议配置。它实例化一个OspfRouter对象，并允许通过关键字参数设置额外的配置属性。创建完成后，该协议对象会使用其句柄作为键注册到全局映射中，以便后续引用。\n\nArgs:\n\n    Port (:obj:`Port`): 测试仪表端口对象，表示运行OSPFv2协议的接口或端口，类型为object\n\nKeyword Args:\n\n    Name (str): OSPFv2协议会话名称，类型为字符串，默认值：由系统自动生成\n\n    Enable (bool): 是否使能OSPFv2协议会话，类型为布尔值，默认值：True\n\n    AreaId (str): 区域ID，格式为IPv4地址形式，取值范围：0.0.0.0至255.255.255.255，默认值：0.0.0.0\n\n    EnableBfd (bool): 是否启用BFD快速故障检测机制，类型为布尔值，默认值：False\n\n    NetworkType (str): 网络类型，可选值为Broadcast（广播）或P2P（点对点），默认值：Broadcast\n\n    Priority (int): 路由器优先级，用于DR/BDR选举，取值范围：0-255，默认值：0\n\n    Cost (int): 接口路径开销，取值范围：1-65535，默认值：10\n\n    AuthenticationType (str): 认证类型，可选值：None、Simple 或 MD5，默认值：None\n\n    Password (str): 简单认证密码，类型为字符串，默认值：\"Xinertel\"\n\n    Md5KeyId (int): MD5认证使用的密钥ID，取值范围：0-255，默认值：1\n\n    Options (list): 支持的选项列表，合法值包括：\n\n        NONTBIT\n\n        TOSBIT\n\n        EBIT\n\n        MCBIT\n\n        NPBIT\n\n        EABIT\n\n        DCBIT\n\n        OBIT\n\n        DNBIT\n\n        默认值：['NONTBIT', 'EBIT']\n\n    EnableOspfv2Mtu (bool): 是否启用OSPF MTU校验，类型为布尔值，默认值：True\n\n    EnableGracefulRestart (bool): 是否启用平滑重启功能，类型为布尔值，默认值：False\n\n    GracefulRestartReason (str): 平滑重启的原因，可选值：UNKNOWN、SOFTWARE、RELOADORUPGRADE、SWITCH，默认值：UNKNOWN\n\n    EnableViewRoutes (bool): 是否允许查看路由表信息，类型为布尔值，默认值：False\n\n    HelloInterval (int): 发送Hello报文的时间间隔（单位：秒），取值范围：0-65535，默认值：10\n\n    RouterDeadInterval (int): 路由器失效时间间隔（单位：秒），取值范围：0-4294967295，默认值：40\n\n    LsaRetransInterval (int): LSA重传时间间隔（单位：秒），取值范围：0-4294967295，默认值：5\n\n    LsaRefreshTime (int): LSA刷新时间间隔（单位：秒），取值范围：1-1800，默认值：1800\n\n    EnableSrManagement (bool): 是否启用Segment Routing管理功能，类型为布尔值，默认值：False\n\nReturns:\n\n    (:obj:`OspfRouter`): 创建的OSPFv2协议会话对象，可用于后续操作和查询，类型为object\n\nSide Effects:\n\n    - 通过调用 `set_protocol_object_map` 方法，将创建的 OspfRouter 实例以它的 `handle` 为键注册到全局 `map_protocol_object` 字典中\n\nExamples:\n    .. code:: RobotFramework\n\n        | Create Ospf | Port=${Port} | Name=MyOSPF | AreaId=1.1.1.1 | Enable=True | AuthenticationType=MD5 | Password=Secret123 | Md5KeyId=1 |",
  "TesterLibrary.Protocol.ospfv2.edit_ospf": "编辑OSPFv2协议会话对象的配置参数。\n\n该函数用于修改一个或多个OSPFv2协议会话对象的属性。它通过调用底层API，将提供的关键字参数作为属性-值对应用到每个会话对象上，从而实现对OSPF相关设置的动态更新。\n\nArgs:\n\n    Session (:obj:`OspfRouter` 或 list): 一个OSPFv2协议会话对象，或者包含多个会话对象的列表。如果传入的是单个会话对象，它会被自动封装成列表以便统一处理。\n\nKeyword Args:\n\n    Name (str): OSPFv2会话名称。\n\n    Enable (bool): 是否启用该OSPFv2会话，默认为True。\n\n    AreaId (str): 区域ID，取值范围为0.0.0.0至255.255.255.255，默认为0.0.0.0。\n\n    EnableBfd (bool): 是否启用BFD（双向转发检测），默认为False。\n\n    NetworkType (str): 网络类型，可选Broadcast（广播）或P2P（点对点），默认为Broadcast。\n\n    Priority (int): 路由器优先级，取值范围0~255，默认为0。\n\n    Cost (int): 接口开销值，取值范围1~65535，默认为10。\n\n    AuthenticationType (str): 认证类型，可选None、Simple或MD5，默认为None。\n\n    Password (str): 认证密码，默认为\"Xinertel\"。\n\n    Md5KeyId (int): MD5密钥编号，取值范围0~255，默认为1。\n\n    Options (list): LSA选项列表，支持以下选项：\n\n        NONTBIT\n\n        TOSBIT\n\n        EBIT\n\n        MCBIT\n\n        NPBIT\n\n        EABIT\n\n        DCBIT\n\n        OBIT\n\n        DNBIT\n\n        默认值为['NONTBIT', 'EBIT']。\n\n    EnableOspfv2Mtu (bool): 是否启用OSPF MTU协商，默认为True。\n\n    EnableGracefulRestart (bool): 是否启用平滑重启功能，默认为False。\n\n    GracefulRestartReason (str): 平滑重启原因，可选值包括UNKNOWN、SOFTWARE、RELOADORUPGRADE、SWITCH，默认为UNKNOWN。\n\n    EnableViewRoutes (bool): 是否启用查看路由表功能，默认为False。\n\n    HelloInterval (int): Hello报文发送间隔（单位：秒），取值范围0~65535，默认为10。\n\n    RouterDeadInterval (int): 路由器失效时间（单位：秒），取值范围0~4294967295，默认为40。\n\n    LsaRetransInterval (int): LSA重传间隔（单位：秒），取值范围0~4294967295，默认为5。\n\n    LsaRefreshTime (int): LSA刷新间隔（单位：秒），取值范围1~1800，默认为1800。\n\n    EnableSrManagement (bool): 是否启用SR（Segment Routing）管理，默认为False。\n\nReturns:\n\n    bool: 如果操作成功完成则返回True，否则抛出ContinuableFailure异常。\n\nExamples:\n    .. code:: RobotFramework\n\n        | Edit Ospf | Session=${Session} | AreaId=1.1.1.1 | NetworkType=P2P | Enable=False |",
  "TesterLibrary.Protocol.ospfv2.create_ospf_router_lsa": "创建OSPFv2 Router LSA对象，用于在OSPFv2协议中生成Router类型的链路状态通告（LSA）。\n\n该函数通过提供的会话对象调用底层方法 `create_router_lsa`，并传入配置参数来创建Router LSA。函数使用 `@abnormal_check()` 装饰器处理执行过程中可能发生的异常情况。\n\nArgs:\n    Session (:obj:`OspfRouter`): 一个OSPFv2协议会话对象，必须包含用于创建Router LSA的 `create_router_lsa` 方法。\n\nKeyword Args:\n    Name (str): 创建的OSPFv2 Router LSA的名称，默认由系统自动生成。\n\n    Enable (bool): 是否启用该LSA。取值范围：True 或 False，默认值：True。\n\n    AdvertisingRouterId (str): 通告路由器ID，表示最初发布该LSA的路由器ID。\n        取值范围：IP地址格式（0.0.0.0 到 255.255.255.255），默认值：\"192.0.0.1\"。\n\n    RouterType (list): 路由器类型，定义该路由器的角色或能力。支持以下选项：\n        NONTBIT (无特殊角色)\n        ABR (区域边界路由器)\n        ASBR (自治系统边界路由器)\n        VLE (虚拟链路端点)\n        默认值：[\"NONTBIT\"]。\n\n    Options (list): OSPF LSA选项标志位，用于指定某些功能或行为。支持以下标志位：\n        NONTBIT, TOSBIT, EBIT, MCBIT, NPBIT, EABIT, DCBIT, OBIT, DNBIT。\n        默认值：[\"NONTBIT\", \"EBIT\"]。\n\n    Age (int): LSA的生存时间（以秒为单位），表示LSA在网络中的老化程度。\n        取值范围：0-3600，默认值：0。\n\n    SequenceNumber (int): LSA的序列号，用于标识LSA的新旧版本。\n        取值范围：0x1 到 0xFFFFFFFF，默认值：0x80000001。\n\n    Checksum (bool): 是否启用校验和验证。取值范围：True 或 False，默认值：True。\n\nReturns:\n    (:obj:`Ospfv2RouterLsaConfig`): 返回创建成功的OSPFv2 Router LSA配置对象，具体类型和结构取决于底层实现。\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${Session} | Create Ospf | Port=${Port} |\n        | Create Ospf Router Lsa | Session=${Session} | Age=20 |\n\nDescription:\n    该函数用于在网络测试或模拟环境中动态生成OSPFv2 Router LSA，常用于验证OSPF协议的行为及网络拓扑构建。\n    它封装了底层会话对象的 `create_router_lsa` 方法，并提供统一的接口供上层调用。\n    若创建失败，将抛出ContinuableFailure异常；若成功，则返回LSA配置对象。",
  "TesterLibrary.Protocol.ospfv2.create_ospf_router_lsa_link": "创建OSPFv2 Router LSA Link对象，用于配置与指定Router LSA关联的路由器链路。\n\n该函数用于创建并配置一个与给定OSPFv2 Router LSA（链路状态通告）相关联的路由器链路。可以通过关键字参数配置链路的各种属性。如果提供了“LinkType”参数，它将被转换为相应的枚举值后再应用。其他参数则直接应用于配置对象。\n\n参数：\n\n- **RouterLsa** (:obj:`Ospfv2RouterLsaConfig`)：要绑定新链路的父级OSPFv2 Router LSA对象。\n\n关键字参数（可选）：\n\n- **Name** (str)：创建的OSPFv2 Router LSA Link的名称。\n- **Enable** (bool)：是否启用该链路，默认为True。\n- **LinkType** (str)：链路类型，默认为\"P2P\"，支持选项包括：\n  - P2P\n  - TRANSITNETWORK\n  - STUBNETWORK\n  - VIRTUALLINK\n- **LinkId** (str)：链路状态ID，取值范围为IP地址格式（0.0.0.0到255.255.255.255），默认值为192.0.0.1。\n- **LinkData** (str)：链路数据，取值范围同上，默认值为255.255.255.0。\n- **Metric** (int)：链路的度量值（开销），取值范围为0到65535，默认值为1。\n\n返回值：\n\n- 返回一个 :obj:`Ospfv2RouterLsaLinksConfig` 类型的对象，表示创建并配置好的OSPFv2 Router LS链路。\n\n示例：\n\n.. code:: RobotFramework\n\n    | ${Session} | Create Ospf | Port=${Port} |\n    | ${RouterLsa} | Create Ospf Router Lsa | Session=${Session} | Age=20 |\n    | Create Ospf Router Lsa Link | RouterLsa=${RouterLsa} | Metric=65535 |",
  "TesterLibrary.Protocol.ospfv2.create_ospf_network_lsa": "创建OSPFv2 Network LSA对象\n\n该函数用于创建一个OSPFv2 Network LSA（链路状态通告），用于描述广播或NBMA网络段上的路由器集合。它通过提供的会话对象调用底层实现方法，封装了LSA的创建过程，并提供配置参数设置。\n\nArgs:\n\n    Session (:obj:`OspfRouter`): 一个活动的OSPFv2协议会话对象，用于提供与底层网络栈交互的上下文和方法。\n        必须包含 `create_network_lsa` 方法以支持LSA的实际创建。\n\nKeyword Args:\n\n    Name (str): 创建的Network LSA对象的名称，类型为字符串。\n\n    Enable (bool): 是否启用该LSA，默认值为True。\n\n    AdvertisingRouterId (str): 最初发布该LSA的路由器ID，格式为IP地址字符串，取值范围0.0.0.0到255.255.255.255，默认值1.1.1.1。\n\n    DrIpAddress (str): 指定DR（指定路由器）的IP地址，格式同上，默认值0.0.0.0。\n\n    PrefixLength (int): 子网掩码长度，表示网络前缀的有效位数，取值范围1到32，默认值24。\n\n    Options (list): 可选功能标志列表，默认值为[NONTBIT, EBIT]，可选的选项包括：\n\n        NONTBIT: 不转发未识别LSA\n\n        TOSBIT: 支持TOS路由\n\n        EBIT: 外部路由能力\n\n        MCBIT: 组播能力\n\n        NPBIT: NSSA区域支持\n\n        EABIT: 接收外部属性LSA\n\n        DCBIT: 按需电路支持\n\n        OBIT: 支持Opaque LSA\n\n        DNBIT: Down Bit标志\n\n    Age (int): LSA的老化时间（单位秒），取值范围0到3600，默认值0。\n\n    SequenceNumber (int): LSA的序列号，采用十六进制表示，取值范围0x1到0xFFFFFFFF，默认值0x80000001。\n\n    Checksum (bool): 是否启用校验和验证，默认值True。\n\nReturns:\n\n    (:obj:`Ospfv2NetworkLsaConfig`): 创建成功的OSPFv2 Network LSA配置对象，通常包含LSA标识符、状态信息及配置数据。\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${Session} | Create Ospf | Port=${Port} |\n        | Create Ospf Network Lsa | Session=${Session} | Age=20 |\n\nRaises:\n    ContinuableFailure: 如果底层实现返回False，则抛出此异常并附带失败原因消息。",
  "TesterLibrary.Protocol.ospfv2.create_ospf_network_atch_router": "创建OSPFv2 Network LSA Atch Router对象\n\n该函数用于创建一个与指定OSPFv2 Network LSA关联的网络附加路由器（Network-Attached Router）配置对象，并可选地对其进行初始配置。\n\nArgs:\n\n    NetworkLsa (:obj:`Ospfv2NetworkLsaConfig`): 测试仪表中表示OSPFv2 Network LSA的对象，作为新创建的网络附加路由器的父上下文。该参数必须是一个有效的Network LSA对象，代表OSPF域中的链路状态信息。\n\nKeyword Args:\n\n    Name (str): 创建的OSPFv2 Network LSA Atch Router的名称，类型为字符串，默认值由系统自动生成。\n\n    Enable (bool): 是否启用该网络附加路由器，类型为布尔值，取值范围：True 或 False，默认值：True。\n\n    AttachedRouter (str): 附加路由器的IP地址，类型为字符串，取值范围：0.0.0.0 - 255.255.255.255，默认值：0.0.0.0。\n\nReturns:\n\n    (:obj:`Ospfv2NetworkAtchRouterConfig`): 表示OSPFv2网络附加路由器配置的对象，类型为object，包含所创建和配置的Network Atch Router实例。\n\nRaises:\n\n    ContinuableFailure: 如果底层调用失败，则抛出可继续执行的异常，并附带相应的错误信息。\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${Session} | Create Ospf | Port=${Port} |\n        | ${NetworkLsa} | Create Ospf Network Lsa | Session=${Session} | Age=20 |\n        | Create Ospf Network Lsa Atch Router | NetworkLsa=${NetworkLsa} | Metric=65535 |",
  "TesterLibrary.Protocol.ospfv2.create_ospf_summary_lsa": "创建OSPFv2 Summary LSA对象\n\n该函数用于在指定的OSPFv2会话中创建一个Summary LSA（链路状态通告）配置。Summary LSA用于在OSPF的不同区域之间传播汇总路由信息，从而减少链路状态数据库的大小并优化区域间的路由。\n\nArgs:\n\n    Session (:obj:`OspfRouter`): 一个或多个OSPFv2协议会话对象，表示已经建立的OSPF路由器会话上下文，类型为对象。\n\nKeyword Args:\n\n    Name (str): 创建的Summary LSA的名称，类型为字符串，默认值由系统自动分配。\n\n    Enable (bool): 是否启用该LSA。取值范围：True 或 False，默认值：True。\n\n    AdvertisingRouterId (str): 通告路由器的Router ID，格式为IPv4地址形式，取值范围：0.0.0.0 - 255.255.255.255，默认值：1.1.1.1。\n\n    RouteCount (int): 要生成的路由条目数量，用于批量模拟多条汇总路由，取值范围：1 - 1,000,000，默认值：1。\n\n    StartNetworkPrefix (str): 起始网络前缀，格式为IPv4地址，用于生成路由的起始地址，默认值：192.0.1.0。\n\n    PrefixLength (int): 网络前缀长度，即子网掩码长度，取值范围：1 - 32，默认值：24。\n\n    Increment (int): 每次生成路由时的IP地址递增值，用于批量生成路由时控制步长，取值范围：0 - 4294967295，默认值：1。\n\n    Metric (int): LSA的度量值，用于描述到达目标网络的成本，取值范围：1 - 16777215，默认值：10。\n\n    Options (list): OSPF LSA选项标志位列表，支持以下标志：\n\n        NONTBIT: 不设置TOS位\n\n        TOSBIT: 启用TOS支持\n\n        EBIT: 外部路由标志位\n\n        MCBIT: 组播路由标志位\n\n        NPBIT: NSSA标志位\n\n        EABIT: 外部属性标志位\n\n        DCBIT: 按需电路标志位\n\n        OBIT: Opaque LSA标志位\n\n        DNBIT: Down Bit标志位\n\n        默认值：['NONTBIT', 'EBIT']\n\n    Age (int): LSA的老化时间，单位为秒，取值范围：0 - 3600，默认值：0。\n\n    SequenceNumber (int): LSA的序列号，用于LSA更新和同步，以十六进制表示，取值范围：0x1 - 0xFFFFFFFF，默认值：0x80000001。\n\n    Checksum (bool): 是否启用校验和验证，取值范围：True 或 False，默认值：True。\n\nReturns:\n\n    (:obj:`Ospfv2SummaryLsaConfig`): 创建成功的OSPFv2 Summary LSA配置对象，包含当前LSA的详细配置和状态信息。\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${Session} | Create Ospf | Port=${Port} |\n        | Create Ospf Summary Lsa | Session=${Session} | Age=20 | Metric=20 | PrefixLength=16 |",
  "TesterLibrary.Protocol.ospfv2.create_ospf_asbr_summary_lsa": "创建OSPFv2 ASBR（自治系统边界路由器）摘要LSA（链路状态通告）对象。\n\n该函数用于通过指定的OSPFv2协议会话对象，创建一个ASBR摘要LSA，通常用于在OSPF域中传播外部路由信息。它封装了底层Session对象的`create_asbr_summary_lsa`方法，并允许通过关键字参数配置LSA的各项属性。\n\nArgs:\n\n    Session (:obj:`OspfRouter`): 一个或多个OSPFv2协议会话对象，类型为object，表示与OSPF路由器的连接会话。\n\nKeyword Args:\n\n    Name (str): 创建的OSPFv2 Asbr Summary LSA的名称，类型为字符串，默认由系统自动生成。\n\n    Enable (bool): 是否启用该LSA，类型为布尔值，默认值：True。\n\n    AdvertisingRouterId (str): 通告该LSA的路由器ID，类型为IP地址格式字符串，默认值：'1.1.1.1'。\n\n    AsbrRouterId (str): ASBR路由器ID，即被汇总的外部路由来源的路由器ID，类型为IP地址格式字符串，默认值：'0.0.0.0'。\n\n    Metric (int): 路由度量值，表示到达该ASBR的成本，取值范围1~16777215，默认值：10。\n\n    Options (list): LSA选项标志位列表，支持以下选项：\n\n        NONTBIT: 不设置TOS位\n\n        TOSBIT: 支持TOS路由\n\n        EBIT: 设置E位（表示可接收Type-5 LSA）\n\n        MCBIT: 多播能力位\n\n        NPBIT: NSSA能力位\n\n        EABIT: 接收外部属性LSA\n\n        DCBIT: 按需电路支持\n\n        OBIT: Opaque LSA支持\n\n        DNBIT: Down Bit，用于防止环路\n\n        默认值：['NONTBIT', 'EBIT']\n\n    Age (int): LSA的老化时间（单位秒），取值范围0~3600，默认值：0。\n\n    SequenceNumber (int): LSA的序列号，类型为十六进制整数，取值范围0x1~0xFFFFFFFF，默认值：0x80000001。\n\n    Checksum (bool): 是否启用校验和验证，默认值：True。\n\nReturns:\n\n    (:obj:`Ospfv2AsbrSummaryLsaConfig`): 返回创建的OSPFv2 Asbr Summary LSA配置对象，包含LSA的相关属性和状态信息。\n\nRaises:\n\n    ContinuableFailure: 如果底层调用失败，则抛出ContinuableFailure异常，表示操作未成功但可继续执行后续步骤。\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${Session} | Create Ospf | Port=${Port} |\n        | Create Ospf Asbr Summary Lsa | Session=${Session} | Age=20 |",
  "TesterLibrary.Protocol.ospfv2.create_ospf_external_lsa": "创建OSPFv2 External LSA对象，用于在OSPF域中模拟或测试外部路由的通告。\n\n该函数用于创建一个OSPFv2 External LSA（链路状态通告）配置。External LSA通常由AS边界路由器生成，用于将外部路由（例如从其他路由协议重分发进OSPF的路由）广播到OSPF域中。此函数允许用户通过关键字参数自定义LSA的各个字段，以便进行网络设备的功能或性能测试。\n\nArgs:\n\n    Session (:obj:`OspfRouter`): 一个OSPFv2协议会话对象，代表与被测系统或仿真环境之间的连接上下文。该会话对象必须支持`create_external_lsa`方法。\n\nKeyword Args:\n\n    Name (str): 创建的OSPFv2 External LSA的名称，用于标识该LSA实例。\n\n    Enable (bool): 是否启用该LSA，默认为True。\n\n    AdvertisingRouterId (str): 指定最初发布该LSA的路由器ID，格式为IP地址字符串，取值范围：0.0.0.0 到 255.255.255.255，默认值为1.1.1.1。\n\n    LsType (str): LSA类型，可选值包括：\n\n        ExtLsaLsType1: 表示AS-External-LSA (Type 5)\n\n        ExtLsaLsType2: 表示NSSA-LSA (Type 7)\n\n    RouteCount (int): 要生成的路由条目数量，默认为1，最大支持1,000,000条路由。\n\n    StartNetworkPrefix (str): 起始网络前缀，表示第一个路由的IP地址，格式为IP地址字符串，默认为192.0.1.0。\n\n    PrefixLength (int): 子网掩码长度，表示路由的前缀长度，有效范围1~32，默认为24。\n\n    Increment (int): 网络前缀递增步长，默认为1，用于批量生成连续路由时使用。\n\n    MetricType (str): 度量类型，可选项包括：\n\n        ExtLsaLsMetricType1: 类型1度量\n\n        ExtLsaLsMetricType2: 类型2度量\n\n    Metric (int): 外部路由的度量值，有效范围1~16777215，默认为10。\n\n    ForwardingAddress (str): LSA中携带的转发地址，用于指定转发路径，格式为IP地址字符串，默认为192.0.1.0。\n\n    RouterTag (int): 路由标签，用于传递附加信息，有效范围0~2147483647，默认为0。\n\n    Options (list): OSPF LSA选项标志位列表，支持以下标志：\n\n        NONTBIT: 非-T比特\n\n        TOSBIT: 支持TOS比特\n\n        EBIT: E比特（外部路由）\n\n        MCBIT: 多播比特\n\n        NPBIT: NSSA P比特\n\n        EABIT: 外部属性比特\n\n        DCBIT: 按需电路比特\n\n        OBIT: O比特\n\n        DNBIT: 下一跳比特\n\n    默认值为['NONTBIT', 'EBIT']。\n\n    Age (int): LSA的生存时间（秒），有效范围0~3600，默认为0。\n\n    SequenceNumber (int): LSA的序列号，以十六进制表示，有效范围0x1~0xFFFFFFFF，默认为0x80000001。\n\n    LsaAutomaticConversion (bool): 当前会话为NSSA时是否自动将外部LSA转换为NSSA LSA；反之亦然。默认为True。\n\n    Checksum (bool): 是否计算并验证LSA的校验和，默认为True。\n\nReturns:\n\n    (:obj:`Ospfv2ExternalLsaConfig`): 创建成功的OSPFv2 External LSA配置对象，可用于进一步操作或查询其状态。\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${Session} | Create Ospf | Port=${Port} |\n        | Create Ospf External Lsa | Session=${Session} | Age=20 |",
  "TesterLibrary.Protocol.ospfv2.create_ospf_te_lsa": "创建OSPFv2流量工程（TE）LSA（链路状态通告）配置对象。\n\n该函数用于在网络测试或模拟环境中创建OSPFv2协议的流量工程技术中使用的LSA（Link State Advertisement）配置。它通过传入的Session对象调用底层`create_te_lsa`方法，并将关键字参数传递给该方法以定义LSA的具体配置。\n\nArgs:\n    Session (:obj:`OspfRouter`): 一个提供`create_te_lsa`方法的会话对象，用于在特定上下文中创建TE LSA。通常代表一个已经建立的OSPFv2路由器会话。\n\nKeyword Args:\n    Name (str): 创建的OSPFv2 TE LSA的名称。\n    \n    Enable (bool): 是否启用该LSA。默认值：True。\n    \n    AdvertisingRouterId (str): 指定最初发布该LSA的路由器ID，格式为IPv4地址字符串。默认值：'1.1.1.1'。\n    \n    TlvType (str): TLV类型，可选值为'LsaRouter'或'LsaLink'。默认值：'LsaLink'。\n    \n    RouterId (str): 路由器ID，格式为IPv4地址字符串。默认值：'0.0.0.0'。\n    \n    LinkId (str): Link ID，格式为IPv4地址字符串。默认值：'0.0.0.0'。\n    \n    LinkType (str): 链路类型，可选值为'LinkP2P'（点对点）或'LinkMultiaccess'（多路访问）。默认值：'LsaLink'。\n    \n    Instance (int): OSPF实例编号，取值范围0-16777215。默认值：1。\n    \n    Metric (int): 度量值，表示链路成本，取值范围0-16777215。默认值：10。\n    \n    Options (list): OSPF选项标志列表，支持以下选项：\n        NONTBIT, TOSBIT, EBIT, MCBIT, NPBIT, EABIT, DCBIT, OBIT, DNBIT。\n        默认值：['NONTBIT', 'EBIT']。\n        \n    Age (int): LSA的老化时间（秒），取值范围0-3600。默认值：0。\n    \n    SequenceNumber (int): LSA的序列号，以十六进制形式表示，取值范围0x1-0xFFFFFFFF。默认值：0x80000001。\n    \n    Checksum (bool): 是否计算校验和。默认值：True。\n\nReturns:\n    :obj:`Ospfv2TeLsaConfig`: 返回创建的OSPFv2 TE LSA配置对象，可用于后续操作或查询。\n\nRaises:\n    ContinuableFailure: 如果底层调用失败，则抛出此异常，表示操作未成功但可以继续执行后续步骤。\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${Session} | Create Ospf | Port=${Port} |\n        | Create Ospf Te Lsa | Session=${Session} | Age=20 |",
  "TesterLibrary.Protocol.ospfv2.edit_ospf_te_lsa_link": "编辑OSPFv2 TE LSA Link配置\n\n该函数用于修改OSPFv2协议中TE（Traffic Engineering，流量工程）链路的状态和参数。它基于提供的TeLsa对象，获取其关联的TE链路配置并进行编辑。\n\nArgs:\n\n    TeLsa (:obj:`Ospfv2TeLsaConfig`): 一个OSPFv2 TE LSA配置对象，类型为object。此对象应包含至少一个'Ospfv2TeLinkConfig'类型的子配置项。\n\nKeyword Args:\n\n    Name (str): 指定创建的OSPFv2 TE LSA Link对象的名称，类型为字符串。\n\n    Enable (bool): 控制是否启用当前TE链路，取值范围：True或False，默认为True。\n\n    EnableLocalIp (bool): 控制是否启用本端IPv4地址，取值范围：True或False，默认为False。\n\n    LocalIp (str): 设置本端IPv4地址，格式为0.0.0.0到255.255.255.255之间的IP地址，默认值为0.0.0.0。\n\n    EnableRemoteIp (bool): 控制是否启用远端IPv4地址，取值范围：True或False，默认为False。\n\n    RemoteIp (str): 设置远端IPv4地址，格式为0.0.0.0到255.255.255.255之间的IP地址，默认值为0.0.0.0。\n\n    EnableGroup (bool): 控制是否启用组ID设置，取值范围：True或False，默认为False。\n\n    Group (int): 设置组ID，取值范围：0-4294967295，默认值为1。\n\n    EnableMaxBandwidth (bool): 控制是否启用最大带宽设置，取值范围：True或False，默认为False。\n\n    MaximumBandwidth (int): 设置最大带宽，取值范围：0-16777215，默认值为1000。\n\n    EnableReservedBandwidth (bool): 控制是否启用预留带宽设置，取值范围：True或False，默认为False。\n\n    ReservableBandwidth (int): 设置可预留带宽，取值范围：0-4294967295，默认值为1000。\n\n    EnableUnreservedBandwidth (bool): 控制是否启用未预留带宽设置，取值范围：True或False，默认为False。\n\n    UnreservedBandwidth0 (int): 设置优先级0的未预留带宽，取值范围：0-4294967295，默认值为0。\n    \n    UnreservedBandwidth1 (int): 设置优先级1的未预留带宽，取值范围：0-4294967295，默认值为0。\n    \n    UnreservedBandwidth2 (int): 设置优先级2的未预留带宽，取值范围：0-4294967295，默认值为0。\n    \n    UnreservedBandwidth3 (int): 设置优先级3的未预留带宽，取值范围：0-4294967295，默认值为0。\n    \n    UnreservedBandwidth4 (int): 设置优先级4的未预留带宽，取值范围：0-4294967295，默认值为0。\n    \n    UnreservedBandwidth5 (int): 设置优先级5的未预留带宽，取值范围：0-4294967295，默认值为0。\n    \n    UnreservedBandwidth6 (int): 设置优先级6的未预留带宽，取值范围：0-4294967295，默认值为0。\n    \n    UnreservedBandwidth7 (int): 设置优先级7的未预留带宽，取值范围：0-4294967295，默认值为0。\n\nReturns:\n\n    bool: 如果操作成功返回True，否则返回False。\n\nRaises:\n\n    ContinuableFailure: 如果操作失败，将抛出ContinuableFailure异常，并附带失败原因的描述信息。\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${Session} | Create Ospf | Port=${Port} |\n        | ${TeLsa} | Create Ospf Te Lsa | Session=${Session} | Age=20 |\n        | Edit Ospf Te Lsa Link| TeLsa=${TeLsa} | LocalIp=2.2.2.2 |",
  "TesterLibrary.Protocol.ospfv2.create_ospf_opaque_router_info_lsa": "创建OSPFv2 Opaque Router Info LSA对象，用于在OSPF协议中扩展自定义路由器信息。\n\n该函数用于通过提供的会话对象创建一个OSPFv2 Opaque LSA（链路状态通告），具体类型为“Opaque Router Info”，可用于传输非标准的、厂商特定或用户自定义的路由器信息。此类LSA通常用于流量工程、协议扩展等场景。\n\nArgs:\n\n    Session (:obj:`OspfRouter`): 一个OSPFv2协议会话对象，用于与底层API或设备通信并执行LSA创建操作。\n\nKeyword Args:\n\n    Name (str): 创建的LSA对象的名称，用于标识该LSA。\n\n    Enable (bool): 是否启用该LSA。默认值：True。\n\n    AdvertisingRouterId (str): 通告路由器ID，表示最初发布此LSA的路由器ID。取值范围为合法IPv4地址格式字符串，默认值为 '1.1.1.1'。\n\n    Options (list): OSPF LSA选项标志列表，影响LSA的行为和传播范围。默认值为 ['NONTBIT', 'EBIT']。支持的选项包括：\n\n        NONTBIT: 不支持TOS\n\n        TOSBIT: 支持TOS\n\n        EBIT: 外部路由能力\n\n        MCBIT: 多播能力\n\n        NPBIT: NSSA能力\n\n        EABIT: 外部属性\n\n        DCBIT: 按需电路支持\n\n        OBIT: Opaque LSA支持\n\n        DNBIT: Down Bit 标志\n\n    Age (int): LSA的生存时间（秒），表示该LSA在网络中的老化时间。取值范围0-3600，默认值为0。\n\n    SequenceNumber (int): LSA的序列号，用于LSA更新版本控制。取值范围为0x1到0xFFFFFFFF，默认值为0x80000001。\n\n    Checksum (bool): 是否启用校验和检查。默认值为True。\n\nReturns:\n\n    (:obj:`Ospfv2OpaqueRouterInfoLsaConfig`): 创建成功的OSPFv2 Opaque Router Info LSA配置对象，可用于后续配置或查询操作。\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${Session} | Create Ospf | Port=${Port} |\n        | Create Ospf Opaque Router Info Lsa | Session=${Session} | Age=20 |",
  "TesterLibrary.Protocol.ospfv2.create_ospf_sr_algorithm_tlv": "创建OSPFv2 Segment Routing Algorithm TLV对象并将其关联到指定的Opaque Router Info LSA\n\nArgs:\n\n    OpaqueRouterInfoLsa (:obj:`Ospfv2OpaqueRouterInfoLsaConfig`): 要绑定SR Algorithm TLV的OSPFv2 Opaque Router Info LSA配置对象\n\nKeyword Args:\n\n    Name (str): 指定创建的OSPFv2 SR Algorithm TLV对象的名称\n\n    Enable (bool): 控制是否启用该TLV，取值范围：True（启用）或False（禁用），默认为True\n\n    Algorithms (int): 设置使用的Segment Routing算法标识符，取值范围：0-255，默认值：0\n\nReturns:\n\n    (:obj:`Ospfv2SrAlgorithmTlvConfig`): 创建的OSPFv2 SR Algorithm TLV配置对象，可用于进一步配置或验证\n\nDescription:\n    该函数用于在指定的OSPFv2 Opaque Router Info LSA上创建并配置一个Segment Routing Algorithm TLV。所创建的TLV将直接与提供的LSA对象关联，并可以通过返回的配置对象进行后续操作。\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${Session} | Create Ospf | Port=${Port} |\n        | ${Lsa} | Create Ospf Opaque Router Info Lsa | Session=${Session} | Age=20 |\n        | Create Ospf Sr Algorithm Tlv | OpaqueRouterInfoLsa=${Lsa} | Name=MySrTlv | Enable=True | Algorithms=1 |",
  "TesterLibrary.Protocol.ospfv2.create_ospf_sr_sid_label_range_tlv": "创建OSPFv2 SR SID/Label Range TLV对象，用于在OSPFv2协议中配置段路由（Segment Routing）的SID或标签范围。\n\n该函数基于提供的OSPFv2 Opaque Router Info LSA上下文创建一个SR SID/Label Range TLV配置对象，并支持通过关键字参数对TLV进行初始配置。\n\nArgs:\n\n    OpaqueRouterInfoLsa (:obj:`Ospfv2OpaqueRouterInfoLsaConfig`): 用于创建SR SID/Label Range TLV的OSPFv2 Opaque Router Info LSA配置对象，作为TLV的父级上下文。\n\nKeyword Args:\n\n    Name (str): 创建的TLV对象的名称，默认值为系统自动生成的名称。\n\n    Enable (bool): 是否启用该TLV。默认值：True。\n\n    SidLabelType (str): 指定SID或标签的类型。可选值：\n\n        Bit20 -- 使用20位标签（Label）\n\n        Bit32 -- 使用32位SID\n\n        默认值：Bit20\n\n    SidLabelBase (int): 当SidLabelType为Bit20时，表示起始标签值；当为Bit32时，表示起始SID值。默认值：0，取值范围：1-4294967295。\n\n    SidLabelRange (int): 要分配的SID或标签的数量。默认值：0，取值范围：1-16777215。\n\nReturns:\n\n    (:obj:`Ospfv2SidLabelRangeTlvConfig`): 创建的OSPFv2 SR SID/Label Range TLV配置对象，可用于进一步配置或绑定到协议栈中。\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${Session} | Create Ospf | Port=${Port} |\n        | ${Lsa} | Create Ospf Opaque Router Info Lsa | Session=${Session} | Age=20 |\n        | Create Ospf Sr Sid Label Range Tlv | OpaqueRouterInfoLsa=${Lsa} | SidLabelType=Bit32 | SidLabelBase=1000 | SidLabelRange=100",
  "TesterLibrary.Protocol.ospfv2.create_ospf_sr_srms_preference_tlv": "创建OSPFv2 Segment Routing Mapping Server (SRMS) Preference TLV对象，用于指定该路由器作为SR Mapping Server的优先级。\n\nArgs:\n\n    OpaqueRouterInfoLsa (:obj:`Ospfv2OpaqueRouterInfoLsaConfig`): OSPFv2 Opaque Router Info LSA对象，表示该TLV将绑定的Opaque Router Information LSA。LSA中通常包含与路由器相关的扩展信息，用于OSPF协议中的扩展功能支持。\n\nKeyword Args:\n\n    Name (str): 创建的OSPFv2 Sr Srms Preference Tlv对象的名称，类型为字符串。\n\n    Enable (bool): 是否启用该TLV功能，类型为布尔值，默认值：True。\n\n    Preference (int): 指定路由器作为Segment Routing Mapping Server的优先级，取值范围0-255，默认值为1。数值越高优先级越高。\n\nReturns:\n\n    (:obj:`Ospfv2SrmsPreferenceTlvConfig`): 返回一个配置对象，表示新创建的OSPFv2 Sr Srms Preference TLV对象，可用于进一步配置或添加到OSPF协议栈中进行测试或模拟。\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${Session} | Create Ospf | Port=${Port} |\n        | ${Lsa} | Create Ospf Opaque Router Info Lsa | Session=${Session} | Age=20 |\n        | Create Ospf Sr Srms Preference Tlv | OpaqueRouterInfoLsa=${Lsa} | Preference=100 | Enable=True",
  "TesterLibrary.Protocol.ospfv2.create_ospf_router_info_capability_tlv": "创建OSPFv2 Router Info Capability TLV对象\n\n该函数用于创建一个OSPFv2 Router Info Capability TLV（Type-Length-Value）配置对象，并将其关联到指定的Opaque Router Info LSA。该TLV用于在OSPFv2协议中描述路由器的能力信息，通常包含在Opaque LSA中进行扩展传递。\n\nArgs:\n\n    OpaqueRouterInfoLsa (:obj:`Ospfv2OpaqueRouterInfoLsaConfig`): 要绑定此TLV的OSPFv2 Opaque Router Info LSA配置对象，必须为有效且可容纳TLV的父对象，类型为：object\n\nKeyword Args:\n\n    Name (str): 创建的TLV对象的名称，类型为字符串，默认值由系统自动生成\n\n    Enable (bool): 是否启用该TLV，类型为布尔值，默认值为True，取值范围：True 或 False\n\n    InfoCapability (int): TLV中的能力字段值，类型为整数，默认值为1，取值范围：0 - 255，用于表示特定的路由器能力标志\n\nReturns:\n\n    (:obj:`Ospfv2RouterInfoCapabilityTlvConfig`): 成功创建并配置后的OSPFv2 Router Info Capability TLV配置对象，类型为：object\n\nRaises:\n\n    ContinuableFailure: 如果底层调用失败，则抛出可继续执行的异常，包含错误信息\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${Session} | Create Ospf | Port=${Port} |\n        | ${Lsa} | Create Ospf Opaque Router Info Lsa | Session=${Session} | Age=20 |\n        | Create Ospf Router Info Capability Tlv | OpaqueRouterInfoLsa=${Lsa} | Name=MyCapabilityTLV | InfoCapability=3 | Enable=True |",
  "TesterLibrary.Protocol.ospfv2.create_ospf_sr_fad_tlv": "创建OSPFv2 Segment Routing FAD (Forwarding Adjacency Descriptor) TLV配置对象，用于在OSPF SR（Segment Routing）场景中定义转发邻接属性。\n\n该函数基于提供的OSPF会话和Opaque Router Information LSA创建一个FAD TLV配置。FAD TLV通常用于描述Segment Routing中的转发路径特性，例如灵活算法参数、度量类型、优先级以及约束条件等。\n\nArgs:\n\n    Session (:obj:`OspfRouter`): OSPFv2协议会话对象，表示与设备的交互上下文，必须支持`create_sr_fad_tlv`方法，类型为object\n\n    OpaqueRouterInfoLsa (:obj:`Ospfv2OpaqueRouterInfoLsaConfig`): 与OSPF SR配置相关联的Opaque Router Information LSA对象，包含SR能力信息，类型为object\n\nKeyword Args:\n\n    Name (str): 创建的OSPFv2 Sr Fad Tlv的名称，类型为字符串\n\n    Enable (bool): 是否启用该TLV，取值范围：True或False，默认值：True\n\n    FlexAlgo (int): 灵活算法ID，用于指定Segment Routing路径计算所使用的算法，取值范围：128-255，默认值：128\n\n    MetricType (str): 指定算路使用的度量类型，可选值包括：\n\n        IGP_METRIC（默认）\n\n        MIN_LINK_DELAY\n\n        TE_METRIC\n\n    CalcType (int): 特定IGP算法的计算类型标识符，取值范围：0-127，默认值：0\n\n    Priority (int): 该Sub-TLV的优先级，用于确定多个Sub-TLV之间的优先顺序，取值范围：0-255，默认值：0\n\n    FlexAlgoSubTlv (list): 指定灵活算法路径计算时要遵循的约束条件列表，每个元素为以下之一：\n\n        UNKNOWN（默认）\n\n        EXCLUDE_ADMIN\n\n        INCLUDE_ANY_ADMIN\n\n        INCLUDE_ALL_ADMIN\n\n        DEFINITION_FLAGS\n\n        EXCLUDE_SRLG\n\n    ExcludeAdmin (int): 管理组排除掩码，用于路径计算时排除特定链路，取值范围：0-4294967295，默认值：0\n\n    IncludeAnyAdmin (int): 路径需满足任意其中一个管理组位匹配，取值范围：0-4294967295，默认值：0\n\n    IncludeAllAdmin (int): 路径需满足所有管理组位匹配，取值范围：0-4294967295，默认值：0\n\n    DefinitionFlags (list): 定义标志位列表，以十六进制整数表示，取值范围：0-FF，默认值：[0x80]\n\n    ExcludeSRLG (list): 排除的共享风险链路组(SRLG)，以十六进制整数列表表示，取值范围：0-4294967295，默认值：[0x10020000]\n\nReturns:\n\n    (:obj:`Ospfv2FlexAlgoDefinitionTlvConfig`) 返回创建的OSPFv2 Sr Fad Tlv配置对象，可用于后续操作如修改、查询或删除该TLV配置\n\nRaises:\n\n    如果Session无效或底层调用失败，则抛出ContinuableFailure异常，表明操作未成功但测试可以继续执行\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${Session} | Create Ospf | Port=${Port} |\n        | ${Lsa} | Create Ospf Opaque Router Info Lsa | Session=${Session} | Age=20 |\n        | Create Ospf Sr Fad Tlv | Session=${Session} | OpaqueRouterInfoLsa=${Lsa} | Name=FAD_TLV_1 | FlexAlgo=130 | MetricType=TE_METRIC | Priority=10 | FlexAlgoSubTlv=[INCLUDE_ANY_ADMIN,EXCLUDE_SRLG] | IncludeAnyAdmin=0x12345678 | ExcludeSRLG=[0x10000000,0x20000000]",
  "TesterLibrary.Protocol.ospfv2.create_ospf_sr_node_msd_tlv": "创建OSPFv2 Segment Routing节点MSD（Maximum SID Depth）TLV配置对象。\n\n该函数用于在OSPFv2协议中创建一个Segment Routing（SR）节点的MSD TLV配置，用于通告该节点所支持的最大SID栈深度。MSD TLV通常包含在Opaque Router Information LSA中，并用于路径计算过程中确保SID栈不会超过转发设备的能力。\n\nArgs:\n    Session (:obj:`OspfRouter`): OSPFv2协议会话对象，表示与某个接口或端口关联的OSPF实例。\n\n    OpaqueRouterInfoLsa (:obj:`Ospfv2OpaqueRouterInfoLsaConfig`): 已创建的OSPFv2 Opaque Router Info LSA配置对象，用于将MSD TLV绑定到该LSA中。\n\nKeyword Args:\n    Name (str): 创建的OSPFv2 Sr Node Msd Tlv的名称，默认为系统自动生成。\n\n    Enable (bool): 是否启用该MSD TLV，默认值：True。\n\n    Flags (list): MSD TLV中的标志位列表，每个标志代表一种支持的行为类型。默认值为['UNKNOWN']，可选值包括：\n\n        UNKNOWN: 未知行为类型\n\n        MAX_SEG_LEFT: 支持SL（Segment Left）字段最大值限制\n\n        MAX_END_POP: 支持End Pop操作的最大SID数量\n\n        MAX_T_INSERT: 支持T.Insert行为的最大SID数量\n\n        MAX_T_ENCAPS: 支持T.Encaps行为的最大SID数量\n\n        MAX_END_D: 支持End.DX6/DT6功能的最大SID数量\n\n    MaxSegmentLeft (int): 指定接收报文的SRH中SL字段的最大值，默认值：0，取值范围：0-255。\n\n    MaxEndPop (int): SRH顶端SID用于End Pop操作的最大数量，默认值：8，取值范围：0-255。\n\n    MaxInsert (int): 执行T.Insert行为时可插入的最大SID数量，默认值：8，取值范围：0-255。\n\n    MaxEncap (int): 执行T.Encap行为时可封装的最大SID数量，默认值：8，取值范围：0-255。\n\n    MaxEndD (int): 执行End.DX6和End.DT6功能时允许的最大SID数量，默认值：8，取值范围：0-255。\n\nReturns:\n    :obj:`Ospfv2SrNodeMsdTlvConfig`: 返回创建的OSPFv2 Sr Node Msd Tlv配置对象，可用于后续配置或查询操作。\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${Session} | Create Ospf | Port=${Port} |\n        | ${Lsa} | Create Ospf Opaque Router Info Lsa | Session=${Session} | Age=20 |\n        | Create Ospf Sr Node Msd Tlv | Session=${Session} | OpaqueRouterInfoLsa=${Lsa} | Enable=True | Flags=[\"MAX_END_POP\", \"MAX_T_INSERT\"] | MaxEndPop=10 | MaxInsert=12",
  "TesterLibrary.Protocol.ospfv2.create_ospf_opaque_extended_prefix_lsa": "创建OSPFv2 Opaque Extended Prefix LSA对象\n\n该函数用于创建一个OSPFv2协议中的Opaque Extended Prefix LSA（链路状态通告）对象。Opaque LSA用于在OSPF域内泛洪扩展信息，Extended Prefix LSA用于描述更丰富的前缀相关信息，如SRv6或流量工程扩展属性。\n\nArgs:\n\n    Session (:obj:`OspfRouter`): OSPFv2协议会话对象，表示与OSPF路由器的连接。必须具有create_opaque_extended_prefix_lsa方法以执行LSA创建操作。\n\nKeyword Args:\n\n    Name (str): 创建的LSA对象的名称，用于标识该LSA。\n\n    Enable (bool): 控制是否启用该LSA。默认为True。\n\n    Scope (str): 指定LSA的泛洪范围，默认为AreaLocal。可选值包括：\n\n        LinkLocal: 链路本地泛洪（仅限同一链路）\n\n        AreaLocal: 区域内泛洪\n\n        AreaSystemWide: 系统范围内泛洪（全OSPF域）\n\n    AdvertisingRouterId (str): 通告该LSA的路由器ID，应为合法IPv4地址，默认为192.0.0.1。\n\n    Instance (int): LSA实例编号，用于区分相同类型和LS ID的LSA，默认为1，取值范围0-16777215。\n\n    Options (list): 可选标志位列表，用于设置LSA的一些特性选项，默认为['NONTBIT', 'EBIT']。支持的选项包括：\n\n        NONTBIT: 不支持TOS路由\n\n        TOSBIT: 支持TOS路由\n\n        EBIT: 外部路由信息\n\n        MCBIT: 组播能力\n\n        NPBIT: NSSA能力\n\n        EABIT: 外部属性\n\n        DCBIT: 按需电路\n\n        OBIT: Opaque LSA支持\n\n        DNBIT: Downstream标记\n\n    Age (int): LSA的老化时间（单位：秒），默认为1，取值范围0-3600。\n\n    SequenceNumber (int): LSA的序列号，默认为0x80000001，取值范围0-4294967295。\n\n    Checksum (bool): 是否启用校验和，默认为True。\n\nReturns:\n\n    (:obj:`Ospfv2OpaqueSrExtPrefixLsaConfig`): 创建成功的OSPFv2 Opaque Extended Prefix LSA配置对象，可用于后续操作或查询。\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${Session} | Create Ospf | Port=${Port} |\n        | Create Ospf Opaque Extended Prefix Lsa | Session=${Session} | Age=20 |",
  "TesterLibrary.Protocol.ospfv2.create_ospf_ext_prefix_range_tlv": "创建OSPFv2 Ext Prefix Range TLV对象\n\n该函数用于在指定的会话中创建一个OSPFv2 Extended Prefix Range TLV配置。此TLV通常用于OSPF协议中的Opaque LSA内，以扩展支持更多的路由前缀范围信息。\n\nArgs:\n    Session (:obj:`OspfRouter`): OSPFv2协议会话对象，表示与设备的一个会话连接。\n    OpaqueExtendedPrefixLsa (:obj:`Ospfv2OpaqueRouterInfoLsaConfig`): 与当前TLV相关联的OSPFv2 Opaque Extended Prefix LSA对象，用于定义TLV所归属的LSA。\n\nKeyword Args:\n    Name (str): 创建的OSPFv2 Ext Prefix Range TLV的名称，默认为系统生成的唯一名称。\n    Enable (bool): 是否启用该TLV，默认值为True。\n    PrefixLength (int): 前缀长度，表示IP地址前缀的掩码长度，默认值为24，取值范围0-32。\n    AF (str): 地址族（Address Family），默认为IPv4Unicast，仅支持以下选项：\n        IPv4Unicast\n    ExtendedPrefixRange (int): 要生成的连续前缀的数量，默认值为1，取值范围1-65535。\n    ExtendedPrefixFlags (list): 包含在TLV中的标志位列表，默认值为NoneFlag，支持以下标志：\n        NoneFlag - 表示没有特殊标志\n        IAInterArea - 表示这是一个跨区域的前缀\n    AddressPrefix (str): 起始IP地址前缀，默认值为192.0.1.0，必须是一个有效的IPv4地址。\n\nReturns:\n    :obj:`Ospfv2ExtPrefixRangeTlvConfig`: 返回创建的OSPFv2 Ext Prefix Range TLV配置对象，可用于后续操作或修改该TLV。\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${Session} | Create Ospf | Port=${Port} |\n        | ${Lsa} | Create Ospf Opaque Extended Prefix Lsa | Session=${Session} | Age=20 |\n        | Create Ospf Ext Prefix Range Tlv | Session=${Session} | OpaqueExtendedPrefixLsa=${Lsa} | Name=MyPrefixRange | PrefixLength=28 | AddressPrefix=192.168.1.0 | ExtendedPrefixRange=10 | ExtendedPrefixFlags=[IAInterArea]",
  "TesterLibrary.Protocol.ospfv2.create_ospf_ext_prefix_tlv": "创建OSPFv2 Ext Prefix Tlv对象\n\n该函数用于在指定的OSPFv2会话中，为给定的Opaque Extended Prefix LSA创建一个扩展前缀TLV（Type-Length-Value）配置。此TLV用于在OSPFv2协议中传递额外的路由信息，例如地址前缀、标志位等。\n\nArgs:\n\n    Session (:obj:`OspfRouter`): 有效的OSPFv2协议会话对象，提供与测试设备的上下文和连接。\n        此对象必须包含create_ospf_ext_prefix_tlv方法以正确创建TLV配置。\n\n    OpaqueExtendedPrefixLsa (:obj:`Ospfv2OpaqueRouterInfoLsaConfig`): 要关联的OSPFv2 Opaque Extended Prefix LSA对象。\n        可以是字符串名称或对象引用，具体取决于后端实现。\n\nKeyword Args:\n\n    Name (str): 创建的OSPFv2 Ext Prefix TLV的名称，默认值由系统自动生成。\n\n    Enable (bool): 是否启用该TLV，默认值：True。\n\n    RouteType (str): 路由类型，指示前缀的来源，取值范围：\n        \n        - Unspecified\n        - IntraArea\n        - InterArea\n        - AsExternal\n        - NssaExternal\n\n        默认值：Unspecified.\n\n    AddressPrefix (str): IPv4地址前缀，表示要生成的网络地址。默认值：192.0.1.0，\n        必须为有效的IPv4地址。\n\n    PrefixLength (int): 前缀长度，表示地址前缀的子网掩码长度，取值范围：0-32，默认值：24.\n\n    PrefixTlvBlockCount (int): 要生成的前缀TLV块数量，取值范围：0-32，默认值：1.\n\n    AF (str): 地址族（Address Family），当前仅支持IPv4单播地址。取值范围：\n\n        - IPv4Unicast\n\n        默认值：IPv4Unicast.\n\n    ExtendedPrefixFlags (list): 包含在TLV中的标志位列表，用于定义特定的扩展行为。支持选项有：\n\n        - NoneFlag\n        - AttachFlag\n        - NodeFlag\n\n        默认值：[NoneFlag]\n\nReturns:\n\n    (:obj:`Ospfv2ExtPrefixTlvConfig`): 成功创建的OSPFv2 Ext Prefix TLV配置对象，可用于进一步操作或查询状态。\n\nRaises:\n\n    ContinuableFailure: 如果底层调用失败，则抛出可继续执行的异常，并附带错误信息。\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${Session} | Create Ospf | Port=${Port} |\n        | ${Lsa} | Create Ospf Opaque Extended Prefix Lsa | Session=${Session} | Age=20 |\n        | Create Ospf Ext Prefix Range Tlv | Session=${Session} | OpaqueExtendedPrefixLsa=${Lsa} | Name=MyTlv | RouteType=AsExternal | AddressPrefix=192.168.1.0 | PrefixLength=24 | ExtendedPrefixFlags=[AttachFlag, NodeFlag]",
  "TesterLibrary.Protocol.ospfv2.create_ospf_sid_label_binding_sub_tlv": "创建OSPFv2 Sid Label Binding Sub Tlv对象，用于配置OSPF Segment Routing扩展中的SID/Label绑定信息。\n\nArgs:\n\n    Session (:obj:`OspfRouter`): OSPFv2协议会话对象，用于管理该TLV的上下文和配置应用。\n\n    Tlv (:obj:`Ospfv2ExtPrefixTlvConfig`): 父级TLV对象，通常为OSPFv2扩展前缀TLV或其范围TLV，用于承载此子TLV。\n\nKeyword Args:\n\n    Name (str): 创建的Sid Label Binding Sub TLV对象的名称，默认值由系统自动生成。\n\n    Enable (bool): 是否启用该Sub TLV。默认值：True。\n\n    SidLabelBindingTlvFlags (list): 标志位列表，用于指定Sub TLV的行为特征。可选值包括：\n\n        NoneFlag: 无标志位（默认）。\n\n        MirroringContext: 启用镜像上下文。\n\n    Weight (int): 负载均衡时的权重值，取值范围0-255，默认值：0。\n\n    MultiTopologyId (int): 多拓扑ID（MT-ID），用于多拓扑OSPF场景，取值范围0-255，默认值：0。\n\n    SidLabelType (str): 指定SID或标签的类型，默认值：Bit20。可选值：\n\n        Bit20: 表示20位标签（Label）。\n\n        Bit32: 表示32位SID。\n\n    SidLabel (int): 根据SidLabelType设置对应值：\n\n        当为Bit20时，表示标签值；\n\n        当为Bit32时，表示SID值。取值范围0-255，默认值：16。\n\nReturns:\n\n    (:obj:`Ospfv2SidLabelBindingSubTlvConfig`): 创建的OSPFv2 Sid Label Binding Sub TLV配置对象，可用于后续操作或验证。\n\nRaises:\n\n    ContinuableFailure: 如果底层调用失败，则抛出异常，测试流程可继续执行。",
  "TesterLibrary.Protocol.ospfv2.create_ospf_prefix_sid_sub_tlv": "创建OSPFv2 Prefix SID子TLV配置对象\n\n此函数用于在OSPF SR（Segment Routing）环境中创建并配置一个Prefix SID子TLV对象。它通常嵌入在扩展前缀TLV中，用于通告与特定前缀相关的SID（Segment Identifier）信息。\n\nArgs:\n    Session (:obj:`OspfRouter`): 有效的OSPFv2会话对象，必须包含`create_prefix_sid_sub_tlv`方法，提供创建Prefix SID子TLV的上下文。\n    Tlv (:obj:`Ospfv2ExtPrefixTlvConfig`): 父TLV对象，表示将要在此TLV下创建Prefix SID子TLV。通常为扩展前缀TLV或其范围TLV。\n\nKeyword Args:\n    Name (str): 创建的Prefix SID子TLV的名称。\n    Enable (bool): 是否启用该子TLV。默认值：True。\n    PrefixSidTlvFlags (list): 包含标志位的列表。可选值包括：\n        NoPhp\n        MappingServer\n        ExplicitNull\n        ValueIndex\n        LacalGlobal\n        默认值为 ['NoPhp']。\n    MultiTopologyId (int): 多拓扑标识符(MT-ID)。取值范围：0-255，默认值：0。\n    Algorithm (int): 计算可达性的算法编号。默认值：0。\n    SidIndexLabel (int): 当Flags包含Value/Index时指定标签值；否则指定SID/Label偏移值。取值范围：0-4294967295，默认值：0。\n    SidIndexLabelStep (int): SidIndexLabel的步长。取值范围：0-4294967295，默认值：1。\n\nReturns:\n    :obj:`Ospfv2PrefixSidSubTlvConfig`: 创建的OSPFv2 Prefix SID子TLV配置对象，包含相关属性和状态信息。\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${Session} | Create Ospf | Port=${Port} |\n        | ${Lsa} | Create Ospf Opaque Router Info Lsa | Session=${Session} | Age=20 |\n        | ${Tlv} | Create Ospf Ext Prefix Range Tlv | OpaqueRouterInfoLsa=${Lsa} |\n        | Create Ospf Prefix Sid Sub Tlv | Session=${Session} | Tlv=${Tlv} | Algorithm=1 | SidIndexLabel=100 |",
  "TesterLibrary.Protocol.ospfv2.create_ospf_sr_fapm_sub_tlv": "创建OSPFv2 Segment Routing Forwarding Adjacency Protection Mechanism (FAPM) Sub-TLV对象\n\n该方法用于在OSPFv2协议中创建一个Segment Routing（SR）的转发邻接保护机制（Forwarding Adjacency Protection Mechanism，FAPM）子TLV配置对象。该子TLV通常用于扩展OSPF TLV结构，以支持SR相关的邻接保护功能。\n\n参数说明:\n\n    Tlv (:obj:`object`): 父级TLV对象，用于承载新创建的SR FAPM Sub-TLV。\n                        通常应为支持子TLV嵌套的TLV类型，例如OSPFv2 Ext Prefix Range TLV或Ext Prefix TLV对象。\n                        类型为：object\n\n关键字参数（可选）:\n\n    Name (str): 新建的OSPFv2 SR FAPM Sub-TLV对象的名称，类型：字符串\n\n    Enable (bool): 是否启用该Sub-TLV，类型：布尔值，取值范围：True 或 False，默认值：True\n\n    Algorithm (int): 灵活算法ID（Flexible Algorithm ID），类型：整数，取值范围：128-255，默认值：128\n\n    Flags (int): 标志字段，单字节值，类型：整数，取值范围：0-255，默认值：0\n\n    Metric (int): 度量值（Metric），类型：整数，取值范围：0-4294967295，默认值：0\n\n返回值:\n\n    (:obj:`Ospfv2SrFapmSubTlvConfig`): 创建完成的OSPFv2 SR FAPM Sub-TLV配置对象，可用于进一步编辑或添加到协议结构中。\n\n示例:\n    .. code:: RobotFramework\n\n        | ${Session} | Create Ospf | Port=${Port} |\n        | ${Lsa} | Create Ospf Opaque Router Info Lsa | Session=${Session} | Age=20 |\n        | ${Tlv} | Create Ospf Ext Prefix Range Tlv | OpaqueRouterInfoLsa=${Lsa} |\n        | Create Ospf Sr Fapm Sub Tlv | Tlv=${Tlv} |",
  "TesterLibrary.Protocol.ospfv2.create_ospf_bier_sub_tlv": "创建OSPFv2 BIER子TLV对象，用于在OSPFv2协议中配置BIER（Bit Index Explicit Replication）相关的转发信息。该子TLV用于支持高效的组播转发，通过指定比特位表示组播分发路径。\n\nArgs:\n\n    Tlv (:obj:`Ospfv2TlvConfig`): 父TLV配置对象，该参数是必需的，用于指定此BIER子TLV所属的上下文环境，通常为OSPFv2扩展前缀TLV或类似结构。\n\nKeyword Args:\n\n    Name (str): 创建的OSPFv2 Bier Sub Tlv的名称，类型为字符串。\n\n    Enable (bool): 是否启用该子TLV，类型为布尔值，默认值：True。\n\n    TlvType (int): TLV的Type字段值，标识该TLV的类型，取值范围：0-255，默认值：9。\n\n    SubDomainId (int): BIER子域ID，用于划分不同的BIER转发子域，取值范围：1-255，默认值：1。\n\n    MtId (int): 多拓扑ID，用于支持多拓扑路由功能，取值范围：1-255，默认值：1。\n\n    BfrId (int): BFR（Bit Forwarding Router，比特转发路由器）ID，唯一标识一个BIER转发节点，取值范围：1-65535，默认值：1。\n\n    Bar (int): BIER算法标识符，用于指定转发过程中使用的算法，取值范围：0-255，默认值：0。\n\n    Ipa (int): IGP算法标识符，用于指定IGP路径计算所使用的算法，取值范围：0-255，默认值：0。\n\nReturns:\n\n    (:obj:`Ospfv2BierSubTlvConfig`): 创建完成的OSPFv2 Bier Sub Tlv配置对象，可用于进一步配置或查询状态。\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${Session} | Create Ospf | Port=${Port} |\n        | ${Lsa} | Create Ospf Opaque Router Info Lsa | Session=${Session} | Age=20 |\n        | ${Tlv} | Create Ospf Ext Prefix Range Tlv | OpaqueRouterInfoLsa=${Lsa} |\n        | Create Ospf Bier Sub Tlv | Tlv=${Tlv} |",
  "TesterLibrary.Protocol.ospfv2.create_ospf_bier_mpls_encap_sub_tlv": "创建OSPFv2 Bier Mpls Encap Sub Tlv对象，用于在OSPFv2协议中配置BIER（Bit Index Explicit Replication）的MPLS封装子TLV（Type-Length-Value）结构。该函数基于提供的父级TLV对象创建一个新的BIER MPLS Encap Sub TLV配置对象，并支持通过关键字参数进行进一步定制。\n\nArgs:\n\n    Tlv (:obj:`Port`): \n        父级OSPFv2 Bier TLV对象，该Sub TLV将被绑定到此TLV下。类型为对象，通常由之前的TLV或Sub TLV创建函数生成。\n\nKeyword Args:\n\n    Name (str): \n        创建的OSPFv2 Bier Mpls Encap Sub TLV的名称标识。类型为字符串，默认值为系统自动生成。\n\n    Enable (bool): \n        是否启用该Sub TLV。取值范围：True 或 False，默认值：True。\n\n    TlvType (int): \n        TLV中的Type字段值，用于唯一标识该Sub TLV的类型。取值范围：0-255，默认值：10。\n\n    MaxSi (int): \n        最大的SI（Set Identifier）值，用于定义BIER转发集合的最大索引值。取值范围：1-255，默认值：1。\n\n    Label (int): \n        起始MPLS标签值，用于指定MPLS标签分配的起始位置。取值范围：0-1048575，默认值：100。\n\nReturns:\n\n    (:obj:`Ospfv2BierMplsEncapSubTlvConfig`):\n        返回一个配置好的OSPFv2 BIER MPLS Encapsulation Sub TLV对象，可用于后续的协议操作和配置应用。\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${Session} | Create Ospf | Port=${Port} |\n        | ${Lsa} | Create Ospf Opaque Router Info Lsa | Session=${Session} | Age=20 |\n        | ${Tlv} | Create Ospf Ext Prefix Range Tlv | OpaqueRouterInfoLsa=${Lsa} |\n        | ${SubTlv}| Create Ospf Bier Sub Tlv | Tlv=${Tlv} |\n        | Create Ospf Bier Mpls Encap Sub Tlv | Tlv=${SubTlv} |",
  "TesterLibrary.Protocol.ospfv2.create_ospf_opaque_extended_link_lsa": "创建OSPFv2 Opaque Extended Link LSA对象，用于在OSPFv2协议中生成Opaque类型的扩展链路状态通告（LSA）。该LSA可用于承载流量工程或段路由等扩展信息。\n\nArgs:\n\n    Session (:obj:`OspfRouter`): 一个有效的OSPFv2协议会话对象，提供与底层API的连接上下文，必须支持创建OSPF LSA的功能。\n\nKeyword Args:\n\n    Name (str): 创建的Opaque Extended Link LSA的名称，类型为字符串。\n\n    Enable (bool): 是否启用该LSA，类型为布尔值，默认值：True。\n\n    Scope (str): 指定LSA的作用域（TLV类型），默认值：AreaLocal，支持选项包括：\n\n        LinkLocal\n\n        AreaLocal\n\n        AreaSystemWide\n\n    AdvertisingRouterId (str): 通告该LSA的路由器ID，必须是有效的IPv4地址，默认值：192.0.0.1。\n\n    Instance (int): 实例标识符，取值范围：0-16777215，默认值：1。\n\n    Options (list): LSA选项列表，表示启用的标志位，默认值：['NONTBIT', 'EBIT']，支持的选项包括：\n\n        NONTBIT\n\n        TOSBIT\n\n        EBIT\n\n        MCBIT\n\n        NPBIT\n\n        EABIT\n\n        DCBIT\n\n        OBIT\n\n        DNBIT\n\n    Age (int): LSA的生存时间（以秒为单位），也可理解为老化计时器，取值范围：0-3600，默认值：0。\n\n    SequenceNumber (int): LSA的序列号，用于标识LSA更新版本，取值范围：0x1-0xFFFFFFFF，默认值：0x80000001。\n\n    Checksum (bool): 是否启用校验和检查，类型为布尔值，默认值：True。\n\nReturns:\n\n    (:obj:`Ospfv2OpaqueSrExtLinkLsaConfig`): 返回创建的OSPFv2 Opaque Extended Link LSA配置对象，可进一步用于修改、查询或注入到OSPF网络中。\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${Session} | Create Ospf | Port=${Port} |\n        | Create Ospf Opaque Extended Link LSA | Session=${Session} | Age=20 |",
  "TesterLibrary.Protocol.ospfv2.create_ospf_extended_link_tlv": "创建OSPFv2 Extended Link TLV（Type-Length-Value）对象，并将其与指定的Opaque Extended Link LSA关联。\n\n该函数用于创建并配置一个OSPFv2扩展链路TLV，该TLV通常用于在OSPFv2协议中携带额外的链路信息。此函数封装了底层`renix.create_ospf_extended_link_tlv`方法的调用，并将关键字参数直接传递给配置对象的`edit`方法以进行初始化配置。\n\n参数：\n    OpaqueExtendedLinkLsa (:obj:`Ospfv2OpaqueSrExtLinkLsaConfig`): 父级Opaque Extended Link LSA对象，新创建的TLV将与其绑定。\n        类型为object，通常是提供上下文信息的LSA类实例。\n\n关键字参数（**kwargs）:\n    Name (str): OSPFv2 Extended Link TLV的名称，类型为字符串。\n\n    Enable (bool): 是否启用该TLV，默认值：True，可选值范围：True 或 False。\n\n    LinkType (str): 链路类型，表示链路的性质，默认值：P2P，可选值包括：\n\n        P2P\n\n        TRANSITNETWORK\n\n        STUBNETWORK\n\n        VIRTUALLINK\n\n    LinkId (str): 链路ID字段，表示链路的标识符，默认值：0.0.0.0，必须是合法的IPv4地址。\n\n    LinkData (str): 链路数据字段，表示附加链路信息，默认值：0.0.0.0，必须是合法的IPv4地址。\n\n返回值：\n    (:obj:`Ospfv2ExtendedLinkTlvConfig`) 返回配置好的OSPFv2 Extended Link TLV对象实例。\n\n示例：\n    .. code:: RobotFramework\n\n        | ${Session} | Create Ospf | Port=${Port} |\n        | ${Lsa} | Create Ospf Opaque Extended Link Lsa | Session=${Session} | Age=20 |\n        | Create Ospf Extended link Tlv | OpaqueExtendedLinkLsa=${Lsa} | LinkType=P2P | LinkId=192.168.1.1 | LinkData=255.255.255.0",
  "TesterLibrary.Protocol.ospfv2.create_ospf_adj_sid_sub_tlv": "创建OSPFv2 Adjacency Segment Identifier (SID)子TLV配置对象，用于Segment Routing场景中标识链路邻接关系的Segment ID。\n\n**Purpose**  \n该函数用于在指定的OSPFv2会话中创建一个Adjacency SID子TLV（Type-Length-Value）配置对象。此子TLV通常嵌套在Extended Link TLV内部，用于Segment Routing（SR）网络中通告特定于链路邻接的段标识符（SID），以支持基于源路径的选择性转发。\n\n**Parameters**\n\n- **Session** (`OspfRouter`):  \n  有效的OSPFv2协议会话对象，表示与被测设备或测试API的连接上下文。必须具备创建Adj SID sub-TLV的方法。\n  \n- **ExtendedLinkTlv** (`Ospfv2ExtendedLinkTlvConfig`):  \n  所属的Extended Link TLV配置对象。Adj SID子TLV将依附于该TLV进行配置，代表支持Segment Routing的链路。\n\n- **Keyword Args (Optional)**:\n\n    - **Name** (`str`):  \n      为新创建的Adj Sid Sub TLV配置名称，默认由系统自动生成。\n\n    - **Enable** (`bool`, default: `True`):  \n      是否启用该Adj Sid Sub TLV，可选值：`True` 或 `False`。\n\n    - **Flags** (`list`, default: `['ValueIndexFlag', 'LocalGlobalFlag', 'NONE']`):  \n      配置SID相关的标志位，多个标志可以同时设置。支持的选项包括：\n        - `BackupFlag`: 指示是否为备份路径。\n        - `ValueIndexFlag`: 使用索引值而非直接标签。\n        - `LocalGlobalFlag`: 标识SID的作用域为本地或全局。\n        - `GroupFlag`: 表示该SID属于组播或多路径集合。\n        - `PersistentFlag`: 持久化标识符，用于稳定拓扑变化时保持转发一致性。\n        - `NONE`: 不设置任何标志。\n\n    - **MultiTopologyId** (`int`, range: `0-255`, default: `0`):  \n      多拓扑ID，用于多拓扑OSPF环境中区分不同的拓扑实例。\n\n    - **Weight** (`int`, range: `0-255`, default: `0`):  \n      权重值，用于多路径转发选择中的优先级调整。\n\n    - **SidLabel** (`int`, range: `1-255`, default: `1`):  \n      Segment ID或MPLS标签值，标识该邻接对应的转发段。\n\n**Returns**  \n返回一个类型为 `Ospfv2AdjSidSubTlvConfig` 的对象，表示成功创建的Adj Sid Sub TLV配置实例，可用于进一步修改、查询或附加到其他配置结构中。\n\n**Raises**  \n若底层调用失败（如会话异常、参数无效等），则抛出 `ContinuableFailure` 异常。\n\n**Examples**  \n```robotframework\n| ${Session} | Create Ospf | Port=${Port} |\n| ${Lsa} | Create Ospf Opaque Extended Link Lsa | Session=${Session} | Age=20 |\n| ${Tlv} | Create Ospf Extended Link Tlv | OpaqueExtendedLinkLsa=${Lsa} |\n| ${SubTlv} | Create Ospf Adj Sid Sub Tlv | Session=${Session} | ExtendedLinkTlv=${Tlv} | Name=MyAdjSid | Enable=True | Flags=['BackupFlag', 'LocalGlobalFlag'] | SidLabel=100 |\n```",
  "TesterLibrary.Protocol.ospfv2.create_ospf_lan_adj_sid_sub_tlv": "创建OSPFv2 LAN Adjacency SID子TLV配置对象，用于在指定的Extended Link TLV下配置LAN Adjacency SID相关信息。\n\nArgs:\n    Session (:obj:`OspfRouter`): 一个OSPFv2协议会话对象，用于与底层系统或API交互，类型为object。\n    ExtendedLinkTlv (:obj:`Ospfv2ExtendedLinkTlvConfig`): 指定的Extended Link TLV对象，LAN Adjacency SID子TLV将在此TLV下创建，类型为object。\n\nKeyword Args:\n    Name (str): 创建的LAN Adjacency SID子TLV的名称，默认值由系统自动分配。\n    Enable (bool): 是否启用该LAN Adjacency SID子TLV，默认值：True。\n    Flags (list): 标志位列表，表示SID的附加属性。默认值：['ValueIndexFlag', 'LocalGlobalFlag', 'NONE']。支持的选项包括：\n        BackupFlag\n        ValueIndexFlag\n        LocalGlobalFlag\n        GroupFlag\n        PersistentFlag\n        NONE\n    MultiTopologyId (int): 多拓扑ID，取值范围0-255，默认值：0。\n    Weight (int): 权重值，用于负载均衡，取值范围0-255，默认值：0。\n    NeighborId (str): 邻居路由器的IPv4地址，表示该SID连接的邻居节点，默认值：0.0.0.0。\n    SidLabel (int): SID标签值，取值范围1-255，默认值：1。\n\nReturns:\n    (:obj:`Ospfv2LanSidSubTlvConfig`): 创建的LAN Adjacency SID子TLV配置对象，包含相关配置信息，类型为object。\n\nRaises:\n    ContinuableFailure: 如果调用失败（返回False），则抛出此异常，并提示函数调用失败信息。\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${Session} | Create Ospf | Port=${Port} |\n        | ${Lsa} | Create Ospf Opaque Extended Link Lsa | Session=${Session} | Age=20 |\n        | ${Tlv} | Create Ospf Extended Link Tlv | OpaqueExtendedLinkLsa=${Lsa} |\n        | Create Ospf Lan Adj Sid Sub Tlv | Session=${Session} | ExtendedLinkTlv=${Tlv} | Enable=True | NeighborId=192.168.1.1 | SidLabel=100 |\n\nDescription:\n    该函数通过调用底层RENIX API来创建一个OSPFv2 LAN Adjacency SID子TLV，用于在SR（Segment Routing）场景中标识特定链路的邻接SID。可以通过关键字参数提供额外的配置参数。如果创建失败，函数将抛出ContinuableFailure异常；否则返回创建的子TLV配置对象。",
  "TesterLibrary.Protocol.ospfv2.create_ospf_sr_link_msd_sub_tlv": "创建OSPFv2 Segment Routing（SR）Link MSD（Maximum SID Depth）子TLV对象。\n\n该方法用于在OSPFv2协议中配置一个Segment Routing Link MSD子TLV。MSD子TLV用于指示链路上支持的SID栈的最大深度，是Segment Routing功能中的关键参数，用于控制报文转发路径的复杂度。\n\n参数说明：\n\n- Session (:obj:`OspfRouter`): OSPFv2协议会话对象，表示与某个端口或接口关联的OSPF实例，类型为对象。\n- ExtendedLinkTlv (:obj:`Ospfv2ExtendedLinkTlvConfig`): 已配置的OSPFv2扩展链路TLV对象，该TLV将与新创建的MSD子TLV进行关联，类型为对象。\n- **kwargs (关键字参数): 用于配置MSD子TLV的可选参数，包括以下：\n    - Name (str): 新建的OSPFv2 SR Link MSD子TLV的名称，类型为字符串。\n    - Enable (bool): 是否启用该MSD子TLV，取值范围：True 或 False，默认值：True。\n    - Flags (list): 标志位列表，用于指定MSD子TLV支持的功能类型。默认值为 ['UNKNOWN']，支持选项如下：\n        - UNKNOWN\n        - MAX_SEG_LEFT\n        - MAX_END_POP\n        - MAX_T_INSERT\n        - MAX_T_ENCAPS\n        - MAX_END_D\n    - MaxSegmentLeft (int): 指定接收报文中SRH（Segment Routing Header）中SL（Segments Left）字段的最大值，取值范围0~255，默认值：8。\n    - MaxEndPop (int): 指定SRH栈顶SID的最大数量（用于End Pop行为），取值范围0~255，默认值：8。\n    - MaxInsert (int): 指定执行T.Insert操作时允许插入的SID最大数量，取值范围0~255，默认值：8。\n    - MaxEncap (int): 指定执行T.Encap操作时允许封装的SID最大数量，取值范围0~255，默认值：8。\n    - MaxEndD (int): 指定执行End.DX6或End.DT6操作时SRH中SID的最大数量，取值范围0~255，默认值：8。\n\n返回值：\n\n- (:obj:`Ospfv2SrLinkMsdSubTlvConfig`): 返回创建的OSPFv2 SR Link MSD子TLV配置对象，类型为对象，可用于后续引用或配置操作。\n\n示例：\n\n.. code:: RobotFramework\n\n    | ${Session} | Create Ospf | Port=${Port} |\n    | ${Lsa} | Create Ospf Opaque Extended Link Lsa | Session=${Session} | Age=20 |\n    | ${Tlv} | Create Ospf Extended Link Tlv | OpaqueExtendedLinkLsa=${Lsa} |\n    | ${MsdSubTlv} | Create Ospf Sr Link Msd Sub Tlv | Session=${Session} | ExtendedLinkTlv=${Tlv} | MaxSegmentLeft=10 | Enable=True | Name=MyMsdTlv |\n\n注意事项：\n\n- 如果底层调用失败（如Session不可达、参数不合法等），该函数将抛出 `ContinuableFailure` 异常。\n- 参数Flags用于定义当前MSD子TLV所描述的功能类别，不同的标志代表不同类型的SID处理行为。",
  "TesterLibrary.Protocol.ospfv2.create_ospf_custom_sub_tlv": "创建OSPFv2 Custom Sub TLV对象，用于在Segment Routing扩展中配置自定义的MSD（Maximum Stack Depth）子TLV。\n\n**Purpose**:  \n该函数用于创建并返回一个OSPFv2协议中的自定义MSD子TLV配置对象。此子TLV通常用于Segment Routing中，以指定标签栈的最大深度限制。它会被附加到提供的父TLV或子TLV对象上，并允许通过关键字参数进行可选配置。\n\n**Args**:\n\n- `SrLinkMsdSubTlv` (:obj:`Ospfv2SrLinkMsdSubTlvConfig`): 父级Segment Routing Link MSD Sub-TLV对象，表示协议层次结构中的上级TLV或子TLV对象。\n\n**Keyword Args**:\n\n- `Name` (str): 自定义子TLV的名称，默认值为系统自动生成。\n- `Enable` (bool): 是否启用该子TLV，取值范围为True或False，默认值：True。\n- `SubType` (int): 子TLV的类型字段，取值范围为0-255，默认值：0。\n- `SubValue` (int): 子TLV的值字段，取值范围为0-255，默认值：8。\n\n**Returns**:\n\n- :obj:`Ospfv2CustomMsdSubTlvConfig`: 返回一个配置好的OSPFv2自定义MSD子TLV对象。\n\n**Examples**:\n    .. code:: RobotFramework\n\n        | ${Session} | Create Ospf | Port=${Port} |\n        | ${Lsa} | Create Ospf Opaque Extended Link Lsa | Session=${Session} | Age=20 |\n        | ${Tlv} | Create Ospf Extended Link Tlv | OpaqueExtendedLinkLsa=${Lsa} |\n        | ${SubTlv} | Create Ospf Sr Link Msd Sub Tlv | SrLinkMsdSubTlv=${Tlv} |\n        | Create Ospf Custom Sub Tlv | SrLinkMsdSubTlv = ${SubTlv} |",
  "TesterLibrary.Protocol.ospfv2.get_ospf_router_from_lsa": "Retrieve the OSPF router(s) associated with the given LSA(s) by navigating the relationship graph.\n\nThis function accepts either a single LSA object or a list of LSA objects. If a single LSA is provided, it is wrapped into a list internally. For each LSA in the list, the function retrieves the source-relative 'GenerateLsa' relationship to identify the router that generated the LSA.\n\nParameters:\n- Lsa (Union[object, List[object]]): A single LSA object or a list of LSA objects. Each LSA must support the `get_relatives` method to trace back to the generating router through 'GenerateLsa' relationships.\n\nReturns:\n- List[object]: A list of OSPF routers corresponding to the input LSA(s). Each router object represents the source of the respective LSA.\n\nNotes:\n- The function assumes that each LSA has exactly one source router.\n- It uses the `get_relatives` method with direction=EnumRelationDirection.SOURCE to trace back to the generating router.",
  "TesterLibrary.Protocol.ospfv2.establish_ospf": "Establishes OSPFv2 protocol sessions for the provided session objects.\n\nArgs:\n    Sessions (list of :obj:`OspfRouter`): A list of OSPFv2 protocol session objects. Each object is expected to have an `establish()` method that handles the actual establishment of the OSPF session.\n\nReturns:\n    bool: True if all provided sessions are successfully processed; False otherwise.\n\nDescription:\n    This function attempts to establish OSPFv2 sessions by invoking the `establish()` method on each session object in the provided list. If the establishment of any session fails, the function returns False. If all sessions are successfully processed, it returns True. If the result from the backend call (`renix.establish_ospf`) is False, a `ContinuableFailure` exception is raised to indicate the failure while allowing test execution to continue. The function internally relies on the `@abnormal_check` decorator for error handling and exception management.\n\nExample:\n    .. code:: RobotFramework\n\n        | Establish Ospf | Sessions=${Sessions} |",
  "TesterLibrary.Protocol.ospfv2.grace_restart_ospf": "平滑重启OSPFv2协议会话。\n\n该函数用于对一个或多个OSPFv2协议会话对象执行平滑重启操作。它接受单个会话对象或包含多个会话对象的可迭代集合（如列表、集合或元组），并调用每个会话对象的 `grace_restart` 方法，从而有效地启动这些会话的OSPF协议平滑重启流程。\n\n参数：\n    Sessions (object 或 iterable)：\n        单个实现 `grace_restart()` 方法的会话对象，或者包含多个此类会话对象的可迭代集合（支持 list, set, tuple）。\n\n返回值：\n    bool：\n        始终返回 True，表示所有提供的会话上均成功执行了平滑重启操作。\n\n异常：\n    TypeError：\n        如果任何一个会话对象没有实现 `grace_restart()` 方法，则会抛出类型错误。\n\n示例：\n    .. code:: RobotFramework\n\n        | Grace Restart Ospf | Sessions=${Sessions} |",
  "TesterLibrary.Protocol.ospfv2.advertise_ospf_lsa": "通告OSPFv2协议会话lsa\n\n本函数用于通告OSPFv2链路状态通告（LSA），支持两种操作模式：\n\n1. **基于会话的LSA通告**：当参数 `Lsa` 为 None 时，使用提供的 `Sessions` 列表中的每个会话对象进行LSA通告。每一个 `OspfRouter` 类型的会话对象将根据指定的 `Type` 参数进行通告。\n2. **直接LSA配置通告**：当提供 `Lsa` 参数时，函数将直接使用给定的 LSA 配置（通过 `Ospfv2LsaConfig` 对象列表）进行通告，此时忽略 `Type` 参数。\n\nArgs:\n\n    Sessions (list(:obj:`OspfRouter`) or Session object, optional): OSPFv2协议会话对象或其列表，用于基于会话的LSA通告。\n        如果未提供 `Lsa`，则该参数必须有效。默认值：None。\n\n    Type (str, optional): 当使用基于会话的LSA通告时，指定LSA类型。支持的类型包括：\n\n        Router\n\n        Network\n\n        Summary\n\n        AsbrSummary\n\n        External\n\n        默认值：None，仅在未提供 `Lsa` 时生效。\n\n    Lsa (list of :obj:`Ospfv2LsaConfig`, optional): 要直接通告的LSA配置对象列表。如果提供，则忽略 `Sessions` 和 `Type`。\n        默认值：None。\n\nReturns:\n\n    bool: 布尔值表示操作是否成功（True / False）\n\nExamples:\n    .. code:: RobotFramework\n\n        | Advertise Ospf Lsa | Sessions=${Sessions} | Type=router |\n        | Advertise Ospf Lsa | Sessions=${Sessions} | Lsa=${Lsas} |",
  "TesterLibrary.Protocol.ospfv2.withdraw_ospf_lsa": "Withdraws OSPF Link-State Advertisements (LSAs) either by session or directly by LSA.\n\n    This function provides two modes of operation:\n    1. If 'Lsa' is None, it withdraws LSAs using the provided sessions. Each session in the 'Sessions'\n       list will have its 'withdraw' method called with the specified 'Type'.\n    2. If 'Lsa' is provided (as a single LSA object or a list of LSA objects), it executes an\n       OSPFv2 withdraw command for those specific LSA configurations.\n\n    Parameters:\n        Sessions (Session or iterable of Sessions, optional): Session(s) to use for withdrawing LSAs.\n            These sessions must have a 'withdraw' method that accepts the 'Type' parameter.\n            Only used if 'Lsa' is None. Defaults to None.\n\n        Type (str or any, optional): The type of LSA to withdraw. Passed directly to the session's\n            'withdraw' method if 'Lsa' is None. Required when using the 'Sessions' mode.\n\n        Lsa (Ospfv2LsaConfig or list of Ospfv2LsaConfig, optional): Specific LSA configuration(s)\n            to withdraw. If provided, this overrides the 'Sessions' mode and triggers the\n            OSPFv2 withdraw command directly on the given LSA(s).\n\n    Returns:\n        bool: Always returns True to indicate successful execution of the withdrawal process.\n\n    Description:\n        This function facilitates the withdrawal of OSPF LSAs either through session-based handling\n        or direct manipulation of LSA configurations. When using sessions, each session is iterated\n        over and its 'withdraw' method is invoked. When LSAs are explicitly provided, it constructs\n        and executes an 'Ospfv2WithdrawCommand' via the command layer instance (cl_instance).",
  "TesterLibrary.Protocol.ospfv2.wait_ospf_state": "等待OSPFv2或OSPFv3协议会话达到指定状态。\n\n该函数定期轮询传入的会话对象，检查其OSPF状态是否达到指定的目标状态之一。如果在超时时间内所有会话都达到了目标状态，则返回True；否则抛出TesterException异常。\n\n参数:\n    Sessions (list(:obj:`OspfRouter`) 或 list(:obj:`Ospfv3Router`))：要监控的OSPFv2或OSPFv3协议会话对象列表。\n    State (str 或 list[str], optional)：期望达到的一个或多个状态，默认为['DR', 'BACKUP', 'DROTHER']。支持的状态包括：\n        NOTSTART, P2P, WAITING, DR, BACKUP, DROTHER, DISABLE, DOWN。\n        参数可以是单个字符串或字符串列表，比较时不区分大小写。\n    Interval (int, optional): 轮询间隔时间（单位：秒），默认值为1秒。\n    TimeOut (int, optional): 等待超时时间（单位：秒），默认值为60秒。\n\n返回值:\n    bool: 如果所有会话在超时时间内达到指定状态之一，则返回True；否则抛出TesterException异常。\n\n异常:\n    TesterException: 如果在指定的超时时间内并非所有会话都达到期望状态，则抛出该异常。\n\n注意:\n    - 该函数内部调用 `_wait_state` 方法，并通过 `AttrName='State'` 指定属性进行状态检查。\n    - 如果会话对象的 'State' 属性为枚举类型，则使用其名称进行比较。\n    - 每次检查时，若会话未达到预期状态，会通过 logging.info 记录当前状态。\n\n示例:\n    .. code:: RobotFramework\n\n        | Wait Ospf State | Sessions=${Sessions} | State=DR | Interval=2 | TimeOut=120 |",
  "TesterLibrary.Protocol.ospfv2.wait_ospf_adjacency_state": "等待OSPFv2或OSPFv3协议会话的邻接状态达到指定的目标状态。\n\n该函数定期轮询传入的会话对象，检查其邻接状态（AdjacencyStatus），直到所有会话的状态匹配指定的目标状态或超时时间到达。默认情况下，目标状态为 'FULL'，表示OSPF邻居关系已完全建立。如果在超时时间内所有会话都达到了目标状态，则返回 True；否则将抛出 TesterException 异常。\n\n参数:\n\n    Sessions (list(:obj:`OspfRouter`) 或 list(:obj:`Ospfv3Router`)): 需要监控邻接状态的 OSPFv2 或 OSPFv3 协议会话对象列表。\n\n    State (str 或 str 的可迭代对象, 可选): 期望的邻接状态，默认值为 'FULL'。支持以下状态：\n\n        DOWN\n\n        INIT\n\n        TWOWAY\n\n        EXSTART\n\n        EXCHANGE\n\n        LOADING\n\n        FULL\n\n    注意：状态比较不区分大小写。\n\n    Interval (int 或可转换为 int 的字符串, 可选): 轮询间隔时间（秒），默认值为 1 秒。\n\n    TimeOut (int 或可转换为 int 的字符串, 可选): 等待的最大超时时间（秒），默认值为 60 秒。\n\n返回值:\n\n    bool: 如果所有会话在超时时间内达到了期望的邻接状态之一，则返回 True；否则抛出 TesterException。\n\n异常:\n\n    TesterException: 如果在指定的超时时间内并非所有会话都达到期望的邻接状态，则抛出此异常。\n\n注意事项:\n\n    - 该函数内部调用 `_wait_state` 方法，并指定 `AttrName='AdjacencyStatus'`。\n    - 如果某个会话的当前邻接状态不匹配任何期望状态，该状态将通过 logging.info 记录日志。",
  "TesterLibrary.Protocol.ospfv2.get_ospf_statistic": "获取OSPFv2协议会话统计结果\n\n该函数用于检索一个或多个OSPFv2会话的统计信息。它封装了底层 `_get_statictis()` 方法，专门用于获取类型为 'Ospfv2SessionResultPropertySet' 的统计数据。支持从单个会话对象或多个会话对象中提取统计信息，并可指定需要查询的统计项。\n\nArgs:\n\n    Session (object or list or set or tuple or None):\n        - 如果是 object：表示一个单独的会话对象，使用其 `.Name` 属性作为会话句柄进行过滤。\n        - 如果是 list/set/tuple：表示多个会话对象的集合，将从中提取所有 `.Name` 作为会话句柄。\n        - 如果是 None：不根据会话句柄过滤，返回所有可用的 OSPFv2 会话统计信息。\n        默认值: None\n\n    StaItems (list or str or None):\n        指定要获取的统计属性名称列表或字符串：\n        - 如果是 list：包含多个统计项名称的列表，如 ['TxHello', 'RxUpdate']。\n        - 如果是 str：单个统计项名称，会被自动转换为单元素列表。\n        - 如果是 None：使用 ListROMPropertiesCommand 动态查询所有可用的统计项。\n        默认值: None\n\n        支持的统计项包括但不限于：\n\n            RouterState\n            AdjacencyState\n            TxHello\n            RxHello\n            TxDd\n            RxDd\n            TxRouterLsa\n            RxRouterLsa\n            TxNetworkLsa\n            RxNetworkLsa\n            TxSummaryLsa\n            RxSummaryLsa\n            TxAsbrSummaryLsa\n            RxAsbrSummaryLsa\n            TxAsExternalLsa\n            RxAsExternalLsa\n            TxNssaLsa\n            RxNssaLsa\n            TxTeLsa\n            RxTeLsa\n            TxOpaqueRouterInfoLsa\n            RxOpaqueRouterInfoLsa\n            TxOpaqueExtendedPrefixLsa\n            RxOpaqueExtendedPrefixLsa\n            TxOpaqueExtendedLinkLsa\n            RxOpaqueExtendedLinkLsa\n            TxRequest\n            RxRequest\n            TxUpdate\n            RxAck\n            TxAck\n\nReturns:\n\n    dict or pd.DataFrame or bool:\n        - 如果仅找到一条匹配记录：返回字典，键为请求的统计项名，值为对应的统计值。\n        - 如果找到多条记录：返回 pandas DataFrame，每行对应一个会话的统计信息。\n        - 如果未找到匹配记录：返回 False。\n\nRaises:\n\n    ContinuableFailure: 当底层调用返回 False 时抛出此异常，表示未能获取到统计信息。\n    TesterException: 如果在命令执行或结果获取过程中发生错误。\n    sqlite3.Error: 如果访问数据库时出现异常（如性能统计数据读取失败）。\n    KeyError: 如果索引参数中指定的列在结果中不存在。\n\nSide Effects:\n\n    - 内部调用 `.get()` 方法确保对象数据是最新的。\n    - 可能调用 GotoResultPageCommand 来浏览分页结果视图。\n    - 在 ResultView 模式下切换页面时引入 3 秒延迟以保证数据一致性。\n    - 将获取的结果以表格形式记录日志，便于调试。\n\nExamples:\n    .. code:: RobotFramework\n\n        | @{StaItems} | Create List | AdjacencyState | TxUpdate |\n        | Subscribe Result | Types=Ospfv2SessionResultPropertySet |\n        | Start Protocol |\n        | Sleep | 60 |\n        | &{Result} | Get Ospf Statistic | Session=${Session} | StaItems=@{StaItems} |\n        | Clear Result |",
  "TesterLibrary.Protocol.ospfv2.edit_ospf_port_config": "修改OSPFv2端口配置\n\n该函数用于为一个或多个指定的测试仪表端口对象修改OSPFv2端口配置。\n\nArgs:\n\n    Ports (:obj:`Port` 或 :obj:`list` of :obj:`Port`): 测试仪表端口对象或端口对象列表，每个端口对象必须包含一个'Ospfv2PortConfig'子对象。\n\nKeyword Args:\n\n    TransmitRate (int): OSPFv2 Message Tx Rate（消息/秒），取值范围：1-9000，默认值：100\n    SessionOutstanding (int): OSPFv2会话未完成数，取值范围：1-1000，默认值：20\n    UpdateMsgTransmitRate (int): 已弃用。OSPFv2更新消息发送速率（消息/秒），取值范围：1-9000，默认值：10\n    EnableLoop (bool): 启用环回模式，默认值：False\n\nReturns:\n\n    object 或 :obj:`list` of :obj:`object`: 如果仅处理单个端口，则返回对应的修改后的Ospfv2PortConfig配置对象；\n                                         如果处理多个端口，则返回包含所有修改后配置对象的列表。\n\nExamples:\n    .. code:: RobotFramework\n\n        | Edit Ospf Port Config | Ports=${Ports} | TransmitRate=100 |",
  "TesterLibrary.Protocol.ospfv3.create_ospfv3": "创建OSPFv3协议会话对象。\n\n该函数用于在指定的端口（Port）上创建并初始化一个OSPFv3路由器实例。新创建的实例可以被进一步配置，并注册到全局协议对象映射中，以便后续通过其句柄（handle）进行管理和操作。\n\n参数:\n    Port (:obj:`Port`): 必须的父对象，通常表示测试仪表上的一个物理或逻辑端口，OSPFv3协议会话将依附于该端口之上。\n\n    **kwargs (任意关键字参数): 用于配置OSPFv3协议会话的各项属性，包括但不限于以下可选参数：\n\n        Name (str): OSPFv3会话的名称，默认为系统自动生成。\n\n        Enable (bool): 是否启用该OSPFv3会话，默认为True。\n\n        InstanceId (int): OSPFv3实例ID，取值范围0~255，默认为0。\n\n        AreaId (str): 区域ID，格式为IPv4地址形式（如'0.0.0.0'），取值范围0.0.0.0~255.255.255.255，默认为'0.0.0.0'。\n\n        EnableExtendedLsa (bool): 是否启用扩展LSA，默认为False。\n\n        ExtendedLsaMode (str): 扩展LSA模式，可选值包括NONE、MixedModeOriginateOnly、MixedModeOriginateSPF、Full，默认为Full。\n\n        AreaExtendedLsaMode (str): 区域级别的扩展LSA模式，可选值包括InheritGlobal、NONE、MixedModeOriginateOnly、MixedModeOriginateSPF、Full，默认为InheritGlobal。\n\n        EnableBfd (bool): 是否启用BFD检测机制，默认为False。\n\n        NetworkType (str): 网络类型，可选Broadcast（广播网络）或P2P（点对点网络），默认为Broadcast。\n\n        Priority (int): 路由器优先级，影响DR/BDR选举，取值范围0~255，默认为0。\n\n        InterfaceId (int): 接口ID，取值范围0~4294967295，默认为10。\n\n        Cost (int): 接口开销，取值范围1~65535，默认为10。\n\n        Options (list): OSPFv3选项列表，支持多个标志位，如NONTBIT、V6BIT、EBIT、RBIT等，默认为['NONTBIT', 'V6BIT', 'EBIT', 'RBIT']。\n\n        EnableOspfv3Mtu (bool): 是否启用OSPFv3 MTU协商，默认为True。\n\n        EnableGracefulRestart (bool): 是否启用平滑重启功能，默认为False。\n\n        GracefulRestartReason (str): 平滑重启的原因，可选值包括UNKNOWN、SOFTWARE、RELOADORUPGRADE、SWITCH，默认为UNKNOWN。\n\n        EnableViewRoutes (bool): 是否启用查看路由信息功能，默认为False。\n\n        HelloInterval (int): Hello报文发送间隔（单位：秒），取值范围0~65535，默认为10。\n\n        RouterDeadInterval (int): 路由器失效时间（单位：秒），取值范围0~65535，默认为40。\n\n        LsaRetransInterval (int): LSA重传间隔（单位：秒），取值范围0~4294967295，默认为5。\n\n        LsaRefreshTime (int): LSA刷新间隔（单位：秒），取值范围1~1800，默认为1800。\n\n返回值:\n    :obj:`Ospfv3Router`: 创建的OSPFv3协议会话对象，可用于进一步的配置和管理。\n\n示例:\n    .. code:: RobotFramework\n\n        | Create Ospfv3 | Port=${Port} |\n\n副作用:\n    - 创建的Ospfv3Router实例会被注册到全局的协议对象映射中，可以通过其`handle`属性进行查找和管理。",
  "TesterLibrary.Protocol.ospfv3.edit_ospfv3": "编辑OSPFv3协议会话对象的参数配置\n\nArgs:\n\n    Session (list(:obj:`Ospfv3Router`)): 一个或多个OSPFv3协议会话对象的列表\n\nKeyword Args:\n\n    Name (str): OSPFv3会话名称\n\n    Enable (bool, optional): 是否启用该OSPFv3会话，默认为True\n\n    InstanceId (int, optional): 实例ID，取值范围0-255，默认为0\n\n    AreaId (str, optional): 区域ID，格式为IPv4地址形式，取值范围0.0.0.0-255.255.255.255，默认为0.0.0.0\n\n    EnableExtendedLsa (bool, optional): 是否启用扩展LSA，默认为False\n\n    ExtendedLsaMode (str, optional): 扩展LSA模式，默认为Full，可选值包括：\n\n        NONE\n\n        MixedModeOriginateOnly\n\n        MixedModeOriginateSPF\n\n        Full\n\n    AreaExtendedLsaMode (str, optional): 区域扩展LSA模式，默认为InheritGlobal，可选值包括：\n\n        InheritGlobal\n\n        NONE\n\n        MixedModeOriginateOnly\n\n        MixedModeOriginateSPF\n\n        Full\n\n    EnableBfd (bool, optional): 是否启用BFD，默认为False\n\n    NetworkType (str, optional): 网络类型，默认为Broadcast，也可设为P2P\n\n    Priority (int, optional): 路由器优先级，取值范围0-255，默认为0\n\n    InterfaceId (int, optional): 接口ID，取值范围0-4294967295，默认为10\n\n    Cost (int, optional): 接口开销，取值范围1-65535，默认为10\n\n    Options (list, optional): 选项列表，默认包含['NONTBIT', 'V6BIT', 'EBIT', 'RBIT']，支持的选项包括：\n\n        NONTBIT\n\n        V6BIT\n\n        EBIT\n\n        MCBIT\n\n        NBIT\n\n        RBIT\n\n        DCBIT\n\n        Unused0 至 Unused17\n\n    EnableOspfv3Mtu (bool, optional): 是否启用OSPFv3 MTU协商，默认为True\n\n    EnableGracefulRestart (bool, optional): 是否启用平滑重启功能，默认为False\n\n    GracefulRestartReason (str, optional): 平滑重启原因，默认为UNKNOWN，可选值包括：\n\n        UNKNOWN\n\n        SOFTWARE\n\n        RELOADORUPGRADE\n\n        SWITCH\n\n    EnableViewRoutes (bool, optional): 是否允许查看路由表，默认为False\n\n    HelloInterval (int, optional): Hello报文发送间隔（秒），默认为10，取值范围0-65535\n\n    RouterDeadInterval (int, optional): 路由器失效时间（秒），默认为40，取值范围0-65535\n\n    LsaRetransInterval (int, optional): LSA重传间隔（秒），默认为5，取值范围0-4294967295\n\n    LsaRefreshTime (int, optional): LSA刷新间隔（秒），默认为1800，取值范围1-1800\n\nReturns:\n\n    bool: 操作结果，成功返回True，失败抛出异常ContinuableFailure\n\nBehavior:\n\n    此函数用于修改现有的OSPFv3会话属性。它接受一个或多个会话对象以及任意数量的属性参数，\n    只有当会话对象中已存在指定属性时才会进行更新。未存在的属性不会被创建。\n\nExample:\n    .. code:: RobotFramework\n\n        | Edit Ospfv3 | Session=${Session} | Enable=False | AreaId=1.1.1.1 |",
  "TesterLibrary.Protocol.ospfv3.create_ospfv3_router_lsa": "创建OSPFv3 Router LSA对象，用于表示OSPFv3路由器的链路状态信息。\n\n该函数通过提供的OSPFv3会话(Session)对象创建一个Router LSA（Link State Advertisement）配置。Router LSA用于在OSPFv3域内广播本路由器的拓扑信息，是OSPF协议进行路径计算的基础。\n\nArgs:\n\n    Session (:obj:`Ospfv3Router`): 有效的OSPFv3协议会话对象，提供与底层系统或API的连接上下文。必须实现`create_router_lsa`方法以支持LSA创建操作。\n\nKeyword Args:\n\n    Name (str): 创建的OSPFv3 Router LSA的名称，用于标识该LSA对象。\n\n    Enable (bool): 控制是否启用此LSA。默认为True。\n\n    AdvertisingRouterId (str): 指定最初发布该LSA的路由器ID，格式为IPv4地址形式，取值范围为0.0.0.0到255.255.255.255，默认值为1.0.0.1。\n\n    LinkStateId (int): 链路状态ID，唯一标识该LSA在区域内的实例，取值范围为0到4294967295，默认值为0。\n\n    RouterType (str): 路由器类型，定义了路由器的角色，可选值包括：\n\n        NONEBIT: 默认值，表示普通路由器\n\n        RouterTypeABR: 区域边界路由器\n\n        RouterTypeASBR: 自治系统边界路由器\n\n        RouterTypeVirtype: 虚拟链路路由器\n\n    Options (list): OSPFv3 LSA选项标志列表，控制某些协议行为，支持以下选项：\n\n        NONTBIT, V6BIT, EBIT, MCBIT, NBIT, RBIT, DCBIT 及多个未使用位（Unused0~Unused17）\n\n        默认值为 ['NONTBIT', 'EBIT']。\n\n    Age (int): LSA的老化时间（秒），取值范围为0到3600，默认为0。\n\n    SequenceNumber (int): LSA的序列号，用于LSA更新机制，取值范围为0x1到0xFFFFFFFF，默认值为0x80000001。\n\n    Checksum (bool): 是否启用校验和验证，默认为True。\n\nReturns:\n\n    (:obj:`Ospfv3RouterLsaConfig`): 创建完成的OSPFv3 Router LSA配置对象，具体结构和实现依赖于Session对象的后端实现。\n\nRaises:\n\n    ContinuableFailure: 如果底层调用失败，则抛出该异常，表示函数执行未能成功完成，但测试可以继续执行。\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${Session} | Create Ospfv3 | Port=${Port} |\n        | Create Ospfv3 Router Lsa | Session=${Session} | Age=20 |",
  "TesterLibrary.Protocol.ospfv3.create_ospfv3_router_lsa_link": "创建OSPFv3 Router LSA Link对象\n\n该函数用于在指定的OSPFv3 Router LSA对象上创建一个Router LSA Link，并通过关键字参数对Link进行可选配置。该LSA Link描述了路由器接口与其邻居之间的连接信息，是构建OSPFv3链路状态数据库的一部分。\n\nArgs:\n\n    RouterLsa (:obj:`Ospfv3RouterLsaConfig`): 测试仪表中的OSPFv3 Router LSA对象，表示要关联的父级LSA配置对象。\n\nKeyword Args:\n\n    Name (str): 创建的OSPFv3 Router LSA Link对象的名称，默认由系统自动生成。\n\n    Enable (bool): 是否启用该LSA Link。默认值为True。\n\n    LinkType (str): 链路类型，表示该LSA Link所描述的链路性质。支持选项如下：\n\n        P2P - 点到点链路\n\n        TRANSITNETWORK - 传输网络（广播或多播网络）\n\n        VIRTUALLINK - 虚链路\n\n      默认值为P2P。\n\n    InterfaceId (int): 接口ID，用于唯一标识本端模拟路由器的接口。取值范围为0-4294967295，默认值为1。\n\n    NeighborInterfaceId (int): 邻居接口ID，用于唯一标识邻居路由器的接口。取值范围为0-4294967295，默认值为1。\n\n    NeighborRouterId (str): 邻居路由器的Router ID，格式为IPv4地址字符串。取值范围为0.0.0.0至255.255.255.255，默认值为'1.0.0.1'。\n\n    Metric (int): 度量值，表示该链路的开销值。取值范围为1-65535，默认值为1。\n\nReturns:\n\n    (:obj:`Ospfv3RouterLsaLinksConfig`): 创建的OSPFv3 Router LSA Link对象，可用于后续操作或引用。\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${Session} | Create Ospfv3 | Port=${Port} |\n        | ${RouterLsa} | Create Ospfv3 Router Lsa | Session=${Session} | Age=20 |\n        | Create Ospfv3 Router Lsa Link | RouterLsa=${RouterLsa} | Metric=65535 |",
  "TesterLibrary.Protocol.ospfv3.create_ospfv3_srv6_endx_sid_sub_tlv": "创建OSPFv3 SRv6 End(X) SID Sub-TLV配置对象，用于在指定的OSPFv3会话和Router LSA链路中配置SRv6 End(X) SID子TLV。\n\n**Purpose**  \n该函数用于创建并配置一个OSPFv3 SRv6 End(X) SID Sub-TLV对象，Sub-TLV用于在OSPFv3协议中扩展通告SRv6（Segment Routing over IPv6）的End(X) SID信息。该SID用于实现基于段路由的路径编程功能。\n\n**Parameters**\n\n- **Session** (`Ospfv3Router`): 有效的OSPFv3协议会话对象，表示当前的OSPFv3路由器实例，类型为object。\n- **RouterLsaLink** (`Ospfv3RouterLsaLinksConfig`): OSPFv3 Router LSA中的链路配置对象，用于将SRv6 End(X) SID Sub-TLV绑定到特定LSA链路，类型为object。\n- **Name** (*str, optional*): 创建的SRv6 End(X) SID Sub-TLV对象的名称，默认值由系统自动生成。\n- **Enable** (*bool, optional*): 是否启用该SID配置，默认值：True。\n- **EndpointBehaviorId** (*int, optional*): SRv6 SID的端点行为标识符，用于定义转发行为，默认值：0。\n- **Flags** (*list of str, optional*): 标志位列表，用于控制SID的行为或属性，支持以下标志：\n  - NONEBIT\n  - Unused0\n  - Unused1\n  - Unused2\n  - Unused3\n  - Unused4\n  - PersistentFlag\n  - SetFlag\n  - BackupFlag\n\n  默认值为['NONEBIT']。\n- **Algorithm** (*int, optional*): 与SID关联的算法编号，用于路径计算，默认值：0，取值范围：0-255。\n- **Weight** (*int, optional*): SID的权重，用于负载均衡，默认值：1，取值范围：0-255。\n- **Sid** (*str, optional*): 要通告的SRv6 SID地址，必须是合法的IPv6地址，默认值：'aaaa:1:1:1::'。\n\n**Returns**\n\n- `Ospfv3Srv6EndXSidSubTlvConfig`: 返回创建的SRv6 End(X) SID Sub-TLV配置对象，可用于后续操作如修改、查询或删除该配置项。\n\n**Examples**\n\n.. code:: RobotFramework\n\n    | ${Session} | Create Ospfv3 | Port=${Port} |\n    | ${RouterLsa} | Create Ospfv3 Router Lsa | Session=${Session} | Age=20 |\n    | ${LsaLink} | Create Ospfv3 Router Lsa Link | RouterLsa=${RouterLsa} | Metric=65535 |\n    | Create Ospfv3 Srv6 Endx Sid Sub Tlv | RouterLsaLink=${LsaLink} | Sid='2001:db8::1' | Weight=2 | Flags=['SetFlag','BackupFlag'] |\n\n**Raises**\n\n- `ContinuableFailure`: 如果底层API调用失败，则抛出可继续执行的异常。",
  "TesterLibrary.Protocol.ospfv3.create_ospfv3_srv6_lan_endx_sid_sub_tlv": "创建OSPFv3 SRv6 LAN End.X SID子TLV配置对象。\n\n该函数用于在OSPFv3协议中创建一个SRv6（Segment Routing over IPv6）LAN End.X SID子TLV（Type-Length-Value）配置，通常用于在局域网（LAN）场景中通告SRv6端点行为SID（Segment Identifier）。该子TLV作为Router LSA的一部分，用于支持SRv6在OSPFv3中的扩展功能。\n\nArgs:\n    Session (:obj:`Ospfv3Router`): OSPFv3协议会话对象，提供创建配置的上下文和方法。必须包含底层API所需的会话信息。\n\n    RouterLsaLink (:obj:`Ospfv3RouterLsaLinksConfig`): 与当前SRv6 LAN End.X SID子TLV关联的Router LSA Link对象，表示LSA链路信息。\n\nKeyword Args:\n    Name (str, optional): 创建的SRv6 LAN End.X SID子TLV的名称，默认由系统自动生成。\n\n    Enable (bool, optional): 是否启用该子TLV，默认为True。\n\n    EndpointBehaviorId (int, optional): SRv6 SID的端点行为标识符，用于指定特定的转发行为，默认为0。\n\n    Flags (list of str, optional): 标志位列表，用于指示该SID的属性或用途。默认值为['NONEBIT']，可选值包括：\n\n        'NONEBIT'：无标志\n\n        'Unused0' ~ 'Unused4'：保留未使用的标志位\n\n        'PersistentFlag'：持久化标志\n\n        'SetFlag'：设置标志\n\n        'BackupFlag'：备份标志\n\n    Algorithm (int, optional): 与SID关联的算法编号，取值范围0~255，默认为0。\n\n    Weight (int, optional): END.X SID或LAN END.X SID的权重，用于负载均衡，默认为1，取值范围0~255。\n\n    Sid (str, optional): 要通告的SRv6 SID地址，应为合法的IPv6地址格式，默认为'aaaa:1:1:1::'。\n\nReturns:\n    :obj:`Ospfv3Srv6LanEndXSidSubTlvConfig`: 返回创建的SRv6 LAN End.X SID子TLV配置对象，可用于后续配置或操作。\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${Session} | Create Ospfv3 | Port=${Port} |\n        | ${RouterLsa} | Create Ospfv3 Router Lsa | Session=${Session} | Age=20 |\n        | ${LsaLink} | Create Ospfv3 Router Lsa Link | RouterLsa=${RouterLsa} | Metric=65535 |\n        | Create Ospfv3 Srv6 Lan Endx Sid Sub Tlv | RouterLsaLink=${LsaLink} | Sid=2001:db8::1 | EndpointBehaviorId=11 | Weight=2 |",
  "TesterLibrary.Protocol.ospfv3.create_ospfv3_srv6_link_msd_sub_tlv": "创建OSPFv3 SRv6 Link MSD（Maximum SID Depth）子TLV配置对象。\n\n该函数用于在指定的OSPFv3 Router LSA链路（Router LSA Link）上配置SRv6 MSD子TLV。MSD（Maximum SID Depth）用于指示在SRH（Segment Routing Header）中可以支持的最大SID层级，以控制转发行为，如End.D、T.Insert、T.Encap等。\n\n**参数说明：**\n\n- **Session** (:obj:`Ospfv3Router`)：OSPFv3协议会话对象，用于管理与设备的连接和操作上下文。\n- **RouterLsaLink** (:obj:`Ospfv3RouterLsaLinksConfig`)：要配置SRv6 MSD子TLV的OSPFv3 Router LSA链路对象。\n\n**关键字参数（可选配置项）：**\n\n- **Name** (str)：为创建的SRv6 MSD子TLV对象指定名称，默认自动生成。\n- **Enable** (bool)：是否启用该子TLV，取值范围：True（默认）或False。\n- **Msds** (list)：指定参与MSD限制的标志位，类型为列表，默认值为 `['NONEBIT']`，可选值包括：\n\n  - `'NONTBIT'`\n  - `'MaxiSegmentLeft'`\n  - `'MaxiEndPop'`\n  - `'MaxiTInsert'`\n  - `'MaxiTEncaps'`\n  - `'MaxiEndD'`\n\n- **MaximumEndDSrh** (int)：接收报文中SRH的SL（Segments Left）字段最大允许值，范围0~255，默认值8。\n- **MaximumEndPop** (int)：SRH栈顶SID数量上限，用于End.Pop行为，范围0~255，默认值8。\n- **MaximumSegmentsLeft** (int)：执行T.Insert行为时允许的最大SID数，范围0~255，默认值8。\n- **MaximumTEncapSrh** (int)：执行T.Encap行为时允许的最大SID数，范围0~255，默认值8。\n- **MaximumTInsertSrh** (int)：执行End.DX6/End.DT6功能时SRH中SID的最大数量，范围0~255，默认值8。\n\n**返回值：**\n\n- :obj:`Ospfv3Srv6MsdSubTlvConfig`：创建的OSPFv3 SRv6 Link MSD子TLV配置对象，可用于进一步配置或验证。\n\n**示例代码（RobotFramework语法）：**\n\n.. code:: RobotFramework\n\n    | ${Session} | Create Ospfv3 | Port=${Port} |\n    | ${RouterLsa} | Create Ospfv3 Router Lsa | Session=${Session} | Age=20 |\n    | ${LsaLink} | Create Ospfv3 Router Lsa Link | RouterLsa=${RouterLsa} | Metric=65535 |\n    | ${MsdSubTlv} | Create Ospfv3 Srv6 Link Msd Sub Tlv | RouterLsaLink=${LsaLink} | Enable=True | MaximumEndPop=10 |\n\n**异常处理：**\n如果内部调用失败，将抛出 `ContinuableFailure` 异常。",
  "TesterLibrary.Protocol.ospfv3.create_ospfv3_endx_sid_structure_sub_tlv": "创建OSPFv3 END(X) SID Structure Sub-TLV对象\n\n该方法用于在给定的父级SubTLV上下文中创建并配置一个OSPFv3 END(X) SID Structure Sub-TLV对象。它封装了底层静态方法 `Ospfv3Router.create_endx_sid_structure_sub_tlv` 的创建逻辑，并通过 `@abnormal_check` 装饰器增强了异常行为检查功能，适用于测试自动化场景中的稳定性保障。\n\nArgs:\n\n    SubTlv (:obj:`Ospfv3Srv6EndXSidSubTlvConfig`): 父级SubTLV对象或上下文，在其下创建END(X) SID Structure Sub-TLV，类型为：object\n\nKeyword Args:\n\n    Name (str): 创建的OSPFv3 END(X) SID Structure Sub-TLV对象的名称, 类型为：string\n\n    Enable (bool): 是否使能该Sub-TLV, 类型为：bool, 取值范围：True或False, 默认值：True\n\n    LbLength (int): SRv6 SID Locator Block长度, 类型为：number, 取值范围：0-128, 默认值：32\n\n    LnLength (int): SRv6 SID Locator Node长度, 类型为：number, 取值范围：0-128, 默认值：32\n\n    FunctionLength (int): SRv6 SID Function长度, 类型为：number, 取值范围：0-128, 默认值：32\n\n    ArgumentLength (int): SRv6 SID Argument长度, 类型为：number, 取值范围：0-128, 默认值：32\n\nReturns:\n\n    (:obj:`Ospfv3Srv6SidStructureSubTlvConfig`): 创建并配置完成的OSPFv3 END(X) SID Structure Sub-TLV对象, 类型为：object\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${Session} | Create Ospfv3 | Port=${Port} |\n        | ${RouterLsa} | Create Ospfv3 Router Lsa | Session=${Session} | Age=20 |\n        | ${LsaLink} | Create Ospfv3 Router Lsa Link | RouterLsa=${RouterLsa} | Metric=65535 |\n        | ${SubTlv} | Create Ospfv3 Srv6 Msd Sid Sub Tlv | RouterLsaLink=${LsaLink} |\n        | Create Ospfv3 Endx Sid Structure Sub Tlv | SubTlv=${SubTlv} |",
  "TesterLibrary.Protocol.ospfv3.create_ospfv3_lan_endx_sid_structure_sub_tlv": "创建OSPFv3 LAN End.X SID Structure Sub-TLV对象并进行配置\n\n该函数用于在指定的父级Sub-TLV下创建并配置一个OSPFv3 LAN End.X SID Structure子TLV（Sub-TLV）。\n该Sub-TLV用于SRv6（基于IPv6的段路由）环境中的OSPFv3协议，表示LAN链路上End.X SID的结构定义。\n\nArgs:\n\n    SubTlv (:obj:`Ospfv3Srv6LanEndXSidSubTlvConfig`): 父级Sub-TLV对象，新创建的LAN End.X SID Structure Sub-TLV将依附于其下。\n                                                  通常由其他相关函数（如Create Ospfv3 Srv6 Msd Sid Sub Tlv）创建。\n                                                  类型为：object\n\nKeyword Args:\n\n    Name (str, optional): 新建Sub-TLV的名称，默认值：\"OSPFv3 SRv6 LAN End.X SID Structure SubTLV\"\n    \n    Enable (bool, optional): 是否启用该Sub-TLV，默认值：True\n    \n    LbLength (int, optional): SRv6 SID Locator Block长度，取值范围：0-128，默认值：32\n    \n    LnLength (int, optional): SRv6 SID Locator Node长度，取值范围：0-128，默认值：32\n    \n    FunctionLength (int, optional): SRv6 SID Function长度，取值范围：0-128，默认值：32\n    \n    ArgumentLength (int, optional): SRv6 SID Argument长度，取值范围：0-128，默认值：32\n\nReturns:\n\n    :obj:`Ospfv3Srv6SidStructureSubTlvConfig`: 创建并配置完成的OSPFv3 SRv6 LAN End.X SID Structure Sub-TLV对象实例\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${Session} | Create Ospfv3 | Port=${Port} |\n        | ${RouterLsa} | Create Ospfv3 Router Lsa | Session=${Session} | Age=20 |\n        | ${LsaLink} | Create Ospfv3 Router Lsa Link | RouterLsa=${RouterLsa} | Metric=65535 |\n        | ${SubTlv} | Create Ospfv3 Srv6 Msd Sid Sub Tlv | RouterLsaLink=${LsaLink} |\n        | Create Ospfv3 Lan Endx Sid Structure Sub Tlv | SubTlv=${SubTlv} | Enable=True | LbLength=40 | LnLength=40 | FunctionLength=16 | ArgumentLength=16 |",
  "TesterLibrary.Protocol.ospfv3.create_ospfv3_network_lsa": "创建OSPFv3 Network LSA对象\n\n该函数用于通过指定的OSPFv3会话(Session)创建一个OSPFv3 Network LSA（链路状态通告）配置对象。Network LSA用于描述连接到传输网络的一组路由器，是OSPFv3协议中用于拓扑发现的重要LSA类型。\n\n参数说明如下：\n\nArgs:\n    Session (:obj:`Ospfv3Router`): 一个OSPFv3协议会话对象，通常用于与底层系统或API建立连接并进行交互，其内部应提供创建LSA的方法。\n\nKeyword Args:\n    Name (str): 创建的OSPFv3 Network LSA对象的名称，类型为字符串，默认值由系统自动生成。\n\n    Enable (bool): 是否启用该LSA，取值范围：True 或 False，默认值：True。\n\n    AdvertisingRouterId (str): 通告该LSA的路由器ID，即最初发布该LSA的路由器标识符。格式为IPv4地址形式，取值范围为0.0.0.0至255.255.255.255，默认值：1.1.1.1。\n\n    LinkStateId (int): 链路状态ID，用于唯一标识该LSA在所属区域内的实例。取值范围为0至4294967295，默认值：0。\n\n    Options (list): OSPFv3选项标志位列表，用于指定LSA支持的功能特性。默认值为['NONTBIT', 'EBIT']，支持的选项包括：\n        NONTBIT, V6BIT, EBIT, MCBIT, NBIT, RBIT, DCBIT,\n        Unused17 至 Unused0（保留位）\n\n    Age (int): LSA的生存时间（以秒为单位），用于控制LSA的老化机制。取值范围为0至3600，默认值：0。\n\n    SequenceNumber (int): LSA的序列号，用于检测LSA的新旧状态。取值范围为十六进制0x1至0xFFFFFFFF，默认值：0x80000001。\n\n    Checksum (bool): 是否启用校验和验证。取值范围为True或False，默认值：True。\n\nReturns:\n    (:obj:`Ospfv3NetworkLsaConfig`): 返回创建的OSPFv3 Network LSA配置对象，包含LSA的相关属性信息，如LSA ID、通告路由器、序列号等元数据。\n\nRaises:\n    如果操作失败，将抛出ContinuableFailure异常，提示调用者操作失败。\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${Session} | Create Ospfv3 | Port=${Port} |\n        | Create Ospfv3 Network Lsa | Session=${Session} | Age=20 |\n\n该函数本质上是对底层API的一个封装，允许通过关键字参数灵活配置Network LSA，并返回对应的配置对象供后续操作使用。",
  "TesterLibrary.Protocol.ospfv3.create_ospfv3_network_atch_router": "创建OSPFv3 Network LSA Atch Router对象\n\n该函数用于在指定的OSPFv3 Network LSA上下文中创建一个Network-Attached Router配置对象。它作为对底层`Ospfv3Router.create_network_atch_router`静态方法的封装，允许通过关键字参数进一步配置网络附加路由器的行为。\n\nArgs:\n\n    Lsa (:obj:`Ospfv3NetworkLsaConfig`): 父级OSPFv3 Network LSA配置对象，表示该Network-Attached Router所属的链路状态通告上下文。\n\nKeyword Args:\n\n    Name (str): 创建的OSPFv3 Network LSA Atch Router的名称，类型为字符串。\n\n    Enable (bool): 是否启用该Network-Attached Router，类型为布尔值，取值范围：True 或 False，默认值：True。\n\n    AttachedRouter (str): 附加路由器的IP地址，类型为字符串，取值范围：0.0.0.0 到 255.255.255.255，默认值：0.0.0.0。\n\nReturns:\n\n    (:obj:`Ospfv3NetworkAtchRouterConfig`): 返回一个OSPFv3 Network-Attached Router配置对象，可用于进一步编辑或集成到路由配置中。\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${Session} | Create Ospfv3 | Port=${Port} |\n        | ${RouterLsa} | Create Ospfv3 Network Lsa | Session=${Session} | Age=20 |\n        | Create Ospfv3 Network Lsa Atch Router | Lsa=${RouterLsa} | Metric=65535 |",
  "TesterLibrary.Protocol.ospfv3.create_ospfv3_intra_area_prefix_lsa": "创建OSPFv3 Intra Area Prefix LSA对象\n\n该函数用于创建一个OSPFv3 Intra-Area Prefix LSA（链路状态广告），用于在OSPFv3协议中在一个区域内通告IPv6前缀信息。它通过调用底层会话方法实现，可用于模拟或注入路由信息以进行网络测试。\n\nArgs:\n\n    Session (:obj:`Ospfv3Router`): 有效的OSPFv3协议会话对象列表，用于管理OSPFv3连接和上下文。\n\nKeyword Args:\n\n    Name (str): 创建的LSA对象的名称，默认值：空字符串。\n\n    Enable (bool): 是否启用该LSA对象，默认值：True。\n\n    AdvertisingRouterId (str): 通告路由器ID，表示最初发布该LSA的路由器ID。取值范围为IPv4地址格式字符串，默认值：1.1.1.1。\n\n    LinkStateId (int): 链路状态ID，标识该LSA的唯一性。取值范围：0-4294967295，默认值：0。\n\n    ReferencedLsType (str): 被引用的LSA类型，十六进制数表示。取值范围：0x0-0xFFFF，默认值：0x0。\n\n    ReferencedAdvertisingRouterId (str): 被引用LSA的通告路由器ID，格式与AdvertisingRouterId一致，默认值：0.0.0.0。\n\n    ReferencedLinkStateId (int): 被引用LSA的链路状态ID，取值范围：0-4294967295，默认值：0。\n\n    ExtendedLsaTlvs (list): 扩展LSA TLV选项。支持选项包括NONE和Ipv6IntraAreaPrefix，默认值：Ipv6IntraAreaPrefix。\n\n    PrefixCount (int): 需要生成的IPv6前缀数量。取值范围：1-4294967295，默认值：1。\n\n    StartPrefixAddress (str): 起始IPv6网络前缀地址，默认值：2000::1。\n\n    PrefixLength (int): 前缀长度，表示子网掩码长度。取值范围：1-128，默认值：64。\n\n    Increment (int): 步长，用于计算连续前缀之间的增量。取值范围：0-4294967295，默认值：1。\n\n    PrefixOptions (list): 前缀选项标志位，支持多个选项，包括NONTBIT、NUBIT、LABIT、MCBIT、PBIT、DNBit、NBit等，默认值：NONTBIT。\n\n    Metric (int): 度量值，表示到达该前缀的成本。取值范围：1-16777215，默认值：1。\n\n    Age (int): LSA的老化时间（秒）。取值范围：0-3600，默认值：0。\n\n    SequenceNumber (int): LSA的序列号，用于LSA更新控制。取值范围：0x1-0xFFFFFFFF，默认值：0x80000001。\n\n    Checksum (bool): 是否启用校验和，默认值：True。\n\nReturns:\n\n    (:obj:`Ospfv3IntraAreaPrefixLsaConfig`): 返回创建的OSPFv3 Intra Area Prefix LSA配置对象，可用于进一步操作或注入网络中。\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${Session} | Create Ospfv3 | Port=${Port} |\n        | Create Ospfv3 Intra Area Prefix Lsa | Session=${Session} | Age=20 |",
  "TesterLibrary.Protocol.ospfv3.create_ospfv3_inter_area_prefix_lsa": "创建OSPFv3 Inter-Area-Prefix LSA（链路状态通告）对象。\n\n该函数用于在OSPFv3协议中创建一个Inter-Area-Prefix LSA配置。它通过提供的会话对象调用底层实现方法，并将所有关键字参数透传给该方法。此LSA通常用于在不同区域之间传播IPv6前缀信息。\n\nArgs:\n    Session (:obj:`Ospfv3Router`): 一个OSPFv3协议会话对象，必须具有`create_inter_area_prefix_lsa`方法，用于实际执行LSA的创建操作。\n\nKeyword Args:\n    Name (str): 创建的OSPFv3 Inter Prefix LSA的名称。\n    Enable (bool): 是否启用该LSA，默认为True。\n    AdvertisingRouterId (str): 通告路由器ID，即最初发布该LSA的路由器ID，默认为\"1.1.1.1\"。\n    LinkStateId (int): 链路状态ID，取值范围0-4294967295，默认为0。\n    ExtendedLsaTlvs (list): 扩展LSA TLVs，默认为[\"Ipv6InterAreaPrefix\"]，支持选项包括：\n        NONE\n        Ipv6InterAreaPrefix\n    PrefixCount (int): 前缀数量，取值范围1-4294967295，默认为1。\n    StartPrefixAddress (str): 起始网络前缀地址，必须是合法的IPv6地址，默认为\"2000::1\"。\n    PrefixLength (int): 前缀长度，取值范围1-128，默认为64。\n    Increment (int): 前缀递增步长，取值范围0-4294967295，默认为1。\n    PrefixOptions (list): 前缀选项，默认为[\"NONTBIT\"]，支持选项包括：\n        NONTBIT\n        NUBIT\n        LABIT\n        MCBIT\n        PBIT\n    Metric (int): 路由度量值，取值范围1-16777215，默认为1。\n    Age (int): LSA老化时间（秒），取值范围0-3600，默认为0。\n    SequenceNumber (int): 序列号，十六进制格式，取值范围0x1-0xFFFFFFFF，默认为0x80000001。\n    Checksum (bool): 是否启用校验和，默认为True。\n\nReturns:\n    :obj:`Ospfv3InterAreaPrefixLsaConfig`: 返回创建的OSPFv3 Inter-Area-Prefix LSA配置对象，可用于进一步操作或检查。\n\nRaises:\n    ContinuableFailure: 如果底层调用失败，则抛出可继续执行的异常。\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${Session} | Create Ospfv3 | Port=${Port} |\n        | Create Ospfv3 Inter Area Prefix Lsa | Session=${Session} | Age=20 |",
  "TesterLibrary.Protocol.ospfv3.create_ospfv3_inter_area_router_lsa": "创建OSPFv3 Inter-Area Router LSA对象\n\n该函数用于在OSPFv3协议中创建Inter-Area Router LSA（链路状态通告），代表区域间的路由信息。它通过提供的Session对象调用底层实现方法，可用于模拟或配置网络设备的OSPFv3行为。\n\nArgs:\n\n    Session (:obj:`Ospfv3Router`): 一个OSPFv3协议会话对象，提供与底层系统通信的上下文和连接。\n        必须包含 `create_inter_area_router_lsa` 方法以处理LSA的实际创建。\n\nKeyword Args:\n\n    Name (str): 创建的OSPFv3 Inter-Area Router LSA的名称，类型为字符串。\n\n    Enable (bool): 是否启用该LSA。取值范围：True 或 False，默认值：True。\n\n    AdvertisingRouterId (str): 通告路由器ID，表示最初发布该LSA的路由器ID。\n        类型为字符串，取值范围：0.0.0.0-255.255.255.255，默认值：1.1.1.1。\n\n    LinkStateId (int): 链路状态ID，唯一标识该LSA的ID。取值范围：0-4294967295，默认值：0。\n\n    AsbrId (str): AS边界路由器(ASBR)的ID，表示该LSA关联的ASBR ID。\n        类型为字符串，取值范围：0.0.0.0-255.255.255.255，默认值：0.0.0.0。\n\n    Metric (int): 路由度量值，用于路径选择的成本值。取值范围：1-16777215，默认值：1。\n\n    Options (list): 可选参数列表，用于指定LSA的行为标志位。支持选项包括：\n\n        NONTBIT, V6BIT, EBIT, MCBIT, NBIT, RBIT, DCBIT,\n        Unused17, Unused16, Unused15, Unused14, Unused13, Unused12, Unused11, Unused10,\n        Unused9, Unused8, Unused7, Unused6, Unused5, Unused4, Unused3, Unused2,\n        Unused1, Unused0\n        \n        默认值：NONTBIT | V6BIT | EBIT。\n\n    Age (int): LSA的老化时间（秒）。取值范围：0-3600，默认值：0。\n\n    SequenceNumber (int): 序列号，用于标识LSA更新的版本。类型为十六进制数，取值范围：0x1-0xFFFFFFFF，默认值：0x80000001。\n\n    Checksum (bool): 是否启用校验和验证。取值范围：True 或 False，默认值：True。\n\nReturns:\n\n    (:obj:`Ospfv3InterAreaRouterLsaConfig`): 创建的OSPFv3 Inter-Area Router LSA配置对象，类型为对象，具体结构取决于Session的实现。\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${Session} | Create Ospfv3 | Port=${Port} |\n        | Create Ospfv3 Inter Area Router Lsa | Session=${Session} | Age=20 |",
  "TesterLibrary.Protocol.ospfv3.create_ospfv3_sr_fapm_sub_tlv": "创建OSPFv3 SR FAPM（Segment Routing Flexible Algorithm Prefix Metric）子TLV配置对象。\n\n该函数用于封装底层静态方法，创建并配置与特定LSA关联的OSPFv3 Segment Routing FAPM子TLV配置对象。通过关键字参数提供可选的配置项，使用户能够灵活地自定义子TLV的属性。\n\n参数：\n    Lsa (:obj:`Ospfv3InterAreaRouterLsaConfig`): 父链路状态通告（LSA）对象，该LSA将作为SR FAPM子TLV的承载容器，类型为：object。\n    **kwargs (dict, optional): 任意关键字参数，用于配置SR FAPM子TLV的属性，包括但不限于以下选项：\n\n        Name (str): 创建的SR FAPM子TLV的名称，类型为字符串。\n\n        Enable (bool): 是否启用该子TLV，取值范围为True或False，默认值为True。\n\n        Algorithm (int): 灵活算法ID，取值范围为128-255，默认值为128。\n\n        Metric (int): 度量值，取值范围为128-255，默认值为0。\n\n返回值：\n    :obj:`Ospfv3SrFapmSubTlvConfig`: 表示创建的SR FAPM子TLV配置对象，该对象已绑定指定的LSA，并根据提供的关键字参数进行了初始化和配置。\n\n异常：\n    当创建失败时，抛出ContinuableFailure异常，提示调用失败信息。\n\n示例：\n    .. code:: RobotFramework\n\n        | ${Session} | Create Ospfv3 | Port=${Port} |\n        | ${Lsa} | Create Ospfv3 Inter Area Prefix Lsa | Session=${Session} | Age=20 |\n        | Create Ospfv3 Sr Fapm Sub Tlv | Lsa=${Lsa} |",
  "TesterLibrary.Protocol.ospfv3.create_ospfv3_bier_sub_tlv": "创建OSPFv3 BIER子TLV对象并将其关联到指定的LSA（链路状态通告）。\n\n该函数用于在指定的OSPFv3 LSA下创建并配置一个BIER（Bit Index Explicit Replication）子TLV对象。BIER是一种用于高效多播转发的技术，该子TLV用于携带与BIER相关的配置信息，例如子域ID、BFR ID等。此函数提供了一个实例化的接口来创建和返回已配置的BIER子TLV对象。\n\n参数:\n    Lsa (:obj:`Ospfv3InterAreaRouterLsaConfig`): 父级OSPFv3 LSA对象，表示将要添加BIER子TLV的LSA。类型为对象。\n\n关键字参数（可选）:\n    Name (str): 创建的OSPFv3 BIER子TLV的名称，默认由系统自动生成。\n    Enable (bool): 是否启用该BIER子TLV，默认值：True。\n    TlvType (int): TLV的Type字段值，默认值：9。\n    SubDomainId (int): BIER子域ID，取值范围1-255，默认值：1。\n    MtId (int): 多拓扑ID（Multi-topology ID），取值范围1-255，默认值：1。\n    BfrId (int): BFR（比特转发路由器）ID，取值范围1-65535，默认值：1。\n    Bar (int): BIER算法标识符，取值范围0-255，默认值：0。\n    Ipa (int): IGP算法标识符，取值范围0-255，默认值：0。\n\n返回:\n    (:obj:`Ospfv3BierSubTlvConfig`): 返回创建的OSPFv3 BIER子TLV配置对象，可用于进一步操作或查询。\n\n异常:\n    如果创建失败，抛出ContinuableFailure异常。\n\n示例:\n    .. code:: RobotFramework\n\n        | ${Session} | Create Ospfv3 | Port=${Port} |\n        | ${Lsa} | Create Ospfv3 Inter Area Prefix Lsa | Session=${Session} | Age=20 |\n        | Create Ospfv3 Bier Sub Tlv | Lsa=${Lsa} |",
  "TesterLibrary.Protocol.ospfv3.create_ospfv3_bier_mpls_encap_sub_tlv": "创建OSPFv3 Bier Mpls Encap Sub Tlv对象\n\n该方法用于在OSPFv3协议栈中创建并配置一个BIER MPLS封装子TLV（Sub-TLV）对象。它作为底层静态方法 `Ospfv3Router.create_bier_mpls_encap_sub_tlv` 的封装，提供与 RenixAPI 实例的集成能力。新创建的Bier Mpls Encap Sub Tlv对象会关联到指定的父级TLV/SubTLV结构，并允许通过关键字参数进行初始化配置。\n\nArgs:\n\n    SubTlv (:obj:`Ospfv3BierSubTlvConfig`): 父级或上层TLV/SubTLV对象，表示当前创建的MPLS封装子TLV所属的上下文环境。通常为另一个SubTLV或TLV结构的一部分。\n\nKeyword Args:\n\n    Name (str): 创建的OSPFv3 Bier Mpls Encap Sub Tlv对象的名称，默认值由系统自动生成。\n\n    Enable (bool): 是否启用该Sub Tlv对象。默认值：True。\n\n    TlvType (int): TLV中的Type字段值，标识该Sub Tlv的类型。取值范围：0-255，默认值：10。\n\n    MaxSi (int): 最大Set Identifier(SI)值，用于定义BIER转发集合的最大索引。取值范围：1-255，默认值：1。\n\n    Label (int): 标签范围中的起始标签值，用于MPLS封装的标签分配。取值范围：0-1048575，默认值：100。\n\n    BsLen (int): 本地比特串长度，表示转发比特串的大小。取值范围：0-15，默认值：4。\n\nReturns:\n\n    (:obj:`Ospfv3BierMplsEncapSubTlvConfig`): 成功创建并可选配置后的OSPFv3 Bier Mpls Encap Sub Tlv配置对象。\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${Session} | Create Ospfv3 | Port=${Port} |\n        | ${Lsa} | Create Ospfv3 Inter Area Prefix Lsa | Session=${Session} | Age=20 |\n        | ${SubTlv} | Create Ospfv3 Bier Sub Tlv | Lsa=${Lsa} |\n        | Create Ospfv3 Bier Mpls Encap Sub Tlv | SubTlv=${SubTlv} | Name=\"MPLSEncap\" | MaxSi=8 | Label=200 | BsLen=6 |",
  "TesterLibrary.Protocol.ospfv3.create_ospfv3_as_external_lsa": "创建OSPFv3 AS-External LSA配置对象\n\n该函数用于在OSPFv3协议中创建一个AS-External LSA（自治系统外部链路状态通告）的配置。该LSA通常由AS边界路由器生成，用来描述到达OSPF自治系统外部的目的网络的信息。\n\nArgs:\n\n    Session (:obj:`Ospfv3Router`): 一个OSPFv3协议会话对象，提供与OSPFv3相关的配置和操作接口。类型为object。\n\nKeyword Args:\n\n    Name (str): 创建的OSPFv3 AS-External LSA的名称，默认值：空字符串。\n\n    Enable (bool): 是否启用该LSA，默认值：True。\n\n    AdvertisingRouterId (str): 指定最初发布LSA的路由器ID，格式为IPv4地址形式，取值范围：0.0.0.0 - 255.255.255.255，默认值：1.1.1.1。\n\n    LinkStateId (int): 链路状态ID，用于标识该LSA的唯一性，取值范围：0 - 4294967295，默认值：0。\n\n    PrefixCount (int): 前缀个数，表示该LSA将包含多少个前缀信息，取值范围：1 - 4294967295，默认值：1。\n\n    StartPrefixAddress (str): 起始网络前缀地址，IPv6格式，用于生成多个前缀时的起始地址，默认值：2000::1。\n\n    PrefixLength (int): 网络前缀长度，即子网掩码长度，取值范围：1 - 128，默认值：64。\n\n    Increment (int): 前缀地址增量，用于生成多个连续或非连续前缀时的步长，默认值：1。\n\n    PrefixOptions (list): 前缀选项列表，可选标志位，支持以下值：\n\n        NONTBIT: 非传输位\n        NUBIT: 非唯一位\n        LABIT: 本地置位\n        MCBIT: 多播位\n        PBIT: PRF位\n        DNBit: Down位\n        NBit: NSSA位\n        Unused1/Unused0: 保留字段\n\n        默认值：['NONTBIT']\n\n    IsExternalMetric (bool): 是否使用外部度量值类型，默认值：False。\n\n    Metric (int): 度量值，用于指定到达外部路由的成本值，取值范围：1 - 16777215，默认值：1。\n\n    EnableForwardingAddress (bool): 是否启用转发地址，默认值：False。\n\n    ForwardingAddress (str): 转发地址，当启用时，数据包应被转发到此IPv6地址，默认值：'::'。\n\n    AdminTag (int): 管理标签，可用于策略控制，取值范围：0 - 4294967295，默认值：0。\n\n    ReferencedLsType (int): 参考的LSA类型，仅在某些特殊情况下使用，取值范围：0x0 - 0xFFFF，默认值：0x0。\n\n    ReferencedLinkStateId (int): 参考LSA的链路状态ID，取值范围：0 - 4294967295，默认值：0。\n\n    Age (int): LSA的生存时间（秒），取值范围：0 - 3600，默认值：0。\n\n    SequenceNumber (int): LSA的序列号，用于LSA的新旧比较，取值范围：0x1 - 0xFFFFFFFF，默认值：0x80000001。\n\n    LsaAutomaticConversion (bool): 是否自动转换LSA类型（例如NSSA LSA转External LSA），默认值：True。\n\n    Checksum (bool): 是否计算校验和，默认值：True。\n\nReturns:\n\n    (:obj:`Ospfv3AsExternalLsaConfig`): 返回创建的OSPFv3 AS-External LSA配置对象，可用于进一步配置或激活该LSA。\n\nRaises:\n\n    ContinuableFailure: 如果底层调用失败（返回False），则抛出ContinuableFailure异常。\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${Session} | Create Ospfv3 | Port=${Port} |\n        | Create Ospfv3 As External Lsa | Session=${Session} | Age=20",
  "TesterLibrary.Protocol.ospfv3.create_ospfv3_nssa_external_lsa": "创建OSPFv3 NSSA（Not-So-Stubby Area）外部LSA（Link State Advertisement，链路状态通告）对象。\n\n该函数用于在网络测试或模拟环境中创建一个OSPFv3 NSSA外部LSA，以模拟OSPFv3路由行为。它基于提供的会话对象和配置参数生成LSA，并根据会话类型自动进行LSA类型转换（NSSA LSA与外部LSA之间的转换）。\n\nArgs:\n\n    Session (:obj:`Ospfv3Router`): 一个OSPFv3协议会话对象，提供创建LSA的上下文和方法。该对象必须包含 `create_nssa_external_lsa` 方法。\n\nKeyword Args:\n\n    Name (str): 创建的OSPFv3 NSSA External LSA的名称。\n\n    Enable (bool): 是否启用该LSA，默认为True。\n\n    AdvertisingRouterId (str): 通告路由器ID，即最初发布LSA的路由器ID，格式为IPv4地址，默认为\"1.1.1.1\"。\n\n    LinkStateId (int): 链路状态ID，取值范围：0-4294967295，默认为0。\n\n    ExtendedLsaTlvs (list): 扩展LSA TLVs列表，支持选项包括 NONE 和 Ipv6ExternalPrefix，默认为 [\"Ipv6ExternalPrefix\"]。\n\n    ExtendedLsaSubTlvs (list): 扩展LSA Sub-TLV列表，支持选项包括：\n\n        NONE\n\n        Ipv6ForwardingAddr\n\n        Ipv4ForwardingAddr\n\n        RouteTag\n\n        默认值为空列表。\n\n    PrefixCount (int): 前缀数量，表示生成的IPv6前缀个数，默认为1。\n\n    StartPrefixAddress (str): 起始IPv6网络前缀地址，默认为\"2000::1\"。\n\n    PrefixLength (int): IPv6前缀长度，取值范围1-128，默认为64。\n\n    Increment (int): 每个前缀之间的步长值，默认为1。\n\n    PrefixOptions (list): 前缀选项列表，支持选项包括：\n\n        NONTBIT\n\n        NUBIT\n\n        LABIT\n\n        MCBIT\n\n        PBIT\n\n        DNBit\n\n        NBit\n\n        Unused1\n\n        Unused0\n\n        默认为 [\"NONTBIT\"]。\n\n    IsExternalMetric (bool): 是否使用外部度量值，默认为False。\n\n    Metric (int): 度量值，取值范围1-16777215，默认为1。\n\n    EnableForwardingAddress (bool): 是否启用IPv6转发地址，默认为False。\n\n    ForwardingAddress (str): IPv6转发地址，默认为 '::'。\n\n    Ipv4ForwardingAddress (str): IPv4转发地址，默认为 '0.0.0.0'。\n\n    AdminTag (int): 管理标签，用于标识路由策略，默认为0。\n\n    ReferencedLsType (int): 参考链路状态类型（以十六进制表示），默认为0x0。\n\n    ReferencedLinkStateId (int): 参考链路状态ID，默认为0。\n\n    Age (int): LSA的生存时间（秒），取值范围0-3600，默认为0。\n\n    SequenceNumber (int): 序列号（十六进制格式），取值范围0x1-0xFFFFFFFF，默认为0x80000001。\n\n    Checksum (bool): 是否计算校验和，默认为True。\n\n    LsaAutomaticConversion (bool): 是否启用LSA自动转换功能，默认为True。当会话为NSSA类型时，将外部LSA自动转为NSSA-LSA；反之亦然。\n\nReturns:\n\n    (:obj:`Ospfv3NssaExternalLsaConfig`): 返回创建的OSPFv3 NSSA External LSA配置对象，可用于进一步配置或操作。\n\nRaises:\n\n    ContinuableFailure: 如果底层调用失败，则抛出此异常，表示操作未成功完成。\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${Session} | Create Ospfv3 | Port=${Port} |\n        | Create Ospfv3 Nssa External Lsa | Session=${Session} | Age=20 |",
  "TesterLibrary.Protocol.ospfv3.create_ospfv3_link_lsa": "创建OSPFv3 Link LSA对象\n\n该函数用于在OSPFv3协议中创建一个Link LSA（链路状态通告），用于描述IPv6接口的链路本地状态和路由器信息。它通过给定的会话对象调用底层API来创建LSA，并允许通过关键字参数配置LSA的各种属性。\n\nArgs:\n\n    Session (:obj:`Ospfv3Router`): 有效的OSPFv3协议会话对象，必须已正确配置并支持创建Link LSA的功能。\n\nKeyword Args:\n\n    Name (str): 创建的OSPFv3 Link LSA的名称。\n\n    Enable (bool): 是否启用该LSA，默认值：True。\n\n    AdvertisingRouterId (str): 通告路由器ID，表示最初发布该LSA的路由器ID，默认值：1.1.1.1。\n\n    LinkStateId (int): 链路状态ID，取值范围：0-4294967295，默认值：0。\n\n    ExtendedLsaTlvs (list): 扩展LSA TLVs字段，可选值包括NONE、Ipv6IntraAreaPrefix、Ipv6LinkLocalAddr、Ipv4LinkLocalAddr，默认值：Ipv6IntraAreaPrefix。\n\n    PrefixCount (int): 要发布的前缀数量，取值范围：1-4294967295，默认值：1。\n\n    StartPrefixAddress (str): 起始IPv6网络前缀地址，默认值：2000::1。\n\n    PrefixLength (int): 前缀长度，表示IPv6地址的子网掩码长度，取值范围：1-128，默认值：64。\n\n    Increment (int): 前缀地址步长，用于生成多个连续的IPv6前缀地址，默认值：1。\n\n    PrefixOptions (list): 前缀选项字段，用于控制路由行为，默认值：NONTBIT，支持选项有：\n\n        NONTBIT, NUBIT, LABIT, MCBIT, PBIT, DNBit, NBit, Unused1, Unused0。\n\n    LinkLocalInterfaceAddress (str): IPv6链路本地接口地址，默认值：fe80::1。\n\n    Ipv4LinkLocalInterfaceAddress (str): IPv4链路本地接口地址，默认值：0.0.0.0。\n\n    RouterPriority (int): 路由器优先级，用于DR/BDR选举，取值范围：1-255，默认值：1。\n\n    Options (list): OSPFv3选项字段，用于控制LSA处理行为，默认值：NONTBIT | V6BIT | EBIT，支持选项包括：\n\n        NONTBIT, V6BIT, EBIT, MCBIT, NBIT, RBIT, DCBIT, 及多个未使用位(UnusedXX)。\n\n    Age (int): LSA的老化时间（秒），取值范围：0-3600，默认值：0。\n\n    SequenceNumber (int): LSA序列号，用于检测LSA的新旧状态，取值范围：0x1-0xFFFFFFFF，默认值：0x80000001。\n\n    Checksum (bool): 是否启用校验和，默认值：True。\n\nReturns:\n\n    (:obj:`Ospfv3LinkLsaConfig`): 创建成功的OSPFv3 Link LSA配置对象，可用于进一步管理或检查LSA的状态。\n\nRaises:\n\n    ContinuableFailure: 如果底层API调用失败，则抛出此异常，表明创建Link LSA操作未成功完成。\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${Session} | Create Ospfv3 | Port=${Port} |\n        | Create Ospfv3 Link Lsa | Session=${Session} | Age=20 |",
  "TesterLibrary.Protocol.ospfv3.create_ospfv3_opaque_router_info_lsa": "创建OSPFv3 Opaque Router Info LSA对象\n\n该函数用于创建一个OSPFv3 Opaque LSA（链路状态通告），其中携带了路由器特定的信息。Opaque LSA允许在OSPFv3域中传播厂商或应用特定的扩展信息，适用于需要自定义路由行为或功能通告的场景。\n\nArgs:\n\n    Session (:obj:`Ospfv3Router`): 一个OSPFv3协议会话对象，用于与底层设备或模拟引擎进行交互，必须为类型为 `Ospfv3Router` 的实例。\n\nKeyword Args:\n\n    Name (str): 创建的OSPFv3 Opaque Router Info LSA的名称，默认值为空。类型为字符串。\n\n    Enable (bool): 是否启用此LSA。取值范围为True或False，默认值为True。\n\n    Scope (str): Opaque LSA的作用域。默认值为AreaLocal，可选值包括：\n\n        LinkLocal: 链路本地作用域\n\n        AreaLocal: 区域本地作用域\n\n        AreaSystemWide: 系统范围内有效\n\n    AdvertisingRouterId (str): 发布此LSA的路由器ID，格式应为IPv4地址。默认值为'192.0.0.1'。\n\n    LinkStateId (int): 链路状态标识符，表示该LSA的优先级或唯一标识。取值范围1-255，默认值为0。\n\n    TlvsFlag (list): TLV字段标志位，指示包含的能力类型。默认值为['NONTBIT', 'InfoCapabilities']，支持选项有：\n\n        NONEBIT: 无能力设置\n\n        InfoCapabilities: 启用信息类能力\n\n        FuncCapabilities: 启用功能类能力\n\n    InformationalCapabilities (list): 信息类能力位设置。默认值为['NONEBIT']，支持的选项包括：\n\n        NONEBIT\n\n        RcBit: 路由计算能力\n\n        RhBit: 路由保持能力\n\n        SrsBit: SR策略能力\n\n        TesBit: 流量工程能力\n\n        PolBit: 策略能力\n\n        Etbit: 可扩展性能力\n\n        MiBit: 多实例能力\n\n        SrhBit: SR头部支持能力\n\n        Unused8 至 Unused30: 预留未使用位\n\n    FunctionalCapabilities (list): 功能类能力位设置。默认值为['NONEBIT']，支持的选项包括：\n\n        NONEBIT\n\n        Unused0 至 Unused30: 预留未使用位\n\n    Age (int): LSA的老化时间（秒）。取值范围0-3600，默认值为0。\n\n    SequenceNumber (int): LSA序列号，用于版本控制。取值范围0x1-0xFFFFFFFF，默认值为0x80000001。\n\n    Checksum (bool): 是否启用校验和验证。取值范围True或False，默认值为True。\n\nReturns:\n\n    (:obj:`Ospfv3OpaqueRouterInfoLsaConfig`): 成功创建后返回一个配置对象，表示当前创建的OSPFv3 Opaque Router Info LSA实例。\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${Session} | Create Ospfv3 | Port=${Port} |\n        | Create Ospfv3 Opaque Router Info LSA | Session=${Session} | Age=20 |",
  "TesterLibrary.Protocol.ospfv3.create_ospfv3_sr_algorithm_tlv": "创建OSPFv3 Segment Routing Algorithm TLV对象\n\n该函数用于在OSPFv3协议中创建并配置一个Segment Routing（SR）Algorithm TLV（Type-Length-Value）对象。SR Algorithm TLV用于通告路由器所支持的段路由算法，是实现段路由功能的关键配置之一。\n\nArgs:\n\n    Lsa (:obj:`Ospfv3OpaqueRouterInfoLsaConfig`): 父级LSA对象，表示要将此SR Algorithm TLV关联的OSPFv3 Opaque Router Info LSA配置对象，类型为object\n\nKeyword Args:\n\n    Name (str): 创建的OSPFv3 SR Algorithm TLV对象的名称，类型为字符串，默认值由系统自动分配\n\n    Enable (bool): 是否启用该TLV配置，类型为布尔值，取值范围：True或False，默认值：True\n\n    Algorithms (int): 指定支持的段路由算法编号，类型为整数，通常使用的算法包括0（SPF最短路径优先）、1（Strict SPF）等，默认值：0\n\nReturns:\n\n    (:obj:`Ospfv3SrAlgorithmTlvConfig`): 返回创建的OSPFv3 SR Algorithm TLV配置对象，可用于后续进一步配置或应用到会话中，类型为object\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${Session} | Create Ospfv3 | Port=${Port} |\n        | ${Lsa} | Create Ospfv3 Opaque Router Info LSA | Session=${Session} | Age=20 |\n        | ${Tlv} | Create Ospfv3 Sr Algorithm Tlv | Lsa=${Lsa} | Enable=True | Algorithms=0 | Name=SR_Algo_TLV_1 |",
  "TesterLibrary.Protocol.ospfv3.create_ospfv3_sr_fad_tlv": "创建OSPFv3 Segment Routing FAD (Forwarding Adjacency Downstream) TLV对象。\n\n该函数用于在指定的OSPFv3会话和LSA下创建一个Segment Routing FAD TLV配置。FAD TLV通常用于SR（Segment Routing）中，描述转发邻接信息并传递路径约束条件。\n\nArgs:\n    Session (:obj:`Ospfv3Router`): OSPFv3协议会话对象，提供对SR FAD TLV创建方法的访问。\n\n    Lsa (:obj:`Ospfv3OpaqueRouterInfoLsaConfig`): 与该TLV关联的OSPFv3 Opaque Router Info LSA对象，TLV将绑定到此LSA下。\n\nKeyword Args:\n    Name (str): 创建的OSPFv3 Sr Fad Tlv的名称，默认由系统自动生成。\n\n    Enable (bool): 是否启用该TLV，默认值：True。\n\n    FlexAlgorithm (int): 灵活算法ID，取值范围：128-255，默认值：128。\n\n    MetricType (str): 度量类型，表示计算路径时使用的度量标准，可选值包括：\n\n        - IGPMetric\n        - MinUnidirectionalLinkDelay\n        - TEDefaultMetric\n\n      默认值：IGPMetric。\n\n    CalculationType (int): 特定IGP算法的计算类型，取值范围：0-127，默认值：0。\n\n    Priority (int): 该TLV的优先级，用于多个TLV存在时的选择顺序，取值范围：0-255，默认值：0。\n\n    FlexAlgorithmSubTlvs (list): 指定灵活算法路径计算需遵循的约束条件列表，支持以下选项：\n\n        - NONEBIT\n        - ExcludeAdminGroups\n        - IncludeAnyAdminGroups\n        - IncludeAllAdminGroups\n        - DefinitionFlags\n        - ExcludeSRLG\n\n      默认值：['NONEBIT']。\n\n    ExcludeAdminGroups (int): 排除的管理组位掩码，取值范围：0-4294967295，默认值：0。\n\n    IncludeAnyAdminGroups (int): 包含任意一个匹配的管理组位掩码，默认值：0。\n\n    IncludeAllAdminGroups (int): 必须包含所有指定的管理组位掩码，默认值：0。\n\n    DefinitionFlags (int): 定义标志，控制TLV行为，取值范围：0-255，默认值：0x80。\n\n    ExcludeSRLG (int): 排除的共享风险链路组(SRLG)，取值范围：0-4294967295，默认值：0。\n\nReturns:\n    :obj:`Ospfv3SrFadTlvConfig`: 创建的OSPFv3 Sr Fad Tlv配置对象，可用于进一步配置或查询状态。\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${Session} | Create Ospfv3 | Port=${Port} |\n        | ${Lsa} | Create Ospfv3 Opaque Router Info LSA | Session=${Session} | Age=20 |\n        | Create Ospfv3 Sr Fad Tlv | Lsa=${Lsa} | Enable=True | FlexAlgorithm=130 | MetricType=MinUnidirectionalLinkDelay | Priority=10 | FlexAlgorithmSubTlvs=[\"ExcludeAdminGroups\", \"ExcludeSRLG\"] | ExcludeAdminGroups=1 | ExcludeSRLG=100 |",
  "TesterLibrary.Protocol.ospfv3.create_ospfv3_srv6_capabilities_tlv": "创建OSPFv3 SRv6 Capabilities TLV配置对象\n\n该函数用于在OSPFv3（Open Shortest Path First version 3）协议中创建SRv6（Segment Routing over IPv6）能力TLV（Type-Length-Value）配置。该TLV结构用于在网络链路状态通告（LSA）中传播SRv6功能信息，通常用于测试和自动化场景中的OSPFv3路由器能力描述。\n\n参数:\n    Session (:obj:`Ospfv3Router`): OSPFv3协议会话对象，提供上下文及方法，必须包含`create_srv6_capabilities_tlv`方法\n    Lsa (:obj:`Ospfv3OpaqueRouterInfoLsaConfig`): Opaque Router Info LSA对象，表示与TLV关联的LSA数据\n\n关键字参数 (**kwargs):\n    Name (str): 创建的TLV名称，类型为字符串\n    Enable (bool): 是否启用TLV，默认值: True\n    Flags (list): 标志位列表，默认值: ['NONEBIT']，支持以下选项：\n        NONEBIT, Unused0, OFlag, Unused2, Unused3, Unused4, Unused5,\n        Unused6, Unused7, Unused8, Unused9, Unused10, Unused11,\n        Unused12, Unused13, Unused14, Unused15\n\n返回值:\n    (:obj:`Ospfv3Srv6CapabilitiesTlvConfig`): 创建的OSPFv3 SRv6 Capabilities TLV配置对象\n\n示例:\n    .. code:: RobotFramework\n\n        | ${Session} | Create Ospfv3 | Port=${Port} |\n        | ${Lsa} | Create Ospfv3 Opaque Router Info LSA | Session=${Session} | Age=20 |\n        | Create Ospfv3 Srv6 Capabilities Tlv | Lsa=${Lsa} |\n\n注意事项:\n    - 函数内部调用RENIX库的底层实现，若创建失败将抛出ContinuableFailure异常\n    - 支持通过**kwargs传递任意额外参数，以适配不同实现中的可选SRv6配置项",
  "TesterLibrary.Protocol.ospfv3.create_ospfv3_srv6_node_msd_tlv": "创建OSPFv3 SRv6 Node MSD TLV配置对象\n\n该函数用于在OSPFv3协议中创建一个SRv6（Segment Routing over IPv6）Node MSD（Multi-Segment Descriptor）TLV配置对象。MSD TLV用于在网络设备之间通告SRv6相关的多段能力参数，通常用于流量工程和路径约束场景。\n\nArgs:\n    Session (:obj:`Ospfv3Router`): 有效的OSPFv3协议会话对象，提供创建TLV的上下文环境，类型为object。\n\n    Lsa (:obj:`Ospfv3OpaqueRouterInfoLsaConfig`): 将绑定SRv6 Node MSD TLV的LSA（链路状态通告）对象，类型为object。\n\nKeyword Args:\n    Name (str, optional): 创建的TLV对象的名称，默认值由系统自动生成。\n\n    Enable (bool, optional): 是否启用该TLV功能，默认值：True。\n\n    Msds (list, optional): TLV中包含的标志位集合，表示支持的SRv6 MSD行为。默认值为['NONEBIT']，可选值包括：\n\n        'NONEBIT' - 无标志位\n\n        'MaxiSegmentLeft' - 最大Segments Left值\n\n        'MaxiEndPop' - 最大End Pop SID数量\n\n        'MaxiTInsert' - 支持T.Insert操作的最大SID数量\n\n        'MaxiTEncaps' - 支持T.Encap操作的最大SID数量\n\n        'MaxiEndD' - 支持End.D操作的最大SID数量\n\n    MaximumEndDSrh (int, optional): 在执行End.DX6/End.DT6操作时，SRH中允许的最大SID数，取值范围0-255，默认值：8。\n\n    MaximumEndPop (int, optional): SRH栈顶SID的最大数量，用于End Pop操作，取值范围0-255，默认值：8。\n\n    MaximumSegmentsLeft (int, optional): 执行T.Insert行为时，允许插入的最大SID数量，取值范围0-255，默认值：8。\n\n    MaximumTEncapSrh (int, optional): 执行T.Encap行为时，允许的最大SID数量，取值范围0-255，默认值：8。\n\n    MaximumTInsertSrh (int, optional): 执行T.Insert行为时，允许插入到现有SRH中的最大SID数量，取值范围0-255，默认值：8。\n\nReturns:\n    :obj:`Ospfv3Srv6MsdSubTlvConfig`: 创建的OSPFv3 SRv6 Node MSD TLV配置对象，可用于进一步配置或注入网络协议栈。\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${Session} | Create Ospfv3 | Port=${Port} |\n        | ${Lsa} | Create Ospfv3 Opaque Router Info LSA | Session=${Session} | Age=20 |\n        | Create Ospfv3 Srv6 Node Msd Tlv | Lsa=${Lsa} | Enable=True | Msds=['MaxiSegmentLeft', 'MaxiEndPop'] | MaximumSegmentsLeft=16 |",
  "TesterLibrary.Protocol.ospfv3.create_ospfv3_srv6_location_lsa": "创建OSPFv3 SRv6 Location LSA（链路状态通告）对象。\n\n该函数用于在指定的OSPFv3会话中创建一个SRv6 Location类型的LSA。它封装了底层会话对象的`create_srv6_location_lsa`方法，并允许通过关键字参数对LSA进行详细配置。\n\n### 参数说明：\n\n**Session** (`Ospfv3Router` 对象)  \n有效的OSPFv3协议会话对象，必须支持 `create_srv6_location_lsa` 方法。通常由 `Create Ospfv3` 接口创建并初始化。\n\n**Keyword Args（可选配置参数）：**\n\n- **Name** (str):  \n  创建的SRv6 Location LSA的名称，默认为系统自动生成。\n\n- **Enable** (bool):  \n  是否启用该LSA，默认值：`True`。\n\n- **Scope** (str):  \n  LSA的作用域范围，默认值：`AreaLocal`，可选值包括：\n  - `LinkLocal`\n  - `AreaLocal`\n  - `AreaSystemWide`\n\n- **AdvertisingRouterId** (str):  \n  发布该LSA的路由器ID，必须为合法IPv4地址格式，默认值：`192.0.0.1`。\n\n- **LinkStateId** (int):  \n  链路状态标识符，取值范围：1-255，默认值：0。\n\n- **Age** (int):  \n  LSA的存活时间（秒），取值范围：0-3600，默认值：0。\n\n- **SequenceNumber** (int):  \n  LSA序列号，用于LSA更新和同步，十六进制数值范围：0x1 - 0xFFFFFFFF，默认值：`0x80000001`。\n\n- **Checksum** (bool):  \n  是否启用校验和验证，默认值：`True`。\n\n### 返回值：\n\n返回一个 `Ospfv3Srv6LocatorLsaConfig` 类型的对象，表示成功创建的OSPFv3 SRv6 Location LSA配置实例。该对象可用于进一步配置或查询LSA状态。\n\n### 异常处理：\n\n如果创建失败（例如参数错误或会话不支持相关操作），将抛出 `ContinuableFailure` 异常，提示调用者操作失败。\n\n### 使用示例（Robot Framework）：\n\n```robotframework\n| ${Session} | Create Ospfv3 | Port=${Port} |\n| Create Ospfv3 Srv6 Location LSA | Session=${Session} | Age=20 |\n```",
  "TesterLibrary.Protocol.ospfv3.create_ospfv3_srv6_location_tlv": "创建OSPFv3 SRv6 Location TLV配置。\n\n该函数用于在指定的OSPFv3会话和LSA（Link State Advertisement）基础上创建一个SRv6（Segment Routing over IPv6）Location TLV（Type-Length-Value）配置对象。此TLV通常用于OSPFv3协议中通告SRv6相关的Locator信息。\n\n参数：\n    Session (:obj:`Ospfv3Router`): 一个OSPFv3协议会话对象，用于与底层API进行交互。该对象必须包含`create_srv6_location_tlv`方法。\n    Lsa (:obj:`Ospfv3Srv6LocatorLsaConfig`): 与SRv6 Location TLV相关联的LSA对象，用于定义TLV所属的LSA上下文。\n\n关键字参数（**kwargs）：\n    Name (str): 要创建的SRv6 Location TLV对象的名称，默认值：由系统生成。\n    Enable (bool): 是否启用该TLV。取值范围为True或False，默认值：True。\n    RouterType (str): 路由器类型，表示该TLV所处的路由域位置。默认值：IntraArea，支持选项包括：\n\n        - IntraArea\n        - InterArea\n        - ASExternal\n        - NSSAExternal\n\n    Algorithm (int): Locator关联的算法编号。取值范围为0-255，默认值：0。\n    LocatorLength (int): Locator前缀长度。取值范围为0-128，默认值：64。\n    Flags (list): 标志位列表，表示特定功能标志。默认值：['NONEBIT']，支持的选项包括：\n\n        - NONEBIT\n        - Unused0\n        - Unused1\n        - Unused2\n        - Unused3\n        - Unused4\n        - Unused5\n        - ABit\n        - NFlag\n\n    Metric (int): 路径度量值，用于路径选择。取值范围为1-16777215，默认值：1。\n    Locator (str): 要通告的SRv6 Locator地址。必须是一个有效的IPv6地址，默认值：'aaaa:1:1:1::'。\n\n返回值：\n    :obj:`Ospfv3Srv6LocatorTlvConfig`: 返回创建的OSPFv3 SRv6 Location TLV配置对象。如果创建失败，将抛出异常。\n\n示例：\n    .. code:: RobotFramework\n\n        | ${Session} | Create Ospfv3 | Port=${Port} |\n        | ${Lsa} | Create Ospfv3 Opaque Router Info LSA | Session=${Session} | Age=20 |\n        | Create Ospfv3 Srv6 Location Tlv | Lsa=${Lsa} |",
  "TesterLibrary.Protocol.ospfv3.create_ospfv3_srv6_end_sid_sub_tlv": "创建OSPFv3 Srv6 End Sid Sub Tlv对象\n\n该函数用于在OSPFv3协议中创建并配置一个SRv6 End SID子TLV（Type-Length-Value）对象。该子TLV通常用于通告SRv6（Segment Routing over IPv6）的SID（Segment ID）及其相关属性，以便在网络中实现基于SRv6的路径编程和流量工程。\n\nArgs:\n\n    Tlv (:obj:`Ospfv3Srv6LocatorTlvConfig`): 父级TLV对象，通常是SRv6 Locator TLV，新创建的End SID子TLV将依附于该对象。类型为object。\n\nKeyword Args:\n\n    Name (str): 创建的SRv6 End SID子TLV对象的名称，类型为字符串。\n\n    Enable (bool): 是否启用该End SID子TLV。类型为布尔值，默认值：True。\n\n    EndpointBehaviorId (int): SRv6 SID的端点行为标识符，用于定义该SID的行为类型。类型为整数，默认值：0，取值范围：0-65535。\n\n    Flags (int): 一组标志位，用于进一步描述该SID的属性或行为。类型为整数，默认值：0，取值范围：0-255。\n\n    Sid (str): 要通告的SRv6 SID地址，必须是一个有效的IPv6地址。类型为字符串，默认值：'aaaa:1:1:1::'。\n\nReturns:\n\n    (:obj:`Ospfv3Srv6EndSidSubTlvConfig`): 创建完成后的OSPFv3 SRv6 End SID子TLV配置对象，可用于后续对该子TLV进行查询或修改。类型为object。\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${Session} | Create Ospfv3 | Port=${Port} |\n        | ${Lsa} | Create Ospfv3 Opaque Router Info LSA | Session=${Session} | Age=20 |\n        | ${Tlv} | Create Ospfv3 Srv6 Location Tlv | Lsa=${Lsa} |\n        | Create OSPFv3 Srv6 End Sid Sub Tlv | Tlv=${Tlv} | Flags=255 |",
  "TesterLibrary.Protocol.ospfv3.create_ospfv3_srv6_sid_structure_sub_tlv": "创建OSPFv3 Srv6 Sid Structure Sub Tlv对象\n\n该函数用于在OSPFv3协议中创建并配置一个SRv6 SID结构子TLV（Sub-TLV）对象。该子TLV用于描述SRv6（Segment Routing over IPv6）中的SID（Segment Identifier）结构信息，包括Locator Block长度、Locator Node长度、Function长度和Argument长度等字段。此功能通常用于支持SRv6的高级路由特性。\n\nArgs:\n\n    SubTlv (:obj:`Ospfv3Srv6EndSidSubTlvConfig`): 父级的OSPFv3 Srv6 End Sid Sub Tlv对象，表示当前创建的Sid Structure Sub Tlv将作为其子级结构。类型为：object\n\nKeyword Args:\n\n    Name (str): 创建的OSPFv3 Srv6 Sid Structure Sub Tlv的名称。类型为：字符串。\n\n    Enable (bool): 是否启用该Sid Structure Sub Tlv。取值范围：True 或 False，默认值：True。\n\n    LbLength (int): SRv6 SID Locator Block字段的长度。取值范围：0-128，默认值：32。\n\n    LnLength (int): SRv6 SID Locator Node字段的长度。取值范围：0-128，默认值：32。\n\n    FunctionLength (int): SRv6 SID Function字段的长度。取值范围：0-128，默认值：32。\n\n    ArgumentLength (int): SRv6 SID Argument字段的长度。取值范围：0-128，默认值：32。\n\nReturns:\n\n    (:obj:`Ospfv3Srv6SidStructureSubTlvConfig`): 创建并配置完成的OSPFv3 Srv6 Sid Structure Sub Tlv对象，可用于进一步操作或关联到其他TLV结构中。\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${Session} | Create Ospfv3 | Port=${Port} |\n        | ${Lsa} | Create Ospfv3 Opaque Router Info LSA | Session=${Session} | Age=20 |\n        | ${Tlv} | Create Ospfv3 Srv6 Location Tlv | Lsa=${Lsa} |\n        | ${SubTlv} | Create OSPFv3 Srv6 End Sid Sub Tlv | Tlv=${Tlv} | Flags=255 |\n        | Create OSPFv3 Srv6 Sid Structure Sub Tlv | SubTlv=${SubTlv} | LbLength=128 |",
  "TesterLibrary.Protocol.ospfv3.get_ospf_router_from_lsa": "Retrieve the OSPF router(s) associated with the given LSA(s) by navigating the relationship graph.\n\nThis function accepts either a single LSA object or a list of LSA objects. If a single LSA is provided, it is automatically wrapped into a list. For each LSA in the list, the function retrieves the source-relative 'GenerateLsa' relationship to identify the router that generated the LSA. This is done using the `get_relatives` method with direction set to EnumRelationDirection.SOURCE.\n\nParameters:\n-----------\nLsa : Union[object, List[object]]\n    A single LSA object or a list of LSA objects. Each LSA object must support the\n    `get_relatives` method to find related entities through 'GenerateLsa' relationships.\n\nReturns:\n--------\nList[object]\n    A list of OSPF routers corresponding to the input LSA(s). Each router object represents\n    the source of the respective LSA.\n\nRaises:\n-------\nContinuableFailure\n    If the underlying call to `renix.get_ospf_router_from_lsa` returns False, indicating failure.\n\nNotes:\n------\n- The function assumes that each LSA has exactly one source router.\n- It uses the `get_relatives` method with direction=EnumRelationDirection.SOURCE to trace back\n  to the generating router.",
  "TesterLibrary.Protocol.ospfv3.establish_ospfv3": "Establishes OSPFv3 protocol sessions for the provided session objects.\n\nParameters:\n-----------\nSessions : object or iterable of objects\n    A single session object or an iterable (such as list, set, or tuple) containing session objects.\n    Each session object must have an `establish()` method responsible for establishing the OSPFv3 session.\n\nReturns:\n--------\nbool\n    Returns True if all sessions are successfully established. If any session fails to establish,\n    the function may raise an exception or return False depending on the underlying implementation.\n\nRaises:\n-------\nContinuuableFailure\n    If the establishment of any session fails and `result` is False, a `ContinuableFailure` exception is raised.\n\nDescription:\n------------\nThis function facilitates the establishment of OSPFv3 sessions by invoking the `establish()` method on each provided session object. It internally handles both single session objects and collections of session objects by converting them into a list for uniform processing. If a failure occurs during session establishment, this function raises a `ContinuableFailure` exception to indicate the failure while allowing test execution to continue if appropriate.\n\nExample:\n--------\n.. code:: RobotFramework\n\n    | Establish Ospfv3 | Sessions=${Sessions} |",
  "TesterLibrary.Protocol.ospfv3.grace_restart_ospfv3": "平滑重启OSPFv3协议会话\n\n该函数用于平滑重启一个或多个OSPFv3协议会话。它接受单个会话对象或包含多个会话对象的可迭代集合（如列表、集合或元组），并对每个会话调用其`grace_restart()`方法以执行平滑重启操作。函数在所有会话处理成功时返回True。\n\nArgs:\n\n    Sessions (:obj:`Ospfv3Router` 或 iterable): \n        单个OSPFv3协议会话对象，或者包含多个OSPFv3协议会话对象的可迭代集合（如 list, set, tuple）。\n        每个会话对象必须具有`grace_restart()`方法，用于执行实际的平滑重启操作。\n\nReturns:\n\n    bool: 布尔值，表示操作是否成功。若所有提供的会话均处理成功，则返回True；否则抛出异常。\n\nRaises:\n\n    ContinuableFailure: 如果底层实现返回False，表示操作失败，并抛出可继续执行的异常。\n\nExamples:\n    .. code:: RobotFramework\n\n        | Grace Restart Ospfv3 | Sessions=${Sessions} |",
  "TesterLibrary.Protocol.ospfv3.advertise_ospfv3_lsa": "Advertises OSPFv3 Link-State Advertisements (LSAs) using either session objects or existing LSA objects.\n\n该函数支持两种操作模式：\n1. 如果 `Lsa` 参数为 None，则通过 `Sessions` 参数提供的会话对象来发布 LSA。每个会话对象必须具有 `advertise` 方法，并接受 `Type` 参数以指定要发布的 LSA 类型。\n2. 如果提供了 `Lsa` 参数，则使用其句柄构造并执行一个 `Ospfv3AdvertiseCommand` 命令，此时忽略 `Sessions` 和 `Type` 参数。\n\n参数说明:\n    Sessions (list of :obj:`Ospfv3Router`, 或单个 :obj:`Ospfv3Router`): \n        用于发布 LSA 的会话对象或会话对象列表。当使用第一种模式时，这些会话对象将调用其 `advertise` 方法进行 LSA 发布。默认值为 None。\n\n    Type (str, optional): \n        要发布的 LSA 类型。仅在未提供 `Lsa` 参数时生效。支持的类型包括：\n\n            Router\n\n            Network\n\n            InterAreaPrefix\n\n            InterAreaRouter\n\n            AsExternal\n\n            Link\n\n        默认值为 None。\n\n    Lsa (list of LSA objects 或单个 LSA object, optional): \n        要发布的现有 LSA 对象或对象列表。如果提供此参数，则函数将提取其句柄并用于构造广告命令。这将覆盖 `Sessions` 和 `Type` 参数。默认值为 None。\n\n返回值:\n    bool: 操作成功完成则返回 True，否则抛出异常 ContinuableFailure。\n\n示例:\n    .. code:: RobotFramework\n\n        | Advertise Ospfv3 Lsa | Sessions=${Sessions} | Type=router |\n        | Advertise Ospfv3 Lsa | Sessions=${Sessions} | Lsa=${Lsas} |",
  "TesterLibrary.Protocol.ospfv3.withdraw_ospfv3_lsa": "撤销OSPFv3协议的Link-State Advertisement（LSA），支持基于会话或指定LSA对象进行撤销操作。\n\n该函数提供两种模式的LSA撤销操作：\n1. 如果未指定 `Lsa` 参数，则基于传入的一个或多个 `Sessions` 会话对象进行操作，从每个会话中撤销指定类型的LSA。\n2. 如果指定了 `Lsa` 参数，则直接根据提供的LSA对象执行撤销操作，使用命令层通过LSA的句柄进行处理。\n\n参数说明：\n\n    Sessions (object 或 list/set/tuple of objects):\n        一个或多个管理OSPFv3 LSA的会话对象（如 Ospfv3Router 实例）。如果只传入单个会话对象，内部会将其转换为列表统一处理。当使用基于类型（Type）的撤销方式时，必须提供此参数。\n\n    Type (str or int, optional):\n        要撤销的LSA类型。有效值包括：\n\n            router               : 路由器LSA\n            network              : 网络LSA\n            InterAreaPrefix      : 区域间前缀LSA\n            InterAreaRouter      : 区域间路由器LSA\n            AsExternal           : 自治系统外部LSA\n\n        当使用基于会话的撤销方式时，必须指定此参数。默认为 None。\n\n    Lsa (object 或 list of objects, optional):\n        一个或多个要显式撤销的LSA对象。每个LSA对象必须包含用于标识和撤销的 `handle` 属性。如果提供了该参数，将忽略 `Type` 和 `Sessions` 中的类型匹配逻辑。默认为 None。\n\n返回值：\n\n    bool: 操作成功时始终返回 True。若操作失败，将抛出异常（ContinuableFailure）。任何底层错误通常会向上抛出。\n\n行为描述：\n\n- 如果 `Lsa` 为 None：函数会遍历 `Sessions` 中的每个会话对象，并调用其 `withdraw` 方法，撤销指定类型的LSA。\n- 如果 `Lsa` 不为 None：函数会创建一个 `Ospfv3WithdrawCommand` 命令，并使用LSA对象中的 `handle` 执行撤销操作。\n\n示例代码：\n\n.. code:: RobotFramework\n\n    | Withdraw Ospfv3 Lsa | Sessions=${Sessions} | Type=router |\n    | Withdraw Ospfv3 Lsa | Sessions=${Sessions} | Lsa=${Lsas} |",
  "TesterLibrary.Protocol.ospfv3.wait_ospfv3_state": "等待OSPFv3协议会话达到指定状态。\n\n该函数用于轮询提供的OSPFv3会话对象，并检查其“State”属性是否在指定的超时时间内达到任意一个期望的状态。如果所有会话都成功进入期望状态，则返回True；否则，在超时后抛出TesterException。\n\n参数:\n    Sessions (object 或 可迭代对象): 单个或多个OSPFv3会话对象（类型为Ospfv3Router），用于监控其状态。\n    State (str、list、set、tuple 或 None, 可选): 期望的一个或多个状态值，默认为 ['DR', 'BACKUP', 'DROTHER']。\n        所有值将被转换为字符串进行比较，且忽略大小写。若为None，则使用默认值。\n    Interval (int 或可转换为int的字符串, 可选): 检查会话状态的时间间隔（以秒为单位），默认为1秒。\n    TimeOut (int 或可转换为int的字符串, 可选): 等待的最大时间（以秒为单位），超过此时间仍未全部满足条件则抛出异常，默认为60秒。\n\n返回值:\n    bool: 如果所有会话在超时时间内达到了其中一个期望状态，则返回True；否则抛出TesterException。\n\n抛出:\n    TesterException: 如果在指定的TimeOut时间内并非所有会话都达到期望状态。\n\n注意:\n    - 此函数内部调用 `_wait_state` 方法，并指定 `AttrName='State'`。\n    - 若会话的“State”属性为枚举类型(Enum)，则会使用其名称进行比较。\n    - 每次检查时，若会话的当前状态不在期望状态列表中，会通过 logging.info 记录该状态。",
  "TesterLibrary.Protocol.ospfv3.wait_ospfv3_adjacency_state": "等待所有指定的OSPFv3协议会话达到给定的邻接状态（如FULL、TWOWAY等）。\n\n该函数通过定期轮询检查每个会话的邻接状态（AdjacencyStatus），直到所有会话都进入指定的状态或超时发生。默认情况下，它等待的状态是`FULL`，表示邻接关系已完全建立。如果在指定的超时时间内所有会话都达到了期望的状态，则返回True；否则抛出TesterException。\n\n参数:\n- Sessions (list of :obj:`Ospfv3Router`): 需要监控邻接状态的一个或多个OSPFv3会话对象。\n- State (str 或 str列表, 可选): 期望的邻接状态，默认为'FULL'。支持的状态包括：\n    DOWN\n    INIT\n    TWOWAY\n    EXSTART\n    EXCHANGE\n    LOADING\n    FULL\n- Interval (int, 可选): 轮询间隔时间（秒），默认1秒。\n- TimeOut (int, 可选): 等待邻接状态的最大时间（秒），默认60秒。\n\n返回值:\n- bool: 如果所有会话在超时时间内达到了期望的邻接状态，则返回True；否则抛出TesterException。\n\n异常:\n- TesterException: 当超时发生且至少有一个会话未达到期望的邻接状态时抛出。\n\n注意:\n- 该函数内部调用`_wait_state`方法，并传入属性名`AdjacencyStatus`。\n- 每次检查时，若会话状态不符合期望状态，会通过logging.info记录当前状态。\n- 支持将State设置为多个状态中的任意一个，允许更灵活的状态判断。\n- 参数Interval和TimeOut也接受字符串类型，只要它们可以转换为整数。",
  "TesterLibrary.Protocol.ospfv3.get_ospfv3_statistic": "获取OSPFv3协议会话统计结果\n\n该函数用于查询一个或多个OSPFv3协议会话的统计信息。它是一个用户接口函数，封装了底层数据获取逻辑，并提供结构化的返回值。\n\nArgs:\n\n    Session (object or list or set or tuple or None, optional): \n        一个或多个OSPFv3会话对象（如 `Ospfv3Router` 实例）。如果提供了会话对象或对象集合，函数将提取其名称以进行统计过滤。\n        如果为None，则不进行会话过滤，返回所有相关会话的统计信息。默认为 None。\n\n    StaItems (list or str or None, optional):\n        指定需要获取的统计项列表。支持的统计项包括但不限于：\n\n            RouterState\n            AdjacencyState\n            TxHello\n            RxHello\n            TxDd\n            RxDd\n            TxRouterLsa\n            RxRouterLsa\n            TxNetworkLsa\n            RxNetworkLsa\n            TxInterAreaPrefixLsa\n            RxInterAreaPrefixLsa\n            TxInterAreaRouterLsa\n            RxInterAreaRouterLsa\n            TxAsExternalLsa\n            RxAsExternalLsa\n            TxNssaLsa\n            RxNssaLsa\n            TxLinkLsa\n            RxLinkLsa\n            TxIntraAreaPrefixLsa\n            RxIntraAreaPrefixLsa\n            TxOpaqueRouterInfoLsa\n            RxOpaqueRouterInfoLsa\n            TxSrv6LocatorLsa\n            RxSrv6LocatorLsa\n            TxRequest\n            RxRequest\n            TxUpdate\n            RxUpdate\n            TxAck\n            RxAck\n\n        如果为 None，则返回所有可用的统计项；如果为字符串，会被转换为单元素列表。默认为 None。\n\nReturns:\n\n    dict or pd.DataFrame or bool:\n        - 如果只匹配到一行数据：返回一个字典，键为请求的统计项名，值为其对应的值。\n        - 如果匹配到多行数据：返回一个 pandas DataFrame，包含所有匹配行的统计信息。\n        - 如果没有找到匹配的结果：返回 False。\n\nRaises:\n\n    ContinuableFailure: 如果底层调用返回 False，表示统计失败，抛出可继续执行的异常。\n\nExamples:\n\n    .. code:: RobotFramework\n\n        | @{StaItems} | Create List | AdjacencyState | TxUpdate |\n        | Subscribe Result | Types=Ospfv3SessionResultPropertySet |\n        | Start Protocol |\n        | Sleep | 60 |\n        | &{Result} | Get Ospfv3 Statistic | Session=${Session} | StaItems=@{StaItems} |\n        | Clear Result |\n\nSide Effects:\n\n    - 内部可能调用 `.get()` 方法刷新对象数据。\n    - 若涉及分页结果视图，可能会执行命令如 `GotoResultPageCommand` 并使用 `time.sleep(3)` 等待数据同步。\n    - 调试时会记录返回的 DataFrame 数据。\n\nNote:\n\n    使用前需确保已正确订阅类型为 'Ospfv3SessionResultPropertySet' 的结果集，并启动协议以生成统计数据。",
  "TesterLibrary.Protocol.ospfv3.edit_ospfv3_port_config": "修改Ospfv3端口配置\n\n该函数用于编辑一个或多个指定端口的OSPFv3端口配置。对于每个提供的端口，它会检索对应的'Ospfv3PortConfig'子对象，并应用指定的配置更改。\n\nArgs:\n\n    Ports (:obj:`Port` 或 list of :obj:`Port`): 一个或多个测试仪表端口对象，类型为object或object列表\n\nKeyword Args:\n\n    TransmitRate (int): OSPFv3 Message Tx Rate (messages/second)，取值范围：1-9000，默认值：100\n\n    SessionOutstanding (int): OSPFv3 Session Outstanding，取值范围：1-1000，默认值：20\n\n    UpdateMsgTransmitRate (int): 已弃用。OSPFv3 Update Message Tx Rate (messages/second)，取值范围：1-9000，默认值：10\n\n    EnableLoop (bool): 启用环回功能，默认值：False\n\nReturns:\n\n    Union[object, list]: 如果只处理了一个端口，则返回单个修改后的Ospfv3PortConfig对象；否则返回与输入端口对应的修改后的Ospfv3PortConfig对象列表\n\nExamples:\n    .. code:: RobotFramework\n\n        | Edit Ospfv3 Port Config | Ports=${Ports} | TransmitRate=100 |\n        \n    .. code:: Python\n\n        >>> api.edit_ospfv3_port_config(port1, HelloInterval=10, RouterPriority=1)\n        >>> api.edit_ospfv3_port_config([port1, port2], AreaId='0.0.0.1')",
  "TesterLibrary.Protocol.ovsdb.create_ovsdb": "创建并初始化一个与指定端口关联的Ovsdb协议实例，并将该实例注册到全局协议对象映射中。\n\n参数:\n    Port (object): 用于关联Ovsdb实例的父级或上层对象（通常是测试仪表的一个端口），该对象会被直接传递给Ovsdb构造函数。\n    **kwargs (dict): 可选配置参数，用于进一步设置Ovsdb实例的属性。支持的可选参数包括但不限于'OvsdbControllerIpList'等，这些参数会转发给Ovsdb构造函数。\n\n关键字参数:\n    OvsdbControllerIpList (list, optional): OVSDB控制器的IP地址列表，默认值为空字符串，取值范围为有效的IP地址列表。\n\n返回值:\n    Ovsdb: 新创建并初始化的Ovsdb协议实例。该实例在创建后会被注册到全局`map_protocol_object`字典中，注册时使用的是实例的`handle`属性作为键。\n\n副作用:\n    - 通过调用`set_protocol_object_map`方法，将新创建的Ovsdb实例以`handle`为键注册到全局`map_protocol_object`字典中，以便后续通过句柄引用该实例。\n\n描述:\n    该函数用于在指定的测试端口上创建一个OVSDB协议会话。它不仅创建了Ovsdb实例，还自动将其注册到全局协议对象映射中，便于后续查找和操作。通常在配置特定端口上的OVSDB测试会话时使用此函数。\n\n示例:\n    .. code:: RobotFramework\n\n        | Create Ovsdb | Port=${Port} | OvsdbControllerIpList=1.1.1.1 |",
  "TesterLibrary.Protocol.ovsdb.wait_ovsdb_state": "等待ovsdb协议会话达到指定状态\n\nArgs:\n\n    Sessions (:obj:`Ovsdb` 或 iterable of objects): ovsdb协议会话对象，可以是单个对象或可迭代的对象集合（如 list, set, tuple）\n\n    State (str, optional): 等待协议会话达到的目标状态，默认值为 'STARTED'，支持的状态包括：\n\n        STARTED\n\n        STOPPED\n\n        注意：如果未指定 State（即传入 None），则取决于底层 session 的 wait_session_state 方法的默认行为。\n\n    Interval (int or float): 查询协议会话状态的时间间隔，单位为秒，默认值：1 秒\n\n    TimeOut (int or float): 等待协议会话状态的总超时时间，单位为秒，默认值：60 秒\n\nReturns:\n\n    bool: 如果所有会话在超时时间内达到目标状态，则返回 True；否则根据底层实现可能抛出异常。\n\nRaises:\n\n    ContinuableFailure: 当 result 为 False 时，抛出可继续执行的失败异常，并附带函数名作为错误信息的一部分。\n\nDescription:\n\n    该函数用于等待一个或多个 OVSDB 协议会话进入指定的状态。它将统一调用每个会话对象的 wait_session_state 方法，并使用相同的 Interval 和 TimeOut 参数进行控制。若传入的是单个会话对象，函数内部会自动将其转换为列表以保持处理一致性。函数将以指定的 Interval 轮询检查各会话状态，直到所有会话都达到目标状态或超过 TimeOut 时间。\n\nExamples:\n    .. code:: RobotFramework\n\n        | Wait Ovsdb State | Sessions=${Sessions} | State=STOPPED | Interval=2 | TimeOut=120 |",
  "TesterLibrary.Protocol.ovsdb.edit_ovsdb_port_config": "修改OVSDB端口配置\n\n用途：\n    编辑一个或多个指定Port对象的OVSDB端口配置。\n\n参数说明：\n\n    Ports (Port对象或Port对象列表): 一个单独的Port对象或包含多个Port对象的列表。\n                                    每个Port必须包含一个类型为'OvsdbPortConfig'的子对象，\n                                    以便进行配置编辑。\n\n关键字参数（**kwargs）:\n    可变的关键字参数，表示要更新的配置参数。这些参数将直接传递给每个对应OvsdbPortConfig对象的`edit`方法。\n    \n    支持的关键字参数包括但不限于：\n    \n    OvsdbConnectionType (str): OVSDB连接类型，默认值：TCP，取值范围：\n        \n        TCP\n        \n        TLS\n        \n        PASSIVE_TCP\n        \n        PASSIVE_TLS\n    \n    PrivateKey (str): 私钥，默认值：空字符串\n    \n    Certificate (str): 证书，默认值：空字符串\n    \n    CaCertificate (str): CA证书，默认值：空字符串\n    \n    ConnectRate (int): 连接速率，默认值：1000，取值范围：0-65535\n\n返回值：\n\n    config或config列表: 如果输入是一个Port对象，则返回该端口对应的更新后的OvsdbPortConfig对象；\n                        如果输入是多个Port对象，则返回一个与输入端口顺序对应的更新后的OvsdbPortConfig对象列表。\n\n示例：\n\n    .. code:: RobotFramework\n\n        | Edit Ovsdb Port Config | Ports=${Ports} | RequestRate=1000 |\n\n详细说明：\n    此函数处理给定的一个或多个Port对象，确保它们以列表形式统一处理，并迭代这些端口以编辑其各自的OVSDB端口配置。\n    对于每个端口，它会获取关联的'OvsdbPortConfig'子对象，应用提供的配置更改（如果有的话），并收集更新后的配置对象。\n    最终结果将以单个配置对象或配置对象列表的形式返回，具体取决于输入端口的数量。",
  "TesterLibrary.Protocol.ovsdb.edit_ovsdb_table": "Edit the OvsdbTableContentsConfig entry with provided keyword arguments.\n\nThis function retrieves the first child of type 'OvsdbTableContentsConfig'\nfrom the system entry and updates its configuration using the provided\nkeyword arguments. If no arguments are given, the configuration remains\nunchanged. The updated configuration object is returned.\n\nKeyword Args:\n    OvsdbRefreshWay (str): Refresh way for OVSDB table. Default: MANUAL. Valid values:\n        MANUAL, PERIODIC\n    OvsdbTimer (int): Timer interval for OVSDB refresh in seconds. Default: 30. Valid range:\n        1-65535\n    OvsdbContents (str): Contents of the OVSDB table. Default is an empty string.\n    OvsdbDatabaseType (str): Database type for OVSDB. Default: HARDWAREVTEP. Valid values:\n        HARDWAREVTEP\n    OvsdbTableType (str): Table type for OVSDB. Default: LOCAL. Valid values:\n        LOCAL, REMOTE\n\nReturns:\n    bool: True if the edit operation was successful, False otherwise.\n\nExamples:\n    .. code:: RobotFramework\n\n        | Edit Ovsdb Table | OvsdbRefreshWay=PERIODIC | OvsdbTimer=60 | OvsdbTableType=REMOTE |",
  "TesterLibrary.Protocol.ovsdb.edit_ovsdb_export": "修改OVSDB导出配置。\n\n该函数用于编辑系统中的OVSDB导出配置，通过传递关键字参数来更新'OvsdbExportContentsConfig'配置项中的字段。它作为底层静态方法`Ovsdb.edit_ovsdb_export`的封装，允许以RenixAPI实例方法的形式调用，并将所有关键字参数转发给负责实际配置修改的静态方法。\n\n支持的配置参数包括但不限于：\n\n- OvsdbDatabaseType: 数据库类型，默认值为 HARDWAREVTEP，可选值：HARDWAREVTEP\n- OvsdbTableType: 表类型，默认值为 LOCAL，可选值：LOCAL、REMOTE\n- OvsdbExportFilePrefix: 导出文件前缀，默认值为 OVSDB_Contents_\n- OvsdbSaveAsArchive: 是否保存为归档文件，默认值为 FALSE，可选值：TRUE、FALSE\n- OvsdbExportPath: 导出路径，默认值为空字符串 \"\"\n\n参数说明:\n\n**kwargs : dict\n    任意关键字参数，表示要更新的'OvsdbExportContentsConfig'配置条目中的字段。\n    每个键对应配置中的字段名，值是该字段的新值。\n    示例字段：'export_enabled', 'format' 等。\n\n返回值:\n\nbool\n    如果操作成功，则返回 True；如果操作失败，则返回 False 并抛出 ContinuableFailure 异常。\n\n示例:\n\n.. code:: RobotFramework\n\n    | Edit Ovsdb Export | OvsdbSaveAsArchive=True |",
  "TesterLibrary.Protocol.ovsdb.ovsdb_upload_ca_certificate": "Uploads CA certificates to the specified ports using the provided local path and file information.\n\nParameters:\nPorts (Union[object, list]): A single port object or a list of port objects representing the target ports.\n    Each port object must have a 'handle' attribute which uniquely identifies the port in the system.\n    If a single port object is provided, it will be converted into a list internally.\n\nLocalPath (str): The local directory path on the machine where the certificate files are stored.\n    This path should be accessible to the system performing the upload operation. Default value: \"\"\n\nFiles (Union[str, list]): A single filename or a list of filenames representing the CA certificate files\n    to be uploaded. These files should exist in the specified LocalPath directory. Default value: []\n\nReturns:\nbool: Always returns True indicating the command was executed successfully. If the operation fails,\n    a ContinuableFailure exception is raised.\n\nDescription:\nThis function initiates the upload of CA certificates to one or more specified ports. It handles conversion\nof input parameters to appropriate list formats and executes the upload command via the UploadCaCertificateCommand\nclass. This is typically used in test scenarios where secure communication requires trusted CA certificates\nto be configured on the device under test.\n\nRaises:\nContinuableFailure: If the result of the upload operation is False, indicating a failure in uploading the certificates.\n\nExamples:\n.. code:: RobotFramework\n\n    | Ovsdb Upload Ca Certificate | Ports=${Ports} | LocalPath='D:\\files\\tls' | Files=${files} |",
  "TesterLibrary.Protocol.ovsdb.ovsdb_upload_certificate": "上传证书\n\nArgs：\n\n    Ports (:obj:`Port` or list of :obj:`Port`): 测试仪表端口对象或端口对象列表。类型为object，表示一个或多个需要上传证书的测试端口。\n\n    LocalPath (str): 本地路径，指定证书文件所在的本地目录路径，默认值为空字符串 \"\"。\n\n    Files (str or list of str): 要上传的证书文件名（可以是一个字符串或字符串列表），默认值为空列表 []。\n\nReturns:\n\n    bool: 布尔值，表示证书上传操作是否成功启动。始终返回 True 表示操作成功发起，若返回 False 则会抛出异常。\n\nRaises:\n\n    ContinuableFailure: 如果底层调用返回 False，将抛出此异常以通知调用者操作失败，但仍可继续执行后续步骤。\n\nDescription:\n\n该函数通过 OVSDB 协议将本地指定路径下的证书文件上传到一个或多个测试仪表端口上。它封装了静态方法 `Ovsdb.upload_certificate` 的调用，并确保传入的端口和文件参数被统一处理为列表形式，以便支持单个或多个端口与文件的操作。如果上传操作未能成功启动（即返回 False），则会抛出 `ContinuableFailure` 异常；否则返回 True。\n\nExamples:\n    .. code:: RobotFramework\n\n        | Ovsdb Upload Certificate | Ports=${Ports} | LocalPath='D:\\\\files\\\\tls' | Files=${files} |",
  "TesterLibrary.Protocol.ovsdb.ovsdb_upload_private_key": "Uploads a private key file to the specified ports using the OVSDB protocol.\n\nParameters:\nPorts (Port object or list of Port objects): The port(s) on which the private key should be uploaded.\n    If a single Port object is provided, it will be converted into a list internally.\nLocalPath (str): The local file system path where the private key file(s) are located.\nFiles (str or list of str): The name(s) of the private key file(s) to upload.\n    If a single filename string is provided, it will be converted into a list internally.\n\nReturns:\nbool: Always returns True to indicate that the upload command was successfully executed.\n\nDescription:\nThis method acts as a wrapper for the Ovsdb.upload_private_key static method. It initiates the uploading\nof private key files from the local machine to one or more specified ports via the OVSDB protocol.\nThe function ensures that both Ports and Files parameters are treated as lists for consistent handling,\neven if scalar values are passed. It also applies an abnormality check via the @abnormal_check decorator\nbefore executing the upload operation.\n\nExample:\n.. code:: RobotFramework\n\n    | Ovsdb Upload Private Key | Ports=${Ports} | LocalPath='D:\\files\\tls' | Files=${files} |",
  "TesterLibrary.Protocol.ovsdb.ovsdb_refresh_files": "刷新与指定端口关联的OVSDB协议文件。\n\n该函数用于触发对一个或多个测试仪表端口对象所关联的OVSDB（Open vSwitch Database）协议文件的刷新操作。其内部调用了底层 `RenixAPI.ovsdb_refresh_files` 方法，确保传入的端口对象被统一处理（即使只提供单个端口，也会被转换为列表形式）。此操作仅表示成功发送了刷新命令，并不保证刷新过程本身无错误完成。\n\n**参数：**\n\n- **Ports** (`Port` 或 `List[Port]`)  \n  要刷新文件的测试仪表端口对象，可以是单个端口对象，也可以是多个端口对象的列表。每个端口对象必须包含一个 `handle` 属性，该属性在OVSDB上下文中唯一标识该端口。\n\n**返回值：**\n\n- `bool`  \n  如果成功发起刷新操作则返回 `True`；如果失败则返回 `False`，并抛出 `ContinuableFailure` 异常以支持Robot Framework中的可继续执行失败机制。\n\n**示例：**\n.. code:: RobotFramework\n\n    | Ovsdb Refresh Files | Ports=${Ports} |\n\n**异常说明：**\n该函数不会直接引发异常，但如果底层执行过程中发生错误（如 `RefreshFilesCommand` 执行失败），这些错误可能会通过此函数传播。若刷新操作失败，会抛出 `ContinuableFailure` 异常，并附带失败方法名作为提示信息。",
  "TesterLibrary.Protocol.ovsdb.ovsdb_delete_certificate": "删除指定端口中的证书文件（通过 OVSDB 协议）\n\n参数：\n    Ports (Port 对象 或 Port 对象列表): 要从中删除证书的一个或多个测试仪表端口对象。\n                                       如果传入的是单个 Port 对象，则内部会自动转换为列表处理。\n    Files (str 或 list of str): 要删除的证书文件名（一个或多个）。如果传入的是单个字符串，则内部会自动转换为列表处理。\n                              默认值为空列表 []，表示不删除任何文件。\n\n返回值：\n    bool: 始终返回 True，表示命令已成功执行。若删除操作失败，底层会抛出异常。\n\n功能描述：\n    该函数用于通过 OVSDB 协议从一个或多个指定的测试仪表端口上删除一个或多个证书文件。\n    它是对 `Ovsdb.delete_certificate` 方法的封装调用，并支持将单个参数自动转换为列表以统一处理。\n    在内部，该函数会获取对应端口的句柄，并使用 DeleteCertsCommand 执行证书删除操作。\n\n示例：\n    .. code:: RobotFramework\n\n        | Ovsdb Delete Certificate | Ports=${Ports} | Files=${files} |",
  "TesterLibrary.Protocol.ovsdb.ovsdb_start_refresh_table": "Starts the table refresh process for one or more OVSDB session objects.\n\nThis function is used to initiate the table refresh mechanism on one or more OVSDB protocol session objects. It triggers the `start_refresh_table` operation on each provided session, which typically results in the session beginning a periodic or manual synchronization of database table contents with the connected OVSDB server.\n\nThe function supports both single session input and multiple session inputs through an iterable (list, set, or tuple). Internally, if a single session is passed, it is wrapped into a list for uniform processing. The function returns True if the refresh operation was successfully initiated on all provided sessions.\n\nIf the underlying implementation returns False (indicating failure in starting the refresh), a `ContinuableFailure` exception is raised to signal the error condition. However, any other exceptions that may occur during execution are not caught here and will propagate up the call stack.\n\nParameters:\n-----------\nSessions : Ovsdb or iterable of Ovsdb objects\n    A single OVSDB session object or a collection of OVSDB session objects. These represent active connections to an OVSDB server. Each session's `start_refresh_table` method will be invoked.\n\nReturns:\n--------\nbool\n    Returns True to indicate that the refresh operation was successfully initiated on all provided session(s).\n\nRaises:\n-------\nContinuableFailure\n    If the underlying `renix.ovsdb_start_refresh_table()` returns False, indicating that the refresh could not be started.\n\nExamples:\n---------\nRobotFramework Example:\n\n.. code:: RobotFramework\n\n    | Ovsdb Start Refresh Table | Sessions=${Sessions} |\n\nWhere `${Sessions}` can be either a single session object or a list of session objects.",
  "TesterLibrary.Protocol.ovsdb.ovsdb_stop_refresh_table": "Stops the table refresh operation for one or more OVSDB session objects.\n\nThis function is used to stop the table refresh process for a single session or a collection of sessions. It calls the internal backend function `renix.ovsdb_stop_refresh_table()` which in turn invokes the `stop_refresh_table()` method on each provided session object. If any session fails to stop the refresh, the function returns False and raises a `ContinuableFailure` exception. Otherwise, it returns True to indicate successful termination of the refresh operation.\n\nParameters:\n-----------\nSessions : object or iterable of objects\n    A single OVSDB session object or an iterable (e.g., list, set, tuple) containing multiple OVSDB session objects.\n    Each session must have a `stop_refresh_table()` method implemented.\n\nReturns:\n--------\nbool\n    Returns True if the refresh operation was successfully stopped for all sessions.\n    Returns False if any session failed to stop the refresh operation, which also triggers a `ContinuableFailure` exception.\n\nRaises:\n-------\nContinuableFailure\n    If the internal call to `renix.ovsdb_stop_refresh_table()` returns False, indicating a failure in stopping the refresh,\n    this exception is raised to signal the issue while allowing test execution to continue.\n\nNotes:\n------\n- This function is typically used in test scenarios where manual control over OVSDB table refreshes is required.\n- It is decorated with `@abnormal_check()`, implying additional error checking or logging may occur during execution.\n- Ensure all provided session objects support the `stop_refresh_table()` method to avoid runtime errors.",
  "TesterLibrary.Protocol.ovsdb.ovsdb_query_db": "Query the OVSDB (Open vSwitch Database) using the provided session(s).\n\nThis function sends a database query request via the OVSDB protocol using one or more session objects. It wraps the backend `query_db` method and ensures that the session input is uniformly processed as an iterable, whether a single session or multiple sessions are provided. The function returns True if the query is executed successfully across all provided sessions.\n\nParameters:\n- Sessions (:obj:`Ovsdb` or list/set/tuple of :obj:`Ovsdb`): A single OVSDB session object or a collection of session objects representing active connections to the OVSDB server.\n\nReturns:\n- bool: True if the query operation was executed successfully on all sessions; False if any session failed to process the query.\n\nRaises:\n- ContinuableFailure: If the query fails (returns False), this exception is raised to signal failure while allowing test execution to continue.\n\nExample:\n.. code:: RobotFramework\n\n    | Ovsdb Query Db | Sessions=${Sessions} |\n\nUse this function when querying data from the OVSDB server such as table entries, configurations, or status information. Additional filtering criteria can be passed internally via keyword arguments in other wrapper methods, depending on the underlying implementation of `query_db`.",
  "TesterLibrary.Protocol.ovsdb.ovsdb_query_db_oneshot": "Perform a one-shot OVSDB database query on the specified session(s).\n\nThis function wraps a call to `query_db_oneshot` on one or more Session objects,\nallowing for querying of the OVSDB in a single operation. It is typically used\nto retrieve data from the OVSDB without maintaining an ongoing connection or\nsubscription.\n\nParameters:\n-----------\nSessions : Session object or iterable of Session objects\n    One or more Session instances on which the query will be executed.\n    If a single Session is provided, it will be converted into a list internally.\n\n**kwargs : dict\n    Additional keyword arguments passed directly to the underlying\n    `query_db_oneshot` method of each Session object. These may include options\n    like table names, filters, columns, or other query-specific parameters.\n\nReturns:\n--------\nbool\n    Always returns True to indicate successful execution of the query operation.\n    Note that this does not guarantee the success of individual queries on each session;\n    errors during per-session queries should be handled separately by the callee.\n\nRaises:\n-------\nContinuableFailure\n    If the result of the internal `renix.ovsdb_query_db_oneshot` call is False,\n    indicating a failure in executing the query, this exception is raised to signal\n    the failure while allowing test frameworks (e.g., Robot Framework) to continue execution.\n\nDescription:\n------------\nThe function iterates over the provided Sessions and invokes `query_db_oneshot(**kwargs)`\non each one. It ensures uniform querying across multiple sessions with the same set\nof parameters. This version is designed for use as a user-facing library function, especially\nwithin test automation frameworks such as Robot Framework.",
  "TesterLibrary.Protocol.ovsdb.ovsdb_query_db_period": "Executes a periodical database query operation on one or more OVSDB session objects.\n\nThis function initiates a periodic database query across the provided OVSDB session(s). It forwards the call to the underlying `query_db_period` method of each session object. The function ensures robust handling by converting non-iterable session inputs into a list internally and applying the query operation to each session individually.\n\nArgs:\n    Sessions (:obj:`Ovsdb` or iterable of :obj:`Ovsdb`): A single OVSDB session object or an iterable (list, set, tuple) of such objects.\n\nReturns:\n    bool: True if the periodic query operation was successfully initiated across all sessions; False otherwise.\n\nRaises:\n    ContinuableFailure: If the underlying implementation returns False, indicating a failure in initiating the query.\n\nNotes:\n    - This function assumes that each provided session object implements the `query_db_period` method.\n    - If a single session object is provided, it is treated as a list internally.\n    - Any additional keyword arguments intended for the `query_db_period` method can be passed via the backend implementation's support for extended parameters.\n\nExamples:\n    .. code:: RobotFramework\n\n        | Ovsdb Query Db Period | Sessions=${Sessions} |",
  "TesterLibrary.Protocol.ovsdb.ovsdb_stop_query_db_period": "Stops the periodic querying of the OVSDB (Open vSwitch Database) for one or more session objects.\n\nThis function takes a single session object or a collection of session objects and invokes the `stop_query_db_period` method on each session to halt the periodic database queries. Additional configuration options can be passed via keyword arguments, which are forwarded directly to the underlying method of each session.\n\nParameters:\n-----------\nSessions : object or iterable of objects\n    A single session object or an iterable (such as a list, set, or tuple) of session objects for which the periodic query should be stopped.\n**kwargs : dict, optional\n    Arbitrary keyword arguments that may be used to configure how the periodic query is stopped. These are passed directly to the `stop_query_db_period` method of each session.\n\nReturns:\n--------\nbool\n    Always returns True to indicate successful execution of the operation. If the underlying implementation returns False, a `ContinuableFailure` exception is raised.\n\nNotes:\n------\n- If a single session is provided, it is internally wrapped in a list to ensure uniform processing across all input types.\n- Each session in the input must have a `stop_query_db_period` method defined; otherwise, an AttributeError may be raised by the underlying implementation.\n- This function is typically used when you want to manually control or terminate ongoing periodic polling of the OVSDB.",
  "TesterLibrary.Protocol.ovsdb.ovsdb_export_contents": "Exports the contents of one or more OVSDB session objects to the Open vSwitch Database.\n\nThis function serves as a user-facing interface that forwards the provided session object(s) to the backend implementation for exporting data to the OVSDB. It supports both single session objects and collections (lists, sets, tuples) of session objects. Each session must implement the `export_contents()` method which handles the actual export logic.\n\nParameters:\n-----------\nSessions : object or iterable of objects\n    A single session object or an iterable (list, set, tuple) containing multiple session objects.\n    Each session object must have an `export_contents()` method that performs the content export to the database.\n\nReturns:\n--------\nbool\n    Returns True if all session contents are exported successfully.\n\nRaises:\n-------\nContinuableFailure\n    If the export operation fails (the backend returns False), a ContinuableFailure exception is raised with a descriptive error message.\n\nNotes:\n------\n- This function assumes that each session object implements the required `export_contents()` method.\n- The input will be internally converted to a list if it is not already an iterable.\n- The function ensures successful execution by validating the result from the backend before returning.",
  "TesterLibrary.Protocol.ovsdb.get_ovsdb_statistic": "获取OVSDB协议相关的统计信息。\n\n该函数用于查询一个或多个Ovsdb会话对象的统计结果，可以选择性地指定需要获取的统计项（如ReadCount、WriteCount等）。它封装了底层调用，并对返回结果进行处理，确保在查询失败时抛出异常，在成功时返回结构化数据。\n\nArgs:\n    Sessions (object or list of objects): Ovsdb协议会话对象或对象列表。每个会话对象必须包含`Name`属性，用于唯一标识会话。如果为None，则不进行会话过滤。\n    StaItems (list or str, optional): 指定需要获取的统计项（列名），如['ReadCount', 'WriteCount']。若为字符串则自动转换为列表。若为None，则返回所有可用统计项。\n\nReturns:\n    dict or pd.DataFrame:\n        - 如果只匹配到一行数据：返回一个字典，键为StaItems中指定的统计项，值为其对应的统计值。\n        - 如果匹配到多行数据：返回一个pandas DataFrame，包含所有匹配的统计结果。\n        - 若未找到匹配结果：返回False（此时函数会抛出ContinuableFailure异常）。\n\nRaises:\n    ContinuableFailure: 当底层调用返回False时，表示没有找到匹配的统计结果，函数将抛出此异常。\n\nExamples:\n    .. code:: RobotFramework\n\n        | Get Ovsdb Statistic | Sessions=${Sessions} | StaItems=@{StaItems} |",
  "TesterLibrary.Protocol.pcep.create_pcep": "创建PCEP协议会话对象\n\n该函数用于在指定端口上创建一个新的PCEP（Path Computation Element Communication Protocol）协议实例，并根据提供的配置参数进行初始化。所创建的PCEP实例会被注册到全局协议对象映射表中，以便后续引用和管理。\n\nArgs:\n    Port (:obj:`Port`): 测试仪表端口对象，表示PCEP协议会话将关联的物理或逻辑端口。\n\nKeyword Args:\n    Name (str): PCEP会话名称，用于标识该协议实例的字符串。\n\n    Enable (bool, default=True): 是否启用PCEP协议会话，默认为True。\n\n    Role (str, default='PCE', values=['PCE', 'PCC']): 指定本端角色为PCE（路径计算单元）或PCC（路径计算客户端）。\n\n    IpVersion (str, default='IPv4', values=['IPv4', 'IPv6']): 设置IP版本，决定使用IPv4还是IPv6地址建立连接。\n\n    UseGatewayAsDutIp (bool, default=True): 若为True，则使用接口配置的网关地址作为对端设备（DUT）的IP；若为False，则需要手动设置DUT IP地址。\n\n    SessionIpAddress (str, default='Interface_IP', values=['Interface_IP', 'Router_ID']): 用于PCEP连接的本地IP类型，可选接口IP或路由器ID。\n\n    PeerIpv4Address (str, default='192.85.1.1'): 当未使用网关地址且IP版本为IPv4时，指定DUT的IPv4地址。\n\n    PeerIpv4AddressStep (str, default='0.0.0.1'): DUT IPv4地址的增量步长，用于生成多个DUT地址。\n\n    PeerIpv6Address (str, default='2000::1'): 当未使用网关地址且IP版本为IPv6时，指定DUT的IPv6地址。\n\n    PeerIpv6AddressStep (str, default='::1'): DUT IPv6地址的增量步长，用于生成多个DUT地址。\n\n    SessionInitiator (bool, default=True): 是否主动发起PCEP会话请求。若双方都为主动模式，则IP较大的一方优先。\n\n    Negotiation (bool, default=True): 是否协商Keepalive Timer和Dead Timer值。\n\n    KeepAlive (str, default='30', range: 0-65535): 发送KEEPALIVE消息的时间间隔（单位：秒）。\n\n    MinKeepAlive (int, default=0, range: 0-255): 可接受的最小Keepalive时间。\n\n    MaxKeepAlive (int, default=255, range: 0-255): 可接受的最大Keepalive时间。\n\n    Dead (str, default='120', range: 0-65535): 在未收到对端消息后，断开PCEP会话的时间间隔（单位：秒）。\n\n    MinDeadAlive (int, default=0, range: 0-255): 可接受的最小Dead时间。\n\n    MaxDeadAlive (int, default=255, range: 0-255): 可接受的最大Dead时间。\n\n    EnableStatefulCapability (bool, default=True): 是否在OPEN消息中包含Stateful PCE Capability TLV。\n\n    StatefulCapability (list, default=['LSP_UPDATE','LSP_INSTANTIATION']): 启用Stateful PCE能力时，指定支持的功能列表，可选项包括：\n        LSP_UPDATE\n        INCLUDE_DB_VERSION\n        LSP_INSTANTIATION\n        TRIGGERED_RESYNC\n        DELTA_LSP_SYN\n        TRIGGERED_INITIAL_SYNC\n\n    EnableSegmentRoutingCapability (list, default=['SR']): 启用段路由扩展能力，可选项包括：\n        SR\n        SRv6\n\n    PathSetupTypeList (list, default=[0,1]): 支持的路径建立类型列表。\n\n    SrCapabilityFlags (list, default=['NONTBIT','NFlag','XFlag']): 当Role为PCC且启用了SR能力时，指定SR相关标志位，可选项包括：\n        NONTBIT\n        NFlag\n        XFlag\n\n    Srv6CapabilityFlags (list, default=['NONTBIT','NFlag','XFlag']): 当Role为PCC且启用了SRv6能力时，指定SRv6相关标志位，可选项同上。\n\n    MSDs (list, default=['NONTBIT']): 当启用了SRv6能力时，指定MSD类型，可选项包括：\n        NONTBIT\n        MaxiSegmentLeft\n        MaxiEndPop\n        MaxiHEncaps\n        MaxiEndD\n\n    MaximumSidDepth (int, default=0, range: 0-255): 指定SID的最大数量，仅当启用了SR能力时可见。\n\n    MaxSegmentsLeft (int, default=8, range: 0-255): 指定最大分段数，仅当启用了SRv6能力和MaxiSegmentLeft MSD时可见。\n\n    MaxEndPop (int, default=8, range: 0-255): 指定最大End.Pop操作数，仅当启用了SRv6能力和MaxiEndPop MSD时可见。\n\n    MaxHencaps (int, default=8, range: 0-255): 指定最大H.Encaps操作数，仅当启用了SRv6能力和MaxiHEncaps MSD时可见。\n\n    MaxEndD (int, default=8, range: 0-255): 指定最大End.D操作数，仅当启用了SRv6能力和MaxiEndD MSD时可见。\n\n    EnableDbVersionTlv (bool, default=False): 是否在OPEN消息中包含DB Version TLV。\n\n    LspStateDbVersion (int, default=1, range: 1-18446744073709551614): 启用DB Version TLV时，指定LSP状态数据库的初始版本号。\n\nReturns:\n    (:obj:`Pcep`): 创建成功的PCEP协议会话对象，可用于后续操作如启动、停止、查询状态等。\n\nRaises:\n    ContinuableFailure: 如果底层实现返回False，表示创建失败，抛出异常中断当前操作但允许测试继续执行。\n\nExamples:\n    .. code:: RobotFramework\n\n        | Create Pcep | Port=${Port} | Name=PCEP_Session_1 | Role=PCC | IpVersion=IPv6 | UseGatewayAsDutIp=False | PeerIpv6Address=3000::1 | SessionInitiator=False | KeepAlive=60 | Dead=180 | EnableStatefulCapability=True | StatefulCapability=['LSP_UPDATE','TRIGGERED_RESYNC'] | EnableSegmentRoutingCapability=['SRv6'] | Srv6CapabilityFlags=['NFlag'] | MSDs=['MaxiSegmentLeft'] | MaxSegmentsLeft=10 | EnableDbVersionTlv=True | LspStateDbVersion=5 |\n\nSide Effects:\n    - 修改外部变量 `map_protocol_object`，将新创建的PCEP实例以它的handle为键添加到全局协议对象映射表中，便于后续查找和管理。",
  "TesterLibrary.Protocol.pcep.edit_pcep": "编辑PCEP协议会话对象参数\n\n该函数用于修改指定的PCEP协议会话对象（Sessions）的属性，根据提供的关键字参数更新其配置。函数会检查每个关键字参数是否与Sessions对象的属性匹配，如果匹配，则用新值更新对应的属性。\n\nParameters:\n\n    Sessions (:obj:`Pcep`): 要编辑的PCEP协议会话对象，类型为object，必须由Create Pcep等函数创建。\n\nKeyword Args:\n\n    Name (str): 设置或修改PCEP会话的名称。\n    \n    Enable (bool): 控制是否启用PCEP协议会话，默认为True。\n    \n    Role (str): 指定PCEP角色，可选值为PCE或PCC，默认为PCE。\n    \n    IpVersion (str): 设置IP版本，可选IPv4或IPv6，默认为IPv4。\n    \n    UseGatewayAsDutIp (bool): 若为True，使用接口网关地址作为DUT IP；若为False，则自定义DUT IP地址，默认为True。\n    \n    SessionIpAddress (str): 设置用于PCEP连接的IP类型，可选Interface_IP或Router_ID，默认为Interface_IP。\n    \n    PeerIpv4Address (str): 当UseGatewayAsDutIp为False且IP版本为IPv4时，设置DUT的IPv4地址，默认为192.85.1.1。\n    \n    PeerIpv4AddressStep (str): IPv4地址增量步长，当UseGatewayAsDutIp为False且IP版本为IPv4时有效，默认为0.0.0.1。\n    \n    PeerIpv6Address (str): 当UseGatewayAsDutIp为False且IP版本为IPv6时，设置DUT的IPv6地址，默认为2000::1。\n    \n    PeerIpv6AddressStep (str): IPv6地址增量步长，当UseGatewayAsDutIp为False且IP版本为IPv6时有效，默认为::1。\n    \n    SessionInitiator (bool): 控制当前设备是否主动发起会话，默认为True。\n    \n    Negotiation (bool): 是否协商Keepalive Timer和Dead Timer的值，默认为True。\n    \n    KeepAlive (str): KEEPALIVE消息发送间隔（秒），默认为30，取值范围0-65535。\n    \n    MinKeepAlive (int): KEEPALIVE最小允许值，默认为0，取值范围0-255。\n    \n    MaxKeepAlive (int): KEEPALIVE最大允许值，默认为255，取值范围0-255。\n    \n    Dead (str): 死亡间隔时间（秒），即未收到对端消息后断开会话的时间，默认为120，取值范围0-65535。\n    \n    MinDeadAlive (int): 最小可接受的Dead间隔，默认为0，取值范围0-255。\n    \n    MaxDeadAlive (int): 最大可接受的Dead间隔，默认为255，取值范围0-255。\n    \n    EnableStatefulCapability (bool): 是否在OPEN消息中包含Stateful PCE Capability TLV，默认为True。\n    \n    StatefulCapability (list): 选择Stateful能力，如LSP_UPDATE、LSP_INSTANTIATION等，默认为['LSP_UPDATE','LSP_INSTANTIATION']。\n    \n    EnableSegmentRoutingCapability (list): 启用SR/IPv6扩展功能，默认为['SR']，可选SR或SRv6。\n    \n    PathSetupTypeList (list): 配置路径建立类型列表，默认为[0,1]。\n    \n    SrCapabilityFlags (list): SR能力标志，当Role为PCC且启用了SR扩展时可见，默认为['NONTBIT','NFlag','XFlag']。\n    \n    Srv6CapabilityFlags (list): SRv6能力标志，当Role为PCC且启用了SRv6扩展时可见，默认为['NONTBIT','NFlag','XFlag']。\n    \n    MSDs (list): MSD类型，当Role为PCC且启用了SRv6扩展时可见，默认为['NONTBIT']。\n    \n    MaximumSidDepth (int): SID的最大深度，当Role为PCC且启用了SR扩展时可见，默认为0，取值范围0-255。\n    \n    MaxSegmentsLeft (int): 当MSDs中选择了Maximum Segments Left时有效，默认为8。\n    \n    MaxEndPop (int): 当MSDs中选择了Maximum End Pop时有效，默认为8。\n    \n    MaxHencaps (int): 当MSDs中选择了Maximum H.Encaps时有效，默认为8。\n    \n    MaxEndD (int): 当MSDs中选择了Maximum End D时有效，默认为8。\n    \n    EnableDbVersionTlv (bool): 是否启用DB Version TLV，默认为False。\n    \n    LspStateDbVersion (int): LSP状态数据库的初始版本号，仅当EnableDbVersionTlv为True时有效，默认为1。\n\nReturns:\n\n    bool: 如果操作成功返回True，否则返回False。\n\nExamples:\n\n    .. code:: RobotFramework\n\n        | ${Session} | Create Pcep | Port=${Port} |\n        | Edit Pcep | Session=${Session} | Role=PCC |",
  "TesterLibrary.Protocol.pcep.create_pcep_pcc_lsp": "创建PCC（Path Computation Client）LSP（Label Switched Path）对象，用于在指定的一个或多个PCEP会话上配置LSP参数。\n\nArgs:\n    Sessions (:obj:`Pcep` 或 list): 一个或多个PCEP协议会话对象，类型可以是单个对象或包含多个对象的列表、元组或集合。\n\nKeyword Args:\n    Name (str): PCEP PCC LSP对象的名称，默认为系统自动生成。\n    \n    Enable (bool): 是否启用该LSP，默认值：True。\n    \n    LspCount (int): 创建的LSP数量，默认值：1，取值范围：1-65535。\n    \n    AutoGenSymbolicName (bool): 是否由系统自动生成Symbolic Name，默认值：False。\n    \n    SymbolicName (str): 用户指定的Symbolic Name，默认值：\"PLSP_@s\"。\n    \n    PathSetupType (str): 建立LSP的方式，可选值包括：\n        - SEGMENT_ROUTING\n        - SRv6\n      默认值：SEGMENT_ROUTING。\n    \n    SourceIpv4Address (str): 源IPv4地址起始值，默认值：\"192.85.1.1\"，必须为合法IPv4地址。\n    \n    SourceIpv4AddressStep (str): IPv4源地址变化步长，默认值：\"0.0.0.1\"。\n    \n    SourceIpv4AddressSessionOffset (str): 在多个会话中源IPv4地址的变化偏移量，默认值：\"0.0.1.0\"。\n    \n    DestinationIpv4Address (str): 目的IPv4地址起始值，默认值：\"193.85.1.1\"。\n    \n    DestinationIpv4AddressStep (str): IPv4目的地址变化步长，默认值：\"0.0.0.1\"。\n    \n    DestinationIpv4AddressSessionOffset (str): 多个会话中目的IPv4地址的变化偏移量，默认值：\"0.0.1.0\"。\n    \n    SourceIpv6Address (str): 源IPv6地址起始值，默认值：\"2000::1\"，必须为合法IPv6地址。\n    \n    SourceIpv6AddressStep (str): IPv6源地址变化步长，默认值：\"::1\"。\n    \n    SourceIpv6AddressSessionOffset (str): 多个会话中源IPv6地址的变化偏移量，默认值：\"::1:0\"。\n    \n    DestinationIpv6Address (str): 目的IPv6地址起始值，默认值：\"2001::1\"。\n    \n    DestinationIpv6AddressStep (str): IPv6目的地址变化步长，默认值：\"::1\"。\n    \n    DestinationIpv6AddressSessionOffset (str): 多个会话中目的IPv6地址的变化偏移量，默认值：\"::1:0\"。\n    \n    LspInitiateMethod (str): LSP初始化方式，可选值包括：\n        - REPORT\n        - PCE_INITIATE\n        - SYNCHRONIZATION\n        - REQUEST\n      默认值：REPORT。\n    \n    ImmediateDelegation (bool): 是否在会话建立后立即委托LSP给PCE，仅在LSP初始化方式为REPORT、SYNCHRONIZATION或REQUEST时有效，默认值：True。\n    \n    DelegationInSynchronization (bool): 在同步过程中是否委托LSP给PCE，仅在LSP初始化方式为SYNCHRONIZATION时有效，默认值：False。\n\nReturns:\n    :obj:`PccLspConfig`: 返回创建的PCEP PCC LSP对象列表。如果只传入了一个会话，则返回单个对象；如果传入了多个会话，则返回对象列表。\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${Session} | Create Pcep | Port=${Port} |\n        | Edit Pcep | Session=${Session} | HelloType=DIRECT_TARGETED |\n        | ${Egress} | Create Pcep Pcc Lsp | Sessions=${Session} |",
  "TesterLibrary.Protocol.pcep.create_pcep_pce_lsp": "创建PCEP PCE LSP对象\n\n描述:\n    该函数用于在一个或多个PCEP协议会话中创建PCE（路径计算元素）LSP（标签交换路径）。每个会话对象必须具有`create_pce_lsp`方法，该方法将使用提供的配置参数进行调用。\n\n参数:\n\n    Sessions (:obj:`Pcep`): PCEP协议会话对象列表。类型可以是单个对象或对象列表。\n\n关键字参数:\n\n    Name (str): PCEP PCE LSP对象的名称。默认值为系统自动生成。\n\n    Enable (bool): 是否启用PCEP PCE LSP。取值范围：True 或 False，默认值：True。\n\n    LspCount (int): 创建的LSP数量。取值范围：1-65535，默认值：1。\n\n    AutoGenSymbolicName (bool): 是否由系统自动生成Symbolic Name。取值范围：True 或 False，默认值：False。\n\n    SymbolicName (str): 设置的Symbolic Name。默认值：PLSP_@s。\n\n    PathSetupType (str): 建立LSP的方法。取值范围：\n        - SEGMENT_ROUTING\n        - SRv6\n      默认值：SEGMENT_ROUTING。\n\n    SourceIpv4Address (str): 起始源IPv4地址。默认值：192.85.1.1。\n\n    SourceIpv4AddressStep (str): 源IPv4地址的步长。默认值：0.0.0.1。\n\n    SourceIpv4AddressSessionOffset (str): 源IPv4地址在会话之间的跳变步长。默认值：0.0.1.0。\n\n    DestinationIpv4Address (str): 起始目的IPv4地址。默认值：193.85.1.1。\n\n    DestinationIpv4AddressStep (str): 目的IPv4地址的步长。默认值：0.0.0.1。\n\n    DestinationIpv4AddressSessionOffset (str): 目的IPv4地址在会话之间的跳变步长。默认值：0.0.1.0。\n\n    SourceIpv6Address (str): 起始源IPv6地址。默认值：2000::1。\n\n    SourceIpv6AddressStep (str): 源IPv6地址的步长。默认值：::1。\n\n    SourceIpv6AddressSessionOffset (str): 源IPv6地址在会话之间的跳变步长。默认值：::1:0。\n\n    DestinationIpv6Address (str): 起始目的IPv6地址。默认值：2001::1。\n\n    DestinationIpv6AddressStep (str): 目的IPv6地址的步长。默认值：::1。\n\n    DestinationIpv6AddressSessionOffset (str): 目的IPv6地址在会话之间的跳变步长。默认值：::1:0。\n\n    LspInitiateMethod (str): LSP初始化方式。取值范围：\n        - UPDATE\n        - PCE_INITIATE\n        - REPLY\n      默认值：UPDATE。\n\n    ImmediateUpdate (bool): 是否立即更新。取值范围：True 或 False，默认值：True。\n\n返回值:\n\n    (:obj:`PceLspConfig`): 返回创建的PCEP PCE LSP对象列表。类型可以是单个对象或对象列表。\n\n示例:\n    .. code:: RobotFramework\n\n        | ${Session} | Create Pcep | Port=${Port} |\n        | Edit Pcep | Session=${Session} | HelloType=DIRECT_TARGETED |\n        | ${Egress} | Create Pcep Pce Lsp | Sessions=${Session} |",
  "TesterLibrary.Protocol.pcep.create_pcep_pcc_lsp_info": "创建或获取一个或多个PCEP PCC LSP的信息对象（PccLspInfoObjectConfig）\n\nArgs:\n\n    PcepLsps (:obj:`PccLspConfig` or list of :obj:`PccLspConfig`): 要为其创建或配置PCC LSP信息的PCEP LSP对象或对象集合。可以是单个对象，也可以是包含多个PccLspConfig对象的列表、元组或集合。\n\nKeyword Args:\n\n    Name (str): 为生成的PCC LSP INFO对象指定名称，默认值：系统自动生成。\n\n    Enable (bool): 是否启用该PCC LSP INFO对象，默认值：True。\n\n    Administrator (bool): 是否使能Administrative标志位，默认值：True。\n\n    State (str): 设置初始LSP状态，默认值：GOING_UP。可选值包括：\n        DOWN, UP, ACTIVE, GOING_DOWN, GOING_UP, RESERVED_5, RESERVED_6, RESERVED_7。\n\n    AutoGeneratedPlspId (bool): 是否自动生成PLSP-ID，默认值：True。\n\n    PlspId (int): 指定起始PLSP-ID，取值范围1-1048575，默认值：1。\n\n    Step (int): 同一会话中PLSP-ID的步长，取值范围1-1048575，默认值：1。\n\n    LspId (int): 指定起始LSP ID，取值范围1-65535，默认值：1。\n\n    LspIdStep (int): 同一会话中LSP ID的步长，取值范围1-65535，默认值：1。\n\n    LspIdSessionOffset (int): 不同会话之间LSP ID的偏移步长，取值范围1-65535，默认值：1。\n\n    TunnelId (int): 指定起始隧道ID，取值范围1-65535，默认值：1。\n\n    TunnelStep (int): 同一会话中隧道ID的步长，取值范围1-65535，默认值：1。\n\n    TunnelSessionOffset (int): 不同会话之间隧道ID的偏移步长，取值范围1-65535，默认值：1。\n\n    ExtendedTunnelIPv4Id (str): IPv4扩展隧道ID，默认值：10.0.0.1。\n\n    ExtendedTunnelIPv4IdStep (str): 同一会话中IPv4扩展隧道ID的步长，默认值：0.0.0.1。\n\n    ExtendedTunnelIPv4IdSessionOffset (str): 不同会话之间IPv4扩展隧道ID的偏移步长，默认值：0.0.1.0。\n\n    ExtendedTunnelIPv6Id (str): IPv6扩展隧道ID，默认值：2000:1::1。\n\n    ExtendedTunnelIPv6IdStep (str): 同一会话中IPv6扩展隧道ID的步长，默认值：::1。\n\n    ExtendedTunnelIPv6IdSessionOffset (str): 不同会话之间IPv6扩展隧道ID的偏移步长，默认值：::1:0。\n\nReturns:\n\n    (:obj:`PccLspInfoObjectConfig` or list of :obj:`PccLspInfoObjectConfig`): 如果只处理了一个PcepLsp，则返回对应的PccLspInfoObjectConfig对象；如果处理了多个PcepLsp对象，则返回包含这些配置对象的列表。\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${Session} | Create Pcep | Port=${Port} |\n        | Edit Pcep | Session=${Session} | HelloType=DIRECT_TARGETED |\n        | ${Egress} | Create Pcep Pcc Lsp | Sessions=${Session} |\n        | ${LspInfo} | Create Pcep Pcc Lsp Info | PcepLsp=${Egress} |",
  "TesterLibrary.Protocol.pcep.create_pcep_pce_lsp_info": "创建PCEP PCE LSP INFO对象，用于获取或配置PCEP LSP（标签交换路径）的关联信息对象。\n\n该函数用于封装对`pce_lsp_info`类方法的调用，支持传入一个或多个PCEP LSP对象，并可选择性地通过关键字参数配置其关联的`PceLspInfoObjectConfig`对象。每个输入的PCEP LSP对象应具备`get_children('PceLspInfoObjectConfig')`方法以获取对应的配置对象。若传入多个LSP对象，则返回对应顺序的对象列表。\n\nArgs:\n    PcepLsps (:obj:`PceLspConfig` 或 iterable): 一个或多个PCEP LSP对象，用于获取或更新其关联的LSP Info Object配置。\n\nKeyword Args:\n    Name (str): 设置生成的PCEP PCE LSP INFO对象的名称。\n    \n    Enable (bool): 控制该LSP INFO对象是否启用，默认为True。取值范围：True 或 False。\n\n    Administrator (bool): 是否启用Administrative标志位，默认为True。取值范围：True 或 False。\n\n    State (str): 设置初始LSP状态，默认为\"GOING_UP\"。可选值包括：\n        \n        DOWN\n        \n        UP\n        \n        ACTIVE\n        \n        GOING_DOWN\n        \n        GOING_UP\n        \n        RESERVED_5\n        \n        RESERVED_6\n        \n        RESERVED_7\n\nReturns:\n    :obj:`PceLspInfoObjectConfig` 或 list: 若输入为单个LSP对象，则返回对应的单个配置对象；若输入为多个LSP对象，则返回按输入顺序排列的配置对象列表。\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${Session} | Create Pcep | Port=${Port} |\n        | Edit Pcep | Session=${Session} | HelloType=DIRECT_TARGETED |\n        | ${Egress} | Create Pcep Pce Lsp | Sessions=${Session} |\n        | ${Info} | Create Pcep Pce Lsp Info | PcepLsp=${Egress} |",
  "TesterLibrary.Protocol.pcep.create_pcep_pcc_auto_delegation_parameters": "Configures or retrieves the PCEP auto-delegation parameters for one or more PCC LSP objects.\n\nArgs:\n\n    PcepLsps (:obj:`PccLspConfig` or list): A single PCEP PCC LSP object or a list of such objects for which auto-delegation parameters are to be configured or retrieved.\n\nKeyword Args:\n\n    Name (str): The name of the auto-delegation parameter configuration. Optional, defaults to None.\n\n    Enable (bool): Enables or disables auto-delegation for the specified LSP(s). If not provided, defaults to True.\n\nReturns:\n\n    :obj:`PcepAutoDelegationParametersConfig` or list: If a single LSP is provided, returns its corresponding auto-delegation configuration object. If multiple LSPs are provided, returns a list of their respective auto-delegation configuration objects. If the operation fails, an exception is raised.\n\nDescription:\n    This function is used to create or update the auto-delegation settings for one or more PCEP PCC LSP objects.\n    It wraps the internal method `pcep_auto_delegation_parameters_config`, passing the provided arguments and keyword parameters directly.\n    If the operation fails (returns False), a `ContinuableFailure` exception is raised with an appropriate error message.\n    Otherwise, it returns the resulting configuration object(s) as described.\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${Session} | Create Pcep | Port=${Port} |\n        | Edit Pcep | Session=${Session} | HelloType=DIRECT_TARGETED |\n        | ${Egress} | Create Pcep Pce Lsp | Sessions=${Session} |\n        | ${Parameter} | Create Pcep Pcc Auto Delegation Parameters | PcepLsp=${Egress} | Enable=True | Name=MyAutoDelegateParams |",
  "TesterLibrary.Protocol.pcep.create_pcep_pce_auto_initiate_parameters": "Configures or retrieves the PCEP auto-initiate parameters for one or more PCEP LSP objects.\n\nArgs:\n\n    PcepLsps (:obj:`PceLspConfig` or list): A single PCEP LSP object or a list of PCEP LSP objects\n                                          whose auto-initiate parameters are to be configured or retrieved.\n\nKeyword Args:\n\n    Name (str): The name of the PCEP auto-initiate parameters object. Type: string.\n\n    Enable (bool): Enables or disables the auto-initiate functionality for the PCEP LSP.\n                  Type: boolean, valid values: True or False, Default: True\n\nReturns:\n\n    (:obj:`PcepAutoInitiateParametersConfig` or list): If a single LSP is provided, returns the corresponding\n                                                   PcepAutoInitiateParametersConfig object.\n                                                   If multiple LSPs are provided, returns a list of\n                                                   PcepAutoInitiateParametersConfig objects, each possibly updated\n                                                   with the provided keyword arguments.\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${Session} | Create Pcep | Port=${Port} |\n        | Edit Pcep | Session=${Session} | HelloType=DIRECT_TARGETED |\n        | ${Egress} | Create Pcep Pce Lsp | Sessions=${Session} |\n        | ${Parameter} | Create Pcep Pce Auto Initiate Parameters | PcepLsp=${Egress} | Enable=True | Name=MyAutoInitiateParams |\n\nDescription:\nThis function configures or retrieves the PCEP auto-initiate parameters for one or more provided PCEP LSP objects.\nIt wraps the internal `pcep_auto_initiate_parameters_config` method and allows uniform processing of both individual\nand multiple LSPs. If configuration parameters (e.g., Name, Enable) are provided via keyword arguments,\nthey will be applied to the associated PcepAutoInitiateParametersConfig object(s). If no configuration is provided,\nthe existing configurations are returned without modification.",
  "TesterLibrary.Protocol.pcep.create_pcep_pce_auto_reply_parameters": "Configures or retrieves the PCEP auto-reply parameters for one or more PCEP LSPs (Path Computation Element Protocol Label Switched Paths).\n\nThis function provides a user-friendly interface to manage auto-reply behaviors across multiple PCEP LSPs in a consistent manner. It allows users to either configure new auto-reply parameters or retrieve existing ones for a single LSP or a list of LSPs.\n\nArgs:\n    PcepLsps (:obj:`PceLspConfig` or list): A single PCEP LSP object or a list of PCEP LSP objects. Each object must support the `get_children` method to access its 'PcepAutoReplyParametersConfig' child object.\n\nKeyword Args:\n    Name (str): The name assigned to the auto-reply parameters configuration object. This is used to identify the configuration within the session.\n\n    Enable (bool): Enables or disables the auto-reply functionality for the associated LSP(s). When enabled, the PCE will automatically generate replies (e.g., to LSP initiation or update requests) based on pre-defined or configured behavior. Valid values are True or False. Defaults to True if not specified.\n\nReturns:\n    :obj:`PcepAutoReplyParametersConfig` or list: If a single LSP is provided, returns the corresponding auto-reply parameters configuration object. If multiple LSPs are provided, returns a list of `PcepAutoReplyParametersConfig` objects in the same order as the input LSPs.\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${Session} | Create Pcep | Port=${Port} |\n        | Edit Pcep | Session=${Session} | HelloType=DIRECT_TARGETED |\n        | ${Egress} | Create Pcep Pce Lsp | Sessions=${Session} |\n        | ${Parameter} | Create Pcep Pce Auto Reply Parameters | PcepLsp=${Egress} |\n\nDescription:\n    This function wraps the internal method `pcep_auto_reply_parameters_config` and ensures uniform handling of auto-reply configurations across multiple LSPs. If keyword arguments are provided, they are applied to each LSP’s auto-reply configuration, allowing batch updates. This is especially useful when managing large-scale PCEP testing scenarios where automatic responses to LSP operations are desired. If no configuration exists for an LSP, it will be created. If it already exists, it may be updated or simply returned depending on the provided arguments.",
  "TesterLibrary.Protocol.pcep.create_pcep_pcc_auto_request_parameters": "创建PCEP PCC LSP自动请求参数对象，用于配置或获取一个或多个LSP（标签交换路径）的PCEP自动请求参数。\n\n该函数是一个封装方法，遍历传入的`PcepLsps`列表，并为每个LSP调用底层方法`pcep_auto_request_parameters_config`。如果提供了关键字参数，则会将其应用到每个LSP对应的`PcepAutoRequestParametersConfig`对象上；否则仅返回当前配置信息。\n\n支持单个或多个LSP输入：若输入为单个LSP，返回对应的配置对象；若为多个LSP，则返回与输入顺序一致的配置对象列表。\n\n参数：\n    PcepLsps (:obj:`PccLspConfig` 或 list of :obj:`PccLspConfig`): 一个或多个PCEP PCC LSP对象，表示需要配置或查询自动请求参数的LSP。\n\n关键字参数：\n    Name (str): 配置对象的名称。\n    \n    Enable (bool): 是否启用自动请求功能。取值范围为True或False，默认为True。\n\n返回：\n    :obj:`PcepAutoRequestParametersConfig` 或 list of :obj:`PcepAutoRequestParametersConfig`: 返回与传入LSP对象对应的PCEP自动请求参数配置对象。  \n        - 若输入为单个LSP，返回单个配置对象；\n        - 若输入为多个LSP，返回与输入顺序一致的配置对象列表。\n\n示例：\n    .. code:: RobotFramework\n\n        | ${Session} | Create Pcep | Port=${Port} |\n        | Edit Pcep | Session=${Session} | HelloType=DIRECT_TARGETED |\n        | ${Egress} | Create Pcep Pcc Lsp | Sessions=${Session} |\n        | ${Parameter} | Create Pcep Pcc Auto Request Parameters | PcepLsp=${Egress} |",
  "TesterLibrary.Protocol.pcep.create_pcep_pcc_auto_sync_parameters": "Configures or retrieves the auto-sync parameters for one or more PCEP PCC LSPs (Path Computation Element Protocol Label Switched Paths).\n\nThis function is used to either retrieve the current auto-sync configuration or update it for one or more specified PCEP PCC LSP objects. It wraps the underlying method `pcep_auto_sync_parameters_config` and provides a unified interface for both querying and modifying configurations.\n\n### Purpose\n- Retrieve the current auto-sync parameters of given PCEP PCC LSP(s).\n- Configure or update auto-sync parameters in bulk on multiple PCEP PCC LSPs.\n\n### Parameters\n\n#### Positional Parameter:\n- **PcepLsps** (`PccLspConfig` or iterable of `PccLspConfig`):  \n  One or more PCEP PCC LSP objects whose auto-sync parameters are to be retrieved or configured.  \n  Supported types: single object, list, set, or tuple of `PccLspConfig`.\n\n#### Optional Keyword Arguments:\n- **Name** (`str`):  \n  Name of the auto-sync parameters object.\n- **Enable** (`bool`, optional):  \n  Enables or disables the auto-sync feature for the associated LSP(s).  \n  Valid values: `True` or `False`.  \n  Default value: `True`.\n\n### Return Value\n- If a single `PccLspConfig` object is passed:\n  - Returns the corresponding `PcepAutoSyncParametersConfig` object.\n  - If `**kwargs` is provided, returns the updated configuration.\n- If multiple LSP objects are passed (via list, set, or tuple):\n  - Returns a list of `PcepAutoSyncParametersConfig` objects in the same order as input.\n\n### Behavior\n- If no keyword arguments are provided:\n  - Function acts as a retrieval mechanism and returns the current configuration.\n- If keyword arguments are provided:\n  - Applies the configuration to all provided LSPs.\n  - Returns the updated configuration objects.\n\n### Example Usage (RobotFramework)\n```robotframework\n| ${Session} | Create Pcep | Port=${Port} |\n| Edit Pcep | Session=${Session} | HelloType=DIRECT_TARGETED |\n| ${Egress} | Create Pcep Pcc Lsp | Sessions=${Session} |\n| ${Parameter} | Create Pcep Pcc Auto Sync Parameters | PcepLsps=${Egress} | Enable=True |\n```\n\n### Notes\n- Raises `ContinuableFailure` if the internal call to `renix.pcep_auto_sync_parameters_config` returns `False`.",
  "TesterLibrary.Protocol.pcep.create_pcep_pce_auto_update_parameters": "Configures or retrieves the auto-update parameters configuration for one or more PCEP LSPs (Label Switched Paths).\n\nThis function creates or modifies the 'PcepAutoUpdateParametersConfig' objects associated with the provided PCEP LSP(s). It accepts either a single `PceLspConfig` object or a list of such objects, and applies the given configuration parameters to each. If keyword arguments (such as Name or Enable) are provided, they are used to update the respective attributes of the configuration objects. The return value mirrors the input structure: a single object is returned if a single LSP is processed, and a list is returned if multiple LSPs are processed.\n\nParameters:\n    PcepLsps (object or list): A single `PceLspConfig` object or a list of `PceLspConfig` objects for which the auto-update parameters configuration should be retrieved or modified.\n\nKeyword Args:\n    Name (str, optional): The name of the PCEP Auto Update Parameters object.\n\n    Enable (bool, optional): Enables or disables the auto-update functionality for the PCEP LSP. Defaults to True if not specified.\n\nReturns:\n    object or list: If a single `PceLspConfig` is provided, returns the corresponding `PcepAutoUpdateParametersConfig` object. If a list of LSPs is provided, returns a list of `PcepAutoUpdateParametersConfig` objects, each reflecting the applied configuration.\n\nRaises:\n    ContinuableFailure: If the underlying API call fails (returns False), an exception is raised to indicate the failure.\n\nExample:\n    .. code:: RobotFramework\n\n        | ${Session} | Create Pcep | Port=${Port} |\n        | Edit Pcep | Session=${Session} | HelloType=DIRECT_TARGETED |\n        | ${Egress} | Create Pcep Pce Lsp | Sessions=${Session} |\n        | ${Parameter} | Create Pcep Pce Auto Update Parameters | PcepLsp=${Egress} | Enable=True | Name=MyAutoUpdateParams |",
  "TesterLibrary.Protocol.pcep.create_pcep_lsp_auto_tx_parameters": "Configures the PCEP auto transmission (TX) parameters for one or more PcepAutoParametersConfig objects.\n\nThe function provides an interface to create and configure PCEP LSP Auto Tx Parameters. It wraps the class-level `pcep_auto_tx_parameters_config` method from the `Pcep` class, allowing both single and multiple configurations to be processed in a unified way. If a single configuration object is passed, it is internally converted into a list for consistent processing. Each configuration object is processed individually with optional overrides provided through keyword arguments, and all results are aggregated and returned.\n\nParameters:\n    PcepAutoParameters (object or iterable): A single PcepAutoParametersConfig object or an iterable (e.g., list, tuple, set) containing multiple such objects. These objects must support access to their child 'PcepAutoTxParametersConfig' component for configuration.\n    **kwargs (dict): Optional keyword arguments used to override specific configuration fields of the PcepAutoTxParametersConfig objects. Supported fields include:\n\n        Name (str): The name of the PCEP Auto Tx Parameters object.\n\n        Enable (bool): Enables or disables the Auto Tx Parameters. Valid values: True or False. Default: True.\n\n        ObjectCategory (str): Specifies the category of the object to be transmitted. Valid values include:\n            BANDWIDTH\n            RP\n            NO_PATH\n            ENDPOINT\n            METRIC\n            ERO\n            RRO\n            LSPA\n            SRP\n            LSP (default)\n            XRO\n\n        SelectObjectHandle (str): Handle to select a specific object for configuration. Default: \"\"\n\nReturns:\n    object or list: If a single configuration is provided, returns the corresponding configured PcepAutoTxParametersConfig object. If multiple configurations are provided, returns a list of all configured objects in the same order as the input.\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${Session} | Create Pcep | Port=${Port} |\n        | Edit Pcep | Session=${Session} | HelloType=DIRECT_TARGETED |\n        | ${Egress} | Create Pcep Pce Lsp | Sessions=${Session} |\n        | ${Parameter} | Create Pcep Pce Auto Update Parameters | PcepLsp=${Egress} |\n        | ${LspAutoTx} | Create Pcep Lsp Auto Tx Parameters | PcepAutoParameters=${Parameter} | Name=\"AutoTx1\" | Enable=True | ObjectCategory=METRIC | SelectObjectHandle=\"Metric_1\" |\n\nDescription:\n    This function abstracts the complexity of handling multiple PCEP Auto TX parameter configurations and ensures uniform behavior regardless of whether a single or multiple configuration objects are passed. It delegates the actual configuration logic to the underlying `pcep_auto_tx_parameters_config` method while providing a user-friendly interface for test automation scripts.",
  "TesterLibrary.Protocol.pcep.create_pcep_bw_object": "创建PCEP Bw Object对象，用于为一个或多个给定的PCEP LSP（标签交换路径）实例配置带宽对象。\n\nArgs:\n\n    PcepLsps (:obj:`PccLspConfig` 或其组成的列表): 一个或多个PCEP LSP对象，作为带宽对象配置的上层上下文。如果提供的是单个对象，内部将自动将其封装为列表。\n\nKeyword Args:\n\n    Name (str): PCEP Bw Object对象的名称，类型为字符串。\n\n    Enable (bool): 指定是否启用PCEP Bw Object对象。取值范围：True 或 False，默认值：True。\n\n    PFlag (bool): 指定PCReq消息中的P Flag是否置位。取值范围：True 或 False，默认值：True。\n\n    IFlag (bool): 指定PCReq消息中的I Flag是否置位。取值范围：True 或 False，默认值：False。\n\n    Bandwidth (str): 配置带宽值，取值范围为0到4294967295的字符串形式表示，默认值：\"0\"。\n\nReturns:\n\n    :obj:`PcepBwObjectConfig` 或其组成的列表\n        如果输入为单个PcepLsp，则返回对应的 `PcepBwObjectConfig` 实例；\n        如果输入为多个LSP，则返回包含所有创建的 `PcepBwObjectConfig` 实例的列表，顺序与输入LSP一致。\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${Session} | Create Pcep | Port=${Port} |\n        | Edit Pcep | Session=${Session} | HelloType=DIRECT_TARGETED |\n        | ${Egress} | Create Pcep Pce Lsp | Sessions=${Session} |\n        | ${Object} | Create Pcep Bw Object | PcepLsp=${Egress} |",
  "TesterLibrary.Protocol.pcep.create_pcep_endpoint_object": "Configures one or more PCEP (Path Computation Element Protocol) endpoint objects based on the provided LSP(s) (Label Switched Path).\n\nThis function is used to create and configure a PCEP endpoint object or a list of such objects, depending on the input. It wraps the internal configuration method `renix.pcep_end_point_object_config` and ensures proper handling of both single and multiple `PccLspConfig` objects.\n\nArgs:\n    PcepLsps (:obj:`PccLspConfig` or list): A single PCEP LSP object or a list of PCEP LSP objects. Each LSP represents a Label Switched Path in the context of PCEP communication.\n\nKeyword Args:\n    Name (str): The name assigned to the created PCEP Endpoint Object.\n    \n    Enable (bool): Enables or disables the PCEP Endpoint Object. Default is True.\n    \n    PFlag (bool): If True, sets the P Flag in the PCReq message. Default is True.\n    \n    IFlag (bool): If True, sets the I Flag in the PCReq message. Default is False.\n\nReturns:\n    :obj:`PcepEndPointObjectConfig` or list: Returns a single configured `PcepEndPointObjectConfig` instance if a single `PccLspConfig` is provided. If multiple LSPs are provided, returns a list of corresponding configured `PcepEndPointObjectConfig` instances.\n\nRaises:\n    ContinuableFailure: If the configuration fails (the underlying `renix.pcep_end_point_object_config` returns False), an exception is raised with a failure message.\n\nExample:\n    .. code:: RobotFramework\n\n        | ${Session} | Create Pcep | Port=${Port} |\n        | Edit Pcep | Session=${Session} | HelloType=DIRECT_TARGETED |\n        | ${Egress} | Create Pcep Pce Lsp | Sessions=${Session} |\n        | ${Object} | Create Pcep Endpoint Object | PcepLsp=${Egress} | Name=MyEndpoint | Enable=True | PFlag=True | IFlag=False |\n\nDescription:\n    The function processes the input `PcepLsps` by ensuring it is always treated as an iterable. If a single `PccLspConfig` object is passed, it is wrapped into a list. Then, for each LSP in the collection, the internal method `renix.pcep_end_point_object_config` is called to construct and configure a corresponding endpoint object. Any keyword arguments provided are applied during the configuration via the `edit()` method of the endpoint object. If only one object is processed, it is returned directly; otherwise, a list of all configured endpoint objects is returned.",
  "TesterLibrary.Protocol.pcep.create_pcep_lspa_object": "Configures one or more PCEP LSPA (LSP Attributes) objects based on the provided parameters.\n\n    Purpose:\n    --------\n    This function is used to create and configure PCEP LSPA (LSP Attributes) objects associated with given PCEP LSPs.\n    It allows setting various properties of the LSPA object such as priority, flags, affinities, and more,\n    which are used during path computation requests in PCEP communication.\n\n    Parameters:\n    -----------\n    PcepLsps : object or iterable\n        A single PCEP LSP object or an iterable (list, set, or tuple) containing multiple PCEP LSP objects.\n        Each LSP object serves as the parent for creating a corresponding LSPA configuration.\n\n    **kwargs : dict\n        Optional keyword arguments used to configure specific fields of each LSPA object.\n        Supported keyword arguments include:\n\n        - Name (str): Name of the LSPA object.\n        - Enable (bool): Whether the LSPA object is enabled. Default: True.\n        - PFlag (bool): Whether the P Flag is set in PCReq message. Default: True.\n        - IFlag (bool): Whether the I Flag is set in PCReq message. Default: False.\n        - SetupPriority (int): TE LSA preempt priority (0-7). Default: 0.\n        - HoldingPriority (int): TE LSA hold priority (0-7). Default: 0.\n        - LFlag (bool): Whether the L Flag in LSPA is set. Default: False.\n        - Affinities (bool): Whether to enable affinity constraints. Default: False.\n        - ExcludeAny (int): Affinity mask to exclude any matching links (0-4294967295). Default: 0.\n        - IncludeAny (int): Affinity mask to include any matching links (0-4294967295). Default: 0.\n        - IncludeAll (int): Affinity mask to include all matching links (0-4294967295). Default: 0.\n\n    Returns:\n    --------\n    result : object or list\n        If a single PCEP LSP object is passed, returns the corresponding configured PcepLspaObjectConfig instance.\n        If multiple PCEP LSP objects are passed, returns a list of configured PcepLspaObjectConfig instances,\n        one for each LSP in the input iterable.\n\n    Raises:\n    -------\n    ContinuableFailure\n        If the underlying `renix.pcep_lspa_object_config` call fails, this function raises a `ContinuableFailure`.\n\n    Description:\n    ------------\n    This method wraps the class-level method `Pcep.pcep_lspa_object_config` and provides a convenient way\n    to configure one or more LSPA objects associated with given LSPs. It supports bulk configuration by\n    accepting both single and multiple LSP inputs and applies the same configuration options (via kwargs)\n    to all LSPA objects being created. The return value adapts accordingly: a single object for a single input,\n    or a list when multiple inputs are provided.\n\n    Example:\n    --------\n    .. code:: RobotFramework\n\n        | ${Session} | Create Pcep | Port=${Port} |\n        | Edit Pcep | Session=${Session} | HelloType=DIRECT_TARGETED |\n        | ${Egress} | Create Pcep Pce Lsp | Sessions=${Session} |\n        | ${Object} | Create Pcep Lspa Object | PcepLsp=${Egress} | Enable=True | SetupPriority=3 | Affinities=True | IncludeAny=0x10 |",
  "TesterLibrary.Protocol.pcep.create_pcep_metric_list": "创建PCEP Metric List对象，用于配置一个或多个PCEP LSP的Metric List参数。\n\nArgs:\n\n    PcepLsps (:obj:`PccLspConfig` 或 iterable): 单个或多个PCEP LSP对象（如PccLspConfig实例），表示要为其创建Metric List的LSP对象。支持传入列表、集合或元组等可迭代对象。\n\nKeyword Args:\n\n    Name (str): PCEP Metric List对象的名称，类型为字符串。\n\n    Enable (bool): 是否启用该Metric List，类型为布尔值，默认值：True。\n\n    PFlag (bool): 指定PCReq消息中是否设置P Flag，类型为布尔值，默认值：True。\n\n    IFlag (bool): 指定PCReq消息中是否设置I Flag，类型为布尔值，默认值：False。\n\nReturns:\n\n    (:obj:`PcepMetricListConfig` 或 list): 如果输入为单个PCEP LSP对象，则返回对应的PcepMetricListConfig对象；如果输入为多个LSP对象，则返回PcepMetricListConfig对象的列表，顺序与输入保持一致。\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${Session} | Create Pcep | Port=${Port} |\n        | Edit Pcep | Session=${Session} | HelloType=DIRECT_TARGETED |\n        | ${Egress} | Create Pcep Pce Lsp | Sessions=${Session} |\n        | ${Object} | Create Pcep Metric List | PcepLsps=${Egress} | Name=MyMetricList | Enable=True | PFlag=True | IFlag=False |",
  "TesterLibrary.Protocol.pcep.create_pcep_metric_object": "创建PCEP Metric Object对象，用于配置与指定PCEP LSP Metric List关联的一个或多个PCEP度量对象。\n\nArgs:\n\n    PcepMetricLists (object / list): 要配置Metric Object的PCEP LSP Metric List对象或对象列表。可以是单个对象或包含多个对象的可迭代类型（如list、set、tuple）。\n\nKeyword Args (可选):\n\n    Name (str): 指定PCEP Metric Object的名称。\n\n    Enable (bool): 控制该Metric Object是否启用，默认值：True。\n\n    BoundFlag (bool): 设置PCReq消息中METRIC Object的B(Bound)标志位，默认值：False。\n\n    ComputedFlag (bool): 设置PCReq消息中METRIC Object的C(Computed Metric)标志位，默认值：False。\n\n    MetricType (str): 指定度量值类型，默认值：MAX_SID_DEPTH。可选值包括：\n\n        IGP_METRIC\n\n        TE_METRIC\n\n        HOP_COUNTS\n\n        MAX_SID_DEPTH\n\n    MetricValue (int): 设置最大度量值，默认值：10，取值范围：0-4294967295。\n\nReturns:\n\n    PcepMetricObjectConfig or list: 如果输入为单个PcepMetricList，则返回一个PcepMetricObjectConfig实例；如果输入为多个PcepMetricList，则返回配置好的PcepMetricObjectConfig对象列表。\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${Session} | Create Pcep | Port=${Port} |\n        | Edit Pcep | Session=${Session} | HelloType=DIRECT_TARGETED |\n        | ${Egress} | Create Pcep Pce Lsp | Sessions=${Session} |\n        | ${Object} | Create Pcep Metric List | PcepLsp=${Egress} |\n        | ${Subobject} | Create Pcep Metric Object | PcepMetricLists=${Object} |",
  "TesterLibrary.Protocol.pcep.create_pcep_no_path_reason": "Configures or retrieves the PCEP 'No Path' object configuration for one or more PCEP LSPs.\n\nThis function processes a single PCEP LSP object or a collection of PCEP LSP objects. For each provided PcepLsp, it calls the class method `Pcep.pcep_no_path_object_config` to either retrieve the existing 'No Path' object configuration or update it with the provided keyword arguments. The results are aggregated and returned as a list or a single value depending on the input.\n\nArgs:\n    PcepLsps (:obj:`PccLspConfig` or iterable): A single PCEP PCE LSP object or an iterable (list, set, tuple) of multiple PCEP PCE LSP objects whose 'No Path' object configuration needs to be retrieved or updated.\n\nKeyword Args:\n    Name (str): Name of the PCEP No Path Object. Default is None.\n\n    Enable (bool): Enables or disables the 'No Path' object. Default value is True.\n\n    NoPathType (str): Specifies the type of No-Path condition. Valid values are:\n\n        - NOT_SATISFYING_CONSTRAINTS (default)\n        - PCE_CHAIN_BROKEN\n\n    CFlag (bool): Indicates whether the C flag should be set. Default value is False.\n\n    NoPathReason (str): Specifies the reason for the No-Path condition. Valid values are:\n\n        - NONTBIT (default)\n        - PCE_UNAVAILABLE\n        - UNKNOWN_DESTINATION\n        - UNKNOWN_SOURCE\n\nReturns:\n    :obj:`PcepNoPathObjectConfig` or list: If a single PCEP LSP is provided, returns the corresponding 'PcepNoPathObjectConfig' object reflecting current or updated configuration. If multiple PCEP LSPs are provided, returns a list of 'PcepNoPathObjectConfig' objects for all processed LSPs.\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${Session} | Create Pcep | Port=${Port} |\n        | Edit Pcep | Session=${Session} | HelloType=DIRECT_TARGETED |\n        | ${Egress} | Create Pcep Pce Lsp | Sessions=${Session} |\n        | ${Object} | Create Pcep No Path Object | PcepLsp=${Egress} | Enable=True | NoPathType=NOT_SATISFYING_CONSTRAINTS | NoPathReason=UNKNOWN_DESTINATION |",
  "TesterLibrary.Protocol.pcep.create_pcep_rp_object": "Configures or retrieves the PCEP RP (Request Parameters) object(s) for one or more PCEP LSPs.\n\nThis function provides a user-friendly interface to manage the RP objects associated with PCEP LSPs. It supports both retrieving existing RP objects and configuring new or updated RP object settings. The function handles single or multiple PCEP LSP inputs uniformly, returning corresponding RP objects after processing.\n\nArgs:\n    PcepLsps (:obj:`PccLspConfig`): A single PCEP PCC LSP object or an iterable containing multiple PCEP PCC LSP objects.\n\nKeyword Args:\n    Name (str): Name of the PCEP PCC RP Object.\n\n    Enable (bool): Enables or disables the RP object. Defaults to True.\n\n    AutoGeneratedId (bool): When True, enables automatic generation of RP-ID. Defaults to True.\n\n    RpId (int): Specifies the starting RP-ID value when AutoGeneratedId is False. Valid range: 0-4294967295. Defaults to 1.\n\n    RpIdStep (int): Step increment for RP-ID values across multiple LSPs. Valid range: 0-4294967295. Defaults to 1.\n\n    Priority (int): Sets the request priority; higher numbers indicate higher priority. Valid range: 0-7. Defaults to 0.\n\n    PFlag (bool): If True, sets the P Flag in PCReq messages. Defaults to True.\n\n    IFlag (bool): If True, sets the I Flag in PCRep messages. Defaults to False.\n\n    BFlag (bool): If True, sets the B (Bi-directional) flag in the RP object. Defaults to False.\n\n    OFlag (bool): If True, sets the O (strict/loose) flag in the RP object. Defaults to False.\n\nReturns:\n    (:obj:`PcepRpObjectConfig`): A single RP object if one LSP is provided, or a list of RP objects if multiple LSPs are provided.\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${Session} | Create Pcep | Port=${Port} |\n        | Edit Pcep | Session=${Session} | HelloType=DIRECT_TARGETED |\n        | ${Egress} | Create Pcep Pcc Lsp | Sessions=${Session} |\n        | ${Parameter} | Create Pcep Rp Object | PcepLsp=${Egress} | Priority=3 | BFlag=True |",
  "TesterLibrary.Protocol.pcep.create_pcep_sr_ero_object": "Configure a PCEP SR ERO (Segment Routing Explicit Route Object) for one or more LSPs (Label Switched Paths).\n\n    This function wraps the class-level `pcep_sr_ero_object_config` method from the `Pcep` class,\n    allowing configuration of SR ERO objects on one or multiple provided PcepLsp instances.\n    If additional configuration parameters are provided via `kwargs`, they are applied to each\n    ERO configuration.\n\n    Parameters:\n        PcepLsps (PcepLsp object or iterable of PcepLsp objects): One or more PCEP LSP objects to associate\n                                                                 with an SR ERO configuration.\n        **kwargs (dict): Optional keyword arguments that define configuration parameters for the SR ERO object.\n                         These are passed directly to the `edit` method of the underlying configuration object.\n                         Available keys include:\n                             - Name (str): Name of the SR ERO object.\n                             - Enable (bool): Whether the SR ERO object is enabled. Default: True.\n                             - PFlag (bool): Whether the P Flag in PCReq message is set. Default: True.\n                             - IFlag (bool): Whether the I Flag in PCReq message is set. Default: False.\n\n    Returns:\n        PcepSrEroObjectConfig or list of PcepSrEroObjectConfig: If a single PcepLsp is provided, returns the\n                                                                corresponding configured ERO object.\n                                                                If multiple PcepLsps are provided, returns\n                                                                a list of configured ERO objects in the same\n                                                                order as the input LSPs.\n\n    Raises:\n        ContinuableFailure: If the configuration fails, an exception is raised with a failure message.\n\n    Description:\n        The function ensures uniform configuration of SR ERO objects across one or more LSPs. It internally handles\n        both singular and plural inputs, delegating the actual configuration to the class-level method of `Pcep`.\n        Each ERO configuration is associated with the respective LSP and any provided configuration options\n        in `kwargs` are applied during setup.\n\n    Example usage:\n        .. code:: RobotFramework\n\n            | ${Session} | Create Pcep | Port=${Port} |\n            | Edit Pcep | Session=${Session} | HelloType=DIRECT_TARGETED |\n            | ${Egress} | Create Pcep Pce Lsp | Sessions=${Session} |\n            | ${Object} | Create Pcep Sr Ero Object | PcepLsp=${Egress} | Name=SR_ERO_1 | Enable=True | PFlag=True | IFlag=False |",
  "TesterLibrary.Protocol.pcep.create_pcep_sr_ero_sub_object": "Configures one or more PCEP Segment Routing ERO (Explicit Route Object) sub-objects based on the provided input.\n\nThis function is used to create and configure a Segment Routing Explicit Route Sub-object for use in PCEP (Path Computation Element Communication Protocol) sessions. It acts as a wrapper for the `renix.pcep_sr_ero_sub_object_config` method, allowing configuration of one or multiple SR ERO sub-objects using the given keyword arguments. If a single object is passed, it returns the configured instance directly; if multiple objects are passed, it returns a list of configured instances in the same order.\n\nParameters:\n    PcepSrEroObjects (object or iterable of objects of type :obj:`PcepSrEroObjectConfig`):\n        A single PCEP SR ERO object or an iterable (list, set, tuple) containing multiple such objects.\n        These represent the parent SR ERO context to which the sub-object configurations belong.\n\nKeyword Args:\n    Name (str): The name assigned to the PCEP SR ERO sub-object. Default: auto-generated name.\n\n    Enable (bool): Enables or disables the sub-object. Default: True.\n\n    RouteType (str): Indicates whether the route is strict or loose. Valid values: 'STRICT' (default), 'LOOSE'.\n\n    NaiType (str): Specifies the NAI (Node or Adjacency Identifier) type. Valid values: 'ABSENT', 'IPV4_NODE_ID' (default), 'IPV6_NODE_ID', 'IPV4_ADJACENCY', 'IPV6_ADJACENCY_GLOBAL', 'UNNUMBERED_ADJACENCY', 'IPV6_ADJACENCY_LINK_LOCAL'.\n\n    MFlag (bool): Mirror Flag. Default: True.\n\n    CFlag (bool): Clean-up flag. Default: False.\n\n    SFlag (bool): Protection flag. Default: False.\n\n    FFlag (bool): Fail protection flag. Default: False.\n\n    SidLabel (int): SID/Label value. Range: 0–1048575. Default: 16.\n\n    SidLabelStep (int): Step increment for SID Label. Range: 0–1048575. Default: 0.\n\n    SidLabelSessionOffset (int): Interface-wise SID Label offset. Range: 0–1048575. Default: 0.\n\n    SidIndex (int): 32-bit SID Index. Range: 0–4294967295. Default: 1.\n\n    SidIndexStep (int): Step increment for SID Index. Range: 0–4294967295. Default: 0.\n\n    SidIndexSessionOffset (int): Interface-wise SID Index offset. Range: 0–1048575. Default: 0.\n\n    SidTrafficClass (int): Traffic Class associated with the SID. Range: 0–7. Default: 0.\n\n    SidTimeToLive (int): Time-to-live value for the SID. Range: 0–255. Default: 255.\n\n    SidBottomOfStack (bool): Bottom-of-Stack flag. Default: False.\n\n    NaiIpv4NodeId (str): IPv4 Node ID for NAI. Default: '192.85.1.1'.\n\n    NaiIpv6NodeId (str): IPv6 Node ID for NAI. Default: '2000::1'.\n\n    NaiLocalIpv4Address (str): Local IPv4 address for adjacency-based NAI. Default: '192.85.1.1'.\n\n    NaiLocalIpv6Address (str): Local IPv6 address for global adjacency NAI. Default: '2000::1'.\n\n    NaiRemoteIpv4Address (str): Remote IPv4 address for adjacency-based NAI. Default: '193.85.1.1'.\n\n    NaiRemoteIpv6Address (str): Remote IPv6 address for global adjacency NAI. Default: '2001::1'.\n\n    NaiLocalNodeId (str): Local Node-ID for unnumbered adjacency NAI. Default: '192.85.1.1'.\n\n    NaiLocalInterfaceId (int): Local interface ID for unnumbered adjacency. Range: 0–4294967295. Default: 0.\n\n    NaiRemoteNodeId (str): Remote Node-ID for unnumbered adjacency. Default: '193.85.1.1'.\n\n    NaiRemoteInterfaceId (int): Remote interface ID for unnumbered adjacency. Range: 0–4294967295. Default: 0.\n\nReturns:\n    (:obj:`PcepSrEroSubObjectConfig` or list of :obj:`PcepSrEroSubObjectConfig`):\n        Returns a single configured SR ERO sub-object if one was passed, or a list of configured sub-objects if multiple were passed.\n\nRaises:\n    ContinuableFailure: If the configuration fails during execution.\n\nExample Usage:\n    .. code:: RobotFramework\n\n        | ${Session} | Create Pcep | Port=${Port} |\n        | Edit Pcep | Session=${Session} | HelloType=DIRECT_TARGETED |\n        | ${Egress} | Create Pcep Pce Lsp | Sessions=${Session} |\n        | ${Object} | Create Pcep Sr Ero Object | PcepLsp=${Egress} |\n        | ${Subobject} | Create Pcep Sr Ero Sub Object | PcepSrEroObjects=${Object} | SidLabel=100 | NaiType=IPV4_NODE_ID | NaiIpv4NodeId=192.168.1.1 | Enable=True |\n\nDescription:\n    This function provides a flexible way to configure Segment Routing ERO sub-objects within PCEP testing scenarios. It supports various types of routing behavior and NAI/SID combinations to simulate different network conditions and path computation requests.",
  "TesterLibrary.Protocol.pcep.create_pcep_srp_info": "创建PCEP Srp Info对象，用于配置或获取一个或多个PCEP LSP（标签交换路径）的SRP（Stateful PCE请求参数）对象。\n\nArgs:\n    PcepLsps (:obj:`PccLspConfig` 或 iterable of :obj:`PccLspConfig`): 一个或多个PCEP PCC LSP对象，用于创建或配置对应的SRP信息。\n\nKeyword Args:\n    Name (str): 指定生成的PCEP Srp Info对象的名称，默认由系统自动生成。\n\n    Enable (bool): 是否启用该SRP对象。取值范围：True 或 False，默认值：True。\n\n    AutoGeneratedId (bool): 是否由系统自动生成SRP-ID。取值范围：True 或 False，默认值：True。\n\n    SrpId (int): 当AutoGeneratedId为False时，指定起始SRP-ID。取值范围：0-4294967295，默认值：1。\n\n    SrpIdStep (int): SRP-ID的递增步长，用于批量生成SRP-ID。取值范围：0-4294967295，默认值：1。\n\nReturns:\n    object 或 list of :obj:`PcepSrpObjectConfig`: 如果输入是单个PcepLsp对象，则返回对应的PcepSrpObjectConfig实例；\n    如果输入是多个PcepLsp对象，则返回PcepSrpObjectConfig对象的列表。如果提供了配置参数（**kwargs），则在返回前会先更新对应的SRP对象。\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${Session} | Create Pcep | Port=${Port} |\n        | Edit Pcep | Session=${Session} | HelloType=DIRECT_TARGETED |\n        | ${Egress} | Create Pcep Pce Lsp | Sessions=${Session} |\n        | ${Object} | Create Pcep Srp Info | PcepLsp=${Egress} |\n\nDescription:\n    此函数封装了底层对PCEP SRP对象的配置与查询操作，支持统一处理单个或多个LSP对象。若传入配置参数，函数将更新SRP对象后再返回；否则仅返回当前配置。",
  "TesterLibrary.Protocol.pcep.create_pcep_sr_rro_object": "创建PCEP Segment Routing RRO（Record Route Object）配置对象。\n\n该函数用于为指定的PCEP LSP（Label Switched Path）配置一个或多个Segment Routing RRO对象。可以对单个LSP或多个LSP进行配置，并根据输入的LSP数量返回相应的配置对象或对象列表。\n\nArgs:\n    PcepLsps (:obj:`PccLspConfig` 或 list of :obj:`PccLspConfig`): 一个或多个PCEP PCC LSP对象，用于在其上创建RRO记录路由对象。\n\nKeyword Args:\n    Name (str, optional): PCEP SR RRO对象的名称，默认值由系统自动生成。\n    Enable (bool, optional): 是否启用该SR RRO对象，类型为布尔值，默认值: True。\n    PFlag (bool, optional): 在PCReq消息中是否设置P Flag，类型为布尔值，默认值: True。\n    IFlag (bool, optional): 在PCReq消息中是否设置I Flag，类型为布尔值，默认值: False。\n\nReturns:\n    :obj:`PcepSrRroObjectConfig` 或 list of :obj:`PcepSrRroObjectConfig`: 返回与输入LSP对应的PCEP SR RRO配置对象或对象列表。若输入为单个LSP，则返回单个对象；若输入为多个LSP，则返回与输入顺序一致的对象列表。\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${Session} | Create Pcep | Port=${Port} |\n        | Edit Pcep | Session=${Session} | HelloType=DIRECT_TARGETED |\n        | ${Egress} | Create Pcep Pcc Lsp | Sessions=${Session} |\n        | ${Object} | Create Pcep Sr Rro Object | PcepLsp=${Egress} | Enable=True | PFlag=True | IFlag=False |",
  "TesterLibrary.Protocol.pcep.create_pcep_sr_rro_sub_object": "创建PCEP SR RRO（Segment Routing Return Route Record Object）子对象，用于在PCEP协议中记录路径信息。该函数支持单个或多个对象的配置，并将返回对应的子对象配置实例列表或单个实例。\n\n### 参数说明\n\n**Args:**\n\n- **PcepSrRroObjects** (:obj:`PcepSrRroObjectConfig` 或 iterable):  \n  要配置子对象的 PCEP SR RRO 父对象，可以是单个 `PcepSrRroObjectConfig` 实例或其列表、元组等可迭代对象。\n\n**Keyword Args (可选配置参数):**\n\n- **Name** (str): 子对象名称。\n- **Enable** (bool): 是否启用该子对象，默认为 `True`。\n- **NaiType** (str): NAI（Node or Adjacency Identifier）类型，表示子对象中标识符的类型，默认为 `IPV4_NODE_ID`，取值包括：\n  - ABSENT\n  - IPV4_NODE_ID\n  - IPV6_NODE_ID\n  - IPV4_ADJACENCY\n  - IPV6_ADJACENCY_GLOBAL\n  - UNNUMBERED_ADJACENCY\n  - IPV6_ADJACENCY_LINK_LOCAL\n- **MFlag** (bool): M 标志位，指示是否需要回溯路径，默认为 `True`。\n- **CFlag** (bool): C 标志位，默认为 `False`。\n- **SFlag** (bool): S 标志位，默认为 `False`。\n- **FFlag** (bool): F 标志位，默认为 `False`。\n- **SidIndex** (int): SID Index，取值范围 0-1048575，默认为 `1`。\n- **SidLabel** (int): SID Label，取值范围 0-1048575，默认为 `16`。\n- **SidTrafficClass** (int): 流量类别字段，取值范围 0-7，默认为 `0`。\n- **SidTimeToLive** (int): TTL 值，取值范围 0-255，默认为 `255`。\n- **SidBottomOfStack** (bool): 是否为栈底标签，默认为 `False`。\n- **NaiIpv4NodeId** (str): IPv4 节点 ID，默认值：`192.85.1.1`。\n- **NaiIpv6NodeId** (str): IPv6 节点 ID，默认值：`2000::1`。\n- **NaiLocalIpv4Address** (str): 本地 IPv4 地址，默认值：`192.85.1.1`。\n- **NaiLocalIpv6Address** (str): 本地 IPv6 地址，默认值：`2000::1`。\n- **NaiRemoteIpv4Address** (str): 远端 IPv4 地址，默认值：`193.85.1.1`。\n- **NaiRemoteIpv6Address** (str): 远端 IPv6 地址，默认值：`2001::1`。\n- **NaiLocalNodeId** (str): 本地节点 ID，默认值：`192.85.1.1`。\n- **NaiLocalInterfaceId** (int): 本地接口 ID，取值范围 0-4294967295，默认为 `0`。\n- **NaiRemoteNodeId** (str): 远端节点 ID，默认值：`193.85.1.1`。\n- **NaiRemoteInterfaceId** (int): 远端接口 ID，取值范围 0-4294967295，默认为 `0`。\n\n### 返回值\n\n- 返回一个 `PcepSrRroSubObjectConfig` 对象或其列表，具体取决于传入的 `PcepSrRroObjects` 是单个对象还是多个对象。\n\n### 示例\n\n```robotframework\n| ${Session} | Create Pcep | Port=${Port} |\n| Edit Pcep | Session=${Session} | HelloType=DIRECT_TARGETED |\n| ${Egress} | Create Pcep Pcc Lsp | Sessions=${Session} |\n| ${Object} | Create Pcep Sr Rro Object | PcepLsp=${Egress} |\n| ${Subobject} | Create Pcep Sr Rro Sub Object | PcepSrRroObjects=${Object} |\n```\n\n### 注意事项\n\n- 若底层调用失败（返回 `False`），会抛出 `ContinuableFailure` 异常。\n- 所有配置项均可通过关键字参数进行自定义。",
  "TesterLibrary.Protocol.pcep.create_pcep_srv6_ero_object": "Configures SRv6 Explicit Route Object (ERO) for one or more PCEP LSPs (Label Switched Paths).\n\nThis function is used to create and configure an SRv6 ERO object for specified PCEP LSP(s), allowing fine-grained control over the ERO parameters within a PCEP session. It wraps the internal method that performs the actual configuration and ensures proper handling of both single and multiple LSP inputs.\n\nArgs:\n    PcepLsps (:obj:`PccLspConfig` or list of :obj:`PccLspConfig`): One or more PCEP LSP objects to which the SRv6 ERO configuration will be applied.\n\nKeyword Args:\n    Name (str, optional): Name of the SRv6 ERO object. Defaults to an auto-generated name if not provided.\n\n    Enable (bool, optional): Whether the SRv6 ERO object is enabled. Defaults to True.\n\n    PFlag (bool, optional): Whether to set the 'P Flag' in the PCReq message. Defaults to True.\n\n    IFlag (bool, optional): Whether to set the 'I Flag' in the PCReq message. Defaults to False.\n\nReturns:\n    :obj:`PcepSrv6EroObjectConfig` or list of :obj:`PcepSrv6EroObjectConfig`: Returns a single configured SRv6 ERO object if a single PcepLsp is provided; returns a list of configured SRv6 ERO objects if multiple LSPs are passed.\n\nRaises:\n    ContinuableFailure: If the configuration fails, an exception is raised with a failure message.\n\nExample Usage:\n    .. code:: RobotFramework\n\n        | ${Session} | Create Pcep | Port=${Port} |\n        | Edit Pcep | Session=${Session} | HelloType=DIRECT_TARGETED |\n        | ${Egress} | Create Pcep Pce Lsp | Sessions=${Session} |\n        | ${Object} | Create Pcep Srv6 Ero Object | PcepLsp=${Egress} | Enable=True | PFlag=True | IFlag=False |",
  "TesterLibrary.Protocol.pcep.create_pcep_srv6_ero_sub_object": "创建PCEP Srv6 ERO子对象\n\n该方法用于基于提供的输入配置一个或多个PCEP SRv6 ERO（显式路由对象）子对象。它封装了底层类方法 `Pcep.pcep_srv6_ero_sub_object_config`，提供统一的接口来处理单个或多个SRv6 ERO子对象的配置。如果传入的 `PcepSrv6EroObjects` 不是可迭代对象（如列表、集合、元组），则会将其转换为列表以确保一致性。每个对象都会使用所提供的关键字参数进行配置。\n\nArgs:\n\n    PcepSrv6EroObjects (:obj:`PcepSrv6EroObjectConfig` 或其列表): 一个或多个PCEP SRv6 ERO对象，类型为 object 或 list\n\nKeyword Args:\n\n    Name (str): SRv6 ERO子对象名称，默认值由系统自动生成\n\n    Enable (bool): 是否启用该子对象，默认值：True\n\n    RouteType (str): 路由类型，表示建立LSP时使用的路径类型，默认值：STRICT，有效值包括：\n\n        STRICT\n\n        LOOSE\n\n    NaiType (str): 指定节点或邻接的类型，默认值：IPV6_NODE_ID，有效值包括：\n\n        ABSENT\n\n        IPV4_NODE_ID\n\n        IPV6_NODE_ID\n\n        IPV4_ADJACENCY\n\n        IPV6_ADJACENCY_GLOBAL\n\n        UNNUMBERED_ADJACENCY\n\n        IPV6_ADJACENCY_LINK_LOCAL\n\n    SFlag (bool): 子对象中的S标志位，默认值：False\n\n    FFlag (bool): 子对象中的F标志位，默认值：False\n\n    EndpointBehavior (str): 端点行为定义，指定SRv6 SID的行为，默认值：Invalid，详细取值范围请参考文档说明\n\n    SRv6Sid (str): SRv6 SID地址，默认值：2000::1，必须为合法IPv6地址\n\n    NaiIpv6NodeId (str): IPv6节点ID，默认值：2000::1，必须为合法IPv6地址\n\n    NaiLocalIpv6Address (str): 本地IPv6地址，默认值：2000::1，必须为合法IPv6地址\n\n    NaiRemoteIpv6Address (str): 远端IPv6地址，默认值：2001::1，必须为合法IPv6地址\n\n    NaiLocalInterfaceId (int): 本地接口ID，默认值：0，取值范围：0-4294967295\n\n    NaiRemoteInterfaceId (int): 远端接口ID，默认值：0，取值范围：0-4294967295\n\nReturns:\n\n    (:obj:`PcepSrv6EroSubObjectConfig` 或 list of obj): 如果输入为单个对象，则返回一个配置好的SRv6 ERO子对象；\n                                                      如果输入为多个对象，则返回配置好的子对象列表。\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${Session} | Create Pcep | Port=${Port} |\n        | Edit Pcep | Session=${Session} | HelloType=DIRECT_TARGETED |\n        | ${Egress} | Create Pcep Pce Lsp | Sessions=${Session} |\n        | ${Object} | Create Pcep Srv6 Ero Object | PcepLsp=${Egress} |\n        | ${Subobject} | Create Pcep Srv6 Ero Sub Object | PcepSrEroObjects=${Object} |\n\nRaises:\n\n    ContinuableFailure: 当底层配置失败时抛出异常，测试流程可捕获并继续执行。",
  "TesterLibrary.Protocol.pcep.create_pcep_srv6_rro_object": "Configures SRv6 RRO (Segment Routing Version 6 Record Route Object) for one or more PCEP LSPs (Label Switched Paths).\n\n    This function creates and configures a PCEP SRv6 RRO object for the specified PCEP PCC LSP(s), allowing detailed control\n    over SRv6 route recording behavior during path computation requests. It supports both individual and bulk configuration\n    of LSPs with consistent parameter application across all provided LSP objects.\n\n    Args:\n        PcepLsps (:obj:`PccLspConfig` or list of :obj:`PccLspConfig`): One or more PCEP PCC LSP objects to associate with the SRv6 RRO.\n            These LSPs will each receive an SRv6 RRO configuration based on the provided parameters.\n\n    Keyword Args:\n        Name (str): Name of the SRv6 RRO object instance. If not specified, a default name may be assigned.\n\n        Enable (bool, optional): Enables or disables the SRv6 RRO object. Defaults to True.\n\n        PFlag (bool, optional): Controls whether the 'P' flag is set in PCReq messages for this RRO.\n            When True, the PCE is requested to preserve the RRO entry. Defaults to True.\n\n        IFlag (bool, optional): Controls whether the 'I' flag is set in PCReq messages for this RRO.\n            When True, the PCE is instructed to ignore processing of this RRO. Defaults to False.\n\n    Returns:\n        :obj:`PcepSrv6RroObjectConfig` or list of :obj:`PcepSrv6RroObjectConfig`: Returns a single configured SRv6 RRO object instance\n        if one LSP is provided, or a list of SRv6 RRO object instances in the same order as the input LSPs if multiple LSPs are given.\n\n    Raises:\n        ContinuableFailure: If the SRv6 RRO configuration fails, an exception is raised with details about the failure.\n\n    Example:\n        .. code:: RobotFramework\n\n            | ${Session} | Create Pcep | Port=${Port} |\n            | Edit Pcep | Session=${Session} | HelloType=DIRECT_TARGETED |\n            | ${Egress} | Create Pcep Pcc Lsp | Sessions=${Session} |\n            | ${Object} | Create Pcep Srv6 Rro Object | PcepLsps=${Egress} | Enable=True | PFlag=True | IFlag=False |\n\n    Notes:\n        - The SRv6 RRO is used to record the path taken by an SRv6-based LSP through the network, supporting path tracing and diagnostics.\n        - This function wraps the underlying `renix.pcep_srv6_rro_object_config` implementation and provides enhanced error handling.",
  "TesterLibrary.Protocol.pcep.create_pcep_srv6_rro_sub_object": "Configures one or more PCEP SRv6 RRO (Record Route Object) sub-objects based on the provided parameters.\n\nThis function is used to create and configure a PCEP SRv6 RRO sub-object or a list of such sub-objects. It acts as a wrapper that configures each given `PcepSrv6RroObject` by delegating to the class method `pcep_srv6_rro_sub_object_config` of the `Pcep` class. If a single object is provided, it returns the configured sub-object directly; if multiple objects are provided, it returns a list of configured sub-objects.\n\nParameters:\n    PcepSrv6RroObjects : object or iterable\n        A single PCEP SRv6 RRO object or an iterable (list, set, tuple) containing multiple such objects.\n        These represent the upper-level PCEP SRv6 RRO objects to which the sub-objects will be associated.\n\nKeyword Args:\n    Name (str): The name of the PCEP SRv6 RRO sub-object. Default is empty string.\n\n    Enable (bool): Enables or disables the sub-object. Default is True.\n\n    NaiType (str): Specifies the NAI (Node or Adjacency Identifier) type for the sub-object. Default is 'IPV6_NODE_ID'. Valid values include:\n\n        - ABSENT\n        - IPV4_NODE_ID\n        - IPV6_NODE_ID\n        - IPV4_ADJACENCY\n        - IPV6_ADJACENCY_GLOBAL\n        - UNNUMBERED_ADJACENCY\n        - IPV6_ADJACENCY_LINK_LOCAL\n\n    SFlag (bool): Sets the 'S' flag in the sub-object. Default is False.\n\n    FFlag (bool): Sets the 'F' flag in the sub-object. Default is False.\n\n    EndpointBehavior (str): Specifies the endpoint behavior for the SRv6 segment. Default is 'Invalid'. Valid values include various endpoint behaviors like 'EndNoPspUsp', 'EndPsp', 'EndUsp', etc., representing different SRv6 operations.\n\n    SRv6Sid (str): Specifies the SRv6 Segment ID (SID). Must be a valid IPv6 address. Default is '2000::1'.\n\n    NaiIpv6NodeId (str): Specifies the NAI IPv6 node ID. Must be a valid IPv6 address. Default is '2000::1'.\n\n    NaiLocalIpv6Address (str): Specifies the local IPv6 address in the NAI. Must be a valid IPv6 address. Default is '2000::1'.\n\n    NaiRemoteIpv6Address (str): Specifies the remote IPv6 address in the NAI. Must be a valid IPv6 address. Default is '2001::1'.\n\n    NaiLocalInterfaceId (int): Specifies the local interface ID in the NAI. Range: 0 to 4294967295. Default is 0.\n\n    NaiRemoteInterfaceId (int): Specifies the remote interface ID in the NAI. Range: 0 to 4294967295. Default is 0.\n\nReturns:\n    config : PcepSrv6RroSubObjectConfig or list of PcepSrv6RroSubObjectConfig\n        A single configured instance of the PCEP SRv6 RRO sub-object if one input object is provided;\n        otherwise, a list of configured instances corresponding to the input objects.\n\nExample:\n    .. code:: RobotFramework\n\n        | ${Session} | Create Pcep | Port=${Port} |\n        | Edit Pcep | Session=${Session} | HelloType=DIRECT_TARGETED |\n        | ${Egress} | Create Pcep Pcc Lsp | Sessions=${Session} |\n        | ${Object} | Create Pcep Srv6 Rro Object | PcepLsp=${Egress} |\n        | ${Subobject} | Create Pcep Srv6 Rro Sub Object | PcepSrv6RroObjects=${Object} | Enable=True | NaiType=IPV6_ADJACENCY_GLOBAL | SRv6Sid=3000::1 | NaiLocalIpv6Address=3000::2 | NaiRemoteIpv6Address=3000::3 | Description=SRv6_RRO_Sub_Object |\n\nDescription:\n    The function first checks if the input `PcepSrv6RroObjects` is a single object or an iterable.\n    It then iterates through each object and calls the core configuration method from the `Pcep` class\n    with the provided configuration parameters (`**kwargs`). Each configured sub-object is collected in\n    a result list. Finally, the function returns either a single configured object or the list of objects,\n    depending on the number of inputs.",
  "TesterLibrary.Protocol.pcep.create_pcep_xro_object": "创建PCEP XRO (Exclude Route Object)配置对象，用于在PCEP会话中定义路径排除规则。\n\nArgs:\n\n    PcepLsps (:obj:`PccLspConfig` 或 iterable): 一个或多个PCEP LSP对象（Label Switched Path），表示需要关联XRO配置的路径。如果传入单个对象，将内部转换为列表处理；如果传入多个对象，应以列表、集合或元组形式提供。\n\nKeyword Args:\n\n    Name (str): XRO对象的名称，类型为字符串。\n\n    Enable (bool): 是否启用该XRO对象，类型为布尔值，默认值：True。\n\n    PFlag (bool): 在PCReq消息中是否设置P Flag（Processing Rule Flag），类型为布尔值，默认值：True。\n\n    IFlag (bool): 在PCReq消息中是否设置I Flag（Ignore Flag），类型为布尔值，默认值：False。\n\n    FFlag (bool): 在PCReq消息中是否设置F Flag（Fail Flag），类型为布尔值，默认值：False。\n\nReturns:\n\n    :obj:`PcepXroObjectConfig` 或 list: 如果输入为单个PcepLsp对象，则返回单个配置好的XRO对象；否则返回与输入PcepLsp数量相同的XRO对象列表。\n\nDescription:\n    该方法用于配置PCEP协议中的XRO（Exclude Route Object）对象，通常用于流量工程或策略路由中定义路径排除规则。每个传入的PcepLsp对象都将获得其对应的XRO配置对象，并可通过关键字参数进一步定制配置。此功能对在支持PCEP的网络中实现灵活的路径控制非常有用。\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${Session} | Create Pcep | Port=${Port} |\n        | Edit Pcep | Session=${Session} | HelloType=DIRECT_TARGETED |\n        | ${Egress} | Create Pcep Pce Lsp | Sessions=${Session} |\n        | ${Object} | Create Pcep XRO Object | PcepLsp=${Egress} | Name=MyXRO | Enable=True | PFlag=True | IFlag=False | FFlag=False |",
  "TesterLibrary.Protocol.pcep.create_pcep_xro_sub_object": "Configures one or more PCEP XRO (Exclude Route Object) sub-objects based on the provided parameters.\n\nThis function serves as a wrapper around the class-level method `Pcep.pcep_xro_sub_object_config`. \nIt enables the configuration of multiple PcepXroObjects in a single call. If a single object is passed, it returns a single configured instance of `PcepXroSubObjectConfig`. If multiple objects are passed, it returns a list of configured instances.\n\nParameters:\n    PcepXroObjects (object or iterable): A single `PcepXroObject` or an iterable (list, set, tuple) of multiple `PcepXroObject` instances to be configured.\n    **kwargs: Arbitrary keyword arguments representing configuration parameters for each `PcepXroSubObjectConfig`. These parameters are applied directly to the edit() method of each config object during initialization.\n\nReturns:\n    object or list: If a single `PcepXroObject` is passed, returns the configured `PcepXroSubObjectConfig` instance. If multiple objects are passed, returns a list of configured `PcepXroSubObjectConfig` instances corresponding to each input object.\n\nKeyword Arguments (Configuration Options):\n    Name (str): Name of the PCEP XRO Sub Object.\n    \n    Enable (bool): Enables or disables the sub-object. Default: True.\n    \n    XFlag (bool): Specifies whether the exclusion is mandatory or desired. Default: False.\n    \n    Type (str): Type of the XRO sub-object. Valid values: IPv4_PREFIX, IPv6_PREFIX, UNNUMBERED_INTERFACE_ID, AUTONOMOUS_SYS_NUM, SRLG. Default: IPv4_PREFIX.\n    \n    PrefixLength (int): Prefix length for IPv4/IPv6 addresses. Range: 0–32. Default: 24.\n    \n    Attribute (str): Attribute type of the sub-object. Valid values: INTERFACE, NODE, SRLG. Default: INTERFACE.\n    \n    Ipv4Address (str): IPv4 address for the sub-object. Default: 192.85.1.1.\n    \n    Ipv6Address (str): IPv6 address for the sub-object. Default: 2000::1.\n    \n    TeRouterId (str): TE Router ID (IPv4 format). Default: 192.85.1.1.\n    \n    InterfaceId (int): Interface ID for unnumbered interface type. Default: 0.\n    \n    AsNumber (int): Autonomous System number. Default: 0.\n    \n    SrlgId (int): Shared Risk Link Group (SRLG) identifier. Default: 0.\n\nDescription:\nThe function iterates over the given `PcepXroObjects`, initializes a configuration object for each using `Pcep.pcep_xro_sub_object_config`, and applies any provided configuration parameters via keyword arguments. It ensures consistent handling of both single and multiple configuration scenarios, simplifying usage for callers.\n\nExample Usage:\n.. code:: RobotFramework\n\n    | ${Session} | Create Pcep | Port=${Port} |\n    | Edit Pcep | Session=${Session} | HelloType=DIRECT_TARGETED |\n    | ${Egress} | Create Pcep Pce Lsp | Sessions=${Session} |\n    | ${Object} | Create Pcep Xro Object | PcepLsp=${Egress} |\n    | ${Subobject} | Create Pcep Xro Sub Object | PcepXroObjects=${Object} |",
  "TesterLibrary.Protocol.pcep.wait_pcep_state": "等待PCEP协议会话达到指定状态。\n\n该函数定期检查一个或多个PCEP会话的状态，直到它们达到指定的目标状态或发生超时。如果某个会话未处于预期状态，函数将继续轮询其状态，直到状态匹配或超时为止。\n\n参数:\n-----------\nSessions : object 或 iterable\n    一个或多个PCEP会话对象，用于检查状态。可以是单个会话对象或包含多个会话的可迭代对象（如列表、集合、元组）。\n\nState : str, 可选\n    目标状态，即期望会话达到的状态。默认值为 'UP'。支持的状态包括：\n\n    - DISABLED\n    - IDLE\n    - PENDING\n    - UP\n    - CLOSING\n\nInterval : int 或 float, 可选\n    状态检查的时间间隔（单位：秒）。默认值为 1 秒。\n\nTimeOut : int 或 float, 可选\n    等待会话达到目标状态的最大时间（单位：秒）。若在该时间内状态未达成，可能根据实现抛出异常。默认值为 60 秒。\n\n返回值:\n--------\nbool\n    如果所有会话成功达到指定状态，则返回 True；否则，在状态未达成时可能抛出异常（取决于内部实现）。\n\n注意事项:\n----------\n- 该函数内部调用每个会话对象的 `wait_session_state` 方法。\n- 若返回 False，函数将抛出 `ContinuableFailure` 异常，表示操作失败但可继续执行后续测试。\n- 函数被装饰器 `@abnormal_check()` 包裹，可能在执行过程中检测并处理异常状态。\n\n示例:\n-------\n.. code:: RobotFramework\n\n    | Wait Pcep State | Sessions=${Sessions} | State=UP | Interval=2 | TimeOut=120 |",
  "TesterLibrary.Protocol.pcep.pcep_establish": "Establishes PCEP (Path Computation Element Communication Protocol) sessions for the given session objects.\n\nThis function supports both a single session object and collections of session objects (such as list, set, or tuple). If a single session is provided, it is internally converted into a list to allow uniform processing. The function then iterates over each session object and invokes its `pcep_establish()` method to establish the PCEP connection.\n\nParameters:\n- Sessions (object or iterable of objects): A single session object or an iterable containing multiple session objects. Each session object must have a `pcep_establish()` method that handles the actual PCEP session establishment logic.\n\nReturns:\n- bool: Always returns True to indicate that the PCEP session establishment process was successfully initiated for all provided session objects.\n\nRaises:\n- AttributeError: If any of the provided session objects does not implement the required `pcep_establish()` method.\n- ContinuableFailure: If the underlying implementation (`renix.pcep_establish`) returns False, indicating a failure in session establishment, this exception is raised to signal the failure while allowing test execution to continue.\n\nNotes:\n- This function is decorated with `@abnormal_check()`, which may be used to check for abnormal conditions before proceeding with session establishment.\n- Designed for use within a RobotFramework environment, particularly for network testing scenarios involving PCEP-based communication.",
  "TesterLibrary.Protocol.pcep.pcep_stop_keep_alive": "Stops the PCEP keep-alive mechanism for one or more session objects.\n\nThis function allows the user to halt the transmission of Keepalive messages on specified PCEP session(s), typically used during session teardown or when maintaining communication with a PCE is no longer required. It supports both single session objects and collections of sessions (such as lists, sets, or tuples).\n\nParameters:\n- Sessions (object or iterable): A single PCEP session object or an iterable (list, set, or tuple) containing multiple session objects. The function will iterate through each session and invoke the `pcep_stop_keep_alive()` method.\n\nReturns:\n- bool: Returns True to indicate that the operation was successfully executed on all provided session objects.\n\nRaises:\n- ContinuableFailure: If the underlying implementation returns False, indicating a failure in stopping the keep-alive process, this exception will be raised to notify the caller while allowing test execution to continue.\n\nExample Usage:\n.. code:: RobotFramework\n\n    | Pcep Stop Keep Alive | Sessions=${Sessions} |",
  "TesterLibrary.Protocol.pcep.pcep_resume_keep_alive": "Resumes the PCEP keep-alive mechanism for one or more session objects.\n\n    This function accepts a single session object or an iterable (list, set, or tuple) of session objects.\n    It resumes the PCEP keep-alive process by invoking the `pcep_resume_keep_alive()` method on each session\n    individually. This is typically used to re-enable PCEP keep-alive messages after they have been paused.\n\n    Args:\n        Sessions (object or iterable): A single session object or an iterable (list, set, or tuple)\n            containing multiple session objects for which the PCEP keep-alive should be resumed.\n\n    Returns:\n        bool: Returns True if the PCEP keep-alive was successfully resumed for all provided sessions.\n            If the operation fails, a ContinuableFailure exception is raised.\n\n    Raises:\n        ContinuableFailure: If the underlying implementation returns False, indicating failure.\n\n    Examples:\n        .. code:: RobotFramework\n\n            | Pcep Resume Keep Alive | Sessions=${Sessions} |\n\n    Notes:\n        - The function internally handles conversion of non-list iterables to a list and processes\n          each session in sequence.\n        - Designed for use within a test automation framework where session control is required.",
  "TesterLibrary.Protocol.pcep.pcep_pcc_initial_sync": "Perform initial synchronization for one or more PCC (Path Computation Client) sessions by sending the initial state synchronization message to the PCE.\n\nThis function initiates the synchronization process between the PCC and the PCE, typically used during session establishment. It allows optional specification of LSPs (Label Switched Paths) to be included in the synchronization. If no LSPs are provided, it defaults to using the `PccLsp` attribute of each session.\n\nArgs:\n    Sessions (list of :obj:`Pcep`): A list of PCEP protocol session objects. Each object must have a `pcc_initial_sync` method that accepts an `lsps` parameter.\n    Lsps (list of :obj:`BgpRouter`, optional): A list of PCEP LSP objects to include in the synchronization. If not provided or None, the function will use the `PccLsp` attribute from each session as default.\n\nReturns:\n    bool: Always returns True if the initial synchronization command is successfully issued for all provided sessions.\n\nRaises:\n    ContinuableFailure: If the backend call to `renix.pcc_initial_sync` returns False, indicating a failure in issuing the synchronization command.\n\nExample:\n    .. code:: RobotFramework\n\n        | Pcep Pcc Initial Sync | Sessions=${Sessions} | Lsps=&{Lsps} |\n\nDescription:\n    This function abstracts over single or multiple session handling and delegates the actual synchronization logic to the `pcc_initial_sync` method of each session object. It wraps the backend implementation which ensures proper communication with the PCE.",
  "TesterLibrary.Protocol.pcep.pcep_pcc_end_sync": "停止PCC向PCE发送初始状态同步报文\n\n该函数用于结束PCC（路径计算客户端）与PCE（路径计算元素）之间的PCEP会话的状态同步过程。它将对提供的所有会话对象执行统一的终止同步操作，可以针对所有关联的LSP（标签交换路径）或指定的一组LSP进行同步。\n\nArgs:\n\n    Sessions(:obj:`Pcep` 或 :obj:`list` of :obj:`Pcep`): PCEP协议会话对象或对象列表。如果传入单个会话对象，它将被内部转换为列表处理。\n\n    Lsps(:obj:`BgpRouter` 或 :obj:`list` of :obj:`BgpRouter`, optional): 要同步的LSP对象或对象列表。如果未提供（默认为None），则使用每个会话中默认的`PccLsp`属性进行同步。\n\nReturns:\n\n    bool: 布尔值，始终返回True，表示成功完成所有会话的同步过程。\n\nRaises:\n\n    ContinuableFailure: 如果底层调用返回False，表示同步失败，将抛出可继续执行的异常。\n\nExamples:\n    .. code:: RobotFramework\n\n        | Pcep Pcc End Sync | Sessions=${Sessions} | Lsps=&{Lsps} |\n\n    .. code:: RobotFramework\n\n        | Pcep Pcc End Sync | Sessions=${Session} |  # 单个会话对象，无需封装成列表 |",
  "TesterLibrary.Protocol.pcep.pcep_pcc_delegate_lsp": "Delegates the LSP (Label Switched Path) management for one or more PCC (Path Computation Client) sessions to a PCE (Path Computation Element) server.\n\nThis function allows the user to delegate control of specified LSPs from one or more PCC session(s) to a PCE. It wraps the `pcc_delegate_lsp` method of individual session objects and supports bulk delegation. If no specific LSPs are provided, it uses the default LSPs associated with each session.\n\nArgs:\n    Sessions (list of :obj:`Pcep`): A list of PCEP protocol session objects for which LSP delegation should be performed. Each session object must support the `pcc_delegate_lsp` method and may have a `PccLsp` attribute if Lsps is not explicitly provided.\n\n    Lsps (list of :obj:`BgpRouter`, optional): The PCEP LSP objects to be delegated to the PCE. If None, the default LSPs (`Session.PccLsp`) of each session in Sessions will be used. If provided, this overrides the default LSPs for all specified sessions.\n\nReturns:\n    bool: True if the delegation operation is successfully executed across all provided sessions. If the backend call returns False, an exception is raised.\n\nExamples:\n    .. code:: RobotFramework\n\n        | Pcep Pcc Delegate Lsp | Sessions=${Sessions} | Lsps=&{Lsps} |\n\nBehavior:\n- If `Sessions` is not a list, it will be converted into a list containing that single session.\n- For each session in `Sessions`, the `pcc_delegate_lsp` method is called.\n  - If `Lsps` is None, the session's own `PccLsp` is passed.\n  - Otherwise, the provided `Lsps` argument is passed.\n- This function assumes that all session objects are valid and support the necessary attributes and methods.\n- If the internal `renix.pcc_delegate_lsp` call returns False, a `ContinuableFailure` exception is raised with a failure message including the function name.",
  "TesterLibrary.Protocol.pcep.pcep_pcc_revoke_lsp": "Revokes one or more LSPs (Label Switched Paths) for the given PCC (Path Computation Client) sessions.\n\nThis function sends a request to revoke specific LSPs associated with each session in `Sessions`.\nIf no specific LSPs are provided via the `Lsps` parameter, it revokes all LSPs associated with\neach session by default.\n\nParameters:\n-----------\nSessions : object or iterable\n    A single session object or an iterable (list, set, tuple) of session objects representing\n    the PCC sessions from which LSPs will be revoked. If a single session is provided,\n    it is converted into a list internally for uniform processing.\n\nLsps : object or iterable, optional\n    The LSP or collection of LSPs (e.g., list, set, tuple) to revoke for each session.\n    If None (default), all LSPs associated with each session will be revoked.\n\nReturns:\n--------\nbool\n    Always returns True to indicate successful initiation of the LSP revocation process.\n\nExamples:\n---------\n.. code:: RobotFramework\n\n    | Pcep Pcc Revoke Lsp | Sessions=${Sessions} | Lsps=&{Lsps} |\n\nDescription:\n------------\nFor each session in `Sessions`, this function calls the session's `pcc_revoke_lsp` method.\nIf `Lsps` is None, it uses the session's internal list of LSPs (`Session.PccLsp`) to revoke all.\nOtherwise, it passes the specified `Lsps` to revoke only those particular LSPs.",
  "TesterLibrary.Protocol.pcep.pcep_pcc_remove_delegate_lsp": "Removes delegated LSPs (Label Switched Paths) from one or more PCC (Path Computation Client) sessions.\n\nThis function sends a request from the PCC to the PCE to remove one or more delegated LSPs. If no specific LSPs are provided, it will remove all LSPs associated with each session. It internally calls the backend method `pcc_remove_delegated_lsp` for each session.\n\nParameters:\n    Sessions (list of :obj:`Pcep`): A list of PCEP protocol session objects from which the delegated LSPs will be removed.\n    Lsps (list of :obj:`BgpRouter`, optional): A list of PCEP LSP objects to be removed. If not provided, all LSPs in each session will be removed. Defaults to None.\n\nReturns:\n    bool: Returns True if the operation is successful; otherwise, False (in case of internal failure, an exception is raised).\n\nExample:\n    .. code:: RobotFramework\n\n        | Pcep Pcc Remove Delegate Lsp | Sessions=${Sessions} | Lsps=&{Lsps} |",
  "TesterLibrary.Protocol.pcep.pcep_pcc_request_lsp": "Sends a request to the PCC (Path Computation Client) to compute an LSP (Label Switched Path) for one or more sessions.\n\nThis function wraps a call to `Session.pcc_request_lsp()` for each session in the input. If no specific LSPs are provided, it uses the default LSPs associated with each session.\n\nParameters:\n-----------\nSessions : Session object or iterable of Session objects\n    A single session or an iterable (list, set, or tuple) of sessions for which the\n    LSP request should be made. If a single session is provided, it will be converted\n    into a list internally.\n\nLsps : optional, list of LSP objects or None (default: None)\n    The list of LSPs to request computation for. If not provided (None), the function will use\n    the default LSPs stored in each session's `PccLsp` attribute.\n\nReturns:\n--------\nbool\n    Always returns True, indicating that the operation has been successfully initiated\n    for all specified sessions.\n\nRaises:\n-------\nContinuableFailure\n    If the underlying `renix.pcc_request_lsp` call returns False, indicating failure in initiating\n    the LSP computation, this exception is raised with a failure message.\n\nDescription:\n------------\nFor each session in the provided `Sessions`, this function triggers a PCC request for LSP\ncomputation using the corresponding `Session.pcc_request_lsp()` method. If no LSPs are\nexplicitly given, it defaults to the session’s own `PccLsp` list. This function serves as\na centralized way to initiate multiple PCC LSP requests across multiple sessions.\n\nExample Usage:\n--------------\n.. code:: RobotFramework\n\n    | Pcep Pcc Request Lsp | Sessions=${Sessions} | Lsps=&{Lsps} |",
  "TesterLibrary.Protocol.pcep.pcep_pcc_report_lsp": "PCC向PCE报告LSP状态。\n\n该函数用于触发PCC（Path Computation Client）向PCE（Path Computation Element）报告一个或多个LSP（Label Switched Path）的状态信息。它调用底层API方法 `renix.pcc_report_lsp` 来执行实际操作，并在失败时抛出异常。\n\n### 参数说明\n\n- **Sessions** (`list` of `Pcep`)  \n  要执行LSP状态报告的PCEP协议会话对象列表。每个会话对象必须包含 `pcc_report_lsp` 方法，也可以包含默认的 LSP 列表 (`PccLsp`)。\n\n- **Lsps** (`list` of `PccLspConfig`, optional)  \n  要报告的LSP配置对象列表。如果未指定，则使用每个会话对象中默认的LSP列表 (`Session.PccLsp`)。\n\n### 返回值\n\n- **bool**  \n  成功时返回 `True`；失败时返回 `False` 并抛出 `ContinuableFailure` 异常。\n\n### 示例\n\n```robotframework\n| Pcep Pcc Report Lsp | Sessions=${Sessions} | Lsps=&{Lsps} |\n```\n\n其中 `${Sessions}` 是一个PCEP会话对象列表，`&{Lsps}` 是一个可选的LSP配置字典或列表。",
  "TesterLibrary.Protocol.pcep.pcep_pcc_synchronize_lsp": "Synchronizes the PCC (Path Computation Client) LSP (Label Switched Path) for the provided sessions with the PCE (Path Computation Element).\n\nThis function ensures that the LSP information is synchronized between the PCC and the PCE via the provided PCEP sessions. If no specific LSPs are provided, all associated LSPs for each session will be synchronized.\n\nParameters:\n-----------\nSessions : object or iterable\n    A single session object or an iterable (list, set, tuple) of session objects representing active PCEP connections.\n    These session objects must support the `pcc_synchronize_lsp` method for synchronization to succeed.\n\nLsps : object or None, optional\n    The specific LSP(s) to synchronize. If not provided (default None), all LSPs associated with each session will be synchronized.\n    If provided, it should be a valid LSP object or a collection of LSP objects compatible with the session's LSP handling mechanism.\n\nReturns:\n--------\nbool\n    Returns True if the synchronization operation completes successfully across all specified sessions and LSPs.\n    If any error occurs during synchronization, a `ContinuableFailure` exception is raised.\n\nRaises:\n-------\nContinuableFailure\n    If the underlying synchronization fails at any point, this exception is raised to indicate failure while allowing test execution to continue.\n\nExamples:\n---------\n.. code:: RobotFramework\n\n    | Pcep Pcc Synchronize Lsp | Sessions=${Sessions} | Lsps=&{Lsps} |\n\nDescription:\n------------\nThe function first normalizes the input `Sessions` into a list if a single session is provided. Then, for each session in the list, it calls the session-level `pcc_synchronize_lsp` method. If `Lsps` is None, the session’s default set of LSPs (`Session.PccLsp`) is used for synchronization. Otherwise, the provided `Lsps` are passed directly to the session method. After successful execution, the function returns True; otherwise, it raises a `ContinuableFailure`.",
  "TesterLibrary.Protocol.pcep.pcep_pce_return_lsp": "Invokes the PCE (Path Computation Element) return LSP (Label Switched Path) operation to return LSP ownership from the Stateful PCE to the PCC (Path Computation Client).\n\nThis function sends a request for one or more PCEP sessions, instructing the PCE to release control of specified LSPs back to the PCC. If no specific LSPs are provided, it defaults to using the session's stored `PceLsp` attribute.\n\n### Parameters:\n\n- **Sessions** (`list` of `Pcep` objects):  \n  A list of PCEP protocol session objects on which the return LSP operation should be performed.  \n  Each session object is expected to have a method `pce_return_lsp` and may contain a default `PceLsp` attribute if no external LSPs are provided.\n\n- **Lsps** (`list` of `PccLspConfig` objects, optional):  \n  A list of LSP configuration objects representing the LSPs to be returned to the PCC.  \n  If not provided, the function will use the `PceLsp` attribute from each session as the default set of LSPs to return.\n\n### Returns:\n\n- `bool`:  \n  Returns `True` if the PCE successfully returns the LSPs across all sessions.  \n  Returns `False` if the operation fails for any session.\n\n### Raises:\n\n- `ContinuableFailure`:  \n  If the underlying operation returns `False`, this exception is raised to indicate a failure in returning LSP control, allowing test frameworks (e.g., Robot Framework) to handle and continue execution accordingly.\n\n### Example Usage:\n\n```robotframework\n| Pcep Pce Return Lsp | Sessions=${Sessions} | Lsps=&{Lsps} |\n```\n\nWhere:\n- `${Sessions}` is a list of active PCEP session objects.\n- `&{Lsps}` is a list of configured LSP objects managed by the PCE that need to be returned to the PCC.",
  "TesterLibrary.Protocol.pcep.pcep_pce_update_lsp": "Updates the LSP (Label Switched Path) for one or more PCE (Path Computation Element) sessions by invoking the `pce_update_lsp` method on each session. If no specific LSP is provided, it defaults to updating the session's default LSP.\n\nThis function enables triggering an update on either all LSPs associated with each session or a specific set of provided LSPs. It wraps the backend implementation and raises an exception if the operation fails.\n\nParameters:\n-----------\nSessions : object or list of objects\n    A single session object or a list of session objects representing PCEP protocol sessions.\n    Each session must have a `pce_update_lsp` method. If no LSP is specified, the session's default LSP,\n    stored in `Session.PceLsp`, will be used.\n\nLsps : optional, object or list of objects\n    A single LSP object or a list of LSP objects to be updated. These should be compatible with the\n    session's `pce_update_lsp` method. If not provided (None), the session's default LSP(s) will be updated.\n\nReturns:\n--------\nbool\n    Returns True if the update operation completes successfully for all sessions.\n\nRaises:\n-------\nContinuableFailure\n    If the underlying update operation returns False, indicating failure, this function raises a\n    ContinuableFailure exception to signal the error while allowing test execution to continue.\n\nExamples:\n---------\n.. code:: RobotFramework\n\n    | Pcep Pce Update Lsp | Sessions=${Sessions} | Lsps=&{Lsps} |\n\nBehavior:\n---------\n- If a single session is provided, it is converted into a list for uniform processing.\n- For each session in the list:\n  - If `Lsps` is None, the session’s default LSP (`Session.PceLsp`) is used.\n  - The session's `pce_update_lsp` method is called with the resolved LSP(s).\n- The return value indicates overall success (True) or failure (False, which results in an exception).",
  "TesterLibrary.Protocol.pcep.pcep_pce_initiate_lsp": "Initiates the Path Computation Element (PCE) for one or more sessions to establish Label Switched Paths (LSPs).\n\nThis function triggers the PCE to initiate LSPs on one or more PCEP protocol session objects. Each session can either use its default LSP configuration or a custom list of LSPs provided as input.\n\nParameters:\n    Sessions (object or iterable): A single session object or an iterable (list, set, tuple) of session objects\n                                   representing PCEP protocol connections between the PCE and PCC.\n    Lsps (optional, list): A list of specific LSP configurations to use for initiation. If not provided,\n                           the function will use the default `PceLsp` attribute from each session.\n\nReturns:\n    bool: Always returns True if the initiation process is successfully triggered across all sessions.\n\nRaises:\n    ContinuableFailure: If the underlying PCE initiation fails, an exception is raised with a failure message.\n\nExample:\n    .. code:: RobotFramework\n\n        | Pcep Pce Initiate Lsp | Sessions=${Sessions} | Lsps=&{Lsps} |\n\nDescription:\n    This function serves as a user-facing interface that wraps the internal `pce_initiate_lsp` method. It ensures that each session either uses its default LSP configuration or applies the provided custom LSPs. The actual initiation logic is handled by the session's native method.",
  "TesterLibrary.Protocol.pcep.pcep_pce_remove_initiated_lsp": "PCE向PCC发送删除指定LSP请求。该函数用于移除一个或多个PCEP会话中已发起的LSP（Label Switched Path，标签交换路径）。它在会话级别上操作，并将实际的LSP移除任务委托给每个会话的对应方法。\n\n参数:\n- Sessions (:obj:`Pcep` 或 iterable): 一个单独的PCEP协议会话对象，或者包含多个会话对象的可迭代对象（如 list, set, tuple），表示需要移除LSP的PCE会话。\n- Lsps (Optional, :obj:`PccLspConfig` 的列表): 要移除的LSP对象列表。如果未提供（即为None），则表示移除每个会话中所有已发起的LSP。\n\n返回值:\n- bool: 函数执行成功时始终返回True，即使没有实际移除任何LSP。\n\n行为说明:\n- 如果传入的是单个会话对象，函数内部会将其转换为列表形式以便统一处理。\n- 对于每一个会话，若未指定Lsps参数，则移除该会话下的所有已发起LSP；否则仅移除指定的LSP对象。\n- 若底层调用失败（返回False），则抛出ContinuableFailure异常；否则返回True表示执行成功。\n\n示例:\n.. code:: RobotFramework\n\n    | Pcep Pce Remove Initiate Lsp | Sessions=${Sessions} | Lsps=&{Lsps} |",
  "TesterLibrary.Protocol.pcep.get_pcep_lsp_statistic": "获取PCEP LSP（Label Switched Path）统计信息。\n\n该函数用于根据提供的会话和LSP标识符检索PCEP协议中LSP的统计信息。它封装了底层 `_get_statictis` 函数，支持灵活的输入类型，并可根据需要获取特定的统计项。\n\n### 参数说明：\n\n- **Session** (`object`, `list`/`set`/`tuple` of objects 或 `None`)  \n  PCEP会话对象或对象集合，从中提取会话名称用于过滤统计结果。若为 `None`，则不通过会话进行过滤。\n\n- **SessionId** (`int`, 可选)  \n  当未提供 `Session` 参数时使用的会话索引，默认值为 `1`。\n\n- **Lsp** (`object`, `list`/`set`/`tuple` of objects 或 `None`)  \n  LSP对象或对象集合，从中提取LSP名称用于过滤统计结果。若为 `None`，则不通过LSP进行过滤。\n\n- **LspId** (`int`, 可选)  \n  当未提供 `Lsp` 参数时使用的LSP索引，默认值为 `1`。\n\n- **StaItems** (`list`, `str` 或 `None`)  \n  指定要获取的统计项（列名）。若为 `None`，则自动从ROM属性中确定；若为字符串，则会被转换为列表。统计项必须是支持的属性子集。\n  \n  支持的统计项包括：\n  - SessionBlockId\n  - LspIdentify\n  - SessionIndex\n  - LspIndex\n  - SessionLocalIP\n  - SessionPeerIP\n  - Role\n  - SymbolicName\n  - LspSourceIP\n  - LspDestinationIP\n  - LspState\n  - PLSPId\n  - LSPId\n  - SRPId\n  - RPId\n\n### 返回值：\n\n- 若查询结果仅一行：返回一个字典，键为 `StaItems` 中指定的统计项，值为对应的统计值。\n- 若查询结果多行：返回一个 `pandas.DataFrame` 对象，包含所有匹配的统计记录。\n- 若无匹配结果：返回 `False`。\n\n### 异常抛出：\n\n- `TesterException`: 在命令执行或数据检索过程中可能抛出的异常。\n- `sqlite3.Error`: 如果访问数据库时发生错误。\n- `KeyError`: 如果索引字典中的列名在结果DataFrame中不存在。\n\n### 副作用：\n\n- 内部调用 `_get_statictis` 函数，可能会刷新数据、导航分页或从结果视图中查询。\n- 可能调用传入对象的 `.get()` 方法以刷新其内部状态。\n- 会将最终的 DataFrame 结果以表格形式记录日志，用于调试。\n\n### 使用示例（RobotFramework）：\n\n```robotframework\n| @{StaItems} | Create List | AdjacencyState | TxUpdate |\n| Subscribe Result | Types=PcepLspStatistic |\n| Start Protocol |\n| Sleep | 60 |\n| &{Result} | Get Pcep Lsp Statistic | Session=@{Session} | SessionId=1 | Lsp=@{Lsp} | LspId=1 | StaItems=@{StaItems} |\n| Clear Result |\n```",
  "TesterLibrary.Protocol.pcep.get_pcep_lsp_block_statistic": "获取PCEP LSP BLOCK统计结果\n\n该函数用于检索PCEP LSP块的统计信息，支持通过会话和LSP对象或其标识符进行过滤。它调用底层 `_get_statictis` 函数，并指定类型为 'PcepLspBlockStatistic' 以获取相关数据。\n\nArgs:\n    Session (:obj:`Pcep` or list/set/tuple of :obj:`Pcep`, optional): \n        PCEP协议会话对象，或多个会话对象的集合（如列表、集合、元组）。若提供的是集合，则会从每个元素中提取 `Name` 属性来确定会话标识。\n        若为 None，则不进行基于会话的过滤。默认值为 None。\n\n    SessionId (int, optional):\n        会话ID，用于在多会话环境中定位特定会话。如果未提供 `Session` 参数，则使用此 ID 定位会话。\n        默认值为 1。\n\n    Lsp (:obj:`PccLspConfig` or list/set/tuple of :obj:`PccLspConfig`, optional):\n        LSP配置对象，或多个LSP对象的集合（如列表、集合、元组）。若提供的是集合，则会从每个元素中提取 `Name` 属性来确定LSP标识。\n        若为 None，则不进行基于LSP的过滤。默认值为 None。\n\n    StaItems (list, str or None, optional):\n        需要获取的统计项（列名），可以是字符串（将自动转换为单元素列表）或列表形式。\n        如果为 None，则返回所有可用的统计项。必须是以下支持的统计项的子集：\n\n            SessionBlockId\n            LspIdentify\n            SessionIndex\n            SessionLocalIP\n            SessionPeerIP\n            Role\n            LspCount\n            RequestedLsps\n            RepliedLsps\n            DelegatedLsps\n            UpdatedLsps\n            RevokedLsps\n            ReturnedLsps\n            InitiatedLsps\n            StateDownLsps\n            StateUpLsps\n            StateActiveLsps\n            StateGoingDownLsps\n            StateGoingUpLsps\n            StateOtherLsps\n\nReturns:\n    dict or pd.DataFrame or bool:\n        - 如果找到唯一匹配的一行：返回一个字典，键为请求的 StaItems，值为其对应的结果。\n        - 如果匹配到多行：返回一个 pandas DataFrame，包含所有匹配的统计结果。\n        - 如果没有找到匹配结果：返回 False。\n\nRaises:\n    ContinuableFailure: 如果内部调用失败（即返回值为 False），则抛出可继续执行的失败异常。\n\nExamples:\n    .. code:: RobotFramework\n\n        | @{StaItems} | Create List | LspCount | RequestedLsps |\n        | Subscribe Result | Types=PcepLspBlockStatistic |\n        | Start Protocol |\n        | Sleep | 60 |\n        | &{Result} | Get Pcep Lsp Block Statistic | Session=@{Session} | SessionId=1 | Lsp=@{Lsp} | StaItems=@{StaItems} |\n        | Log Dictionary | &{Result} |\n        | Clear Result |",
  "TesterLibrary.Protocol.pcep.get_pcep_port_statistic": "获取PCEP Port统计结果\n\n该函数用于获取一个或多个PCEP端口的指定统计信息。它基于底层调用 `_get_statictis` 函数，并以 'PcepPortStatistic' 类型查询统计数据。支持为指定端口查询特定的统计项，若未指定端口，则默认查询所有端口；若未指定统计项，则默认查询所有可用属性。\n\nArgs:\n\n    Port (object or list or set or tuple, optional): PCEP协议会话所在的端口对象或对象集合。\n        每个端口对象必须包含 `Name` 属性。如果为 None，则查询所有端口。默认值：None。\n\n    StaItems (list or str or None, optional): 需要获取的统计项目列表。\n        可选的统计项包括：\n\n            SessionBlockCount\n            SessionBlockIdleCount\n            SessionBlockPendingCount\n            SessionBlockUpCount\n\n        如果为字符串，将自动转换为单元素列表；如果为 None，默认查询所有可用统计属性。默认值：None。\n\nReturns:\n\n    dict or pd.DataFrame or bool:\n        - 如果仅匹配到一行数据（如指定单个端口并只返回一条记录）: 返回字典，键为统计项名称，值为对应的统计值。\n        - 如果匹配到多行数据（如查询多个端口）: 返回 pandas DataFrame，包含过滤后的统计结果。\n        - 如果没有找到匹配的数据: 返回 False。\n\nRaises:\n\n    ContinuableFailure: 如果底层调用返回 False，则抛出可继续执行的失败异常。\n    TesterException: 在命令执行或数据检索过程中可能抛出的异常。\n    sqlite3.Error: 若在相关函数中发生数据库访问错误。\n    KeyError: 若过滤条件中的列名不存在于结果 DataFrame 中。\n\nSide Effects:\n\n    - 内部可能会通过 `.get()` 调用刷新数据状态。\n    - 若存在分页结果，会执行类似 GotoResultPageCommand 的导航操作。\n    - 为了调试目的，会以表格形式记录日志输出。\n\nExamples:\n\n    .. code:: RobotFramework\n\n        | @{StaItems} | Create List | SessionBlockUpCount | SessionBlockIdleCount |\n        | Subscribe Result | Types=PcepPortStatistic |\n        | Start Protocol |\n        | Sleep | 60 |\n        | &{Result} | Get Pcep Port Statistic | Port=@{Port} | StaItems=@{StaItems} |\n        | Clear Result |",
  "TesterLibrary.Protocol.pcep.get_pcep_session_statistic": "获取PCEP session统计结果\n\n该函数用于查询一个或多个PCEP会话的统计信息，支持通过会话对象或会话ID进行指定，并可选择性地获取特定的统计项。它封装了底层的数据检索逻辑，根据匹配的会话数量返回字典、DataFrame 或布尔值。\n\nParameters:\n    Session (object or list or set or tuple, optional): 代表PCEP会话的一个对象或多个会话对象的集合。\n        如果提供了该参数，则使用会话的名称作为会话句柄。如果未提供，将不指定会话句柄。默认为 None。\n    SessionId (int, optional): 当未提供 Session 参数时使用的会话索引，表示系统中的会话编号，默认为 1。\n    StaItems (list or str or None, optional): 指定需要获取的统计项（列名）。如果为 None，自动查询所有可用属性；\n        如果是字符串，会被转换为单元素列表。必须是 'PcepSessionStatistic' 支持的统计属性的子集。默认为 None。\n\nReturns:\n    dict or pd.DataFrame or bool:\n        - 如果找到唯一匹配的会话行：返回一个字典，键为 `StaItems` 中的统计项，值为其对应值。\n        - 如果多个会话行匹配条件：返回一个包含过滤后的PCEP会话统计信息的 pandas DataFrame。\n        - 如果没有找到匹配的结果：返回 False。\n\nRaises:\n    TesterException: 可能抛出异常，如内部命令执行失败或数据检索错误。\n    sqlite3.Error: 如果在基于性能的统计检索过程中发生数据库错误。\n    KeyError: 如果过滤条件中包含的列名不在结果中存在。\n\nSide Effects:\n    - 可能通过 `.get()` 调用刷新内部会话数据。\n    - 在适用的情况下，执行 GotoResultPageCommand 命令以导航分页结果。\n    - 在某些模式下使用 time.sleep(3) 来确保数据一致性。\n    - 内部会对检索到的数据进行日志记录以便调试。\n\nDescription:\n    此函数提供了一个便捷接口，用于查询 PCEP 会话的统计信息，支持通过会话对象或会话 ID 进行筛选。它将会话信息转换为适当的句柄，并委托 `_get_statictis` 函数完成实际的统计检索工作。适用于需要监控或报告 PCEP 会话状态和性能的场景。\n\nExamples:\n    .. code:: RobotFramework\n\n        | @{StaItems} | Create List | Role | TxErrorCount | RxErrorCount |\n        | Subscribe Result | Types=PcepSessionStatistic |\n        | Start Protocol |\n        | Sleep | 60 |\n        | &{Result} | Get Pcep Session Statistic | Session=@{Session} | SessionId=1 | StaItems=@{StaItems} |\n        | Clear Result |",
  "TesterLibrary.Protocol.pcep.get_pcep_session_block_statistic": "获取PCEP session block统计结果\n\n该函数用于检索指定PCEP会话对象的会话块统计信息，支持查询一个或多个会话的统计项，并返回结构化数据。若未指定会话，则不进行过滤；若未指定统计项，则自动查询所有可用统计列。\n\n参数:\n    Session (:obj:`Pcep` 或 list/set/tuple, optional): PCEP协议会话对象或其集合，默认为None。\n        - 若为单个对象，使用其Name属性作为会话ID进行过滤。\n        - 若为多个对象的集合，提取它们的Name属性组成会话ID列表进行过滤。\n    StaItems (list or str, optional): 需要获取的统计项列表，默认为None（即自动获取所有可用统计项）。\n        - 可选统计项包括：\n            SessionBlockId\n            SessionCount\n            IdleCount\n            PendingCount\n            UpCount\n            LspCount\n            StateDownLsps\n            StateUpLsps\n            StateActiveLsps\n            StateGoingDownLsps\n            StateGoingUpLsps\n            StateOtherLsps\n            TxOpenCount\n            RxOpenCount\n            TxKeepaliveCount\n            RxKeepaliveCount\n            TxReportCount\n            RxReportCount\n            TxUpdateCount\n            RxUpdateCount\n            TxRequestCount\n            RxRequestCount\n            TxReplyCount\n            RxReplyCount\n            TxInitiateCount\n            RxInitiateCount\n            TxCloseCount\n            RxCloseCount\n            TxErrorCount\n            RxErrorCount\n        - 若为字符串类型，将被转换为仅包含一个元素的列表。\n\n返回值:\n    dict or pd.DataFrame or bool:\n        - 若找到唯一匹配的session block，返回dict，键为统计项名称，值为对应值。\n        - 若匹配到多个session block，返回pandas DataFrame，包含所有匹配项的指定统计列。\n        - 若无匹配项或发生错误，返回False。\n\n异常:\n    ContinuableFailure: 当底层调用返回False时抛出，表示获取统计失败但可继续执行后续操作。\n    TesterException: 可能由命令执行或视图数据获取过程中引发。\n    sqlite3.Error: 若在相关函数中发生数据库访问错误。\n    KeyError: 若过滤条件中的列名不存在于结果DataFrame中。\n\n副作用:\n    - 内部调用 `_get_statictis` 方法，可能刷新统计数据或处理分页视图。\n    - 在ResultView模式下导航页面时，执行GotoResultPageCommand等命令。\n    - 为确保数据一致性，在页面切换时调用time.sleep(3)。\n    - 调试日志中以表格形式记录返回的DataFrame内容。\n\n示例:\n    .. code:: RobotFramework\n\n        | @{StaItems} | Create List | AdjacencyState | TxUpdate |\n        | Subscribe Result | Types=PcepSessionBlockStatistic |\n        | Start Protocol |\n        | Sleep | 60 |\n        | &{Result} | Get Pcep Session Block Statistic | Session=@{Session} | StaItems=@{StaItems} |\n        | Clear Result |",
  "TesterLibrary.Protocol.pcep.edit_pcep_port_config": "修改PCEP端口配置对象\n\nArgs：\n\n    Ports (:obj:`Port` or list of :obj:`Port`): 测试仪表端口对象，可以是单个端口对象或端口对象列表\n\nKeyword Args:\n\n    MaxOutstanding (int): 最大会话负载数量, 取值范围：1-65535, 默认值：100\n\n    RetryCount (int): 会话尝试建立次数, 取值范围：0-65535, 默认值：5\n\n    RetryInterval (int): 会话尝试建立间隔（秒）, 取值范围：0-65535, 默认值：30\n\n    MaxLspPerMessage (int): 消息中LSP的最大个数, 取值范围：1-2000, 默认值：100\n\nReturns:\n\n    (:obj:`PcepPortConfig` or list of :obj:`PcepPortConfig`): 如果仅修改了一个端口的配置，则返回单个PcepPortConfig对象；\n                                                             否则返回修改后的PcepPortConfig对象列表。\n\nExamples:\n    .. code:: RobotFramework\n\n        | Edit PCEP Client Port Config | Ports=${Port} | MaxOutstanding=200 | RetryCount=3 |\n\nDescription:\n    该函数用于编辑一个或多个测试仪表端口上的PCEP协议配置。给定的端口对象或端口对象列表将被处理，\n    所有的PCEP端口配置参数通过关键字参数传递并应用到对应的端口上。如果未提供任何配置参数（即kwargs为空），\n    则不会对端口配置进行任何修改。函数最终返回修改后的PCEP端口配置对象或对象列表。",
  "TesterLibrary.Protocol.pim.create_pim": "创建并配置一个新的PIM（Protocol Independent Multicast）路由器实例。\n\n该方法在指定的端口上初始化一个PimRouter对象，并通过提供的关键字参数进行额外配置。新创建的PIM路由器实例将被注册到全局协议对象映射中，以便后续通过其句柄进行检索和操作。\n\nArgs:\n    Port (:obj:`Port`): 与PIM会话关联的测试仪表端口对象，类型为object。\n\nKeyword Args:\n    Name (str): PIM会话名称，默认值由系统自动生成。\n    Enable (bool): 是否启用PIM协议会话，默认值为True。\n    SessionMode (str): PIM协议模式，默认值为SM（Sparse Mode），可选值包括：\n        - SM\n        - SSM\n    IpVersion (str): IP版本，默认值为IPV4，可选值包括：\n        - IPV4\n        - IPV6\n    DrPriority (int): DR（Designated Router）优先级，默认值为1，取值范围：1-65535。\n    DrAddr (str): IPv4格式的DR地址，默认值为'0.0.0.0'。\n    DrIpv6Addr (str): IPv6格式的DR地址，默认值为'::'。\n    GenIdMode (str): GenID生成模式，默认值为FIXED，可选值包括：\n        - FIXED\n        - INCR\n        - RAND\n    RegisterEnable (bool): 是否启用Register功能，默认值为False。\n    BsrEnable (bool): 是否启用BSR（Bootstrap Router）功能，默认值为False。\n    BsrPriority (int): BSR优先级，默认值为1，取值范围：0-255。\n    BsrInterval (int): BSR消息发送间隔（单位：秒），默认值为60，取值范围：1-3600。\n    HelloInterval (int): Hello消息发送间隔（单位：秒），默认值为30，取值范围：1-3600。\n    HelloHoldTime (int): Hello消息保持时间（单位：秒），默认值为105，取值范围：1-65535。\n    JoinPruneInterval (int): Join/Prune消息发送间隔（单位：秒），默认值为60，取值范围：1-65535。\n    JoinPruneHoldTime (int): Join/Prune消息保持时间（单位：秒），默认值为210，取值范围：1-65535。\n\nReturns:\n    :obj:`PimRouter`: 新创建并配置好的PIM协议会话对象。\n\nRaises:\n    ContinuableFailure: 如果PIM创建失败，则抛出此异常。\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${Session} | Create Pim | Port=${Port} |\n        | ${DrAddr} | Set Variable | ${Session.DrAddr} |\n\nSide Effects:\n    - 将创建的PimRouter实例注册到全局map_protocol_object字典中，以便后续通过其句柄检索。",
  "TesterLibrary.Protocol.pim.edit_pim": "编辑PIM协议会话对象的参数配置。\n\n该函数用于更新指定的PIM协议会话对象（Session）的属性值。通过传入关键字参数（kwargs），可以动态修改Session对象中已有的属性。所有输入值在内部都会被转换为字符串后再赋值给对应的属性。\n\nArgs:\n\n    Session (:obj:`PimRouter`): 要修改的PIM协议会话对象，类型为object。\n\nKeyword Args:\n\n    Name (str): PIM会话的名称。\n\n    Enable (bool): 是否启用该PIM协议会话。取值范围：True 或 False，默认值：True。\n\n    SessionMode (str): 协议模式，支持以下选项：\n\n        SM（稀疏模式）\n\n        SSM（源特定多播模式）\n\n        默认值：SM。\n\n    IpVersion (str): 使用的IP版本，支持以下选项：\n\n        IPV4\n\n        IPV6\n\n        默认值：IPV4。\n\n    DrPriority (int): 指定该设备作为DR（指定路由器）的优先级。取值范围：1-65535，默认值：1。\n\n    DrAddr (str): DR的IPv4地址。默认值：0.0.0.0。\n\n    DrIpv6Addr (str): DR的IPv6地址。默认值：'::'。\n\n    GenIdMode (str): GenID生成模式，支持以下选项：\n\n        FIXED（固定值）\n\n        INCR（递增）\n\n        RAND（随机）\n\n        默认值：FIXED。\n\n    RegisterEnable (bool): 是否启用Register功能。取值范围：True 或 False，默认值：False。\n\n    BsrEnable (bool): 是否启用BSR（自举路由器）功能。取值范围：True 或 False，默认值：False。\n\n    BsrPriority (int): BSR优先级。取值范围：0-255，默认值：1。\n\n    BsrInterval (int): BSR消息发送时间间隔（单位：秒）。取值范围：1-3600，默认值：60。\n\n    HelloInterval (int): Hello消息发送时间间隔（单位：秒）。取值范围：1-3600，默认值：30。\n\n    HelloHoldTime (int): Hello消息超时时间（单位：秒）。取值范围：1-65535，默认值：105。\n\n    JoinPruneInterval (int): Join/Prune消息发送时间间隔（单位：秒）。取值范围：1-65535，默认值：60。\n\n    JoinPruneHoldTime (int): Join/Prune消息超时时间（单位：秒）。取值范围：1-65535，默认值：210。\n\nReturns:\n\n    bool: 如果成功更新了Session对象的属性，则返回True；否则返回False。\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${Session} | Create Pim | Port=${Port} |\n        | Edit Pim | Session=${Session} | HelloInterval=60 |",
  "TesterLibrary.Protocol.pim.create_pim_group": "创建PIM (Protocol Independent Multicast)组对象。\n\n该函数用于通过指定的 PIM 协议会话（Session）配置并创建一个或多个 PIM 组。它封装了底层 API 的 `create_group` 方法，允许用户通过关键字参数灵活设置组的相关属性。\n\n### 参数说明：\n\n- **Session** (`PimRouter`)  \n  已创建的 PIM 协议会话对象，类型为 `PimRouter`。该会话应已在上下文中正确初始化，并支持 `create_group` 方法。\n\n- **Name** (`str`, optional)  \n  PIM Group 对象的名称，默认值：由系统自动生成。\n\n- **Enable** (`bool`, optional)  \n  是否启用该 PIM Group。可选值：`True` 或 `False`。默认值：`True`。\n\n- **GroupCheck** (`bool`, optional)  \n  指定是否启用协议模式检查。可选值：`True` 或 `False`。默认值：`False`。\n\n- **GroupType** (`str`, optional)  \n  组播组的类别，支持以下取值：\n  - `ANY_G`\n  - `S_G`\n  - `S_G_RPT`\n  - `ANY_RP`  \n  默认值：`ANY_G`。\n\n- **GroupAddr** (`str`, IPv4 address, optional)  \n  组播组地址，必须为合法的 IPv4 地址。默认值：`225.0.0.1`。\n\n- **GroupCount** (`int`, optional)  \n  创建的组播组数量。取值范围：\n  - BigTao 平台：1 到 65535\n  - DarYu 平台：1 到 500000  \n  默认值：`1`。\n\n- **GroupModifierStep** (`int`, optional)  \n  组播组地址的增量步长。取值范围：0 到 65535。默认值：`1`。\n\n- **GroupModifierBit** (`int`, optional)  \n  组播组地址增量所使用的位数。取值范围：1 到 32。默认值：`32`。\n\n- **RpAddr** (`str`, IPv4 address, optional)  \n  RP（Rendezvous Point）地址，必须为合法的 IPv4 地址。默认值：`10.10.10.10`。\n\n- **JoinSrc** (`str`, IPv4 address, optional)  \n  Join 操作的源地址。默认值：`1.1.1.1`。\n\n- **JoinMaskLen** (`int`, optional)  \n  Join 源地址的掩码长度。取值范围：1 到 32。默认值：`32`。\n\n- **PruneSrcAddr** (`str`, IPv4 address, optional)  \n  Prune 操作的源地址。默认值：`1.1.1.1`。\n\n- **PruneMaskLen** (`int`, optional)  \n  Prune 源地址的掩码长度。取值范围：1 到 32。默认值：`32`。\n\n### 返回值：\n\n返回一个 `PimGroupConfig` 类型的对象，表示已创建的 PIM 组播组配置实例。该对象通常包含组的状态、标识符及其他相关属性。\n\n### 异常处理：\n\n如果底层调用失败（如返回 `False`），将抛出 `ContinuableFailure` 异常，并附带函数名作为错误信息的一部分。\n\n### 示例：\n\n```robotframework\n| ${Session} | Create Pim | Port=${Port} |\n| Create Pim Group | Session=${Session} | GroupAddr=225.0.0.2 | Name=MyGroup |\n```",
  "TesterLibrary.Protocol.pim.create_pim_ipv6_group": "创建PIM IPv6 Group对象，用于配置IPv6组播组。\n\n该函数用于在PIM协议中创建一个IPv6组播组（Group）的配置。通过提供会话对象和相关参数，可以定义组地址、源地址、RP地址等信息，并支持多种组类型和组播组数量设置。\n\n参数:\n\n    Session (:obj:`PimRouter`): 有效的PIM协议会话对象，用于上下文关联。必须为 :class:`PimRouter` 类型的对象。\n\n关键字参数:\n\n    Name (str): PIM IPv6 Group对象的名称，默认值为自动生成。\n\n    Enable (bool): 是否启用该组播组。默认值：True。\n\n    GroupCheck (bool): 协议模式，表示是否进行组检查。默认值：False。\n\n    GroupType (str): 组类型，支持以下取值：\n\n        - ANY_G: 默认值，任意组。\n        - S_G: 指定组和源。\n        - S_G_RPT: 指定组、源和RPT。\n        - ANY_RP: 使用RP的所有组。\n\n    GroupAddr (str): 组地址，IPv6格式，默认值：ff1e::1。\n\n    GroupCount (int): 组的数量，取值范围根据设备平台不同而变化：\n\n        - BigTao: 1-65535\n        - DarYu: 1-500000\n\n      默认值：1。\n\n    GroupModifierStep (int): 组地址增量步进值，用于批量生成组地址时的递增步长。取值范围：0-65535，默认值：1。\n\n    GroupModifierBit (int): 组地址修改位，用于指定IPv6地址中需要改变的最低有效位。取值范围：1-128，默认值：128。\n\n    RpAddr (str): RP（Rendezvous Point）地址，IPv6格式，默认值：2000::1。\n\n    JoinSrc (str): Join消息中的源地址，IPv6格式，默认值：2000::1。\n\n    JoinMaskLen (int): Join源地址的掩码长度，取值范围：1-128，默认值：64。\n\n    PruneSrcAddr (str): Prune消息中的源地址，IPv6格式，默认值：2000::1。\n\n    PruneMaskLen (int): Prune源地址的掩码长度，取值范围：1-128，默认值：64。\n\n返回值:\n\n    (:obj:`PimIpv6GroupConfig`): 创建成功的PIM IPv6 Group配置对象。如果失败，则抛出异常 :class:`ContinuableFailure`。\n\n示例:\n    .. code:: RobotFramework\n\n        | ${Session} | Create Pim | Port=${Port} |\n        | Create Pim IPv6 Group | Session=${Session} | GroupAddr=ff1e::2 |",
  "TesterLibrary.Protocol.pim.create_pim_register_group": "创建PIM IPv4 Register Group对象，用于配置和管理PIM协议中的注册组播组。\n\nArgs:\n\n    Session (:obj:`PimRouter`): 一个有效的PIM协议会话对象，用于在该会话上下文中创建Register Group。类型为object。\n\nKeyword Args:\n\n    Name (str): PIM IPv4 Register Group的名称。默认值由系统自动生成。\n\n    Enable (bool): 是否启用该Register Group。默认值：True。\n\n    MulticastGroupToSourceDistribution (str): 组播组与源地址的映射方式。默认值：PAIR，支持参数：\n        \n        - PAIR: 每个组播组对应一个源。\n        - BACKBONE: 所有组播组共享相同的源列表。\n\n    RegisterTransmitMode (str): 注册报文的发送模式。默认值：CONTINUOUS，支持参数：\n\n        - FIXED: 发送固定次数。\n        - CONTINUOUS: 连续发送。\n\n    FixedModeCount (int): 在Fixed模式下发送Register报文的次数。取值范围：1-1000，默认值：5。\n\n    MulticastGroupCount (int): 组播组的数量。取值范围：1-65535，默认值：1。\n\n    StartMulticastGroupAddr (str): 组播组起始IPv4地址。默认值：225.0.1.1。\n\n    MulticastGroupStep (int): 组播组地址递增步长。取值范围：1-255，默认值：1。\n\n    MulticastGroupPrefixLength (int): 组播组地址前缀长度（子网掩码）。取值范围：1-32，默认值：24。\n\n    MulticastSourceCount (int): 组播源数量。取值范围：1-65535，默认值：1。\n\n    StartMulticastSourceAddr (str): 组播源起始IPv4地址。默认值：192.168.1.1。\n\n    MulticastSourceStep (int): 组播源地址递增步长。取值范围：1-255，默认值：1。\n\n    MulticastSourcePrefixLength (int): 组播源地址前缀长度（子网掩码）。取值范围：1-32，默认值：24。\n\n    RpAddr (str): RP（Rendezvous Point）地址，即注册的目标RP地址。默认值：10.10.10.20。\n\n    RegisterTransmitInterval (int): Register报文发送间隔（单位：秒）。取值范围：10-180，默认值：60。\n\nReturns:\n\n    (:obj:`PimRegisterGroupConfig`): 创建的PIM IPv4 Register Group配置对象，可用于后续操作（如修改、删除等）。返回值类型为object。\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${Session} | Create Pim | Port=${Port} |\n        | Create Pim Register Group | Session=${Session} | RpAddr=20.10.10.20 |",
  "TesterLibrary.Protocol.pim.create_pim_ipv6_register_group": "创建PIM IPv6 Register Group对象，用于配置IPv6 PIM注册组播行为。\n\n该函数基于提供的PIM会话（Session）创建一个IPv6 Register Group配置对象。Register Group用于在PIM协议中控制源注册行为，例如发送Register消息的方式和频率、组播组与源的映射关系等。此功能适用于对IPv6环境下PIM-SM（Sparse Mode）协议进行测试和仿真。\n\nArgs:\n\n    Session (:obj:`PimRouter`): 有效的PIM协议会话对象，通常由Create Pim接口生成，类型为object。\n\nKeyword Args:\n\n    Name (str): 配置对象的名称，用于标识当前Register Group实例，类型为字符串。\n\n    Enable (bool): 是否启用该Register Group，默认值：True，类型为布尔值，取值范围：True或False。\n\n    MulticastGroupToSourceDistribution (str): 组播组与源地址的映射方式，默认值：PAIR，支持参数：\n\n        - PAIR: 每个组播组对应相同索引的源。\n        - BACKBONE: 所有源都广播到所有组播组。\n\n    RegisterTransmitMode (str): Register报文发送模式，默认值：CONTINUOUS，支持参数：\n\n        - FIXED: 发送固定次数后停止。\n        - CONTINUOUS: 持续发送Register报文。\n\n    FixedModeCount (int): 在Fixed模式下发送Register报文的总次数，默认值：5，取值范围：1-1000。\n\n    MulticastGroupCount (int): 组播组数量，默认值：1，取值范围：1-65535。\n\n    StartMulticastGroupAddr (str): 组播组起始IPv6地址，默认值：ff1e::2，类型为字符串。\n\n    MulticastGroupStep (int): 组播组递增步长，默认值：1，取值范围：1-255。\n\n    MulticastGroupPrefixLength (int): 组播组前缀长度，默认值：64，取值范围：1-128。\n\n    MulticastSourceCount (int): 组播源数量，默认值：1，取值范围：1-65535。\n\n    StartMulticastSourceAddr (str): 组播源起始IPv6地址，默认值：2001::1，类型为字符串。\n\n    MulticastSourceStep (int): 组播源递增步长，默认值：1，取值范围：1-255。\n\n    MulticastSourcePrefixLength (int): 组播源前缀长度，默认值：64，取值范围：1-128。\n\n    RpAddr (str): RP（Rendezvous Point）地址，用于PIM-SM注册过程中的汇聚点地址，默认值：2000::2，类型为IPv6地址。\n\n    RegisterTransmitInterval (int): Register报文发送间隔（单位：秒），默认值：60，取值范围：10-180。\n\nReturns:\n\n    (:obj:`PimIpv6RegisterGroupConfig`): 创建成功的PIM IPv6 Register Group配置对象，可用于进一步操作或查询状态。\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${Session} | Create Pim | Port=${Port} |\n        | Create Pim Ipv6 Register Group | Session=${Session} | RpAddr=3000::2 |",
  "TesterLibrary.Protocol.pim.create_pim_rp_map": "创建PIM RP（Rendezvous Point）映射配置。\n\n该函数用于通过提供的会话对象和参数创建一个PIM RP映射配置，通常用于PIM-SM（Protocol Independent Multicast - Sparse Mode）环境中，将组播组与对应的RP（Rendezvous Point）关联起来。\n\n参数:\n    Session (object): 提供 `create_rp_map` 方法的会话对象。该对象负责在管理系统或设备中实际创建RP映射配置。\n    **kwargs (dict): 任意关键字参数，直接传递给Session对象的 `create_rp_map` 方法。可能包括RP地址、组播组范围、优先级、超时时间等配置参数。\n\n返回值:\n    object: 返回由会话对象的 `create_rp_map` 方法创建的RP映射配置对象。具体类型和结构取决于Session对象的实现。\n\n示例:\n    .. code:: RobotFramework\n\n        | ${Session} | Create Pim | Port=${Port} |\n        | Create Pim IPv4 Rp Map | Session=${Session} | RpAddr=20.10.10.10 |",
  "TesterLibrary.Protocol.pim.create_pim_ipv6_rp_map": "创建PIM IPv6 Rp Map对象\n\n该函数用于在PIM协议中配置IPv6 RP（Rendezvous Point，汇聚点）映射。它通过提供的会话对象调用底层方法来创建一个RP映射，并返回配置对象。\n\nArgs:\n\n    Session (:obj:`PimRouter`): PIM协议的会话对象，表示当前PIM路由器的上下文环境。该对象应包含用于创建IPv6 RP Map的方法。\n\nKeyword Args:\n\n    Name (str): PIM IPv6 Rp Map对象的名称，默认为系统自动生成名称。\n\n    Enable (bool): 是否启用该RP映射，默认值为True。\n\n    MulticastGroupAddr (str): 组播组地址范围的起始地址，用于定义哪些组播组使用此RP。默认值为ff1e::1。\n\n    RpAddr (str): RP（Rendezvous Point）的IPv6地址，即该RP映射所对应的汇聚点地址，默认值为2000::1。\n\n    PrefixLength (int): 组播组地址前缀长度，表示组播组地址范围的掩码长度，取值范围为0到128，默认值为128。\n\n    RpPriority (int): RP优先级，数值越小优先级越高，用于在多个RP之间进行选择，取值范围为0到255，默认值为0。\n\n    RpHoldTime (int): RP保持时间，表示接收者在没有接收到新注册信息的情况下，保留该RP映射的时间（单位为秒），取值范围为1到65535，默认值为150。\n\nReturns:\n\n    (:obj:`PimIpv6RpMapConfig`): 创建成功的PIM IPv6 Rp Map配置对象，可用于后续对该RP映射的引用或操作。\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${Session} | Create Pim | Port=${Port} |\n        | Create Pim Ipv6 Rp Map | Session=${Session} | RpAddr=3000::1 |",
  "TesterLibrary.Protocol.pim.wait_pim_state": "等待PIM协议会话达到指定状态。\n\n该函数用于监控并等待一组PIM（Protocol Independent Multicast）会话对象的状态达到一个或多个期望的目标状态。函数内部通过调用底层方法 `_wait_state` 来执行轮询和状态检查逻辑。如果传入的会话对象不是列表类型，将被自动转换为包含单个元素的列表。若未指定目标状态，则默认等待所有会话进入 'NEIGHBOR' 状态。\n\n参数:\n- Sessions (object 或 iterable): 一个或多个 PIM 会话对象（如 `PimRouter` 实例），用于监控其状态变化。可以是单个对象、列表、集合或元组。\n- State (任意类型或可迭代对象, 可选): 一个或多个期望的会话状态值，默认为 ['NEIGHBOR']。若未提供此参数，函数将使用默认状态进行匹配。所有状态值与会话实际状态进行大小写不敏感的比较。\n- Interval (int 或可转换为整数的字符串, 可选): 检查会话状态的时间间隔（以秒为单位），默认值为 1 秒。\n- TimeOut (int 或可转换为整数的字符串, 可选): 等待会话状态变化的最大超时时间（以秒为单位），默认值为 60 秒。若在超时时间内并非所有会话都达到期望状态，将抛出 TesterException 异常。\n\n返回值:\n- bool: 如果所有会话在超时时间内达到期望状态之一，返回 True；否则抛出异常。\n\n异常:\n- TesterException: 若在指定的超时时间内，并非所有会话都达到期望的状态。\n\n注意事项:\n- 该函数假设会话状态为字符串类型或可表示为字符串形式。\n- 在轮询过程中，通过 logging.info 输出每个会话的当前状态信息。\n- 如果会话状态属性是一个 Enum 类型，则使用其名称进行比较。\n\n示例:\n.. code:: RobotFramework\n\n    | Wait Pim State | Sessions=${Sessions} | State=NEIGHBOR | Interval=2 | TimeOut=120 |",
  "TesterLibrary.Protocol.pim.pim_start_boot_strap": "Starts the bootstrap process for one or more PIM protocol session objects.\n\nThis function is used to initiate the BootStrap procedure on PIM sessions within the Renix API framework. It accepts either a single session object or an iterable (such as list, set, or tuple) containing multiple session objects. Each session object is expected to be of type `PimRouter` or have a compatible `start_boot_strap()` method.\n\nThe function internally calls the backend implementation (`renix.pim_start_boot_strap`) and checks the result:\n- If the result is `False`, it raises a `ContinuableFailure` exception indicating that the operation failed.\n- If the result is `True` or any other truthy value, it returns the result to indicate success.\n\nParameters:\n-----------\nSessions : object or iterable\n    A single session object or an iterable (list, set, tuple) of session objects.\n    Each session must be an instance of a class that supports the `start_boot_strap()` method, typically `PimRouter`.\n\nReturns:\n--------\nbool\n    Returns `True` if the bootstrap process was initiated successfully for all provided sessions.\n    If the underlying call returns `False`, a `ContinuableFailure` exception is raised instead of returning `False`.\n\nRaises:\n-------\nContinuableFailure\n    If the internal call to `renix.pim_start_boot_strap` returns `False`, this exception is raised to indicate failure,\n    with a message identifying the failing function.\n\nExamples:\n---------\nRobot Framework Example:\n\n.. code:: RobotFramework\n\n    | Pim Start Boot Strap | Sessions=${Sessions} |\n\nPython Example:\n\nAssuming `sessions` is a list of valid `PimRouter` session objects:\n\n.. code:: python\n\n    pim_start_boot_strap(sessions)\n\nNote:\n-----\nThis function serves as a wrapper around the backend `renix.pim_start_boot_strap` function and includes additional error handling.\nIt ensures robust execution by leveraging the `@abnormal_check` decorator (implicitly applied via the backend logic), which may handle exceptions or abnormal conditions during execution.",
  "TesterLibrary.Protocol.pim.pim_stop_boot_strap": "Stops the bootstrap process for one or more PIM protocol session objects.\n\nThis function can accept either a single PimRouter session object or a collection of session objects\nsuch as a list, set, or tuple. It processes each session by invoking its `stop_boot_strap()` method.\nOnce all sessions have been processed successfully, it returns True to indicate success.\nIf any error occurs during the operation, a ContinuableFailure exception is raised with an appropriate message.\n\nParameters:\n-----------\nSessions : PimRouter or iterable of PimRouter\n    A single PimRouter session object or an iterable (list, set, tuple) containing multiple\n    PimRouter session objects. Each session must support the `stop_boot_strap()` method.\n\nReturns:\n--------\nbool\n    Returns True if the bootstrap was successfully stopped for all provided sessions.\n\nRaises:\n-------\nContinuableFailure:\n    If the underlying call to `renix.pim_stop_boot_strap` returns False, indicating failure.\n\nExamples:\n---------\nRobotFramework Example:\n\n.. code:: RobotFramework\n\n    | Pim Stop Boot Strap | Sessions=${Sessions} |\n\nPython-like Pseudocode Usage:\n\n.. code:: python\n\n    session1 = PimRouter(...)\n    session2 = PimRouter(...)\n    pim_stop_boot_strap([session1, session2])  # Returns True on success",
  "TesterLibrary.Protocol.pim.pim_change_gen_id": "修改PIM协议会话的生成ID（Generation ID）\n\n该函数用于修改一个或多个PIM（Protocol Independent Multicast）协议会话的生成ID。生成ID通常用于跟踪组播组成员或源信息的变化。\n\n参数:\n    Sessions (object 或 iterable of objects)\n        可以传入单个会话对象，或者包含多个会话对象的可迭代对象（如 list、set、tuple）。\n        每个会话对象必须实现了 `change_gen_id` 方法，该方法用于修改其内部的生成ID。\n\n返回值:\n    bool\n        始终返回 True，表示操作已成功对所有提供的会话发起。\n\n可能抛出的异常:\n    TypeError\n        如果任何一个提供的 Session 对象没有实现 `change_gen_id` 方法。\n\n示例:\n    .. code:: RobotFramework\n\n        | Pim Change Gen Id | Sessions=${Sessions} |\n\n后端行为:\n    该函数最终调用底层引擎的 `renix.pim_change_gen_id` 方法执行实际操作。如果底层返回 False，则会抛出 `ContinuableFailure` 异常；否则返回 True。",
  "TesterLibrary.Protocol.pim.pim_join_group": "Joins one or more PIM protocol session objects to a multicast group.\n\nParameters:\n-----------\nSessions : list of :obj:`PimRouter` or single :obj:`PimRouter`\n    A single PIM session object or an iterable (e.g., list) containing multiple PIM session objects.\n    Each object is expected to support the underlying `join_group()` operation required by the PIM protocol.\n\nReturns:\n--------\nbool\n    Returns True if all sessions successfully join the multicast group.\n    If any session fails to join, returns False and raises a `ContinuableFailure` exception to indicate the failure.\n\nDescription:\n------------\nThis function wraps the backend PIM join group operation and ensures that one or more PIM session objects are joined to a multicast group. It provides a unified interface for handling both single session objects and lists of sessions. If the operation fails at the backend level (`renix.pim_join_group` returns False), this function raises a `ContinuableFailure` exception with a descriptive error message. Otherwise, it returns the result from the backend call directly.\n\nExample:\n--------\n.. code:: RobotFramework\n\n    | Pim Join Group | Sessions=${Sessions} |",
  "TesterLibrary.Protocol.pim.pim_leave_group": "Leaves a PIM group for each session provided.\n\nThis function sends a PIM leave group packet through the provided PIM protocol session(s).\nIt accepts either a single session object or an iterable (list, set, or tuple) of session objects.\nFor each session, it invokes the `leave_group()` method to ensure that the session properly leaves the PIM group.\n\nParameters:\n    Sessions (Session or iterable of Session): A session object or a collection of session objects\n                                             representing the sessions to leave the PIM group.\n\nReturns:\n    bool: Always returns True, indicating that the operation was completed successfully.\n\nRaises:\n    ContinuableFailure: If the underlying implementation returns False, indicating a failure in leaving the group.\n\nExample:\n    .. code:: RobotFramework\n\n        | Pim Leave Group | Sessions=${Sessions} |\n\nNote:\n    This function assumes that each session object has a 'leave_group()' method defined.",
  "TesterLibrary.Protocol.pim.pim_start_register": "Starts the registration process for one or more PIM protocol session objects.\n\nThis function is used to initiate the sending of Register messages in the PIM (Protocol Independent Multicast) protocol. It accepts either a single session object or an iterable (such as a list, set, or tuple) of session objects. For each session object provided, it calls the `start_register()` method to begin the registration process. After successfully initiating the registration for all sessions, the function returns True to indicate success.\n\nIf any session fails during the registration initiation, the function will return False and raise a `ContinuableFailure` exception to indicate the failure while allowing test execution to continue.\n\nParameters:\n-----------\nSessions : object or iterable of objects\n    A single session object or an iterable containing multiple session objects.\n    Each session object is expected to have a `start_register()` method. In the context of this function, the session objects are typically instances of `PimRouter`.\n\nReturns:\n--------\nbool\n    Returns True if the registration process has been initiated successfully for all provided sessions. If any session fails to start registration, it raises `ContinuableFailure` after returning False.\n\nRaises:\n-------\nContinuableFailure\n    If the underlying call to `renix.pim_start_register` returns False, indicating a failure in starting the registration process, this exception is raised to signal the failure while allowing the test framework to continue execution.\n\nExamples:\n---------\n.. code:: RobotFramework\n\n    | Pim Start Register | Sessions=${Sessions} |",
  "TesterLibrary.Protocol.pim.pim_stop_register": "Stops the registration process for one or more PIM protocol session objects.\n\nThis function accepts a single session object or an iterable (list, set, or tuple) of session objects,\nand invokes the `stop_register()` method on each session to halt their registration.\n\nParameters:\n-----------\nSessions : Session object or iterable of Session objects\n    The session or sessions whose registration should be stopped. If a single session is provided,\n    it will be wrapped in a list. If a list, set, or tuple is provided, each session in the collection\n    will have its `stop_register()` method called.\n\nReturns:\n--------\nbool\n    Always returns True to indicate that the operation has completed successfully.\n\nRaises:\n-------\nContinuableFailure: If the underlying call to `renix.pim_stop_register` returns False, indicating failure.\nAny exception raised by the Session.stop_register() method will propagate through this function.\n\nExample:\n.. code:: RobotFramework\n\n    | Pim Stop Register | Sessions=${Sessions} |",
  "TesterLibrary.Protocol.pim.edit_pim_port_config": "修改PIM协议会话的端口配置\n\n该函数用于为一个或多个指定的测试仪表端口修改PIM（Protocol Independent Multicast）协议相关的端口配置。它通过调用底层API实现对PIM端口配置对象的更新，并返回操作结果。\n\nArgs:\n\n    Ports (:obj:`Port` 或 list of :obj:`Port`): 测试仪表端口对象，可以是单个端口对象或者包含多个端口对象的列表。\n\nKeyword Args:\n\n    MsgTransRate (int): PIM消息发送速率（单位：消息/秒），取值范围为1到10000，默认值为500。\n    \n    TriggerHelloDelay (int): 触发Hello报文延迟发送的时间（单位：秒），取值范围为0到60，默认值为5。\n    \n    DisableHelloExpireTimer (bool): 是否禁用Hello超时定时器，True表示禁用，False表示启用，默认值为False。\n    \n    DisableRecvHelloInNeighborState (bool): 是否在邻居状态中禁用接收Hello报文，True表示禁用，False表示启用，默认值为False。\n    \n    DisableNonHelloRecv (bool): 是否禁用非Hello报文的接收，True表示禁用，False表示启用，默认值为False。\n\nReturns:\n\n    bool: 如果配置修改成功则返回True，否则返回False。如果返回False，则会抛出ContinuableFailure异常。\n\nExamples:\n    .. code:: RobotFramework\n\n        | Pim Port Config | Ports=${Ports} | DisableNonHelloRecv=True |",
  "TesterLibrary.Protocol.pim.get_pim_session_stats": "Retrieves statistics for PIM (Protocol Independent Multicast) sessions based on the provided session identifiers and statistical items.\n\nThis function allows querying of various performance and activity metrics related to one or more PIM sessions. Internally, it calls `_get_statistics()` with the type set to 'PimSessionStats'. It supports filtering by specific session objects and selecting which statistical items to return.\n\nParameters:\n    Session (object or list or set or tuple of objects, optional):\n        A session object or a collection of session objects representing the PIM sessions for which statistics are to be retrieved.\n        Each object is expected to have a `Name` attribute that uniquely identifies the session. If None, no session filtering is applied.\n        Although described as expecting a `PimRouter` object, it can accept multiple such objects in any iterable container.\n    StaItems (list or str or None, optional):\n        Specifies which statistical properties to retrieve for the PIM sessions. Valid values include:\n\n            NeighborNum\n            TxHello\n            RxHello\n            TxJoin\n            RxJoin\n            TxAnyG\n            RxAnyG\n            TxSG\n            RxSG\n            TxRP\n            RxRP\n            TxRpt\n            RxRpt\n            TxBsr\n            TxRegister\n            RxRegisterStop\n\n        If None, all available properties are queried. If a string is provided, it will be treated as a single-item list.\n        Must be a subset of the valid properties available for 'PimSessionStats'.\n\nReturns:\n    dict or pd.DataFrame or bool:\n        - If statistics for exactly one matching session are found: Returns a dictionary where keys are statistical item names and values are the corresponding values for that session.\n        - If statistics for multiple sessions match: Returns a pandas DataFrame with each row representing a session's statistics.\n        - If no matching session statistics are found: Returns False.\n\nRaises:\n    TesterException: If an error occurs during command execution or result retrieval.\n    sqlite3.Error: If any database access issues occur in related functions (e.g., during performance-based stat refresh).\n    KeyError: If column names in the filter criteria do not exist in the resulting DataFrame.\n\nSide Effects:\n    - Internally modifies state by potentially refreshing session data before retrieving statistics.\n    - May execute navigation commands for paginated results when operating outside ResultView mode.\n    - Logs the final filtered statistics DataFrame in a tabulated format for debugging purposes.\n\nExample Usage (Robot Framework):\n    .. code:: RobotFramework\n\n        | @{StaItems} | Create List | TxHello | RxHello |\n        | Subscribe Result | Types=PimSessionStats |\n        | Start Protocol |\n        | Sleep | 60 |\n        | &{Result} | Get Pim Session Stats | Session=${Session} | StaItems=@{StaItems} |\n        | Clear Result |",
  "TesterLibrary.Protocol.pim.get_pim_group_stats": "获取PIM组统计信息，根据提供的会话和组对象过滤并返回指定的统计项。\n\n该函数用于获取与指定PIM（Protocol Independent Multicast）组相关的统计信息。它通过内部调用 `_get_statictis` 方法实现数据检索，并支持对会话和组进行灵活的过滤操作。用户可以指定需要查询的统计项，如 TxAnyG、TxSG、TxRP、TxRpt 等。\n\nParameters:\n    Session (object or list or set or tuple or None):\n        PIM协议会话对象或其集合，用于过滤统计结果。如果为 None，则不进行会话过滤。\n        如果是单个 `PimRouter` 对象，则使用其名称进行过滤；\n        如果是多个对象的列表、集合或元组，则使用它们的所有名称进行过滤。\n\n    Group (object or list or set or tuple or None):\n        PIM组配置对象或其集合，用于过滤统计结果。如果为 None，则不进行组过滤。\n        如果是单个 `PimGroupConfig` 对象，则使用其名称进行过滤；\n        如果是多个对象的列表、集合或元组，则使用它们的所有名称进行过滤。\n\n    StaItems (list or str or None):\n        指定需要获取的统计项（列名）。如果为 None，则返回所有可用统计项；\n        如果是字符串，则将其转换为包含一个元素的列表；\n        支持的统计项包括：\n\n            TxAnyG\n            TxSG\n            TxRP\n            TxRpt\n\nReturns:\n    dict or pd.DataFrame or bool:\n        - 如果只匹配到一行数据：返回一个字典，键为统计项名称，值为对应的统计值。\n        - 如果匹配到多行数据：返回一个 pandas DataFrame，包含所有匹配行的数据。\n        - 如果没有找到匹配数据：返回 False。\n\nRaises:\n    TesterException: 如果在执行命令或检索数据过程中发生错误。\n    sqlite3.Error: 如果底层数据库访问出现问题。\n    KeyError: 如果索引中使用的列名（由 Session 和 Group 导出）在结果中不存在。\n\nExamples:\n    .. code:: RobotFramework\n\n        | @{StaItems} | Create List | TxAnyG | TxSG |\n        | Subscribe Result | Types=PimGroupStats |\n        | Start Protocol |\n        | Sleep | 60 |\n        | &{Result} | Get Pim Group Stats | Session=${Session} | Group=${Group} | StaItems=@{StaItems} |\n        | Log Dictionary | &{Result} |\n        | Clear Result |\n\nSide Effects:\n    - 内部会调用传入对象的 `.Name` 属性来提取标识符。\n    - 可能会刷新内部数据状态，通过 `_get_statictis()` 获取最新数据，涉及分页处理。\n    - 最终过滤后的 DataFrame 会被记录日志以便调试。",
  "TesterLibrary.Protocol.pppoe.create_pppoe": "创建PPPoE协议会话对象\n\n该函数用于在指定的端口上创建并配置一个PPPoE协议实例，支持CLIENT和SERVER两种模式。根据`EmulationMode`参数决定创建客户端（PppoeClent）或服务器端（PppoeServer）实例，并将该实例与传入的端口对象关联。所有可选参数通过关键字参数传递，用于动态设置会话的配置属性。\n\nParameters:\n-----------\nPort : object\n    父级或上层对象，表示网络层次结构中的端口或接口，新创建的PPPoE会话将绑定到该端口。\n    \nEmulationMode : str, optional, default='CLIENT'\n    PPPoE会话的角色模式。有效值为：\n        CLIENT：创建客户端会话\n        SERVER：创建服务端会话\n\n**kwargs : dict\n    任意数量的关键字参数，用于配置PPPoE会话的具体行为。这些参数会被传递给底层构造函数，并根据参数名设置相应的配置值。不同角色（CLIENT/SERVER）支持不同的参数集合，具体参见Keyword Args部分。\n\nReturns:\n--------\nobject\n    创建的PPPoE会话对象，类型为 PppoeClent 或 PppoeServer，取决于 EmulationMode 设置。\n\nSide Effects:\n-------------\n- 将创建的PPPoE会话注册到全局映射 `map_protocol_object` 中，使用其 `handle` 属性作为键，以便后续可以通过句柄引用该会话。\n\nKeyword Args (Client/Server通用):\n--------------------------------\nName : str\n    PPPoE会话名称，默认值：\"\"\n\nEnable : bool\n    是否启用该PPPoE会话，默认值：True\n\nAuthenticationType : str\n    认证方式，可取值为：\n        NO_AUTHENTICATION（默认）\n        NEGOTIATION\n        CHAP_MD5\n        PAP\n\nUsername : str\n    用户名，默认值：\"xinertel\"，长度范围 [1, 126]\n\nPassword : str\n    密码，默认值：\"xinertel\"，长度范围 [1, 126]\n\nServiceName : str\n    服务名，默认值：\"\"，长度范围 [0, 255]\n\nEnableMaxPayloadTag : bool\n    是否启用最大净荷标签，默认值：False\n\nMaxPayloadBytes : int\n    最大净荷大小（字节），取值范围 [1, 65535]，默认值：1500\n\nLcpConfigReqTimeout : int\n    LCP Configure-Request超时时间（秒），默认值：3\n\nLcpConfigReqMaxAttempts : int\n    LCP Configure-Request最大尝试次数，默认值：10\n\nLcpTermReqTimeout : int\n    LCP Terminate-Request超时时间（秒），默认值：3\n\nLcpTermReqMaxAttempts : int\n    LCP Terminate-Request最大尝试次数，默认值：10\n\nNcpConfigReqTimeout : int\n    NCP Configure-Request超时时间（秒），默认值：3\n\nNcpConfigReqMaxAttempts : int\n    NCP Configure-Request最大尝试次数，默认值：10\n\nLcpNcpMaxNak : int\n    LCP/NCP最大Nak数，默认值：5\n\nEnableMruNegotiation : bool\n    是否启用MRU协商，默认值：True\n\nMruSize : int\n    MRU大小（字节），取值范围 [128, 65535]，默认值：1492\n\nEnableEchoRequest : bool\n    是否启用Echo-Request报文，默认值：False\n\nEchoRequestInterval : int\n    Echo-Request发送间隔（秒），默认值：10\n\nEchoRequestMaxAttempts : int\n    Echo-Request最大重试次数，默认值：3\n\nEnableMagicNumber : bool\n    是否启用Magic Number，默认值：True\n\nClient专用参数:\n----------------\nPadiTimeout : int\n    PADI请求超时时间（秒），默认值：3\n\nPadiMaxAttempts : int\n    PADI请求最大尝试次数，默认值：10\n\nPadrTimeout : int\n    PADR请求超时时间（秒），默认值：3\n\nPadrMaxAttempts : int\n    PADR请求最大尝试次数，默认值：10\n\nEnableRelayAgent : bool\n    是否启用中继代理，默认值：False\n\nRelayAgentDestMac : str\n    中继代理MAC地址，默认值：\"00:00:00:00:00:00\"\n\nRelayAgentDestMacStep : str\n    MAC地址步进值，默认值：\"00:00:00:00:00:01\"\n\nUseRelayAgentPadi : bool\n    在PADI中包含中继代理信息，默认值：True\n\nUseRelayAgentPadr : bool\n    在PADR中包含中继代理信息，默认值：True\n\nRelayAgentType : str\n    中继代理类型，可取值：\n        RFC2516（默认）\n        DSL_FORUM\n\nRelaySessionId : str\n    中继会话ID，长度范围 [0, 12]，默认值：\"\"\n\nCircuitId : str\n    环路ID，长度范围 [0, 63]，默认值：\"@s\"\n\nRemoteId : str\n    远程ID，长度范围 [0, 63]，默认值：\"@m-@p\"\n\nChapChalReqTimeout : int\n    CHAP Challenge Request超时时间（秒），默认值：3\n\nChapAckTimeout : int\n    CHAP Ack超时时间（秒），默认值：3\n\nChapMaxReplyAttempts : int\n    CHAP Reply最大尝试次数，默认值：10\n\nPapReqTimeout : int\n    PAP Request超时时间（秒），默认值：3\n\nPapReqMaxAttempts : int\n    PAP Request最大尝试次数，默认值：10\n\nEnableAutoRetry : bool\n    是否启用自动重连，默认值：False\n\nAutoRetryCount : int\n    自动重连次数，默认值：65535\n\nLcpDelay : int\n    LCP推迟时间（毫秒），默认值：0\n\nEnableAutoFillIpv6 : bool\n    是否启用自动获取Global IPv6地址，默认值：True\n\nServer专用参数:\n----------------\nAcName : str\n    接入集中器名称，默认值：\"Xinertel\"\n\nChapReplyTimeout : int\n    CHAP Reply超时时间（秒），默认值：3\n\nChapMaxChalAttempts : int\n    CHAP Challenge最大尝试次数，默认值：10\n\nPapPeerReqTimeout : int\n    等待PAP Request超时时间（秒），默认值：3\n\nIpv4Start : str\n    IPv4起始地址，默认值：\"192.0.1.0\"\n\nIpv4Step : str\n    IPv4地址步长，默认值：\"0.0.0.1\"\n\nIpv4Count : int\n    IPv4地址数量，取值范围 [1, 65535]，默认值：3\n\nIpv6InterfaceId : str\n    IPv6 Interface ID起始值，默认值：\"::2\"\n\nIpv6InterfaceIdStep : str\n    IPv6 Interface ID步长，默认值：\"::1\"\n\nIpv6PrefixStart : str\n    IPv6前缀起始值，默认值：\"2002::\"\n\nIpv6PrefixStep : str\n    IPv6前缀步长，默认值：\"0:0:0:1::\"\n\nIpv6Count : int\n    IPv6前缀数量，取值范围 [1, 65535]，默认值：1\n\nEnableForceConnectMode : bool\n    是否启用强制连接模式，默认值：False\n\nUnconnectedSessionThreshold : int\n    未连接会话门限值，默认值：1\n\nMAndOFlag : str\n    M和O标志位，可取值：\n        M0_O0（默认）\n        M0_O1\n        M1\n\nExamples:\n---------\n.. code:: RobotFramework\n\n    | Create Pppoe | Port=${Port} |\n    | Create Pppoe | Port=${Port} | EmulationMode=Server | AuthenticationType=CHAP_MD5 | Username=user1 | Password=pass1",
  "TesterLibrary.Protocol.pppoe.edit_pppoe": "编辑PPPoE协议会话对象的配置属性\n\n该函数用于修改指定PPPoE会话对象的属性，根据提供的关键字参数更新其配置。通常用于调整PPPoE客户端或服务器的行为、认证方式、网络参数等。\n\nArgs:\n    Session (:obj:`Ppp`): PPPoE协议会话对象，表示需要编辑的PPPoE会话，类型为测试仪表端口对象。\n\nKeyword Args:\n    Name (str): 设置PPPoE会话的名称，默认值：当前会话名称保持不变。\n    \n    Enable (bool): 是否启用PPPoE协议会话，默认值：True。\n\n    EmulationMode (str): PPPoE的角色模式，可选值包括CLIENT、SERVER和PPPoL2TP，默认值：CLIENT。\n\n    AuthenticationType (str): 认证方式，支持NO_AUTHENTICATION, NEGOTIATION, CHAP_MD5, PAP，默认值：NO_AUTHENTICATION。\n\n    Username (str): PPPoE认证用户名，默认值：\"xinertel\"，字符串长度范围[1,126]。\n\n    Password (str): PPPoE认证密码，默认值：\"xinertel\"，字符串长度范围[1,126]。\n\n    ServiceName (str): 服务名，可为空字符串，默认值：空字符串，字符串长度范围[0,255]。\n\n    EnableMaxPayloadTag (bool): 是否启用最大净荷标签，默认值：False。\n\n    MaxPayloadBytes (int): 最大净荷字节数，取值范围[1,65535]，默认值：1500。\n\n    LcpConfigReqTimeout (int): LCP Configure-Request超时时间(秒)，取值范围[1,65535]，默认值：3。\n\n    LcpConfigReqMaxAttempts (int): LCP Configure-Request最大尝试次数，取值范围[1,65535]，默认值：10。\n\n    LcpTermReqTimeout (int): LCP Terminate-Request超时时间(秒)，取值范围[1,65535]，默认值：3。\n\n    LcpTermReqMaxAttempts (int): LCP Terminate-Request最大尝试次数，取值范围[1,65535]，默认值：10。\n\n    NcpConfigReqTimeout (int): NCP Configure-Request超时时间(秒)，取值范围[1,65535]，默认值：3。\n\n    NcpConfigReqMaxAttempts (int): NCP Configure-Request最大尝试次数，取值范围[1,65535]，默认值：10。\n\n    LcpNcpMaxNak (int): LCP/NCP最大Nak数量，取值范围[1,65535]，默认值：5。\n\n    EnableMruNegotiation (bool): 是否启用MRU协商，默认值：True。\n\n    MruSize (int): MRU大小（字节），取值范围[128,65535]，默认值：1492。\n\n    EnableEchoRequest (bool): 是否启用Echo-Request报文，默认值：False。\n\n    EchoRequestInterval (int): Echo-Request发送间隔(秒)，取值范围[1,65535]，默认值：10。\n\n    EchoRequestMaxAttempts (int): Echo-Request最大重试次数，取值范围[1,65535]，默认值：3。\n\n    EnableMagicNumber (bool): 是否启用Magic Number，默认值：True。\n\n    PadiTimeout (int): 客户端PADI请求超时时间(秒)，取值范围[1,65535]，默认值：3。\n\n    PadiMaxAttempts (int): 客户端PADI最大尝试次数，取值范围[1,65535]，默认值：10。\n\n    PadrTimeout (int): 客户端PADR请求超时时间(秒)，取值范围[1,65535]，默认值：3。\n\n    PadrMaxAttempts (int): 客户端PADR最大尝试次数，取值范围[1,65535]，默认值：10。\n\n    EnableRelayAgent (bool): 是否启用中继代理，默认值：False。\n\n    RelayAgentDestMac (str): 中继代理MAC地址，默认值：\"00:00:00:00:00:00\"。\n\n    RelayAgentDestMacStep (str): MAC地址增量步长，默认值：\"00:00:00:00:00:01\"。\n\n    UseRelayAgentPadi (bool): 在PADI中包含中继代理信息，默认值：True。\n\n    UseRelayAgentPadr (bool): 在PADR中包含中继代理信息，默认值：True。\n\n    RelayAgentType (str): 中继代理类型，支持RFC2516和DSL_FORUM，默认值：RFC2516。\n\n    RelaySessionId (str): 中继会话ID，字符串长度范围[0,12]，默认值：空字符串。\n\n    CircuitId (str): 环路ID，字符串长度范围[0,63]，默认值：\"@s\"。\n\n    RemoteId (str): 远程ID，字符串长度范围[0,63]，默认值：\"@m-@p\"。\n\n    ChapChalReqTimeout (int): CHAP Challenge Request超时时间(秒)，取值范围[1,65535]，默认值：3。\n\n    ChapAckTimeout (int): CHAP Ack超时时间(秒)，取值范围[1,65535]，默认值：3。\n\n    ChapMaxReplyAttempts (int): CHAP Reply最大尝试次数，取值范围[1,65535]，默认值：10。\n\n    PapReqTimeout (int): PAP Request超时时间(秒)，取值范围[1,65535]，默认值：3。\n\n    PapReqMaxAttempts (int): PAP Request最大尝试次数，取值范围[1,65535]，默认值：10。\n\n    EnableAutoRetry (bool): 是否启用自动重连，默认值：False。\n\n    AutoRetryCount (int): 自动重连次数，取值范围[1,65535]，默认值：65535。\n\n    LcpDelay (int): LCP推迟启动时间(毫秒)，取值范围[1,65535]，默认值：0。\n\n    EnableAutoFillIpv6 (bool): 是否启用IPv6地址自动获取，默认值：True。\n\n    AcName (str): 服务器端访问集中器名称，默认值：\"Xinertel\"。\n\n    ChapReplyTimeout (int): 服务器端CHAP Reply超时时间(秒)，取值范围[1,65535]，默认值：3。\n\n    ChapMaxChalAttempts (int): 服务器端CHAP Challenge最大尝试次数，取值范围[1,65535]，默认值：10。\n\n    PapPeerReqTimeout (int): 服务器端等待PAP Request超时时间(秒)，取值范围[1,65535]，默认值：3。\n\n    Ipv4Start (str): IPv4起始地址，默认值：\"192.0.1.0\"。\n\n    Ipv4Step (str): IPv4地址步长，默认值：\"0.0.0.1\"。\n\n    Ipv4Count (int): IPv4地址分配数量，取值范围[1,65535]，默认值：3。\n\n    Ipv6InterfaceId (str): IPv6 Interface ID起始值，默认值：\"::2\"。\n\n    Ipv6InterfaceIdStep (str): IPv6 Interface ID步长，默认值：\"::1\"。\n\n    Ipv6PrefixStart (str): IPv6前缀起始地址，默认值：\"2002::\"。\n\n    Ipv6PrefixStep (str): IPv6前缀步长，默认值：\"0:0:0:1::\"。\n\n    Ipv6Count (int): IPv6前缀分配数量，取值范围[1,65535]，默认值：1。\n\n    EnableForceConnectMode (bool): 是否启用强制连接模式，默认值：False。\n\n    UnconnectedSessionThreshold (int): 未连接会话门限值，取值范围[1,65535]，默认值：1。\n\n    MAndOFlag (str): IPv6 M与O标志位设置，支持M0_O0, M0_O1, M1，默认值：M0_O0。\n\nReturns:\n    (:obj:`PppoeClient` or :obj:`PppoeServer`): 返回编辑后的PPPoE协议会话对象，具体类型取决于会话角色。\n\nExamples:\n    .. code:: RobotFramework\n\n        | Edit Pppoe | Port=${Port} | Name=MyPPPoESession | Enable=True | AuthenticationType=CHAP_MD5 | Username=user1 | Password=pass123 |",
  "TesterLibrary.Protocol.pppoe.connect_pppoe": "连接PPPoE协议会话\n\n该函数用于建立一个或多个PPPoE协议会话的连接。它接受单个会话对象或者包含多个会话对象的可迭代集合（如列表、集合或元组）。如果传入的是单个会话对象，函数内部会将其转换为列表形式以便统一处理。然后会对集合中的每一个会话调用其`connect()`方法以完成实际的连接逻辑。\n\nArgs:\n\n    Sessions (Union[:obj:`PppoeClient`, list, set, tuple]): PPPoE协议会话对象或包含多个会话对象的可迭代集合。\n        每个会话对象必须具备`connect()`方法来执行具体的连接操作。\n\nReturns:\n\n    bool: 布尔值，始终返回 ``True`` 以表示连接流程成功执行完成。\n\nRaises:\n\n    ContinuableFailure: 如果底层连接失败（即返回结果为False），将抛出此异常并附带相关错误信息。\n\nExamples:\n    .. code:: RobotFramework\n\n        | Connect Pppoe | Sessions=${Sessions} |\n\n.. note::\n    本函数依赖于每个会话对象具有`connect()`方法。若任一会话对象未定义该方法，可能导致运行时错误。",
  "TesterLibrary.Protocol.pppoe.disconnect_pppoe": "断开PPPoE协议会话\n\nArgs:\n\n    Sessions (Session object or iterable of Session objects): 要断开的PPPoE会话对象或包含多个会话对象的可迭代对象（如列表、集合或元组）\n\nReturns:\n\n    bool: 布尔值，始终返回 ``True`` 表示所有提供的PPPoE会话成功断开\n\nExamples:\n    .. code:: RobotFramework\n\n        | Disconnect Pppoe | Sessions=${Sessions} |\n\n该函数用于断开一个或多个PPPoE协议会话。参数 `Sessions` 可以是一个单独的会话对象，也可以是包含多个会话对象的可迭代对象（如列表、集合或元组）。每个会话对象都会被处理，并调用其 `disconnect()` 方法进行断开操作。函数保证在执行完成后返回 ``True`` 以表示所有会话均已被成功断开。如果底层调用失败，则会抛出带有失败信息的可继续异常。",
  "TesterLibrary.Protocol.pppoe.abort_pppoe": "中断PPPoE协议会话\n\n该函数用于终止一个或多个由Renix API管理的PPPoE会话。它接受单个会话对象或包含多个会话对象的可迭代集合（如列表、集合或元组），并对每个会话调用 `abort()` 方法以终止连接。\n\n参数:\n    Sessions (object 或 iterable of objects)\n        可以是一个单独的会话对象，或者是一个包含多个会话对象的可迭代集合（如 list, set, tuple），\n        这些对象必须支持 `abort()` 方法。如果传入的是单个会话对象，函数内部会将其转换为列表以便统一处理。\n\n返回值:\n    bool\n        始终返回 True，表示成功执行了中止操作。\n\n异常:\n    如果提供的任意一个会话对象没有 `abort()` 方法，或者底层会话终止操作失败，则可能会抛出异常。\n    此类异常将直接从调用的 `abort()` 方法中传递出来。\n\n示例:\n    .. code:: RobotFramework\n\n        | Abort Pppoe | Sessions=${Sessions} |",
  "TesterLibrary.Protocol.pppoe.create_pppoe_custom_option": "创建PPPoE自定义选项，用于在一个或多个PPPoE会话对象上配置和添加自定义的PPPoE协议选项。\n\nArgs:\n\n    Session (:obj:`PppoeClient` 或 :obj:`PppoeServer`) 或其组成的可迭代对象（如 list、set、tuple）:\n        表示一个或多个PPPoE协议会话对象。如果传入单个会话对象，内部将自动将其封装为列表；如果传入多个会话对象，则会对每个会话依次执行操作。\n\nKeyword Args:\n\n    OptionValue (int): 选项标识符，取值范围0-65535，默认值：0\n\n    SubProtocolType (str): 指定该选项所属的消息类型，默认值：LINK_CONTROL_PROTOCOL，支持以下类型：\n\n        LINK_CONTROL_PROTOCOL\n        IP_CONTROL_PROTOCOL\n        IPV6_CONTROL_PROTOCOL\n        PPPOE_PADI_PADR\n\n    UseWildcards (bool): 是否使用通配符匹配所有选项。默认值：False\n\n    StringIsHexadecimal (int): 是否将字符串形式的数据解释为十六进制数值。默认值：False\n\n    OptionData (str): 以十进制表示的选项数据载荷内容，字符串格式\n\n    OptionHexData (list): 以十六进制表示的选项数据载荷内容，列表中的元素为十六进制数值，默认值为空列表 []\n\nReturns:\n\n    如果仅处理一个会话对象，则返回布尔值，表示该操作是否成功（True / False）；\n    如果处理多个会话对象，则返回一个结果列表，每个元素对应相应会话的操作结果（True 或 False）。\n\nRaises:\n\n    ContinuableFailure: 当操作失败（返回 False）时抛出异常，并记录相应的函数名作为错误信息的一部分。\n\nExamples:\n    .. code:: RobotFramework\n\n        | Create Pppoe Custom Option | Sessions=${Sessions} | OptionValue=1 | SubPortocolType=LinkControlProtocol | OptionData=55 |\n\n说明：\n    本函数是对底层 `renix.create_pppoe_custom_option()` 方法的封装，用于在Robot Framework中更方便地调用并创建PPPoE自定义选项。\n    它统一处理单个或多个会话输入的情况，并根据执行结果决定是否抛出可继续执行的失败异常（ContinuableFailure）。",
  "TesterLibrary.Protocol.pppoe.wait_pppoe_ipcp_state": "等待PPPoE IPCP达到指定状态\n\nArgs:\n\n    Sessions (object or iterable): 单个会话对象或可迭代的会话对象列表（如list、set、tuple），用于监控其IPCP状态。若传入单个会话，内部会将其转换为列表。\n\n    State (str, optional): 要等待的IPCP状态。如果未指定，默认可能为隐式状态（由底层实现决定）。支持的状态包括：\n\n        NONE\n\n        IDLE\n\n        CONNECTED\n\n        CONNECTING\n\n        DISCONNECTING\n\n    Interval (int or float, optional): 检查IPCP状态的轮询间隔时间（单位：秒），默认值为1秒。\n\n    TimeOut (int, optional): 等待状态超时时间（单位：秒），若在该时间内未达到目标状态，可能会抛出异常或超时错误，具体取决于底层实现，默认值为60秒。\n\nReturns:\n\n    bool: 如果所有会话的IPCP状态在超时时间内成功达到指定状态则返回True，否则返回False。注意：根据实际实现，也可能不返回任何值，仅阻塞至状态达成或超时。\n\nExamples:\n    .. code:: RobotFramework\n\n        | Wait Pppoe Ipcp State | Sessions=${Sessions} | State=CONNECTED | Interval=1 | TimeOut=60 |",
  "TesterLibrary.Protocol.pppoe.wait_pppoe_ipv6cp_state": "等待PPPoE IPv6CP达到指定状态。\n\n该函数用于等待一个或多个PPPoE会话对象的IPv6控制协议（IPv6CP）状态达到指定的目标状态。如果传入的`Sessions`参数不是列表、集合或元组，则会被转换为列表以保证迭代一致性。\n\n**参数说明：**\n\n- `self` : object  \n  类实例本身，作为方法绑定的上下文。\n\n- `Sessions` : object 或 iterable  \n  一个或多个PPPoE会话对象（如PppoeClient或Pppoev3Router），用于检查其IPv6CP状态。\n\n- `State` : str, optional  \n  目标IPv6CP状态。如果为None，则可能等待默认或预定义状态，具体取决于Session.wait_ipv6cp_state实现。  \n  默认值: `CONNECTED`  \n  支持的状态包括：\n\n  - NONE\n  - IDLE\n  - CONNECTED\n  - CONNECTING\n  - DISCONNECTING\n\n- `Interval` : int 或 float, optional  \n  检查IPv6CP状态的时间间隔（单位：秒）。  \n  默认值: `1`\n\n- `TimeOut` : int 或 float, optional  \n  等待IPv6CP状态达到目标状态的最大时间（单位：秒）。若在超时时间内未达到目标状态，可能会抛出异常，具体取决于Session.wait_ipv6cp_state实现。  \n  默认值: `60`\n\n**返回值：**\n\n- `bool`  \n  如果成功达到目标状态，返回True；否则返回False。\n\n**异常：**\n\n- 可能会在超时时间内未能达到目标状态时抛出异常，具体行为依赖于底层实现Session.wait_ipv6cp_state。\n\n**示例：**\n\n```robotframework\n| Wait Pppoe Ipv6cp State | Sessions=${Sessions} | State=CONNECTED | Interval=2 | TimeOut=120 |\n```",
  "TesterLibrary.Protocol.pppoe.get_pppoe_port_statistic": "获取PPPoE端口级别的统计信息。\n\n该函数用于获取指定PPPoE端口的统计信息，支持多个统计项的查询。它封装了底层 `_get_statictis()` 函数，并根据传入的端口和统计项参数进行数据检索。\n\n### 参数说明：\n\n- **Port** (`object` 或 `list`, optional):  \n  要查询统计信息的测试仪表端口对象或端口对象列表。每个端口对象需包含 `Name` 属性。如果为 None，则不按端口过滤，默认返回所有端口的数据。\n\n- **StaItems** (`list`, `str`, optional):  \n  需要获取的统计项列表。可选值包括：\n  \n  - SessionBlockCount\n  - SessionCount\n  - SessionsUp\n  - SuccessfulConnects\n  - FailedConnects\n  - SucessfulDisconnects\n  - FailedDisconnects\n\n  如果为 None，则返回所有可用统计项；如果为字符串，则将其转换为单元素列表处理。\n\n### 返回值说明：\n\n- 返回类型可能是以下之一：\n\n  - `dict`: 当只有一条匹配记录时，返回键值对形式的结果，键为统计项名称，值为对应数值。\n  - `pandas.DataFrame`: 当有多条匹配记录（如多个端口）时，返回表格形式结果。\n  - `bool`: 若未找到匹配结果则返回 `False`。\n\n### 异常说明：\n\n- **TesterException**: 执行命令或读取结果视图出错时抛出。\n- **sqlite3.Error**: 数据库访问异常时抛出。\n- **KeyError**: 指定的索引列名在结果中不存在时抛出。\n\n### 副作用：\n\n- 可能会通过 `.get()` 方法刷新内部数据状态。\n- 如需访问分页结果，将执行 `GotoResultPageCommand` 命令。\n- 使用 `time.sleep(3)` 确保数据一致性。\n- 将结果 DataFrame 记录到日志中供调试使用。\n\n### 示例用法：\n\n```robotframework\n| @{StaItems} | Create List | SessionBlockCount | SessionCount |\n| Subscribe Result | Types=PppoePortStatistic |\n| Start Protocol |\n| Sleep | 60 |\n| &{Result} | Get Pppoe Port Statistic | Port=${port_obj} | StaItems=@{StaItems} |\n| Clear Result |\n```",
  "TesterLibrary.Protocol.pppoe.get_pppoe_server_block_statistic": "获取PPPoE Server Block Statistic统计结果\n\n该函数用于检索与指定PPPoE服务器块会话相关的统计数据。它支持根据一个或多个会话对象以及指定的统计项来获取数据，并能返回字典、DataFrame 或布尔值，具体取决于匹配的结果数量。\n\nArgs:\n    Session (:obj:`PppoeServer` or list or set or tuple of objects, optional): 测试仪表端口对象或其集合，表示需要查询的PPPoE服务器块会话。每个对象必须包含'Name'属性，该属性用于在统计结果中进行过滤。如果未提供，则不进行会话过滤。默认为 None。\n\n    StaItems (list or str, optional): 需要获取的统计项目列表。可以是一个字符串（将自动转换为单元素列表）或多个统计项组成的列表。若未提供此参数，则查询所有可用统计项。有效统计项包括但不限于：\n\n        IpcpState\n        Ipv6cpState\n        SessionCount\n        SessionsUp\n        SuccessfulConnects\n        FailedConnects\n        SucessfulDisconnects\n        FailedDisconnects\n        MaxSetupTime\n        MinSetupTime\n        AverageSetupTime\n        SuccessfulSetupRate\n        RxPadi\n        TxPado\n        RxPadr\n        TxPads\n        TxPadt\n        RxPadt\n        TxLcpConfigRequest\n        RxLcpConfigRequest\n        TxLcpConfigAck\n        RxLcpConfigAck\n        TxLcpConfigNak\n        RxLcpConfigNak\n        TxLcpConfigReject\n        RxLcpConfigReject\n        TxLcpEchoRequest\n        RxLcpEchoRequest\n        TxLcpEchoReply\n        RxLcpEchoReply\n        TxLcpTerminateRequest\n        RxLcpTerminateRequest\n        TxLcpTerminateAck\n        RxLcpTerminateAck\n        TxChap\n        RxChap\n        TxPap\n        RxPap\n        TxIpcp\n        RxIpcp\n        TxIpv6cp\n        RxIpv6cp\n        TxIpv4\n        RxIpv4\n        TxIpv6\n        RxIpv6\n\nReturns:\n    dict or pd.DataFrame or bool: 返回类型依据匹配结果的数量而定:\n\n        - 如果找到一行匹配结果：返回一个字典，键是统计项名称，值是对应的结果。\n        - 如果找到多行匹配结果：返回一个 pandas DataFrame，每列对应一个请求的统计项。\n        - 如果没有找到任何结果：返回 False。\n\nRaises:\n    ContinuableFailure: 当内部调用失败或无法检索到结果时抛出此异常，表示测试流程可继续执行。\n\nExamples:\n    .. code:: RobotFramework\n\n        | @{StaItems} | Create List | SessionCount | SessionsUp |\n        | Subscribe Result | Types=PppoeServerBlockStatistic |\n        | Start Protocol |\n        | Sleep | 60 |\n        | &{Result} | Get Pppoe Server Block Statistic | Session=${Session} | StaItems=@{StaItems} |\n        | Clear Result |\n\nSide Effects:\n    - 内部可能会通过性能相关方法刷新数据以确保结果最新。\n    - 在分页导航时可能执行如 GotoResultPageCommand 等命令。\n    - 某些模式下使用 time.sleep(3) 来保证数据一致性。\n    - 为了调试目的，会在日志中输出表格格式的检索数据。\n\nNote:\n    本接口是对 `_get_statictis` 方法的封装，实际统计信息由底层方法获取并经过过滤后返回给调用者。",
  "TesterLibrary.Protocol.pppoe.get_pppoe_server_statistic": "获取PPPoE Server Statistic统计结果\n\n该函数用于检索指定PPPoE服务器会话的统计信息。它允许用户根据会话对象、索引和所需的统计项来查询特定的统计值。\n\nArgs:\n    Session (:obj:`PppoeServer` or list or set or tuple or None, optional): \n        PPPoE服务器会话对象或其集合，用于标识要查询的会话。如果为None，则不使用任何会话标识。\n        默认值: None\n\n    Index (int, optional): \n        指定PPPoE服务器块中的实例索引，用于定位具体的PPPoE服务器实例。\n        默认值: 1\n\n    StaItems (list or str or None, optional): \n        要检索的统计项列表。如果为None，则返回所有可用统计项；如果为字符串，则将其转换为单元素列表。\n        支持的统计项包括但不限于：\n\n            IpcpState\n            Ipv6cpState\n            MacAddress\n            PeerMacAddress\n            PppoeSessionId\n            VlanId\n            InnerVlanId\n            Ipv4Address\n            PeerIpv4Address\n            Ipv6LinklocalAddress\n            PeerIpv6LinklocalAddress\n            SuccessfulConnects\n            FailedConnects\n            SucessfulDisconnects\n            FailedDisconnects\n            SetupTime\n            RxPadi\n            TxPado\n            RxPadr\n            TxPads\n            TxPadt\n            RxPadt\n            TxLcpConfigRequest\n            RxLcpConfigRequest\n            TxLcpConfigAck\n            RxLcpConfigAck\n            TxLcpConfigNak\n            RxLcpConfigNak\n            TxLcpConfigReject\n            RxLcpConfigReject\n            TxLcpEchoRequest\n            RxLcpEchoRequest\n            TxLcpEchoReply\n            RxLcpEchoReply\n            TxLcpTerminateRequest\n            RxLcpTerminateRequest\n            TxLcpTerminateAck\n            RxLcpTerminateAck\n            TxChap\n            RxChap\n            TxPap\n            RxPap\n            TxIpcp\n            RxIpcp\n            TxIpv6cp\n            RxIpv6cp\n            TxIpv4\n            RxIpv4\n            TxIpv6\n            RxIpv6\n\nReturns:\n    dict or pd.DataFrame or bool: \n        - 如果找到唯一匹配的结果行，返回一个字典，键为请求的统计项（StaItems），值为对应的统计值。\n        - 如果找到多条匹配结果，返回一个pandas DataFrame，包含所有匹配的行，并按StaItems过滤列。\n        - 如果未找到匹配结果，返回False。\n\nRaises:\n    TesterException: 在执行命令或数据检索过程中可能抛出底层 `_get_statictis` 函数引发的异常。\n    sqlite3.Error: 如果在相关函数中发生数据库访问错误。\n    KeyError: 如果 `Idx` 中提供的列名在结果DataFrame中不存在。\n\nSide Effects:\n    - 内部调用 `.get()` 方法刷新对象数据。\n    - 如果是分页结果视图，可能会执行 GotoResultPageCommand 命令以导航到正确页面。\n    - 使用 time.sleep(3) 等待数据同步，确保结果一致性。\n    - 将结果DataFrame以表格形式记录日志，用于调试。\n\nExamples:\n    .. code:: RobotFramework\n\n        | @{StaItems} | Create List | SessionsUp | SessionCount |\n        | Subscribe Result | Types=PppoeServerStatistic |\n        | Start Protocol |\n        | Sleep | 60 |\n        | &{Result} | Get Pppoe Server Statistic | Session=${Session} | Index=1 | StaItems=@{StaItems} |\n        | Clear Result |",
  "TesterLibrary.Protocol.pppoe.get_pppoe_client_block_statistic": "获取PPPoE Client Block Statistic统计结果\n\n该函数用于检索与PPPoE客户端块相关的统计信息，支持根据会话对象和指定的统计项进行过滤和查询。\n\nArgs:\n\n    Session (:obj:`PppoeClient` 或 list/tuple/set of objects, optional): \n        测试仪表端口对象或其集合，表示PPPoE客户端块。每个Session对象需具有'Name'属性，用于作为查询统计的索引。\n        如果为None，则不进行会话过滤。默认为 None。\n\n    StaItems (list 或 str, optional):\n        指定需要获取的PPPoE Client Block统计项目。支持以下统计项：\n\n            IpcpState\n            Ipv6cpState\n            SessionCount\n            SessionsUp\n            SessionsRetried\n            AttemptedConnects\n            SuccessfulConnects\n            FailedConnects\n            SucessfulDisconnects\n            FailedDisconnects\n            MaxSetupTime\n            MinSetupTime\n            AverageSetupTime\n            SuccessfulSetupRate\n            TxPadi\n            RxPado\n            TxPadr\n            RxPads\n            TxPadt\n            RxPadt\n            TxLcpConfigRequest\n            RxLcpConfigRequest\n            TxLcpConfigAck\n            RxLcpConfigAck\n            TxLcpConfigNak\n            RxLcpConfigNak\n            TxLcpConfigReject\n            RxLcpConfigReject\n            TxLcpEchoRequest\n            RxLcpEchoRequest\n            TxLcpEchoReply\n            RxLcpEchoReply\n            TxLcpTerminateRequest\n            RxLcpTerminateRequest\n            TxLcpTerminateAck\n            RxLcpTerminateAck\n            TxChap\n            RxChap\n            TxPap\n            RxPap\n            TxIpcp\n            RxIpcp\n            TxIpv6cp\n            RxIpv6cp\n            TxIpv4\n            RxIpv4\n            TxIpv6\n            RxIpv6\n\n        如果提供的是字符串，将自动转换为列表。如果为None，则查询所有可用的统计项。默认为 None。\n\nReturns:\n\n    dict 或 pd.DataFrame 或 bool:\n        - 如果找到唯一匹配的一行数据：返回一个字典，键为统计项名称（来自StaItems），值为对应的统计值。\n        - 如果找到多行匹配的数据：返回一个pandas DataFrame，每行代表一个PPPoE客户端块的统计信息。\n        - 如果未找到任何匹配结果：返回 False。\n\nRaises:\n\n    ContinuableFailure: 当内部调用返回False时，抛出此异常表示操作失败但可以继续执行后续步骤。\n    TesterException: 可能由于内部命令执行错误或数据检索失败而引发。\n    KeyError: 如果提供的索引列名不存在于结果数据中。\n    sqlite3.Error: 在检索基于数据库的统计信息时，可能会发生数据库相关错误。\n\nExamples:\n    .. code:: RobotFramework\n\n        | @{StaItems} | Create List | SessionCount | SessionsUp |\n        | Subscribe Result | Types=PppoeClientBlockStatistic |\n        | Start Protocol |\n        | Sleep | 60 |\n        | &{Result} | Get Pppoe Client Block Statistic | Session=${Session} | StaItems=@{StaItems} |\n        | Clear Result |",
  "TesterLibrary.Protocol.pppoe.get_pppoe_client_statistic": "获取PPPoE Client Statistic统计结果\n\n该函数用于检索指定PPPoE客户端会话的统计信息。它支持从单个或多个会话对象中提取统计数据，并允许通过索引和统计项过滤返回的数据。\n\nArgs:\n\n    Session (:obj:`PppoeClient` or list or set or tuple or None, optional): \n        测试仪表端口对象，表示PPPoE客户端块。如果为None，则不进行会话过滤。\n        如果是列表、集合或元组，则从每个会话对象中提取`.Name`属性用于过滤。\n        如果是单个对象，则使用其`.Name`属性进行过滤。默认值为 None。\n\n    Index (int, optional): \n        PppoeClient Block里会话的索引值，用于选择特定的PPPoE客户端实例。\n        默认值为 1。\n\n    StaItems (list or str or None, optional): \n        需要获取的PPPoE客户端统计项列表。如果为None，则返回所有可用的统计项。\n        如果提供字符串，则将其转换为包含该字符串的列表。\n        支持的统计项包括：\n\n            IpcpState, Ipv6cpState, MacAddress, PeerMacAddress, PppoeSessionId,\n            VlanId, InnerVlanId, Ipv4Address, PeerIpv4Address, Ipv6LinklocalAddress,\n            PeerIpv6LinklocalAddress, Ipv6GlobalAddress, SessionsRetried,\n            AttemptedConnects, SuccessfulConnects, FailedConnects, SucessfulDisconnects,\n            FailedDisconnects, SetupTime, TxPadi, RxPado, TxPadr, RxPads, TxPadt,\n            RxPadt, TxLcpConfigRequest, RxLcpConfigRequest, TxLcpConfigAck,\n            RxLcpConfigAck, TxLcpConfigNak, RxLcpConfigNak, TxLcpConfigReject,\n            RxLcpConfigReject, TxLcpEchoRequest, RxLcpEchoRequest, TxLcpEchoReply,\n            RxLcpEchoReply, TxLcpTerminateRequest, RxLcpTerminateRequest,\n            TxLcpTerminateAck, RxLcpTerminateAck, TxChap, RxChap, TxPap, RxPap,\n            TxIpcp, RxIpcp, TxIpv6cp, RxIpv6cp, TxIpv4, RxIpv4, TxIpv6, RxIpv6\n\nReturns:\n\n    dict or pd.DataFrame:\n        - 如果找到唯一匹配的行：返回一个字典，键为请求的统计项（StaItems），值为对应的统计值。\n        - 如果找到多行匹配：返回一个包含所有匹配行的 pandas DataFrame，并根据 `Index` 进行筛选。\n        - 如果未找到匹配结果：返回 False。\n\nRaises:\n\n    ContinuableFailure: 如果底层调用返回 False，抛出可继续执行的失败异常。\n    TesterException: 可能传播在命令执行或数据检索过程中引发的异常。\n    sqlite3.Error: 如果在相关函数中发生数据库访问错误。\n    KeyError: 如果 `Idx` 中的列名在结果 DataFrame 中不存在。\n\nExamples:\n    .. code:: RobotFramework\n\n        | @{StaItems} | Create List | SessionCount | SessionsUp |\n        | Subscribe Result | Types=PppoeClientStatistic |\n        | Start Protocol |\n        | Sleep | 60 |\n        | &{Result} | Get Pppoe Client Statistic | Session=${Session} | StaItems=@{StaItems} |\n        | Clear Result |",
  "TesterLibrary.Protocol.rip.create_rip": "创建RIP协议会话对象，并将其注册到全局协议对象映射中。\n\n该函数用于在指定端口上创建一个 RipRouter 实例，并根据传入的参数对 RIP 协议会话进行配置。创建完成后，该实例会被注册到全局的 `map_protocol_object` 字典中，以便后续通过其 handle 属性进行访问。\n\nArgs:\n    Port (:obj:`Port`): 测试仪表端口对象，作为该 RIP 会话的上层对象，类型为 object。\n\nKeyword Args:\n    Name (str): RIP协议会话名称，默认自动生成。\n\n    Enable (bool): 是否启用该 RIP 协议会话，默认值：True。\n\n    Version (str): 指定RIP协议版本，支持 'RIPv1'、'RIPv2' 和 'RIPng'，默认值：'RIPv2'。\n\n    UpdateType (str): 指定发送RIP消息的方式，支持 BROADCAST、MULTICAST 和 UNICAST，默认值：MULTICAST。\n\n    DutIpv4Address (str): 当使用 RIPv1 或 RIPv2 时，指定接收RIP更新的 IPv4 地址，默认值：224.0.0.9。\n\n    DutIpv6Address (str): 当使用 RIPng 并且 UpdateType 为 Unicast 时，指定接收RIP更新的 IPv6 地址，默认值：ff02::9。\n\n    AuthMethod (str): 认证方式，仅当使用 RIPv2 时有效，支持 NONE、SIMPLE 和 MD5，默认值：NONE。\n\n    Password (str): 在 SIMPLE 或 MD5 认证方式下使用的密码，默认值：Xinetel。\n\n    Md5KeyId (int): MD5认证时使用的密钥ID，取值范围：0-255，默认值：1。\n\n    UpdateInterval (int): 发送RIP更新的时间间隔（秒），取值范围：1-65535，默认值：30。\n\n    UpdateJitter (int): 更新时间间隔的抖动值（百分比），取值范围：0-5，默认值：0。\n\n    MaxRoutePerUpdate (int): 每个RIP更新中可携带的最大路由数，取值范围：1-70，默认值：25。\n\n    SplitHorizon (bool): 是否启用水平分割功能，默认值：False。\n\n    EnableViewRoutes (bool): 是否启用查看学习到的路由信息，默认值：False。\n\n    EnableIpAddrValidation (bool): 是否验证接收到的IP地址是否与本地地址在同一网段，默认值：False。\n\nReturns:\n    (:obj:`RipRouter`): 创建的RIP协议会话对象，可用于后续操作和查询。\n\nRaises:\n    ContinuableFailure: 如果底层调用失败，则抛出此异常，表示操作未成功但测试可继续执行。\n\nExamples:\n    .. code:: RobotFramework\n\n        | Create Rip | Port=${Port} | EnableIpAddrValidation=True | Version=RIPv2 | AuthMethod=MD5 | Password=secure123 | Md5KeyId=1 |",
  "TesterLibrary.Protocol.rip.edit_rip": "编辑RIP协议会话对象的参数配置\n\n该函数用于更新指定RIP协议会话对象(Session)的属性。通过传入关键字参数，可以修改RIP会话的各项配置，包括启用状态、版本号、更新方式、认证方法等。\n\nArgs:\n\n    Session (:obj:`RipRouter`): 要修改的RIP协议会话对象，类型为对象实例\n\nKeyword Args:\n\n    Name (str): 设置或修改RIP会话的名称\n\n    Enable (bool): 启用或禁用当前RIP会话，默认值：True\n\n    Version (str): 指定RIP协议版本，支持RIPV1、RIPV2和RIPNG，默认值：RIPV2\n\n    UpdateType (str): 设置发送RIP消息的通信方式，支持BROADCAST、MULTICAST和UNICAST，默认值：MULTICAST\n\n    DutIpv4Address (str): 当使用RIPv1或RIPv2时，设置接收RIP消息的目标IPv4地址，默认值：224.0.0.9\n\n    DutIpv6Address (str): 在RIPng模式下且UpdateType为UNICAST时，设置目标IPv6地址，默认值：ff02::9\n\n    AuthMethod (str): 配置RIPv2协议的认证方式，支持NONE、SIMPLE和MD5，默认值：NONE\n\n    Password (str): 当使用SIMPLE或MD5认证时，设置认证密码，默认值：Xinetel\n\n    Md5KeyId (int): 使用MD5认证时，设置MD5密钥ID，取值范围0-255，默认值：1\n\n    UpdateInterval (int): 设置RIP更新消息的发送间隔（秒），取值范围1-65535，默认值：30\n\n    UpdateJitter (int): 设置RIP更新消息的时间抖动范围，取值0-5，默认值：0\n\n    MaxRoutePerUpdate (int): 设置每次更新消息中可携带的最大路由数，取值范围1-70，默认值：25\n\n    SplitHorizon (bool): 开启或关闭水平分割功能，默认值：False\n\n    EnableViewRoutes (bool): 是否启用查看学到的路由信息功能，默认值：False\n\n    EnableIpAddrValidation (bool): 是否验证收到的IP地址是否与本地地址在同一网段，默认值：False\n\nReturns:\n\n    bool: 属性更新成功返回True，失败返回False\n\nExamples:\n    .. code:: RobotFramework\n\n        | Edit Rip | Session=${Session} | EnableViewRoutes=True | Version=RIPV1 | Enable=False |",
  "TesterLibrary.Protocol.rip.create_rip_ipv4_route": "创建RIP IPv4路由对象\n\n该函数用于在RIP协议配置中创建一个或多个IPv4路由。它基于提供的会话对象（Session）并使用关键字参数来定义路由的具体属性。\n\nArgs:\n\n    Session (:obj:`RipRouter`): 有效的RIP协议会话对象，通常由`Create Rip`接口创建。此对象应包含`create_ipv4_route`方法，用于实际执行路由创建操作。类型为object。\n\nKeyword Args:\n\n    Name (str): RIP IPv4路由的名称，用于标识该路由条目。默认值未指定，是否可选取决于底层实现。\n\n    Enable (bool): 是否启用该RIP IPv4路由。取值范围：True（启用）或False（禁用），默认值为True。\n\n    RouteCount (str): 要创建的连续路由数量（路由池大小）。取值范围：1-16777215，默认值为1。\n\n    StartIpv4Prefix (str): 起始IPv4地址前缀，表示路由的目标网络起始地址。取值范围：合法的IPv4地址，默认值为192.168.1.0。\n\n    PrefixLength (int): IPv4地址的子网掩码长度（前缀长度）。取值范围：1-32，默认值为24。\n\n    Increment (str): 创建多个路由时，每次增加的步长值。取值范围：1-255，默认值为1。\n\n    NextHop (str): 指定路由的下一跳地址。取值范围：合法的IPv4地址，默认值为0.0.0.0（表示直连路由）。\n\n    Metric (int): 路由的度量值（跳数），用于衡量到达目标网络的距离。取值范围：1-16，其中16表示不可达，默认值为1。\n\n    RouteTag (int): 路由标签值，用于区分外部注入的路由。取值范围：0-65535，默认值为0（表示无标签）。\n\nReturns:\n\n    (:obj:`RipIpv4RouteConfig`): 成功创建后返回的RIP IPv4路由配置对象，可用于后续配置或查询操作。如果底层调用失败，则抛出异常。\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${Session} | Create Rip | Port=${Port} |\n        | Create Rip Ipv4 Route | Session=${Session} | Metric=10 |\n\nDescription:\n    该函数封装了对`Session.create_ipv4_route`的调用，简化了在RIP上下文中创建IPv4路由的过程。用户只需提供必要的参数即可完成路由的创建。若底层调用失败，将抛出ContinuableFailure异常；否则返回创建的路由对象。",
  "TesterLibrary.Protocol.rip.create_rip_ipv6_route": "创建RIP IPv6路由对象\n\n该函数用于在RIP协议配置中创建一个或多个IPv6路由条目。它通过调用提供的会话(Session)对象的`create_ipv6_route`方法来实现路由的创建，并支持对路由的多种属性进行配置。\n\nArgs:\n\n    Session (:obj:`RipRouter`): 一个或多个RIP协议的会话对象，表示与RIP路由器的连接，用于在其上下文中创建IPv6路由。\n\nKeyword Args:\n\n    Name (str): RIP IPv6路由的名称，用于标识该路由配置，默认为None。\n\n    Enable (bool): 是否启用该IPv6路由，默认值为True。如果设置为False，则该路由不会被激活。\n\n    RouteCount (int): 要创建的连续IPv6路由的数量，默认值为1，取值范围为1到2147483647。\n\n    StartIpv6Prefix (str): 起始IPv6前缀地址，默认值为'2000::'，必须是一个有效的IPv6地址格式。\n\n    RouteStep (str): 每个连续路由地址之间的步长，默认值为'0:0:0:1::'，必须是一个有效的IPv6地址格式。\n\n    PrefixLength (int): IPv6地址的前缀长度，默认值为64，取值范围为1到128。\n\n    NextHop (str): 路由的下一跳地址，默认值为'::'（即未指定），必须是一个有效的IPv6地址。\n\n    Metric (int): 路由的度量值（跳数），默认值为1，取值范围为1到16，其中16表示不可达。\n\n    RouteTag (int): 路由标签，用于区分不同来源的路由信息，默认值为0，表示没有标签，取值范围为0到65535。\n\nReturns:\n\n    (:obj:`RipIpv6RouteConfig`): 返回创建的RIP IPv6路由配置对象，可用于后续操作如修改、删除或查询路由状态。\n\nRaises:\n\n    如果底层调用失败，将抛出ContinuableFailure异常，表示函数执行失败但测试可以继续运行。\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${Session} | Create Rip | Port=${Port} |\n        | Create Rip Ipv6 Route | Session=${Session} | Name=MyIPv6Route | RouteCount=5 | StartIpv6Prefix=2001:: | PrefixLength=64 | NextHop=fe80::1 | Metric=2 |",
  "TesterLibrary.Protocol.rip.advertise_rip": "Advertises RIP (Routing Information Protocol) for the given session(s).\n\nThis function takes one or more session objects and invokes the `advertise()` \nmethod on each of them. If the input is not a list, set, or tuple, it is \nconverted into a list before processing. The function returns True upon \nsuccessful execution.\n\nParameters:\n-----------\nSessions : object or iterable of objects\n    A single session object or an iterable (list, set, or tuple) of session \n    objects for which RIP advertisement should be triggered. Each session \n    object must have an `advertise()` method that will be called.\n\nReturns:\n--------\nbool\n    Returns True after successfully advertising RIP for all provided sessions.\n\nRaises:\n-------\nContinuableFailure\n    If RIP advertisement fails in the underlying implementation (i.e., if \n    `renix.advertise_rip` returns False), a `ContinuableFailure` exception is raised.\nTypeError\n    If any of the session objects do not have the `advertise()` method.\n\nNotes:\n------\n- This function wraps the `renix.advertise_rip` function and raises a custom \n  exception on failure to continue test execution in certain testing frameworks.\n- Designed to be used in environments such as Robot Framework where session-based \n  routing protocol control is required.",
  "TesterLibrary.Protocol.rip.withdraw_rip": "撤销RIP（Routing Information Protocol）协议会话\n\n该函数用于撤销指定的RIP协议会话，通常用于优雅地移除或停用RIP路由会话。它可以接受单个会话对象或多个会话对象的可迭代集合，并对每个会话调用 `withdraw()` 方法以执行实际的撤销操作。\n\n参数说明：\n    Sessions (Session 或 Session 的可迭代对象)：可以是一个单独的 Session 对象，也可以是包含多个 Session 对象的列表、集合或元组。每个 Session 对象必须具有 `withdraw()` 方法，该方法负责执行具体的会话撤销操作。\n\n返回值：\n    bool：如果函数成功执行，则返回 True。需要注意的是，这并不表示所有会话的撤销操作都一定成功；个别会话的撤销状态应通过对应的 Session 对象进行检查。如果底层调用失败并返回 False，则会抛出一个可继续执行的失败异常 (`ContinuableFailure`)。\n\n示例：\n    .. code:: RobotFramework\n\n        | Withdraw Rip | Sessions=${Sessions} |\n\n注意事项：\n    - 如果传入的是单个 Session 对象，函数内部会将其转换为列表形式以实现统一处理。\n    - 该函数在发生错误时可能会引发异常，调用者应注意捕获和处理此类异常。",
  "TesterLibrary.Protocol.rip.suspend_rip": "Suspends the specified RIP (Routing Information Protocol) session(s).\n\nThis function takes one or more `RipRouter` session objects and attempts to suspend each of them by invoking the backend method. It wraps the input in a list if it is not already a collection, ensuring uniform processing across single and multiple session inputs.\n\nIf any session fails to be suspended, the function raises a `ContinuableFailure` exception indicating that the operation did not complete successfully.\n\nParameters:\n-----------\nSessions : Union[:obj:`RipRouter`, list, set, tuple]\n    A single `RipRouter` session object or a collection (list, set, or tuple) of such objects representing the RIP sessions to be suspended. If a single session is provided, it is internally converted into a list for consistent handling.\n\nReturns:\n--------\nbool\n    Returns `True` if all provided sessions were successfully suspended.\n\nRaises:\n-------\nContinuableFailure\n    If the backend returns `False`, indicating that the suspension of one or more sessions failed.\n\nDescription:\n------------\nThis function serves as a user-facing interface to pause RIP protocol activity on specified session(s). Internally, it calls the backend `suspend_rip` function via the `renix` module, and then checks the result. If the result is `False`, it raises an exception; otherwise, it returns `True`.\n\nExample:\n--------\n.. code:: RobotFramework\n\n    | Suspend Rip | Sessions=${Sessions} |\n\nThe above example shows how the function is used within a Robot Framework test case, where `${Sessions}` is expected to be a list of `RipRouter` session objects.",
  "TesterLibrary.Protocol.rip.resume_rip": "Resumes the execution of one or more RIP protocol sessions.\n\nThis function is used to resume a previously paused RIP protocol session or a collection of sessions. It delegates the actual resuming operation to the backend implementation (`renix.resume_rip`). If the operation fails (i.e., returns `False`), a `ContinuableFailure` exception is raised to indicate the failure. Otherwise, it returns the result from the backend, which is typically `True`.\n\nArgs:\n    Sessions (RipRouter or list of RipRouter): A single RIP router session object or a list of such objects to be resumed.\n\nReturns:\n    bool: Returns `True` if the operation successfully resumes all specified sessions; otherwise, it may return `False` and raise an exception in case of failure.\n\nRaises:\n    ContinuableFailure: If the backend returns `False`, indicating that the resume operation failed.\n\nExamples:\n    .. code:: RobotFramework\n\n        | Resume Rip | Sessions=${Sessions} |\n\nNotes:\n    - This function relies on the backend `renix.resume_rip()` function to perform the actual operation.\n    - The `@abnormal_check()` decorator may provide additional error handling or validation not described here.\n    - Each session's `resume()` method is called internally during this process, and any exceptions thrown by them may propagate up through this function.",
  "TesterLibrary.Protocol.rip.wait_rip_state": "等待RIP协议会话达到指定状态。\n\n该函数用于等待一个或多个RIP协议会话（Session）达到指定的目标状态。它通过定期轮询会话状态来实现等待，轮询间隔和最大等待时间可配置。若在超时时间内会话未能达到目标状态，函数将返回 False 并抛出异常。\n\n参数:\n- Sessions (list of :obj:`RipRouter`): 一个包含RIP会话对象的列表。每个会话对象应具有检查状态的能力。\n- State (str, optional): 目标状态，默认为 'OPEN'。支持的状态包括：\n    - DISABLED\n    - NOTSTART\n    - CLOSED\n    - OPEN (default)\n    - SUSPENDED\n- Interval (int or float, optional): 检查会话状态的时间间隔（单位：秒），默认值为 1 秒。\n- TimeOut (int or float, optional): 等待的最大时间（单位：秒），默认值为 60 秒。\n\n返回值:\n- bool: 如果所有会话都在超时时间内达到指定状态，则返回 True；否则返回 False，并抛出 `ContinuableFailure` 异常。\n\n行为说明:\n- 函数内部调用底层库 `renix.wait_rip_state` 来执行实际的状态检测逻辑。\n- 如果底层函数返回 False（表示等待失败或超时），则抛出 `ContinuableFailure` 异常以通知上层流程。\n- 若成功达到目标状态，则正常返回 True。\n\n示例:\n.. code:: RobotFramework\n\n    | Wait Rip State | Sessions=${Sessions} | State=OPEN | Interval=2 | TimeOut=120 |\n\n注意事项:\n- 所有传入的会话对象必须是有效的 RIP 会话实例，并且支持 `wait_rip_state` 接口所依赖的底层状态查询机制。\n- 若未明确指定 State 参数，函数将默认等待会话进入 'OPEN' 状态。\n- 若超时发生，函数不会自动重试或恢复，需由外部逻辑决定如何处理失败。",
  "TesterLibrary.Protocol.rip.get_rip_session_block_statistic": "获取RIP协议会话块统计结果\n\n该函数用于获取一个或多个RIP协议会话块的统计信息。它封装了底层统计获取逻辑，支持多种返回格式，并可灵活指定需要查询的统计项。\n\nArgs:\n\n    Session (object or list or set or tuple or None): \n        指定要查询的RIP会话对象或对象集合。每个对象需具有.Name属性。\n        若为None，则不指定具体会话，返回所有会话的统计信息。\n\n    StaItems (list or str or None):\n        指定需要获取的统计项（列名）。支持以下统计项：\n        \n            SessionBlockId: 会话块ID\n            SessionCount: 会话数量\n            TxAdvertised: 发送的路由通告数\n            RxAdvertised: 接收的路由通告数\n            TxWithdrawn: 发送的路由撤销数\n            RxWithdrawn: 接收的路由撤销数\n\n        若为字符串，则会被自动转换为单元素列表。\n        若为None，则动态查询可用的统计项。\n\nReturns:\n\n    dict or pd.DataFrame or bool:\n        - 如果仅找到一条匹配记录：返回字典，键为统计项名称，值为对应的统计值\n        - 如果找到多条匹配记录：返回pandas DataFrame，包含所有匹配记录并仅显示指定的统计列\n        - 如果未找到匹配记录：返回False\n\nRaises:\n\n    ContinuableFailure: 当底层调用返回False时抛出，表示统计获取失败\n    TesterException: 可能传播自内部方法_get_statictis()的异常\n    sqlite3.Error: 数据库访问错误\n    KeyError: 列名不存在于结果中\n\nExamples:\n    .. code:: RobotFramework\n\n        | # 获取单个会话的多个统计项 |\n        | @{StaItems} | Create List | TxAdvertised | RxAdvertised |\n        | &{Result} | Get Rip Session Block Statistic | Session=${Session} | StaItems=@{StaItems} |\n\n        | # 获取多个会话的统计信息 |\n        | @{Sessions} | Create List | ${Session1} | ${Session2} |\n        | &{Result} | Get Rip Session Block Statistic | Session=@{Sessions} | StaItems=TxAdvertised |\n\n        | # 获取所有会话的默认统计项 |\n        | &{Result} | Get Rip Session Block Statistic | StaItems=None |",
  "TesterLibrary.Protocol.rip.get_rip_session_statistic": "获取RIP协议会话统计结果\n\n该函数用于查询和获取与指定RIP会话相关的统计信息，支持按会话对象、会话ID以及指定的统计项进行过滤和查询。其内部调用底层接口获取数据，并对结果进行处理。\n\n参数:\n    Session (object, optional): RIP协议会话对象（类型为 RipRouter）或多个会话对象的集合（如 list/set/tuple）。每个会话对象必须具有 `Name` 属性，表示系统中的会话块ID。如果未提供，则不进行会话过滤，默认值为 None。\n    SessionId (int, optional): 会话实例的数字标识符，通常用于在会话块内选择特定的会话索引，默认值为 1。\n    StaItems (list or str or None, optional): 需要获取的统计项列表，可以是单个字符串或多个项目的列表。若为 None，则返回所有可用统计项。目前支持的统计项包括：\n\n        SessionBlockId\n        SessionId\n        SessionState\n        TxAdvertised\n        RxAdvertised\n        TxWithdrawn\n        RxWithdrawn\n\n返回值:\n    dict 或 pd.DataFrame 或 bool:\n        - 如果找到唯一一行匹配的数据：返回一个字典，键为请求的统计项，值为对应的统计值。\n        - 如果找到多行匹配的数据：返回一个 pandas DataFrame，包含符合筛选条件的行和列。\n        - 如果没有找到匹配的结果：返回 False。\n\n异常:\n    ContinuableFailure: 如果底层调用返回失败（result == False），则抛出可继续执行的失败异常。\n\n示例:\n    .. code:: RobotFramework\n\n        | @{StaItems} | Create List | TxAdvertised | RxAdvertised |\n        | &{Result} | Get Rip Session Statistic | Session=${Session} | SessionId=2 | StaItems=@{StaItems} |\n\n注意事项:\n    - 函数内部可能调用 `_get_statictis` 来实际获取数据，可能会刷新数据或分页导航。\n    - 在某些模式下使用 time.sleep(3) 以确保跨页面结果的一致性。\n    - 会将会话对象的 Name 属性映射为 SessionBlockId 进行查找。\n    - 结果数据可能来源于数据库，因此可能引发 sqlite3.Error 异常。",
  "TesterLibrary.Protocol.rip.get_rip_router_from_route": "Retrieve the RIP routers associated with the provided route(s).\n\nThis function accepts either a single route or a list of routes and returns the corresponding RIP routers that generated those routes. It uses the 'get_relatives' method to find the source RIP router(s) for the given route(s) based on the 'GenerateRipRoute' relationship in the source direction.\n\nParameters:\n-----------\nRoute : object or list of objects\n    A single route object or a list of route objects for which the associated RIP router(s) need to be determined. The route object(s) are typically created using RipIpv4RouteConfig or similar configurations.\n\nReturns:\n--------\nlist\n    A list of RIP router objects corresponding to the input route(s). Each entry in the list represents the RIP router that generated the respective route.\n\nNotes:\n------\n- If a non-list input is provided, it will be converted into a list internally.\n- The function assumes that each route has a valid 'GenerateRipRoute' relationship pointing back to the RIP router that created it.\n- If the underlying operation fails, a ContinuableFailure exception is raised with an appropriate error message.\n\nExamples:\n---------\n.. code:: RobotFramework\n\n    | ${Session} | Create Rip | Port=${Port} |\n    | ${RouterLsa} | Create Rip Ipv4 Router | Session=${Session} | Age=20 |\n    | ${Point} | Get Rip Router From Route | Route=${RouterLsa} |",
  "TesterLibrary.Protocol.rip.edit_rip_port_config": "修改RIP端口配置\n\n用途：\n该函数用于修改一个或多个指定端口的RIP协议端口配置，特别是与路由更新发送速率相关的设置。\n\n参数说明：\n\n    Ports (:obj:`Port` 或 list of :obj:`Port`): 要编辑RIP配置的测试仪表端口对象。可以是一个单独的端口对象，也可以是一个包含多个端口对象的列表。\n    \n关键字参数（**kwargs）：\n    \n    UpdateRoutesTransmitRate (int, optional): 每秒发送的RIP消息数量（messages/sec）。取值范围：1-1000000000，默认值：1000\n    \n返回值：\n    bool: 如果配置修改成功，则返回True；如果失败，则返回False并抛出ContinuableFailure异常。\n\n功能描述：\n该函数通过调用底层API函数edit_rip_port_config来实现对端口RIP配置的修改。它会获取每个端口上的'RipPortRateConfig'子对象，并应用由关键字参数提供的新配置值。此函数支持批量修改多个端口的RIP配置。\n\n示例：\n.. code:: RobotFramework\n\n    | Edit Rip Port Config | Ports=${Ports} | UpdateRoutesTransmitRate=100 |",
  "TesterLibrary.Protocol.saa.create_saa": "创建SAA协议会话对象，并将其注册到全局协议对象映射中。\n\n该函数用于在指定的端口上初始化一个Saa协议实例，并根据提供的可选参数配置其属性。创建完成后，该实例将被注册到全局的协议对象映射（map_protocol_object）中，以便后续通过句柄进行引用或操作。\n\n参数:\n    Port (:obj:`Port`): 测试仪表端口对象，表示该SAA实例所属的物理或逻辑端口，类型为object。\n\n    **kwargs : 可选关键字参数，用于动态设置Saa实例的配置属性，支持以下参数：\n\n        Mode (str): 模式，默认值：RouterHost，可选值包括 RouterRA 和 RouterHost。\n\n        Flags (list): 标志位，默认值：NONEBIT，可选值包括 NONEBIT、MBIT 和 OBIT。\n\n        RouterLifetime (int): 路由器生命周期（单位：秒），默认值：1800，取值范围：0-65535。\n\n        EnableDAD (bool): 是否启用重复地址检测，默认值：False，可选值：True 或 False。\n\n        DADTransmitCount (int): 重复地址检测发送次数，默认值：1，取值范围：1-255。\n\n        DADRetransmitDelay (int): 重复地址检测重传时延（单位：毫秒），默认值：1000，取值范围：1000-4294967295。\n\n        RouterSolicitationRetries (int): 路由请求重传次数，默认值：2，取值范围：0-4294967295。\n\n        RouterSolicitationRetransmitDelay (int): 路由请求重传时延（单位：毫秒），默认值：3000，取值范围：1000-4294967295。\n\n        EnableEui64LinkLocal (bool): 是否启用EUI-64生成Link Local地址，默认值：True，可选值：True 或 False。\n\n        EnableSendRA (bool): 是否启用发送RA报文，默认值：False，可选值：True 或 False。\n\n        MaxInterval (int): 最大RA发布间隔（单位：秒），默认值：600，取值范围：2-1350。\n\n        MinInterval (int): 最小RA发布间隔（单位：秒），默认值：200，取值范围：1-1800。\n\n        Ipv6EnableGatewayLearn (bool): 是否启用IPv6网关地址学习，默认值：False，可选值：True 或 False。\n\n        DefaultNoAdvertise (bool): 是否不携带前缀信息，默认值：False，可选值：True 或 False。\n\n返回值:\n    (:obj:`Saa`): 创建并配置完成的SAA协议会话对象，类型为object。\n\n异常:\n    当底层调用失败时，抛出ContinuableFailure异常，并附带错误信息。\n\n示例:\n    .. code:: RobotFramework\n\n        | Create Saa | Port=${Port} | DADTransmitCount=255 |",
  "TesterLibrary.Protocol.saa.wait_saa_state": "Waits for the specified SAA (Service Access Architecture) session(s) to reach a desired state.\n\nPurpose:\n    This function is used to block execution until one or more SAA sessions transition into a specified state, such as BOUND or RUNNING. It allows periodic checking of session states with a defined interval and timeout.\n\nParameters:\n    Sessions : list of Saa session objects\n        A list containing the SAA session objects to monitor for state changes.\n\n    State : str, optional\n        The target state each session should reach. Supported values are:\n\n            DISABLED\n\n            IDLE\n\n            ESTABLISHING\n\n            BOUND\n\n            RUNNING\n\n        Default is 'IDLE'.\n\n    Interval : int, optional\n        The time interval (in seconds) between successive checks of the session state. Default is 1 second.\n\n    TimeOut : int, optional\n        The maximum time (in seconds) to wait for all sessions to reach the specified state. If the timeout is reached before\n        all sessions transition to the desired state, the function returns False. Default is 60 seconds.\n\nReturns:\n    bool\n        Returns True if all sessions reach the specified state within the timeout period.\n        Returns False if any session fails to reach the state within the timeout, depending on the backend implementation.\n\nRaises:\n    ContinuableFailure\n        If the underlying `renix.wait_saa_state` call returns False, this exception is raised to signal failure while allowing test execution to continue.\n\nExample:\n    .. code:: RobotFramework\n\n        | Wait Saa State | Sessions=${Sessions} | State=BOUND | Interval=2 | TimeOut=120 |",
  "TesterLibrary.Protocol.saa.edit_saa_port_config": "Modifies the SAA (Service Access Agent) port configuration for one or more specified ports.\n\nThis function is used to edit the 'SaaPortRateConfig' child object associated with each provided port, applying the specified configuration changes. It supports configuring parameters such as session request rate and maximum outstanding sessions. If a single port is provided, it returns the updated configuration object directly; if multiple ports are provided, it returns a list of updated configuration objects.\n\nArgs:\n    Ports (:obj:`Port` or list of :obj:`Port`): A single port object or a list of port objects whose SAA port configuration needs to be modified. If a single port is passed, it will be internally converted into a list for uniform processing.\n\nKeyword Args:\n    RequestRate (int): Sets the request rate in sessions per second. \n                       Default value: 100\n                       Valid range: 0 - 10000\n\n    MaxOutstanding (int): Sets the maximum number of outstanding sessions.\n                          Default value: 1000\n                          Valid range: 0 - 65535\n\nReturns:\n    object or list: If only one port is processed, returns the updated SaaPortRateConfig object. \n                    If multiple ports are processed, returns a list of updated SaaPortRateConfig objects corresponding to the input ports.\n\nRaises:\n    ContinuableFailure: If the operation fails, an exception is raised with a failure message indicating the function name.\n\nExamples:\n    .. code:: RobotFramework\n\n        | Edit Saa Port Config | Ports=${Ports} | RequestRate=1000 |\n        \nDescription:\n    Internally, this function calls `renix.edit_saa_port_config(Ports=Ports, **kwargs)` to perform the actual configuration update. The function iterates over each provided port, fetches its first 'SaaPortRateConfig' child object, and applies the specified configuration using the provided keyword arguments. Each updated configuration object is collected and returned either as a single object or a list, based on the number of input ports. This function is typically used in test scenarios where precise control over SAA session rates and limits is required.",
  "TesterLibrary.Protocol.saa.get_saa_port_statistic": "获取SAA端口统计信息，用于查询指定端口的SAA协议相关统计数据。\n\nArgs:\n\n    Port (:obj:`Port` 或 list 或 set 或 tuple 或 None): \n        - 如果是对象（假设为端口对象），则使用其 `.Name` 属性。\n        - 如果是 list、set 或 tuple 类型，则从中提取每个对象的 `.Name` 形成端口名称列表。\n        - 如果为 None，则不进行端口过滤，查询所有端口的统计信息。\n    \n    StaItems (list 或 str 或 None):\n        - 如果是 list 类型，表示要获取的统计项列表（列名）。\n        - 如果是字符串类型，将被转换为只包含该字符串的单元素列表。\n        - 如果为 None，则通过查询 ROM 属性获取所有可用的统计项。\n\nReturns:\n\n    dict 或 pd.DataFrame 或 bool:\n        - 如果找到恰好一行结果（例如一个端口的统计）：返回字典，键为统计项名称（StaItems），值为对应的统计值。\n        - 如果找到多行结果（例如多个端口的统计）：返回 pandas DataFrame，每一行为一个端口的统计信息。\n        - 如果未找到匹配结果：返回 False。\n\nRaises:\n\n    TesterException: 如果在底层调用 `_get_statictis` 方法时发生命令执行或数据检索错误。\n    sqlite3.Error: 如果底层基于数据库的检索方法出现访问问题。\n    KeyError: 如果 `Idx` 中的某个键（由 `Port` 生成）在最终的 DataFrame 中不存在。\n\nSide Effects:\n\n    - 内部会调用对象的 `.get()` 方法以获取统计信息。\n    - 可能会执行如 GotoResultPageCommand 等命令来处理分页结果。\n    - 为了调试目的，会以表格形式记录检索到的统计信息。\n\nExamples:\n\n    .. code:: RobotFramework\n\n        | Get Saa Port Statistic | Session=${Session} | StaItems=@{StaItems} |",
  "TesterLibrary.Protocol.saa.get_saa_session_block_statistic": "获取SAA协议会话块的统计信息\n\n该函数用于检索与指定SAA协议会话相关的统计信息，支持按需获取特定的统计项。它封装了底层调用 `_get_statictis()` 的逻辑，并基于传入的会话对象对数据进行过滤。\n\n参数:\n\n    Session (object 或 list/set/tuple of objects, 可选):\n        - 如果为 None，则不使用会话ID进行过滤，可能返回所有SAA会话块的统计信息。\n        - 如果为单个对象且具有 'Name' 属性，则使用其名称作为会话标识符。\n        - 如果为对象集合（list、set、tuple），则从每个对象中提取 'Name' 属性形成会话ID列表，用于过滤统计结果。\n\n    StaItems (list, str 或 None, 可选):\n        - 如果为 None，则返回默认的统计项（由系统决定）。\n        - 如果为字符串，则将其转换为包含一个元素的列表以指定一个统计项。\n        - 如果为列表，则指定要查询的具体统计项。可选统计项包括：\n\n            BindingState  \n            BlockSessionState  \n            CurrentlyAttempting  \n            CurrentlyIdle  \n            CurrentlyBound  \n            AttemptRate  \n            BindRate  \n            TxNeighborSolicitation  \n            RxNeighborSolicitation  \n            TxNeighborAdvertisement  \n            RxNeighborAdvertisement  \n            TxRouterSolicitation  \n            RxRouterSolicitation  \n            TxRouterAdvertisement  \n            RxRouterAdvertisement  \n            TotalAttempted  \n            TotalBound  \n            TotalDADFailed  \n            TotalRATimeoutFailed  \n            TotalFailed  \n\n返回值:\n\n    dict or pd.DataFrame or bool:\n        - 如果找到唯一匹配的一行数据：返回一个字典，键为统计项名称，值为对应的统计值。\n        - 如果找到多行匹配的数据：返回一个 pandas DataFrame，包含所有匹配的行，按提供的会话ID过滤。\n        - 如果没有找到匹配的数据：返回 False。\n\n异常:\n\n    ContinuableFailure: 如果调用底层接口失败，抛出此异常并附带失败信息。\n\n示例:\n\n    .. code:: RobotFramework\n\n        | Get Saa Session Block Statistic | Session=${Session} | StaItems=@{StaItems} |",
  "TesterLibrary.Protocol.saa.get_saa_session_statistic": "获取SAA协议会话的统计信息。\n\n该函数用于获取指定SAA协议会话的统计结果，支持根据会话对象和会话索引定位会话，并可指定需要查询的统计项。内部调用 `_get_statictis` 方法进行实际数据获取，目标统计类型固定为 'SaaSessionStatistics'。\n\nParameters:\n    Session (:obj:`Saa` or list or set or tuple of objects or None, optional):\n        SAA协议会话对象或对象集合。若提供会话对象，则使用其 Name 属性作为会话标识；\n        若为 None，则可能返回所有会话的统计数据。默认值为 None。\n\n    SessionId (int, optional):\n        会话索引，用于进一步区分不同的会话，默认值为 1。与会话标识符一起用于定位结果数据中的特定行。\n\n    StaItems (list or str or None, optional):\n        指定需要获取的统计项（列名）。如果为 None，则自动通过 ROM 属性确定；\n        如果是字符串，则会被转换为列表。必须是 'SaaSessionStatistics' 支持的属性子集。\n        目前支持的统计项包括：\n        \n            SessionState\n            MacAddress\n            VlanId\n            InnerVlanId\n            GlobalIpv6Address\n            LinkLocalIpv6Address\n            PrefixIpv6Address\n            PrefixLength\n            ValidLifeTime\n            PreferredLifeTime\n\nReturns:\n    dict or pd.DataFrame or bool:\n        - 如果仅找到一行匹配：返回一个字典，键为请求的统计项 (`StaItems`)，值为其对应的数据。\n        - 如果找到多行匹配：返回一个 pandas DataFrame，包含过滤后的 SAA 会话统计信息。\n        - 如果没有找到匹配结果：返回 False。\n\nRaises:\n    ContinuableFailure: 如果获取结果失败，抛出此异常并附带失败信息。\n\nExamples:\n    .. code:: RobotFramework\n\n        | Get Saa Session Statistic | Session=${Session} | StaItems=@{StaItems} |",
  "TesterLibrary.Protocol.twamp.create_twamp": "创建TWAMP协议会话对象并关联到指定端口\n\n该函数用于在指定的测试仪表端口上创建一个新的TWAMP（Two-Way Active Measurement Protocol）协议会话，并根据提供的参数对其进行初始化配置。创建成功后，该TWAMP会话对象会被注册到全局协议对象映射中，以便后续引用和操作。\n\nArgs:\n    Port (:obj:`Port`): 测试仪表端口对象，表示将在此端口上创建TWAMP协议会话，类型为object\n\nKeyword Args:\n    ActiveClient (bool): 是否启用TWAMP客户端或控制器仿真，默认为False\n        True: 启用客户端模式\n        False: 禁用客户端模式\n\n    ActiveServer (bool): 是否启用TWAMP服务器仿真，默认为False\n        True: 启用服务器模式\n        False: 禁用服务器模式\n\n    IpLayerVersion (str): 指定接口使用的IP版本，默认值：IPv4，可选值包括：\n        'IPv4' - 使用IPv4协议\n        'IPv6' - 使用IPv6协议\n\n    EnableLight (bool): 是否启用TWAMP Light协议，默认为False\n        True: 启用轻量级TWAMP协议\n        False: 使用标准TWAMP协议\n\n    Ipv6AddressType (str): IPv6地址类型，默认值：GLOBAL，可选值包括：\n        'GLOBAL' - 全局地址\n        'LINKLOCAL' - 链路本地地址\n\n    ScalabilityMode (str): 可扩展性模式选择，默认值：NORMAL，可选值包括：\n        'NORMAL' - 正常模式，保留所有测试统计信息\n        'DISCARDSTATISTICS' - 丢弃测试统计信息以降低处理器负载，适用于大规模测试\n\n    PeerIpv4Address (str): 对端设备(DUT)的IPv4地址，默认值：192.85.1.1，必须是合法的IPv4地址格式\n\n    PeerIpv6Address (str): 对端设备(DUT)的IPv6地址，默认值：2001::1，必须是合法的IPv6地址格式\n\n    ConnectionRetryInterval (int): 连接重试间隔时间（秒），默认值：30，取值范围：10-255\n\n    ConnectionRetryCount (int): 最大连接尝试次数，默认值：100，取值范围：0-65535\n\n    WillingToParticipate (bool): 设置modes字段中的对应位，表示是否愿意参与测量，默认值：True\n\n    Mode (list): 安全模式设置，默认值：['NONE', 'UNAUTNENTICATED']，可选值包括：\n        'NONE' - 不使用安全机制\n        'UNAUTNENTICATED' - 使用非认证模式\n\n    LocalUdpPorts (int): 本地UDP端口号，默认值：862，取值范围：0-65535\n\n    ServWaitTime (int): 服务端在未收到任何数据包的情况下保持控制连接的最大时间（秒），默认值：900，取值范围：0-65535\n\n    RefWaitTime (int): Session-Reflector在未收到任何数据包时保持已启动会话的最大时间（秒），默认值：900，取值范围：0-65535\n\nReturns:\n    (:obj:`Twamp`): TWAMP协议会话对象，可用于后续操作和查询，类型为object\n\nRaises:\n    ContinuableFailure: 当底层实现返回False时抛出异常，表示创建TWAMP会话失败\n\nExamples:\n    .. code:: RobotFramework\n\n        | Create Twamp | Port=${Port} | RefWaitTime=255 | ActiveClient=True | PeerIpv4Address=192.168.1.1 |\n\nSide Effects:\n    - 通过调用set_protocol_object_map方法将新创建的TWAMP会话对象注册到全局map_protocol_object字典中，便于后续通过句柄访问该对象",
  "TesterLibrary.Protocol.twamp.wait_twamp_state": "Waits for the specified TWAMP (Two-Way Active Measurement Protocol) session(s) to reach the desired state.\n\nThis function checks the state of one or more TWAMP sessions at regular intervals until the session(s)\nreach the expected state or a timeout occurs. If any of the sessions do not reach the desired state\nwithin the timeout period, an error may be raised depending on the associated abnormal_check decorator.\n\nParameters:\n-----------\nSessions : Session object or iterable of Session objects\n    A single TWAMP session or a collection (list, set, tuple) of multiple TWAMP sessions whose states\n    are to be monitored.\n\nState : str or None, optional\n    The target state that the TWAMP session(s) are expected to reach. If None, it typically means the\n    function will wait for a default or commonly accepted final state (e.g., 'started', 'established').\n    Supported values: 'DISABLED', 'IDLE', 'CONNECT', 'ESTABLISHED', 'SESSIONREQUESTED', 'STARTED'\n    Default: 'ESTABLISHED'\n\nInterval : int or float, optional\n    The time interval in seconds between successive checks of the session state.\n    Default: 1 second\n\nTimeOut : int, optional\n    The maximum time in seconds to wait for the session(s) to reach the desired state.\n    Default: 60 seconds\n\nReturns:\n--------\nbool\n    Returns True if all provided TWAMP session(s) have reached the desired state within the timeout period.\n\nRaises:\n-------\nContinuableFailure\n    If any session fails to reach the desired state within the timeout period, a ContinuableFailure exception is raised.",
  "TesterLibrary.Protocol.twamp.edit_twamp_test_session": "Edits one or more TWAMP (Two-Way Active Measurement Protocol) test sessions with the provided configuration parameters.\n\nArgs:\n    Twamps (:obj:`Twamp` or list of :obj:`Twamp`): A single TWAMP session object or a list of TWAMP session objects to be edited. Each object must have an `edit_test_session` method that applies the configuration changes.\n\nKeyword Args:\n    SourceUdpPort (int): UDP port from which TWAMP-Test packets are sent by the Session-Sender. Defaults to 5450. Range: 0-65535.\n    \n    DestinationUdpPort (int): UDP port to which TWAMP-Test packets are sent by the Session-Reflector. Defaults to 5450. Range: 0-65535.\n    \n    Timeout (int): Number of seconds that the Session-Reflector waits after receiving a Stop-Sessions message. Defaults to 30. Range: 0-65535.\n    \n    DurationMode (str): Type of duration mode for the test session. Defaults to 'SECONDS'. Valid values are:\n        - SECONDS\n        - PACKETS\n        - CONTINUOUS\n        \n    Duration (int): Number of seconds to run the test session if DurationMode is set to 'SECONDS'. Defaults to 60. Range: 0-65535.\n    \n    PacketCount (int): Number of packets to send during the test session if DurationMode is set to 'PACKETS'. Defaults to 100. Range: 0-65535.\n    \n    PaddingLength (int): Number of octets to append to the normal TWAMP-Test packet. Defaults to 128. Range: 27-9000.\n    \n    FrameRate (int): Rate at which to send TWAMP-Test packets in frames per second. Defaults to 10. Range: 1-1000.\n    \n    Dscp (int): DiffServ code point value used for marking packets. Defaults to 100. Range: 1-255.\n    \n    Ttl (int): Time To Live value for the packets. Defaults to 255. Range: 1-255.\n    \n    PaddingPattern (str): Type of data to use for padding. Defaults to 'RANDOM'. Valid values are:\n        - RANDOM\n        - USERDEFINED_STRING\n        - USERDEFINED_HEX\n        \n    UserDefinedString (str): Custom string to use as padding when PaddingPattern is set to 'USERDEFINED_STRING'. Defaults to 'xinertel.com'.\n    \n    UserDefinedHex (list): List of decimal values (0-255) representing custom hexadecimal data to use as padding when PaddingPattern is set to 'USERDEFINED_HEX'. Defaults to an empty list.\n\nReturns:\n    :obj:`TwampTestSessionConfig` or list of :obj:`TwampTestSessionConfig`: The result of editing the TWAMP test session(s). If a single TWAMP session was edited, the result is the configuration object returned by `edit_test_session`. If multiple sessions were edited, a list of configuration objects is returned.\n\nDescription:\n    This function facilitates batch or individual editing of TWAMP test sessions. If a single TWAMP object is provided, it is converted into a list internally for uniform processing. The function iterates through each TWAMP session, calling its `edit_test_session` method with the provided `**kwargs`. The resulting configurations are collected and returned. If only one session was edited, the single result is returned; otherwise, a list of results is returned.\n\nExamples:\n    .. code:: RobotFramework\n\n        | Edit Twamp Test Session | Twamps=${Twamps} | PaddingPattern=USERDEFINED_STRING |",
  "TesterLibrary.Protocol.twamp.wait_twamp_session_state": "等待所有指定的 TWAMP 会话状态达到一个或多个预期的状态。\n\n该函数用于轮询检查一组 TWAMP 会话的 'State' 属性，直到每个会话的状态变为期望的状态之一。如果在指定的超时时间内所有会话都达到了期望的状态，则返回 True；否则抛出 TesterException 异常。\n\n参数:\n- TestSessions (list 或其他可迭代对象): 一个或多个 TWAMP 会话对象（类型为 TwampTestSessionConfig 或其父类），其 'State' 属性将被监控。\n- State (str 或 list, 可选): 期望的会话状态或状态列表，默认为 'ACCEPTED'。支持的状态包括：\n    IDLE\n    ACCEPTED\n    REJECTED\n    INPROCESS\n    PAUSED\n  所有状态值将以字符串形式进行不区分大小写的比较。\n- Interval (int, 可选): 检查会话状态的时间间隔（单位：秒），默认为 1 秒。\n- TimeOut (int, 可选): 等待的最大时间（单位：秒），超过此时间仍未满足条件则抛出异常，默认为 60 秒。\n\n返回值:\n- bool: 如果所有会话在超时时间内达到任一期望状态，则返回 True；否则不返回，而是抛出 TesterException。\n\n抛出异常:\n- TesterException: 如果在指定的 TimeOut 时间内未能使所有会话达到期望状态。\n\n注意事项:\n- 此函数是 `_wait_state` 的封装，专门用于监控 TWAMP 会话的 'State' 属性。\n- 如果会话的 'State' 是 Enum 类型，则使用 Enum 的名称进行比较。\n- 每次检查时，若会话状态未匹配任何期望值，会通过 logging.info 输出当前状态。\n- 函数调用底层 C++ 实现（renix.wait_twamp_session_state），并根据结果决定是否抛出失败异常。\n\n示例:\n.. code:: RobotFramework\n\n    | Wait Twamp Session State | Sessions=${Sessions} | State=IDLE | Interval=2 | TimeOut=120 |",
  "TesterLibrary.Protocol.twamp.twamp_start": "Starts the TWAMP (Two-Way Active Measurement Protocol) sessions for the provided session objects.\n\nParameters:\n-----------\nSessions : list of Twamp session objects\n    A list containing TWAMP session objects. Each object must have a `start_twamp()` method that initiates the TWAMP process for that specific session. The function is designed to handle multiple sessions in a single call, allowing for batch initiation of TWAMP measurements.\n\nReturns:\n--------\nbool\n    Returns True if all TWAMP sessions were successfully initiated.\n    If any session fails to start, the function will raise a ContinuableFailure exception, indicating that the operation did not complete successfully.\n\nDescription:\n------------\nThis function serves as a wrapper to initiate TWAMP sessions across multiple session objects. It internally calls the `start_twamp()` method on each session object provided in the list. If any session fails to start, it raises an exception with a failure message including the function name. This allows for centralized error handling when starting multiple TWAMP sessions.\n\nExample:\n--------\n.. code:: RobotFramework\n\n    | Twamp Start | Sessions=${Sessions} |\n\n.. code:: Python\n\n    api = RenixAPI()\n    session1 = create_session(...)\n    session2 = create_session(...)\n    api.twamp_start([session1, session2])  # starts TWAMP on both sessions\n    True",
  "TesterLibrary.Protocol.twamp.twamp_stop": "Stops the TWAMP (Two-Way Active Measurement Protocol) sessions provided.\n\nParameters:\n-----------\nSessions : Union[list, set, tuple, object]\n    A single session object or a collection of session objects that support the `stop_twamp()` method.\n    If a single session is provided, it will be converted into a list containing that session.\n\nReturns:\n--------\nbool\n    Always returns True to indicate successful execution of the stop operation on all given sessions.\n\nDescription:\n------------\nThis function stops TWAMP measurements on the provided session(s). It accepts a single session or a collection \nof sessions (list, set, or tuple), and iterates through each session to invoke the `stop_twamp()` method. \nThe function ensures that all sessions are properly stopped and then returns True to indicate completion.\n\nRaises:\n-------\nContinuableFailure\n    If the result of stopping the sessions is False, an exception is raised with a failure message indicating\n    that the current function failed, using the name of this function from the frame stack.\n\nExample:\n--------\n.. code:: RobotFramework\n\n    | Twamp Stop | Sessions=${Sessions} |",
  "TesterLibrary.Protocol.twamp.twamp_start_session": "启动Twamp Test Session\n\nArgs:\n\n    Sessions(:obj:`Twamp` 或 list): 一个或多个twamp协议会话对象，类型可以是单个Twamp对象或包含多个Twamp对象的列表。\n\n    TestSessions(:obj:`TwampTestSessionConfig`): Twamp Test Session配置对象，用于定义测试会话的参数。\n\nKeyword Args:\n\n    ControlType (str): 操作类型，默认值：REQUEST，可选值包括：\n\n        REQUEST\n\n        START\n\n        STOP\n\n        PAUSE\n\n        RESUME\n\n        STARTTWAMP\n\n        STOPTWAMP\n\nReturns:\n\n    bool: 布尔值，表示操作是否成功（True/False）\n\nDescription:\n------------\n该函数用于启动一个或多个TWAMP（Two-Way Active Measurement Protocol）测试会话。它统一处理单个会话和多个会话的情况，并为每个会话调用其`start_session`方法，传入指定的测试会话配置和额外的关键字参数。\n\n如果提供的Sessions参数是一个单一的Twamp对象，则将其转换为列表以保证一致性处理。然后遍历所有会话对象，并逐个启动会话。\n\n在底层实现中，实际的操作由renix.twamp_start_session执行，本函数仅做封装及失败抛异常处理。\n\nExamples:\n---------\nRobotFramework 示例：\n.. code:: RobotFramework\n\n    | Twamp Start Session | Sessions=${Sessions} | TestSessions=${TestSessions} | ControlType=STOPTWAMP |\n\nPython 示例：\n>>> api = RenixAPI()\n>>> session1 = Twamp(...)\n>>> session2 = Twamp(...)\n>>> test_session = TwampTestSessionConfig(...)\n>>> api.twamp_start_session(session1, test_session)\nTrue\n>>> api.twamp_start_session([session1, session2], test_session, ControlType='START') \nTrue",
  "TesterLibrary.Protocol.twamp.twamp_stop_session": "Stops one or more TWAMP (Two-Way Active Measurement Protocol) test sessions.\n\nThis function is used to terminate specified TWAMP test sessions. It can accept a single session object or a list of session objects and applies the stop operation on each session individually by calling their internal `stop_session` method. The function supports flexible input types for the `Sessions` argument, ensuring uniform processing whether a single session or multiple sessions are provided.\n\nParameters:\n-----------\nSessions : Union[:obj:`Twamp`, list, set, tuple]\n    A single Twamp session object or a collection (list, set, tuple) of such objects representing the TWAMP sessions to be stopped.\n    If a single session is provided, it is converted into a list internally for consistent handling.\n\nTestSessions : :obj:`TwampTestSessionConfig`\n    An object representing the specific TWAMP test session configuration that needs to be stopped. This object is passed directly\n    to the `stop_session` method of each session and is used in determining which test session to terminate.\n\nKeyword Args:\n-------------\n**kwargs\n    Optional keyword arguments forwarded to the `stop_session` method of each session. One common parameter is:\n\n    ControlType : str, optional\n        Specifies the type of control command to send when stopping the session. Default: 'REQUEST'. Valid values include:\n\n            REQUEST\n\n            START\n\n            STOP\n\n            PAUSE\n\n            RESUME\n\n            STARTTWAMP\n\n            STOPTWAMP\n\nReturns:\n--------\nbool\n    Always returns True if the stop operation was successfully initiated for all given sessions. Returns False if any failure occurs during the process (e.g., invalid session object).\n\nRaises:\n-------\nContinuableFailure\n    If the underlying backend call (`renix.twamp_stop_session`) returns False, indicating a failure, this function raises a `ContinuableFailure` exception with an appropriate error message.\n\nExamples:\n---------\n.. code:: RobotFramework\n\n    | Twamp Stop Session | Sessions=${Sessions} | TestSessions=${TestSessions} | ControlType=STOPTWAMP |\n\nDescription:\n------------\nThe function iterates through all provided session objects and calls the `stop_session` method on each one with the provided `TestSessions` and optional keyword arguments. This ensures that all active TWAMP test sessions are properly terminated according to the protocol and implementation-specific logic within the session objects themselves.",
  "TesterLibrary.Protocol.twamp.twamp_request_session": "Initiates a TWAMP (Two-Way Active Measurement Protocol) session request for the provided session objects.\n\nThis function ensures that each session in the 'Sessions' collection is used to request a corresponding\ntest session using the provided 'TestSessions' parameter and any additional keyword arguments.\n\nParameters:\n-----------\nSessions : list, set, tuple or single object\n    A single session object or a collection of session objects for which test sessions are requested.\n    If not a collection, it will be converted into a list internally for uniform processing.\n\nTestSessions : object\n    The test session configuration or object that defines the parameters for the requested session.\n    This is passed directly to the `request_session` method of each session in `Sessions`.\n\n**kwargs : dict\n    Additional keyword arguments that may be needed for requesting the session. These are forwarded\n    to the `request_session` method of each session object.\n\nReturns:\n--------\nbool\n    Always returns True, indicating that the session request operation has been successfully initiated\n    for all provided sessions.\n\nDescription:\n------------\nThis function iterates over each session in the input `Sessions`, and calls the `request_session`\nmethod on each session with the provided `TestSessions` and optional `**kwargs`. It is typically used\nto initiate TWAMP test sessions in a controlled and configurable manner.\n\nExamples:\n---------\n.. code:: RobotFramework\n\n    | Twamp Request Session | Sessions=${Sessions} | TestSessions=${TestSessions} | ControlType=STOPTWAMP |",
  "TesterLibrary.Protocol.twamp.twamp_pause_session": "Pauses one or more TWAMP (Two-Way Active Measurement Protocol) test sessions.\n\nThis function is used to pause specified TWAMP sessions by invoking the underlying `pause_session` method of each session object. It supports both single session objects and iterable collections of session objects.\n\nParameters:\n-----------\nSessions : object or iterable\n    A single session object or an iterable (such as list, set, or tuple) containing session objects that need to be paused.\n\nTestSessions : object\n    The associated TwampTestSessionConfig object(s), used to identify or control the specific test instances related to the sessions being paused.\n\n**kwargs : dict, optional\n    Additional keyword arguments that may be passed to the underlying session's `pause_session` method. A notable argument is:\n\n    ControlType : str, optional\n        Specifies the operation type for controlling the session. Defaults to 'REQUEST'. Valid values include:\n\n            REQUEST\n\n            START\n\n            STOP\n\n            PAUSE\n\n            RESUME\n\n            STARTTWAMP\n\n            STOPTWAMP\n\nReturns:\n--------\nbool\n    Returns True if the pause operation was successfully initiated for all specified sessions.\n    Returns False if any session failed to pause.\n\nRaises:\n-------\nContinuableFailure\n    If the result of the operation is False, a ContinuableFailure exception is raised with a failure message indicating the function name where the failure occurred.\n\nExample Usage:\n--------------\n.. code:: RobotFramework\n\n    | Twamp Pause Session | Sessions=${Sessions} | TestSessions=${TestSessions} | ControlType=PAUSE |",
  "TesterLibrary.Protocol.twamp.twamp_resume_session": "Resumes one or more TWAMP (Two-Way Active Measurement Protocol) test sessions.\n\nArgs:\n    Sessions (:obj:`Twamp` or list, set, tuple of :obj:`Twamp`): A single TWAMP session object or a collection of TWAMP session objects to be resumed. If a single session is provided, it will be internally converted into a list for uniform processing.\n\n    TestSessions (:obj:`TwampTestSessionConfig`): The corresponding Twamp Test Session configuration object(s), used to reference or control specific test instances during the resumption process.\n\nKeyword Args:\n    ControlType (str, optional): Specifies the operation type for the session resumption. Defaults to 'REQUEST'. Valid values include:\n\n        REQUEST\n\n        START\n\n        STOP\n\n        PAUSE\n\n        RESUME\n\n        STARTTWAMP\n\n        STOPTWAMP\n\nReturns:\n    bool: True if all specified sessions were successfully resumed; False otherwise.\n\nExamples:\n    .. code:: RobotFramework\n\n        | Twamp Resume Session | Sessions=${Sessions} | TestSessions=${TestSessions} | ControlType=RESUME |",
  "TesterLibrary.Protocol.twamp.get_twamp_client_statistic": "获取Twamp Client统计结果\n\n该函数用于获取一个或多个TWAMP客户端会话的指定统计信息。通过此接口可以查询如会话状态、发送/接收的请求和响应等关键指标。\n\nArgs:\n\n    Sessions (:obj:`Twamp` 或 list 或 set 或 tuple 或 None, optional): \n        指定要查询的TWAMP会话对象。如果为None，则查询所有会话；如果为单个会话对象，则仅查询该会话；\n        如果为多个会话对象的集合（列表、集合、元组），则查询这些会话的统计信息。\n\n    StaItems (list 或 str 或 None, optional): \n        指定需要获取的统计项，类型为列表、字符串或None。若为None，则返回所有可用统计项；\n        若为字符串，则将其转换为单元素列表处理；若为列表，则只返回列表中包含的统计项。\n        支持的统计项包括：\n\n            State               会话当前状态\n            RxAcceptSession     接收到的会话接受数\n            RxFailedSession     接收到的失败会话数\n            RxStartAck          接收到的启动确认数\n            TxRequestSession    发送的会话请求次数\n            TxStartSession      发送的会话启动次数\n            TxStopSession       发送的会话停止次数\n\nReturns:\n\n    dict or pd.DataFrame or bool:\n        - 如果仅匹配到一个会话：返回dict，键为指定的统计项，值为对应值\n        - 如果匹配到多个会话：返回pandas.DataFrame，每行对应一个会话，列对应指定的统计项\n        - 如果未找到匹配的会话或无统计数据：返回False\n\nRaises:\n\n    ContinuableFailure: 当底层调用失败时抛出，表示可继续执行的失败异常\n\nExamples:\n    .. code:: RobotFramework\n\n        | Get Twamp Client Statistic | Session=${Session} | StaItems=@{StaItems} |\n\n        # 示例1: 获取单个会话的所有统计项\n        | ${stat}= | Get Twamp Client Statistic | Session=${twamp_session} | StaItems=None |\n\n        # 示例2: 获取多个会话的特定统计项\n        | ${stat}= | Get Twamp Client Statistic | Sessions=@{twamp_sessions} | StaItems=['TxStartSession', 'RxAcceptSession'] |\n\n        # 示例3: 获取所有会话的State和TxStopSession统计项\n        | ${stat}= | Get Twamp Client Statistic | Sessions=None | StaItems=['State', 'TxStopSession'] |",
  "TesterLibrary.Protocol.twamp.get_twamp_server_statistic": "获取Twamp Server统计结果\n\n该函数用于获取TWAMP（双向主动测量协议）服务器会话的统计数据，支持根据提供的会话对象和指定的统计项检索相关指标。\n\nArgs:\n    Sessions (object 或 list 或 set 或 tuple, optional): TWAMP协议会话对象或其集合。若为None，则不进行会话过滤；若为单个对象，则使用其名称作为标识符；若为列表、集合或元组，则提取其中所有会话对象的名称作为标识符。默认值：None\n    StaItems (list 或 str, optional): 需要获取的统计项（列名）。若为None，则查询所有可用的统计属性；若为字符串，则将其转换为包含该字符串的列表。统计项必须是有效属性的子集。默认值：None\n\n目前支持的统计项包括：\n    State\n    RxRequestSession\n    RxStartSession\n    RxStopSession\n    TxAcceptSession\n    TxFailedSession\n    TxStartAck\n\nReturns:\n    dict 或 pd.DataFrame 或 bool:\n        - 如果恰好找到一行匹配数据：返回一个字典，键为指定的StaItems，值为其对应的统计值。\n        - 如果找到多行匹配数据：返回一个pandas DataFrame，包含符合条件的TWAMP服务器统计信息。\n        - 如果未找到任何匹配结果：返回False。\n\nRaises:\n    TesterException: 如果内部方法在执行命令或检索数据时发生错误。\n    sqlite3.Error: 如果访问数据库以获取性能相关统计数据时出现问题。\n    KeyError: 如果索引过滤中使用的列名在结果DataFrame中不存在。\n\nSide Effects:\n    - 内部可能会刷新会话数据。\n    - 在处理分页结果时，可能执行GotoResultPageCommand命令。\n    - 使用time.sleep(3)确保页面切换时的数据一致性。\n    - 为了调试目的，会记录返回的DataFrame。\n\nExamples:\n    .. code:: RobotFramework\n\n        | Get Twamp Server Statistic | Session=${Session} | StaItems=@{StaItems} |",
  "TesterLibrary.Protocol.twamp.get_twamp_port_client_statistic": "获取TWAMP端口客户端统计信息。\n\n该函数用于检索指定端口的TWAMP（Two-Way Active Measurement Protocol）客户端侧统计结果。它是一个封装函数，内部调用 `_get_statictis` 方法，并指定统计类型为 'TwampPortClientStats'。函数会根据传入的端口对象提取端口句柄，并请求指定的统计项目。\n\n参数:\n    Ports (list, set, tuple, object 或 None):\n        - 如果为None：不指定特定端口，可能返回所有端口的统计信息。\n        - 如果是多个端口对象组成的列表、集合或元组：提取每个端口的 `Name` 属性作为 PortHandle 使用。\n        - 如果是单个端口对象：使用其 `Name` 属性作为 PortHandle。\n        默认值为 None。\n\n    StaItems (list 或 str):\n        - 指定需要获取的统计项（列名），必须是 'TwampPortClientStats' 中支持的统计项子集。\n        - 如果传入字符串，会被自动转换为包含该字符串的列表。\n        支持的统计项包括：\n\n            RxAcceptSession\n\n            RxFailedSession\n\n            RxStartAck\n\n            TxRequestSession\n\n            TxStartSession\n\n            TxStopSession\n\n返回值:\n    dict 或 pd.DataFrame 或 bool:\n        - 如果仅找到一行匹配数据：返回一个字典，键为统计项名称 (`StaItems`)，值为对应的统计值。\n        - 如果找到多行匹配数据：返回一个 pandas DataFrame，包含所有匹配的行，并按提供的索引和选择的统计项进行过滤。\n        - 如果没有找到匹配数据：返回 False。\n\n异常:\n    如果调用失败（即返回值为 False），函数将抛出一个 ContinuableFailure 异常。\n\n示例:\n    .. code:: RobotFramework\n\n        | Get Twamp Port Client Statistic | Ports=${Ports} | StaItems=@{StaItems} |\n\n另请参阅:\n    RenixLibrary.common.base.RenixAPI._get_statictis: 获取统计信息的底层实现方法，用于详细理解统计过滤与查询机制。",
  "TesterLibrary.Protocol.twamp.get_twamp_port_server_statistic": "获取TWAMP端口服务器统计信息\n\n该函数用于获取指定测试仪表端口上的TWAMP（Two-Way Active Measurement Protocol）服务器端统计结果。它通过调用底层接口查询相关数据，并返回匹配的统计项值。\n\n### 参数说明:\n\n- **Ports** (`Port` 或 Port对象列表/集合/元组, 可选):  \n  指定要查询的一个或多个测试仪表端口对象。每个端口对象必须包含 `Name` 属性，作为端口标识。若未提供此参数，则可能返回所有可用端口的统计信息，具体行为取决于后端实现。\n\n- **StaItems** (`list`, 可选):  \n  指定需要获取的统计项列表。支持以下统计项：\n\n    - `RxRequestSession`: 接收到的会话请求数量\n    - `RxStartSession`: 接收到的会话启动数量\n    - `RxStopSession`: 接收到的会话停止数量\n    - `TxAcceptSession`: 发送的会话接受响应数量\n    - `TxFailedSession`: 发送的会话失败响应数量\n    - `TxStartAck`: 发送的会话启动确认数量  \n\n  若未提供此参数，默认将查询所有可用统计项。\n\n### 返回值:\n\n- `dict`: 当查询结果只有一行匹配时，返回一个字典，键为指定的统计项名，值为对应的统计值。\n- `pandas.DataFrame`: 当查询结果有多行匹配时，返回一个包含过滤后的TWAMP端口服务器统计信息的DataFrame。\n- `False`: 如果没有找到任何匹配的统计信息，返回False。\n\n### 异常:\n\n- `TesterException`: 在执行命令或检索数据过程中发生错误时抛出。\n- `sqlite3.Error`: 如果访问数据库时发生异常（如列不存在等）。\n- `KeyError`: 如果筛选条件中使用了不存在于结果中的列名。\n\n### 示例:\n\n```robotframework\n| Get Twamp Port Server Statistic | Ports=${port1} | StaItems=@{['RxRequestSession', 'TxAcceptSession']} |\n```\n\n### 注意事项:\n\n- 此函数内部可能会通过 `.get()` 方法刷新数据。\n- 若结果分页存在，会自动执行导航至结果页面的操作（例如：GotoResultPageCommand）。\n- 查询结果会被以表格形式记录在日志中，用于调试和验证。",
  "TesterLibrary.Protocol.twamp.get_twamp_test_session_statistic": "Retrieves statistical data for TWAMP (Two-Way Active Measurement Protocol) test sessions.\n\nThis function is designed to fetch statistics for one or more TWAMP test sessions, acting as a user-friendly interface to the internal `_get_statictis` method. It supports filtering by session objects and selecting specific statistical items to retrieve.\n\nParameters:\n    Twamps (:obj:`Twamp` or list or set or tuple of :obj:`Twamp` objects, optional):\n        Specifies the TWAMP session(s) for which statistics are to be retrieved.\n        - If None (default), statistics may be fetched broadly across all sessions.\n        - If a single Twamp object, its Name attribute is used as the session identifier.\n        - If a list, set, or tuple of Twamp objects, it extracts the Name attribute from each object to form a list of session IDs.\n    StaItems (list or str, optional):\n        Specifies which statistical items (columns) to retrieve for the TWAMP sessions.\n        - If None (default), all available properties are queried.\n        - If a string, it is converted into a single-item list.\n        - If a list, must be a subset of the available statistical properties for TWAMP test sessions.\n        Supported statistical items include:\n            AverageJitter\n            AverageLatency\n            AverageServerProcessingTime\n            MaximumJitter\n            MaximumLatency\n            MaximumServerProcessingTime\n            MinimumJitter\n            MinimumLatency\n            MinimumServerProcessingTime\n\nReturns:\n    dict or pd.DataFrame or bool:\n        - If exactly one matching TWAMP session's statistics are found: Returns a dictionary where keys correspond to the requested `StaItems`.\n        - If multiple sessions match the criteria: Returns a pandas DataFrame containing rows for each matching session, with columns corresponding to the requested `StaItems`.\n        - If no matching TWAMP session statistics are found: Returns False.\n\nRaises:\n    ContinuableFailure: If the internal call to `renix.get_twamp_test_session_statistic` returns False, indicating failure in retrieving statistics.\n\nExamples:\n    .. code:: RobotFramework\n\n        | Get Twamp Test Session Statistic | Twamps=${Twamps} | StaItems=@{StaItems} |\n\nSide Effects:\n    - Internally modifies state by potentially calling `.get()` on various objects to refresh their data.\n    - Executes commands like GotoResultPageCommand for navigating paginated results.\n    - Uses time.sleep(3) to ensure data consistency when navigating between pages in ResultView mode.\n    - Logs the resulting DataFrame in a tabulated format for debugging purposes.",
  "TesterLibrary.Protocol.twamp.get_twamp_port_test_session_statistic": "获取TWAMP端口测试会话的统计结果。\n\n该函数用于获取指定端口对象上的TWAMP（Two-Way Active Measurement Protocol）测试会话的统计信息，并支持指定需要返回的统计项。它通过调用底层方法 `_get_statistics` 来收集数据，并能够根据传入的端口和统计项进行过滤。\n\nParameters:\n    Ports (:obj:`Port` 或 list/set/tuple of :obj:`Port`, optional): 要查询统计信息的测试仪表端口对象或端口对象集合。\n        每个端口对象必须包含一个 `Name` 属性，用于作为标识符。如果未提供，则不按端口过滤统计信息。\n\n    StaItems (list, optional): 需要获取的统计项列表。支持以下统计项：\n\n        - AverageJitter\n        - AverageLatency\n        - AverageServerProcessingTime\n        - MaximumJitter\n        - MaximumLatency\n        - MaximumServerProcessingTime\n        - MinimumJitter\n        - MinimumLatency\n        - MinimumServerProcessingTime\n\n        如果未提供 StaItems（默认值为 None），则返回所有可用统计项。\n\nReturns:\n    dict or pd.DataFrame or bool:\n        - 如果恰好匹配一行数据：返回一个字典，键为请求的 StaItems，值为对应的统计值。\n        - 如果匹配多行数据：返回一个 pandas DataFrame，包含所有匹配的统计结果。\n        - 如果没有找到匹配的数据：返回 False。\n\nRaises:\n    ContinuableFailure: 如果执行失败（即底层返回 False），抛出此异常以允许框架继续执行后续操作。\n    TesterException: 如果命令执行过程中发生错误（如内部调用失败）。\n    sqlite3.Error: 如果在从数据库中检索性能数据时发生错误。\n    KeyError: 如果提供的列名不在结果数据中。\n\nSide Effects:\n    - 内部可能会调用 `.get()` 方法来刷新数据。\n    - 当遍历分页结果时，可能执行 GotoResultPageCommand。\n    - 为了确保数据一致性，在访问结果视图时可能会调用 time.sleep(3)。\n    - 会将最终的结果 DataFrame 以表格形式记录日志以便调试。\n\nExamples:\n    .. code:: RobotFramework\n\n        | Get Twamp Port Test Session Statistic | Ports=${Ports} | StaItems=@{StaItems} |",
  "TesterLibrary.Protocol.twamp.get_twamp_state_statistic": "获取TWAMP（Two-Way Active Measurement Protocol）状态统计信息。\n\n该函数用于获取指定端口的TWAMP连接状态统计数据，是对`_get_statictis`函数的一个封装调用，专门用于查询'TwampStateStats'类型的统计信息。支持按端口过滤以及指定需要返回的统计项。\n\n参数:\n    Ports (:obj:`Port` 或 Port对象的列表/集合/元组, 可选):\n        指定要查询的测试仪表端口对象或多个端口对象的集合。\n        如果未提供（默认为None），则不按端口进行过滤。\n        支持单个Port对象或多个Port对象的容器类型（如list、set、tuple）。\n\n    StaItems (list, str 或 None, 可选):\n        需要获取的统计项目列表，可选值包括：\n\n            Connect\n            Established\n            Idle\n            SessionRequested\n            ConnectionsDown\n            ConnectionsUp\n\n        如果为字符串，则会被自动转换为只包含一个元素的列表。\n        如果为None（默认），则返回所有可用的TwampStateStats统计项。\n\n返回值:\n    dict 或 pandas.DataFrame 或 bool:\n        - 若仅匹配到一行数据（例如指定特定PortHandle），则返回一个字典，键为StaItems，值为对应的统计值。\n        - 若匹配到多行数据（例如多个端口或多条会话），则返回一个pandas.DataFrame，每行对应一条记录。\n        - 若未找到任何匹配结果，则返回False。\n\n异常:\n    - TesterException: 在执行命令或获取数据过程中发生错误时抛出。\n    - sqlite3.Error: 如果在内部性能数据收集过程中访问数据库失败，可能会抛出此异常。\n    - KeyError: 如果指定的索引列（PortHandle）在返回的DataFrame中不存在，将抛出此异常。\n\n副作用:\n    - 内部可能通过调用`.get()`方法刷新或收集性能数据。\n    - 在处理分页结果时，可能执行GotoResultPageCommand命令。\n    - 如果使用的是ResultView模式，在页面切换时会调用time.sleep(3)以保证数据一致性。\n    - 会将最终结果以表格形式记录在日志中，便于调试。\n\n注意:\n    本函数固定使用Statictis='TwampStateStats'和Idx={'PortHandle': PortID}参数调用底层接口，\n    因此主要可配置参数为Ports和StaItems。\n\n示例:\n    .. code:: RobotFramework\n\n        | Get Twamp State Statistic | Ports=${Ports} | StaItems=@{StaItems} |",
  "TesterLibrary.Protocol.vxlan.create_vxlan": "创建并配置与指定端口关联的 VXLAN 协议实例。\n\n该函数使用提供的 `Port` 作为父对象初始化一个 VXLAN 协议配置对象，并通过关键字参数 (`**kwargs`) 提供额外的配置选项。新创建的 VXLAN 对象将注册到全局协议对象映射中，以便后续通过其句柄进行引用。\n\nParameters:\n-----------\nPort : object\n    父对象或上层对象（通常是测试仪表端口），该 VXLAN 实例将与其关联。这在协议栈中建立了层次关系。\n\n**kwargs : dict\n    任意关键字参数，用于设置 VXLAN 对象的其他属性。只有 Vxlan 类中已定义的属性会被更新；未知属性将被忽略。\n\nReturns:\n--------\nVxlan\n    新创建并配置好的 Vxlan 协议对象。该对象可以进一步操作或通过其句柄从全局协议映射中引用。\n\nRaises:\n-------\nContinuableFailure\n    如果底层调用失败，则抛出可继续执行的异常，并附带函数名和错误信息。\n\nDescription:\n------------\n内部处理流程如下：\n1. 使用给定的 `Port` 创建一个新的 Vxlan 对象。\n2. 通过 `**kwargs` 应用传入的配置参数。\n3. 将新创建的 Vxlan 对象注册到全局协议对象映射中，使用其句柄作为键。\n\nNote:\n-----\n- 确保通过 `**kwargs` 传递的任何键都对应 Vxlan 类的有效属性。\n- 返回的 Vxlan 对象可以通过其句柄从全局映射中检索。\n- 若底层调用返回 False，表示创建失败，将引发异常。",
  "TesterLibrary.Protocol.vxlan.edit_vxlan": "编辑现有的VxLAN协议会话对象，更新其属性值。\n\n该函数用于修改已创建的VxLAN协议会话对象的配置参数。通过传入Session对象和任意数量的关键字参数（kwargs），可以动态地更新会话中的特定属性。\n\n参数：\n- Session (:obj:`Vxlan`): 已存在的VxLAN协议会话对象，类型为object，表示需要修改的会话。\n\n关键字参数（可选）：\n\n- Name (str): 设置或修改VxLAN会话的名称。\n- Enable (bool): 控制是否启用该VxLAN会话，默认值：True。\n- AutoUdpSourcePort (bool): 控制是否自动计算UDP源端口，默认值：True。\n- UdpSourcePort (int): 配置手动指定的UDP源端口号，取值范围为3-4095，默认值：1025。\n- EnableUdpChecksum (bool): 是否启用UDP校验和计算，默认值：False。\n- EvpnLearning (bool): 是否启用EVPN学习功能，默认值：False。\n- OvsdbLearning (bool): 是否启用OVSDB学习功能，默认值：False。\n- MulticastType (str): 指定组播协议类型，默认值：IGMP，有效取值包括：\n    - IGMP\n    - PIM\n    - MLD\n- VtepTunnelIp (str): 指定VTEP隧道IP地址来源，默认值：INTERFACEIP，有效取值包括：\n    - INTERFACEIP：使用接口IP\n    - ROUTERID：使用路由器ID\n- EnableIrb (bool): 是否启用IRB（集成路由桥接）功能，默认值：False。\n- RPAddress (str): 当MulticastType为PIM时，设置IPv4类型的RP地址，默认值：192.0.0.1。\n- RPIpv6Address (str): 当MulticastType为PIM时，设置IPv6类型的RP地址，默认值：2000::1。\n- IrbMode (str): 指定IRB模式，默认值：Symmetric（对称模式），当前仅支持该模式。\n\n返回值：\n- (:obj:`Vxlan`): 返回修改后的VxLAN协议会话对象，类型为object。\n\n异常：\n- 如果底层API调用失败，将抛出ContinuableFailure异常。\n\n示例：\n.. code:: RobotFramework\n\n    | Edit Vxlan | Session=${vxlan_session} | Name=NewVXLANName | Enable=False | UdpSourcePort=2048 |",
  "TesterLibrary.Protocol.vxlan.create_vxlan_segment": "创建Vxlan Segment对象，用于配置VXLAN协议的相关参数。\n\n该函数是一个封装方法，调用底层`renix.create_vxlan_segment`函数来创建并返回一个VXLAN Segment配置对象。通过提供可选的关键字参数，用户可以自定义VXLAN Segment的行为，包括VNI设置、通信类型、L3VNI配置等。\n\nKeyword Args:\n\n    Name (str): Vxlan协会话名称，类型为字符串。\n\n    Enable (bool): 是否启用Vxlan协议会话，默认值：True。\n\n    StartVni (int): 起始VNI值，取值范围：0-16777215，默认值：0。\n\n    VniCount (int): VNI数量，表示要生成的VNI实例个数，取值范围：1-65535，默认值：1。\n\n    VniStep (int): VNI步长，表示每个新VNI之间的递增值，取值范围：1-65535，默认值：1。\n\n    CommunicationType (str): 通信方式或学习模式，可选值包括UNICAST、MULTICAST、VxlanEVPN，默认值：UNICAST。\n\n    VniDistributionType (str): VNI在不同VPN之间的分配方式，可选值包括ROUNDROBIN（轮询）和LINEAR（线性），默认值：ROUNDROBIN。\n\n    EnableL3Vni (bool): 是否启用L3VNI功能，默认值：False。\n\n    StartL3Vni (int): 起始L3VNI值，仅在启用了L3VNI时有效，取值范围：1-16777215，默认值：1。\n\n    L3VniStep (int): L3VNI步长，取值范围：1-16777215，默认值：1。\n\n    L3VniCount (int): L3VNI数量，取值范围：1-65535，默认值：1。\n\n    VniTrafficType (str): 流端点模式，决定流量是L2、L3还是两者都支持，可选值包括L2VNI、L3VNI、L2AndL3VNI，默认值：L2VNI。\n\n    EnableVmArp (bool): 是否启用VM ARP功能，默认值：False。\n\nReturns:\n\n    (:obj:`VxlanSegmentConfig`): 创建的Vxlan Segment配置对象，可用于进一步配置或集成到更大的网络测试结构中。\n\nExamples:\n    .. code:: RobotFramework\n\n        | Create Vxlan Segment | Port=${Port} | StartVni=1000 | VniCount=5 | CommunicationType=MULTICAST |",
  "TesterLibrary.Protocol.vxlan.binding_vxlan_multicast_group": "绑定VXLAN Segment到指定的Multicast Group\n\n该函数用于将一个或多个VXLAN Segment对象绑定到指定的Multicast Group。  \n它封装了底层`Vxlan.binding_multicast_group`方法，支持传入单个对象或对象列表形式的Segment和Multicast Group。  \n内部会将输入统一转换为列表格式后，再交由底层逻辑执行绑定操作。\n\n参数:\n    Segments (:obj:`VxlanSegmentConfig` 或 list of :obj:`VxlanSegmentConfig`):\n        一个或多个要绑定的VXLAN Segment对象。每个对象必须包含'handle'属性。\n        如果传入单个对象，函数内部会自动将其转换为列表。\n        \n    MulticastGroups (:obj:`Ipv4MulticastGroup` 或 list of :obj:`Ipv4MulticastGroup`):\n        一个或多个要关联的Multicast Group对象。每个对象必须包含'handle'属性。\n        如果传入单个对象，函数内部会自动将其转换为列表。\n\n返回值:\n    bool: 绑定操作的结果，若命令成功执行则返回True，否则抛出异常。\n\n注意事项:\n    - 所有传入的对象必须具有有效的'handle'属性。\n    - 函数不验证'handle'是否有效或配置正确。\n    - 实际绑定操作由`Vxlan.binding_multicast_group`完成，其通过调用相关命令实现VXLAN Segment与Multicast Group的绑定。\n\n示例:\n    .. code:: RobotFramework\n\n        | Binding Vxlan Multicast Group | Segments=${Segments} | MulticastGroups=${MulticastGroups} |",
  "TesterLibrary.Protocol.vxlan.binding_vxlan_vm": "绑定Vxlan Vm对象，将虚拟机（VM）或接口与VXLAN网段进行关联，用于在网络测试中建立基于VXLAN的连接。\n\n参数:\n    Segments (object 或 list of objects): 单个或多个VXLAN Segment对象。每个对象必须包含一个 'handle' 属性，表示VXLAN网段的唯一标识符。\n    Interfaces (object 或 list of objects): 单个或多个Interface/VM对象。每个对象必须包含一个 'handle' 属性，表示VM或接口的唯一标识符。\n\n返回值:\n    bool: 如果绑定操作成功则返回True，否则返回False。\n\n注意:\n    - 如果Segments或Interfaces不是列表类型，则会自动转换为列表形式。\n    - Segments和Interfaces中的元素顺序应一一对应，即Interfaces中的每个VM/接口handle将依次绑定到Segments中对应的VXLAN网段handle。\n    - 该函数在失败时会抛出ContinuableFailure异常，调用者需要适当处理异常情况。\n\n示例:\n    .. code:: RobotFramework\n\n        | Binding Vxlan Vm | Segments=${Segments} | Interfaces=${Interfaces} |",
  "TesterLibrary.Protocol.vxlan.binding_vxlan_vtep": "绑定指定的 VXLAN 隧道端点 (VTEP) 到给定的 VXLAN 接口。\n\n此函数用于将一个或多个 VTEP 对象绑定到对应的 VXLAN 接口对象上，通常在涉及 VXLAN 协议配置或验证的测试自动化场景中使用。该函数确保输入的 VTEP 和接口参数为列表格式，并将其传递给底层 :meth:`Vxlan.binding_vtep` 类方法执行绑定操作。\n\n参数:\n\n    Vteps (object 或 list of objects): 表示 VXLAN 隧道端点的一个或多个对象。每个对象必须包含一个 `handle` 属性，用于在系统中唯一标识该对象。如果传入的是单个对象，则会在内部转换为列表格式处理。\n\n    Interfaces (object 或 list of objects): 与 VTEPs 绑定的一个或多个 VXLAN 接口对象。每个对象必须包含一个 `handle` 属性，用于在系统中唯一标识该对象。如果传入的是单个对象，则会在内部转换为列表格式处理。\n\n返回值:\n\n    bool: 如果绑定操作成功执行，则返回 ``True``；否则返回 ``False``。\n\n示例:\n    .. code:: RobotFramework\n\n        | Binding Vxlan Vtep | Vteps=${Vxlan} | Interfaces=${Interfaces} |\n\n异常:\n    如果绑定失败，函数会抛出一个可继续执行的失败异常 (:class:`ContinuableFailure`)，并附带相关的错误信息。",
  "TesterLibrary.Protocol.vxlan.start_vxlan_ping": "启动Vxlan Ping\n\n该函数用于在一个或多个指定的VXLAN接口上启动Ping操作。如果传入单个接口对象，会自动将其转换为列表以保持一致性。支持通过关键字参数传递自定义配置来控制Ping行为。\n\nArgs:\n\n    Interfaces (:obj:`Interface` 或 list): 单个Interface对象或Interface对象列表。每个Interface对象必须包含一个唯一标识接口的`handle`属性。\n\nKeyword Args:\n\n    FrameCount (int): 发送的Ping帧数量，默认值：1，取值范围：1-1000。\n    \n    TimeInterval (int): 每个Ping帧之间的时间间隔（单位：秒），默认值：1，取值范围：1-10。\n\nReturns:\n\n    bool: 如果Ping操作在所有指定接口上成功启动，则返回True；否则返回False。\n\nExamples:\n    .. code:: RobotFramework\n\n        | Start Vxlan Ping | Interfaces=${Interface} |\n\n内部说明:\n该函数是对 :meth:`RenixLibrary.protocol.vxlan.Vxlan.start_ping` 的封装调用，实际通过 `VxlanStartPingCommand` 向设备发送启动Ping操作的控制信号。",
  "TesterLibrary.Protocol.vxlan.stop_vxlan_ping": "..  function:: TesterLibrary.Protocol.vxlan.stop_vxlan_ping(Interfaces, **kwargs)\n\n    停止在指定的 VXLAN 接口上正在进行的 Ping 操作。该函数是对底层 `Vxlan.stop_ping` 方法的封装调用，用于统一处理单个或多个接口的停止操作。如果传入的是单个接口对象，它会被自动转换为列表形式进行处理。\n\n    :param Interfaces: 一个 Interface 对象或者 Interface 对象列表，表示需要停止 Ping 的 VXLAN 接口。\n                       每个 Interface 对象必须包含一个 `handle` 属性，用于唯一标识系统中的接口。\n    :param kwargs: 可选的关键字参数，直接传递给底层命令构造器（如 `VxlanStopPingCommand`），用于定制停止 Ping 行为。\n                   支持的关键字参数包括：\n                   \n                   - FrameCount (int): 发送帧的数量，默认值：1，取值范围：1-1000\n                   - TimeInterval (int): 帧之间的时间间隔（单位：秒），默认值：1，取值范围：1-10\n\n    :return: 如果成功在所有指定接口上停止 Ping 操作，则返回 `True`。若失败，可能抛出异常或返回 `False`，具体取决于底层实现。\n\n    :raises ContinuableFailure: 如果底层执行返回 `False`，将抛出 `ContinuableFailure` 异常，表示操作失败但测试可以继续执行。\n\n    示例:\n        .. code:: RobotFramework\n\n            | Stop Vxlan Ping | Interfaces=${Interface} |\n\n    注意事项:\n        - 该方法装饰有 `@abnormal_check()`，用于处理执行过程中可能出现的异常情况。\n        - 确保传入的 Interface 对象具有有效的 `handle` 属性，否则可能导致操作失败。",
  "TesterLibrary.Protocol.vxlan.get_vxlan_vm_property": "获取Vxlan Vm Property对象\n\n该函数用于检索与指定Interface关联的VxlanVmProperty对象。如果提供的Interface是一个列表，则使用列表中的第一个元素。函数会从Interface中查找并返回第一个类型为'VxlanVmProperty'的子对象。\n\nArgs:\n\n    Interface (:obj:`Interface` or list): Interface对象或包含Interface对象的列表。\n        如果是列表，则仅使用第一个元素作为输入。\n\nReturns:\n\n    (:obj:`VxlanVmProperty`): 一个类型为VxlanVmProperty的对象，表示与给定Interface关联的第一个符合条件的子对象。\n\nRaises:\n\n    IndexError: 如果Interface没有类型为'VxlanVmProperty'的子对象，则会引发索引错误。\n    ContinuableFailure: 如果底层API调用失败，则抛出可继续执行的失败异常。\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${Vm} | Get Vxlan Vm Property | Interface=${Interface} |\n        | Edit Configs | ${Vm} | OverrideAttachedVtepIp=True | AttachedVtepAddr=3.3.3.3 | AttachedIp6VtepAddr=2022::2 |",
  "TesterLibrary.Protocol.vxlan.get_vxlan_vm_point": "Retrieves the IPv4 layer associated with the VM interface linked to the specified VXLAN object.\n\nThis function finds the VM interface related to the given VXLAN by checking its target relationships,\nthen returns the first IPv4 layer configured on that interface.\n\nParameters:\n-----------\nVxlan : object\n    A VXLAN object for which the associated VM interface's IPv4 layer is to be retrieved.\n    This object must have a valid session and be properly configured in the test environment.\n\nReturns:\n--------\nobject\n    The IPv4 layer (Ipv4Layer) object associated with the VM interface connected to the given VXLAN.\n\nRaises:\n-------\nContinuableFailure\n    If the underlying call to `renix.get_vxlan_vm_point` returns False, indicating a failure in retrieving the IPv4 layer.\nIndexError\n    If no target interface or IPv4 layer is found during traversal.\n\nExamples:\n---------\n.. code:: RobotFramework\n\n    | Get Vxlan Vm Point | Vxlan=${Vxlan} |",
  "TesterLibrary.Protocol.vxlan.get_vxlan_statistic": "获取测试仪表VXLAN统计信息\n\n该函数用于获取指定VXLAN会话的统计信息，支持按需选择统计项。可用于查询单个或多个会话的统计结果，并根据情况返回字典、DataFrame 或布尔值。\n\nArgs:\n\n    Session (object or list or set or tuple or None):\n        VXLAN协议会话对象或其集合。每个会话对象必须包含 `Name` 属性，用于唯一标识会话。\n        如果为 None，则不指定具体会话，可能返回所有会话的统计信息。\n\n    StaItems (list or str or None):\n        指定需要获取的统计项（列名）。如果为 None，则返回所有可用统计项。\n        支持的统计项包括：\n\n            VtepId: VXLAN会话的名称\n\n            VtepState: VXLAN会话的状态\n\n            TotalVmCount: VM总数\n\n            ResolvedVmCount: 已解析VM数量\n\n            UnresolvedVmCount: 未解析VM数量\n\n        如果传入字符串，将自动转换为列表处理。\n\n    Mode (bool, optional):\n        控制是否在非ResultView模式下刷新或收集统计数据，默认为 True。\n\nReturns:\n\n    dict or pd.DataFrame or bool:\n        - 如果只有一行匹配结果：返回一个字典，键对应所选的 `StaItems`，值为其对应的统计值\n        - 如果有多个匹配结果：返回一个 pandas DataFrame，包含所有匹配会话的统计信息\n        - 如果没有匹配结果：返回 False\n\nRaises:\n\n    ContinuableFailure: 当统计信息获取失败时抛出，表示可继续执行的失败\n\n    TesterException: 如果在命令执行或数据检索过程中发生异常\n\n    sqlite3.Error: 如果相关数据库访问出现错误\n\n    KeyError: 如果索引中引用了不存在于DataFrame中的列名\n\nSide Effects:\n\n    - 可能调用内部方法如 `.get()` 来刷新对象数据\n    - 执行分页导航命令（如 GotoResultPageCommand）以获取完整数据\n    - 使用 time.sleep(3) 确保页面切换时的数据一致性\n    - 将最终结果以表格形式记录日志以便调试\n\nExamples:\n\n    .. code:: RobotFramework\n\n        | Subscribe Result |\n        | Start Protocol |\n        | Sleep | 10 |\n        | Stop Protocol |\n        | Sleep | 3 |\n        | ${Port} | Get Ports |\n        | ${Session} | Get Session | Ports=@{Port} | Protocols=vxlan |\n        | ${StaItems} | Create List | TotalVmCount | ResolvedVmCount |\n        | &{Result} | Get Vxlan Statistic | Session=${Session} | StaItems=@{StaItems} |",
  "TesterLibrary.Protocol.vxlan.wait_vxlan_state": "等待VXLAN协议会话达到指定状态\n\nArgs:\n\n    Sessions (:obj:`Vxlan` 或 iterable): VXLAN协议会话对象或可迭代的会话对象集合（如 list, set, tuple）。每个会话对象必须包含 `wait_session_state` 方法。\n\n    State (str, optional): 等待VXLAN协议会话达到的目标状态。默认值为 'STARTED'，也支持 'STOPPED' 状态。\n\n    Interval (int 或 float, optional): 查询协议会话状态的时间间隔，单位为秒，默认值为 1 秒。\n\n    TimeOut (int, optional): 等待协议会话状态的超时时间，单位为秒，默认值为 60 秒。如果在指定时间内未达到目标状态，可能会抛出异常，具体行为取决于底层实现。\n\nReturns:\n\n    bool: 如果所有VXLAN会话均成功达到指定状态，则返回 True；否则根据底层实现可能抛出异常或返回 False。\n\nRaises:\n\n    ContinuableFailure: 当底层调用返回 False 时，将抛出此异常，表示函数未能成功完成操作。\n\nExamples:\n    .. code:: RobotFramework\n\n        | Wait Vxlan State | Sessions=${Sessions} | State=STARTED | Interval=2 | TimeOut=120 |",
  "TesterLibrary.Protocol.y1731.create_y1731": "创建Y1731协议会话对象，并将其与指定端口关联\n\n该函数用于初始化一个新的Y1731协议配置对象，并使用提供的端口作为协议栈的上层（父对象）。该函数还允许通过关键字参数对Y1731会话进行可选的自定义配置。创建完成后，该函数会更新全局的协议对象映射表，添加或更新该Y1731会话的条目。\n\nArgs:\n    Port (:obj:`Port`): 测试仪表端口对象，通常表示物理或逻辑端口，类型为object\n\nKeyword Args:\n    NextHop (str): 下一跳目标，默认值：DUT，可选值包括：\n\n        DUT: 表示将数据包转发给被测设备\n\n        Interface_X: 接口对象的句柄，表示转发到特定接口\n\n    **kwargs (dict, optional): 任意关键字参数，用于设置Y1731会话对象的属性。只有在Y1731会话对象中存在的属性才能通过此方式设置。\n\nReturns:\n    (:obj:`Y1731`): 新创建并配置完成的Y1731协议会话对象，类型为object\n\nSide Effects:\n    - 修改全局变量 `map_protocol_object`，将新创建的Y1731会话以句柄为键添加或更新到协议对象映射表中\n\nRaises:\n    ContinuableFailure: 如果底层调用失败，则抛出可继续执行的异常，错误信息包含函数名\n\nDescription:\n    此函数封装了Y1731协议配置的创建过程，并确保其正确注册到全局协议映射表中。它通常用于涉及基于Y1731服务或诊断的测试场景设置。\n\nExamples:\n    .. code:: RobotFramework\n\n        | Create Y1731 | Port=${Port} | DADTransmitCount=255 |",
  "TesterLibrary.Protocol.y1731.wait_y1731_state": "等待Y.1731协议会话达到指定的状态。\n\n该函数用于阻塞执行，直到一个或多个Y.1731协议会话对象达到指定的状态。如果提供的`Sessions`参数不是可迭代对象，则会被转换为列表。根据传入的会话对象类型不同，状态监测逻辑可能有所不同，默认情况下会检查会话的“State”属性。\n\n参数:\n- Sessions (list or :obj:`Y1731`): 一个或多个Y.1731协议会话对象的列表。若传入单个会话对象，将自动转换为列表。\n- State (str, optional): 等待的目标状态。默认为 'RUNNING'。支持以下状态：\n    - DISABLED\n    - IDLE\n    - RUNNING\n  可以传入其中一个状态值，也可以传入包含多个状态的字符串列表作为目标集合。\n- Interval (int, optional): 检查会话状态的时间间隔（单位：秒）。默认为1秒。\n- TimeOut (int, optional): 等待超时时间（单位：秒）。默认为60秒。如果在设定时间内未达到指定状态，将抛出TesterException异常。\n\n返回值:\n- bool: 如果所有会话在超时时间内达到指定状态，返回True；否则不返回，而是抛出异常。\n\n异常:\n- ContinuableFailure: 如果调用底层接口失败 (`result == False`)，则抛出此异常，并附带函数名作为错误信息的一部分。\n\n注意事项:\n- 实际的状态轮询和检测逻辑由底层函数 `_wait_state` 处理。\n- 如果 `Sessions` 中的会话对象是 Y1731ProtocolConfig 类型，则函数会检查其 'State' 属性。\n- 对于其他类型的会话对象，函数仍然尝试按照相同逻辑进行状态检测。\n- 支持传入字符串形式的整数参数（如 \"2\"），内部会自动转换为整数。\n\n示例:\n.. code:: RobotFramework\n\n    | Wait Y1731 State | Sessions=${Sessions} | State=IDLE | Interval=2 | TimeOut=120 |",
  "TesterLibrary.Protocol.y1731.edit_y1731_port_config": "修改Y.1731端口配置，用于调整一个或多个测试仪表端口的Y.1731协议相关参数。\n\nArgs:\n\n    Ports (:obj:`Port` 或 :obj:`list`): 测试仪表端口对象或端口对象列表。类型为object。\n                                      如果传入单个端口对象，则内部会将其转换为列表处理。\n\nKeyword Args:\n\n    MulticastClass1DaMac (str): 设置第一类组播目的MAC地址。默认值：01:80:c2:00:00:30。\n                              取值范围：合法的MAC地址格式。\n\n    MulticastClass2DaMac (str): 设置第二类组播目的MAC地址。默认值：01:80:c2:00:00:38。\n                               取值范围：合法的MAC地址格式。\n\n    EncodeMdOrMeLevel (bool): 指定是否在组播MAC地址中包含MD（Maintenance Domain）/MEP（Maintenance Entity Point）等级信息。\n                             默认值：True。\n                             可选值范围：\n                                 True - 包含MD/ME等级\n                                 False - 不包含MD/ME等级\n\n    DisableCCRcv (bool): 指定是否忽略接收CCM（Continuity Check Message）消息。默认值：False。\n                         可选值范围：\n                             True - 忽略接收CCM\n                             False - 正常接收CCM\n\n    TlvsInDmr (bool): 指定是否在DMR（Delay Measurement Response）应答消息中包含TLV（Type-Length-Value）选项。默认值：True。\n                      可选值范围：\n                          True - 包含TLV\n                          False - 不包含TLV\n\n    TlvsInLmr (bool): 指定是否在LMR（Loss Measurement Response）应答消息中包含TLV选项。默认值：True。\n                      可选值范围：\n                          True - 包含TLV\n                          False - 不包含TLV\n\nReturns:\n\n    bool: 如果配置修改成功则返回True，失败则返回False。若操作失败，将抛出ContinuableFailure异常。\n\nExamples:\n    .. code:: RobotFramework\n\n        | Edit Y1731 Port Config | Ports=${Ports} | MulticastClass1DaMac=01:80:C2:00:00:31 | DisableCCRcv=True |",
  "TesterLibrary.Protocol.y1731.edit_y1731_global_option": "修改Y.1731协议的全局配置选项。\n\n该函数用于编辑系统中Y.1731协议的全局配置。如果提供了任意关键字参数，则会使用这些参数更新当前配置；如果没有提供任何参数，则仅返回当前的Y.1731全局配置对象，不会进行任何修改。\n\nKeyword Args:\n\n    TestModeType (str): 测试模式选项，默认值为 TYPE_NORMAL，可选值包括：\n\n        TYPE_NORMAL\n\n        TYPE_CC_SCALE_MODE\n\n        TYPE_CC_SCALE_MODE_WITHOUT_RX\n\n    LmrRxFCfStart (int): 在Step模式下，Loss Measurement Response接收帧计数的初始值，默认值：1，取值范围：0-4294967295\n\n    LmrRxFCfStep (int): 在Step模式下，Loss Measurement Response接收帧计数的步进值，默认值：1，取值范围：0-4294967295\n\n    LmrTxFCbStart (int): 在Step模式下，Loss Measurement Response发送帧计数的初始值，默认值：1，取值范围：0-4294967295\n\n    LmrTxFCbStep (int): 在Step模式下，Loss Measurement Response发送帧计数的步进值，默认值：1，取值范围：0-65535\n\n    LmmTxFCfOffset (int): LMM TLV结构中发送帧计数字段的偏移量，默认值：0，取值范围：0-32767\n\n    LmrRxFCfOffset (int): LMR TLV结构中接收帧计数字段的偏移量，默认值：0，取值范围：0-32767\n\n    LmrTxFCbOffset (int): LMR TLV结构中发送帧计数字段的偏移量，默认值：0，取值范围：0-32767\n\n    DmTimeUnit (str): 延迟测量的时间单位，默认值：TIME_MS，可选值包括：\n\n        TIME_MS（毫秒）\n\n        TIME_NS（纳秒）\n\nReturns:\n\n    bool: 如果配置更新成功则返回 True，否则返回 False。\n\nRaises:\n\n    ContinuableFailure: 如果配置更新失败，将抛出此异常并附带相应的错误信息。\n\nExamples:\n    .. code:: RobotFramework\n\n        | Edit Y1731 Global Option | DmTimeUnit=TIME_NS | TestModeType=TYPE_CC_SCALE_MODE |",
  "TesterLibrary.Protocol.y1731.create_y1731_meg": "创建Y1731 MEG对象，并根据指定的配置参数在底层调用Renix API初始化并配置该MEG。\n\n本函数用于封装对 `renix.create_y1731_meg()` 的调用，创建一个Y.1731维护实体组（MEG）配置对象。该对象可用于后续操作如维护点配置、测试启动等。函数支持通过关键字参数提供详细配置，若未提供则使用默认值。如果创建失败，将抛出带有错误信息的 `ContinuableFailure` 异常；成功时返回配置好的 `Y1731MegConfig` 实例。\n\nKeyword Args:\n    **kwargs (dict): 任意数量的关键字参数，用于定义和修改MEG的配置属性。这些参数可能包括但不限于以下各项：\n\n    OperationMode (str): 操作模式，默认值：ITU_T，可选 ITU_T 或 IEEE。\n    \n    MdOrMeLevel (str): ME级别，默认值：LEVEL1，取值范围 LEVEL0 到 LEVEL7。\n    \n    CcPeriod (str): 连续性检查周期，默认值：CCM_1S，可选项包括不同时间间隔如 CCM_3MS, CCM_10MS 等。\n    \n    LckPeriod (str): 锁定周期，默认值：PERIOD_1S，可为 PERIOD_1S 或 PERIOD_1MIN。\n    \n    AisPeriod (str): 告警指示信号周期，默认值：PERIOD_1S，可为 PERIOD_1S 或 PERIOD_1MIN。\n    \n    各类优先级设置（如 CcPriority, LbPriority 等）: 默认均为 LEVEL0，可选 LEVEL0 到 LEVEL7。\n    \n    DomainIdType (str): IEEE模式下Domain ID类型，默认值 NO_DOMAIN，可选 DNS_LIKE_NAME, MAC_ADDRESS_2OCTETS, CHARACTER_STRING。\n    \n    DnsLikeName (str): 当Domain ID类型为DNS_LIKE_NAME时的域名字符串，默认值 \"xinertel.com\"，长度限制1-43字符。\n    \n    MacAnd2Octets (str): 当Domain ID类型为MAC_ADDRESS_2OCTETS时的MAC地址加两字节整数，默认值 \"00-00-00-00-00-00:0000\"，需符合正则表达式 ^[A-Fa-f0-9]{2}([-]?[A-Fa-f0-9]{2}){5}[:][A-Fa-f0-9]{4}$。\n    \n    CharacterStringDmId (str): 当Domain ID类型为CHARACTER_STRING时的字符串，默认值 \"Domain\"，长度限制1-43字符。\n    \n    MaIdType (str): IEEE模式下的MA ID类型，默认值 CHARACTER_STRING，可选 PRIMARY_VID, CHARACTER_STRING, TWO_OCTET_INTEGER, RFC_2685_VPN_ID。\n    \n    PrimaryVid (int): IEEE模式下Primary VID，默认值 100，有效范围 0-4095。\n    \n    CharacterStringMaId (str): IEEE模式下MA ID为字符串时的值，默认值 \"MA_1\"，长度限制1-43字符。\n    \n    TwoOctet (str): IEEE模式下两字节整数格式的MA ID，默认值 \"0000\"，需符合正则表达式 ^[A-Fa-f0-9]{4}$。\n    \n    Rfc2685VpnId (str): IEEE模式下RFC 2685 VPN ID格式，默认值 \"00-00-00:00-00-00-00\"，需符合特定正则表达式。\n    \n    MegIdType (str): ITU-T模式下的MEG ID类型，默认值 CHARACTER_STRING，可选 PRIMARY_VID, CHARACTER_STRING, TWO_OCTET_INTEGER, RFC_2685_VPN_ID, ICC_BASED, CC_AND_ICC_BASED。\n    \n    IccFormatedString (str): ITU-T模式下ICC格式化字符串，默认值 \"MEG_1\"，长度限制1-13字符。\n    \n    CountryCode (str): ITU-T模式下国家代码，默认值 \"ZZ\"，必须为两个大写字母。\n    \n    PrimaryVidMegId (int): ITU-T模式下Primary VID，默认值 100，有效范围 0-4095。\n    \n    CharacterStringMegId (str): ITU-T模式下MEG ID为字符串时的值，默认值 \"MEG_1\"，长度限制1-43字符。\n    \n    TwoOctetMegId (str): ITU-T模式下两字节整数格式的MEG ID，默认值 \"0000\"，需符合正则表达式 ^[A-Fa-f0-9]{4}$。\n    \n    Rfc2685VpnIdMegId (str): ITU-T模式下RFC 2685 VPN ID格式，默认值 \"00-00-00:00-00-00-00\"，需符合特定正则表达式。\n\nReturns:\n    Y1731MegConfig: 创建并配置完成的Y1731 MEG配置对象，可用于进一步操作或引用其属性。\n\nRaises:\n    ContinuableFailure: 如果底层调用 `renix.create_y1731_meg()` 返回 False，则抛出此异常，表示创建失败但测试流程可以继续。\n\nExamples:\n    .. code:: RobotFramework\n\n        | Create Y1731 Meg | OperationMode=IEEE |",
  "TesterLibrary.Protocol.y1731.create_y1731_mp": "创建Y.1731维护点（MP）对象，用于一个或多个提供的会话对象。\n\n该函数设计用于处理单个或多个会话输入。它将输入转换为可迭代对象（如果尚未是），然后使用提供的关键字参数在每个会话对象上调用`create_mp`方法。结果被收集并返回，如果仅提供了一个会话，则返回单个结果；如果提供了多个会话，则返回结果列表。\n\nArgs:\n    Sessions (:obj:`Y1731` or list of :obj:`Y1731`): y1731协议会话对象或会话对象的列表\n\nKeyword Args:\n    Meg (:obj:`Y1731MegConfig`): y1731 MEG对象, 类型：object\n    Vid1 (int): VLAN ID #1，默认值：100, 取值范围：0-4095\n    Vid2 (int): VLAN ID #2，默认值：100, 取值范围：0-4095\n    MpType (str): MP类型，默认值：MEP, 可选值：\n        MEP\n        MIP\n    MepId (int): MEP ID，默认值：1, 取值范围：1-8191\n    Rdi (str): RDI，默认值：AUTO, 可选值：\n        AUTO\n        OFF\n        ON\n    EnableAisRx (bool): 使能AIS Rx, 默认值：True\n    EnableLckRx (bool): 使能LCK Rx, 默认值：True\n    EnableLbResponse (bool): 使能LB响应, 默认值：True\n    EnableLtResponse (bool): 使能LT响应, 默认值：True\n    EnableDmResponse (bool): 使能DM响应, 默认值：True\n    EnableLmResponse (bool): 使能LM响应, 默认值：True\n    EnableOverrideCcPeriod (bool): 使能覆盖CC周期, 默认值：False\n    OverrideCcPeriod (str): 覆盖CC周期，默认值：CCM_1S, 可选值：\n        CCM_3MS\n        CCM_10MS\n        CCM_100MS\n        CCM_1S\n        CCM_10S\n        CCM_1MIN\n        CCM_10MIN\n    EnableOverrideAisPeriod (bool): 使能覆盖AIS周期, 默认值：False\n    OverrideAisPeriod (str): 覆盖AIS周期，默认值：PERIOD_1S, 可选值：\n        PERIOD_1S\n        PERIOD_1MIN\n    EnableOverrideLckPeriod (bool): 使能覆盖LCK周期, 默认值：False\n    OverrideLckPeriod (str): 覆盖LCK周期，默认值：PERIOD_1S, 可选值：\n        PERIOD_1S\n        PERIOD_1MIN\n    EnableOverrideMeLevel (bool): 使能覆盖ME级别, 默认值：False\n    OverrideMeLevel (str): 覆盖ME级别，默认值：LEVEL1, 可选值：\n        LEVEL0\n        LEVEL1\n        LEVEL2\n        LEVEL3\n        LEVEL4\n        LEVEL5\n        LEVEL6\n        LEVEL7\n    DmmDelay (int): DMM延迟，默认值：0, 取值范围：0-100\n    DmrDelay (int): DMR延迟，默认值：0, 取值范围：0-100\n    LmrRxFCfStart (int): 初始接收帧计数转发值，默认值：1, 取值范围：0-4294967295\n    LmrRxFCfStep (int): 帧计数增量值（Step模式），默认值：1, 取值范围：0-65535\n    LmrTxFCbStart (int): 初始发送帧计数转发值，默认值：1, 取值范围：0-4294967295\n    LmrTxFCbStep (int): 帧计数增量值（Step模式），默认值：1, 取值范围：0-65535\n    LmmTxFCfOffset (int): LMM发送帧计数TLV偏移量，默认值：0, 取值范围：0-32767\n    LmrRxFCfOffset (int): LMR接收帧计数TLV偏移量，默认值：0, 取值范围：0-32767\n    LmrTxFCbOffset (int): LMR发送帧计数TLV偏移量，默认值：0, 取值范围：0-32767\n\nReturns:\n    :obj:`Y1731MpConfig` or list of :obj:`Y1731MpConfig`: 如果提供单个会话则返回单个y1731 Mp对象，否则返回y1731 Mp对象列表\n\nExamples:\n    .. code:: RobotFramework\n\n        | Create Y1731 Mp | Sessions=${session} | MpType=MEP |\n        | Create Y1731 Mp | Sessions=@{sessions} | MpType=MIP | MepId=100 |",
  "TesterLibrary.Protocol.y1731.edit_y1731_mp": "编辑一个或多个维护点（MP）对象，通过提供关键字参数更新它们的属性。\n\n该函数封装了 `Y1731.edit_mp` 方法，并允许批量编辑多个 MP 对象。如果传入的是单个 MP 对象，它会被自动转换为列表以保证统一处理。每个 MP 都会使用相同的关键字参数集进行单独修改。当关键字参数中包含 'Meg' 时，会对 MP 与 MEG（维护实体组）建立关系，使用 `Mp.set_relatives` 方法设置目标方向的关系。\n\n参数:\n    Mps (object or list of objects): 一个 MP 对象或 MP 对象的列表，表示需要编辑的一个或多个 MP 实体。若传入的是单一对象，则自动包装成列表进行统一处理。\n\n    **kwargs (dict): 可变关键字参数，表示要更新到每个 MP 对象中的属性名及其对应的值。如果关键字是 'Meg'，则调用 `Mp.set_relatives('SelectMeg', value, EnumRelationDirection.TARGET)` 建立关系；其他关键字采用标准属性赋值方式（`setattr(Mp, key, value)`）。\n\n返回值:\n    (:obj:`Y1731MpConfig`): 返回编辑后的 y1731 MP 对象。若操作成功，返回对应的 MP 对象；若失败，抛出异常。\n\n示例:\n    .. code:: RobotFramework\n\n        | TesterLibrary.Protocol.y1731.edit_y1731_mp | Mps=${mp} | MpType=MIP | MepId=100 |\n        | TesterLibrary.Protocol.y1731.edit_y1731_mp | Mps=@{mp_list} | EnableOverrideCcPeriod=True | OverrideCcPeriod=CCM_10S |\n\n注意:\n    - 函数假定每个 MP 对象具备 `Y1731.edit_mp` 所期望的方法和属性。\n    - 如果在编辑某个 MP 过程中发生异常，整个函数将失败，因为内部没有错误处理机制。",
  "TesterLibrary.Protocol.y1731.create_y1731_expected_mep": "创建y1731 Expected MEP对象，用于配置与一个或多个维护实体组（MEG）相关联的预期维护端点（Expected MEP）。\n\n**参数说明：**\n\n- `Megs` (:obj:`Y1731MegConfig` 或 iterable of :obj:`Y1731MegConfig`):  \n    提供一个或多个Y1731 Meg配置对象作为父上下文，用于为每个MEG创建对应的Expected MEP。  \n    如果传入的是单个MEG对象，函数会自动将其转换为列表处理；如果传入的是列表、集合或元组等可迭代对象，则按其中的每个MEG逐一创建Expected MEP。\n\n- `**kwargs`: 任意关键字参数，用于进一步配置Expected MEP的属性。支持的关键字参数包括但不限于：\n\n    - `MepId` (int): MEP ID，默认值：1，取值范围：0-65535\n    - `MacAddr` (str): 目的MAC地址，默认值：\"00:00:00:00:00:01\"，必须是合法的MAC地址格式\n    - `EnableRx` (bool): 是否启用接收功能，默认值：False，取值范围：True / False\n\n    这些配置参数将通过每个Y1731ExpectedMep实例的`edit()`方法应用到对应对象上。\n\n**返回值：**\n\n- 返回一个或多个创建好的 :obj:`Y1731ExpectedMep` 实例：\n    - 如果输入仅包含一个MEG，则返回单个 :obj:`Y1731ExpectedMep` 对象；\n    - 如果输入包含多个MEG，则返回与这些MEG一一对应的 :obj:`Y1731ExpectedMep` 对象列表。\n\n**行为说明：**\n\n- 输入的`Megs`如果不是可迭代类型（如list、set、tuple），会被自动封装成列表进行处理；\n- 每个MEG都会创建一个对应的Expected MEP对象；\n- 所有提供的`**kwargs`参数都会被应用到每一个新创建的Expected MEP对象上；\n- 函数最终返回结果根据输入MEG的数量决定是否返回单一对象还是对象列表。\n\n**示例：**\n\n.. code:: RobotFramework\n\n    | Create Y1731 Expected Mep | Megs=${meg} | EnableRx=True |\n    | Create Y1731 Expected Mep | Megs=${meg_list} | MacAddr=00:00:00:00:00:02 |",
  "TesterLibrary.Protocol.y1731.create_y1731_data_tlv": "创建Y1731 Data TLV（Type-Length-Value）配置对象，用于关联一个或多个维护点（Maintenance Point, Mp）。\n\n该函数用于封装底层 `Y1731.create_data_tlv` 方法，支持为单个或多个 Mp 创建 Y1731 Data TLV 配置对象。如果传入单个 Mp，则返回单个配置好的 `Y1731DataTlv` 对象；如果传入多个 Mp（如列表、元组或集合），则返回对应数量的 `Y1731DataTlv` 对象组成的列表，并保持输入 Mp 的顺序。\n\n### 参数说明：\n\n- **Mps** (`Y1731MpConfig` 或其可迭代对象)  \n  表示一个或多个上层上下文的 Mp 对象。每个 Mp 将与一个新创建的 `Y1731DataTlv` 对象相关联。  \n  支持的类型包括：单个 Mp 对象、列表(list)、元组(tuple)、集合(set)。\n\n- **kwargs (关键字参数)**  \n  可选参数，用于进一步配置所创建的 `Y1731DataTlv` 对象的属性。这些参数将直接传递给 `Y1731DataTlv` 实例的 `edit()` 方法。  \n  常见配置项如下：\n\n  - **Length** (`int`, 默认值: `0`)  \n    指定 TLV 中数据字段的长度，取值范围为 0 到 65535。\n  \n  - **Data** (`list`, 默认值: `[]`)  \n    数据字段的内容，为一个元素值在 0 到 255 之间的十进制整数列表，最大长度为 255。\n\n### 返回值：\n\n- 如果传入的是单个 Mp，则返回对应的 `Y1731DataTlv` 对象。\n- 如果传入的是多个 Mp，则返回一个包含多个 `Y1731DataTlv` 对象的列表，顺序与输入 Mp 一致。\n\n### 异常处理：\n\n若创建失败，函数会抛出 `ContinuableFailure` 异常，并附带错误信息。\n\n### 示例：\n\n```robotframework\n| Create Y1731 Data Tlv | Mps=${mp} | Length=10 |\n```\n\n此示例中，`${mp}` 是一个有效的 `Y1731MpConfig` 对象，创建的 TLV 具有长度为 10 的数据字段。",
  "TesterLibrary.Protocol.y1731.create_y1731_ltm_egress_identifier_tlv": "创建Y.1731 LTM Egress Identifier TLV配置对象。\n\n该函数用于创建一个或多个Y.1731协议中的LTM（Loopback Test Message）Egress Identifier TLV配置对象。每个TLV对象与提供的父对象（Mps）相关联。如果提供单个Mp，则返回单个TLV对象；如果提供多个Mp对象（如列表、集合或元组），则返回对应的TLV对象列表。\n\n参数：\n    Mps (obj 或 iterable): 一个父对象或多个父对象的可迭代对象（如列表、集合、元组）。每个Mp通常是Y.1731协议上下文中的测试或测量点对象。\n    **kwargs: 可选的关键字参数，用于在创建后配置TLV对象的属性。支持的字段包括：\n        - Length (int): TLV值字段的长度，默认为0，取值范围为0-65535。\n        - Index (int): 出口标识符的索引值，默认为0，取值范围为0-65535。\n        - MacAddress (str): 出口标识符的MAC地址，默认为\"00:00:00:00:00:00\"，必须是有效的MAC地址格式。\n\n返回值：\n    Y1731LtmEgressIdentifierTlv 或 Y1731LtmEgressIdentifierTlv列表：如果输入单个Mp，则返回单个TLV对象；如果输入多个Mp对象，则返回对应数量的TLV对象列表，每个TLV对象都与各自的Mp关联并按提供的参数进行配置。\n\n示例：\n    假设已有一个RenixAPI实例和两个MeasurementPoint对象mp1和mp2：\n\n    >>> api = RenixAPI()\n    >>> mp1 = MeasurementPoint()  # 假设的测量点对象\n    >>> mp2 = MeasurementPoint()\n    >>> tlv1 = api.create_y1731_ltm_egress_identifier_tlv(mp1, Length=10, Index=1)\n    >>> tlvs = api.create_y1731_ltm_egress_identifier_tlv([mp1, mp2], Length=5, MacAddress=\"00:11:22:33:44:55\")\n    >>> len(tlvs)\n    2",
  "TesterLibrary.Protocol.y1731.create_y1731_ltr_egress_identifier_tlv": "创建Y1731 LTR Egress Identifier TLV对象，用于在给定的一个或多个Y1731 MP上下文中配置Egress Identifier信息。\n\n参数:\n    Mps (:obj:`Y1731MpConfig` 或 list of :obj:`Y1731MpConfig`): 一个或多个Y1731 MP配置对象，表示该TLV所属的上下文。\n    \n关键字参数（可选）:\n    Length (int): TLV值字段的长度，默认为0，取值范围0-65535。\n    LastIndex (hex): 上一出口标识符 - 唯一标识符，默认为0x0000，取值范围0x0000-0xFFFF。\n    LastMacAddress (str): 上一出口标识符 - MAC地址，默认为\"00:00:00:00:00:00\"，格式必须是合法的MAC地址。\n    NextIndex (hex): 下一出口标识符 - 唯一标识符，默认为0x0000，取值范围0x0000-0xFFFF。\n    NextMacAddress (str): 下一出口标识符 - MAC地址，默认为\"00:00:00:00:00:00\"，格式必须是合法的MAC地址。\n\n返回值:\n    :obj:`Y1731LtrEgressIdentifierTlv` 或 list of :obj:`Y1731LtrEgressIdentifierTlv`: 如果输入单个MP，返回对应的TLV对象；如果输入多个MP，返回与输入顺序一致的TLV对象列表。\n\n示例:\n    .. code:: RobotFramework\n\n        | Create Y1731 Ltr Egress Identifier Tlv | Mps=${mp} | Length=10 |\n        | Create Y1731 Ltr Egress Identifier Tlv | Mps=@{mp_list} | LastIndex=0xABCD | LastMacAddress=00:11:22:33:44:55 | NextIndex=0x1234 | NextMacAddress=66:77:88:99:AA:BB |\n\n说明:\n    该方法封装了底层 `Y1731.create_ltr_egress_identifier_tlv` 方法，支持在RenixAPI框架内便捷地为一个或多个MP创建并配置Y1731LtrEgressIdentifierTlv实例。所有通过`**kwargs`提供的额外配置将在每个TLV初始化时应用。若操作失败，将抛出ContinuableFailure异常；否则返回创建的TLV对象或对象列表。",
  "TesterLibrary.Protocol.y1731.create_y1731_organization_specific_tlv": "创建y1731 Organization Specific Tlv对象\n\n该方法用于为Y.1731协议创建一个或多个组织特定TLV（Type-Length-Value）结构。如果提供多个Mp对象，将为每个Mp创建对应的TLV，并按输入顺序返回对象列表；如果只提供一个Mp对象，则直接返回单个TLV对象。\n\nArgs:\n\n    Mps(:obj:`Y1731MpConfig` or iterable): 一个或多个y1731 Mp对象，表示新创建的TLV所属的上层上下文或父结构。TLV将层次化地附加到该Mp对象上。\n\nKeyword Args:\n\n    Length (int): TLV值字段的长度，默认值：0, 取值范围：0-65535\n\n    OrgUniqueId (list): 组织唯一ID，默认值：[0,0,0], 取值范围：列表元素为0-255的十进制数\n\n    SubType (int): 该TLV的子类型，默认值：0, 取值范围：0-255\n\n    Data (list): TLV数据字段，默认值：[], 取值范围：列表长度0-255，元素为0-255的十进制数\n\nReturns:\n\n    (:obj:`Y1731OrgSpecificTlv` or list): 如果输入为单个Mp对象则返回单个Y1731OrgSpecificTlv对象；\n                                       如果输入为多个Mp对象则返回Y1731OrgSpecificTlv对象列表，\n                                       列表中对象顺序与输入Mps顺序一致。\n\nExamples:\n    .. code:: RobotFramework\n\n        | Create Y1731 Organization Specific Tlv | Mps=${mp} | Length=10 |",
  "TesterLibrary.Protocol.y1731.create_y1731_reply_ingress_tlv": "创建Y.1731协议中的Reply Ingress TLV（Type-Length-Value）配置对象，并将其绑定到指定的维护点（Maintenance Points，MPs）上。  \n该方法用于配置Y.1731协议中用于连通性故障管理（CFM）的Ingress回复信息，可用于单个或多个MP对象。\n\n参数说明：\n\n- **Mps** (`Y1731MpConfig` 或其列表/集合/元组): 要关联的Y.1731维护点对象或多个维护点对象的集合。\n  每个MP代表一个Y.1731协议中的维护上下文。\n\n- **Length** (int, 可选): TLV值字段的长度，默认值为0，取值范围：0-65535。\n\n- **IngressAction** (str, 可选): 入口动作，表示对入方向流量的处理方式，默认值为ACTION_ING_OK，可选值包括：\n  - ACTION_ING_OK\n  - ACTION_ING_DOWN\n  - ACTION_ING_BLOCKED\n  - ACTION_ING_VID\n\n- **IngressMacAddress** (str, 可选): 入口MAC地址，默认值为\"00:00:00:00:00:00\"，必须为合法的MAC地址格式。\n\n- **ChassisIdLength** (int, 可选): Chassis ID字段的长度，默认值为0，取值范围：0-255。\n\n- **ChassisIdSubtype** (int, 可选): Chassis ID子类型，默认值为0，取值范围：0-255。\n\n- **ChassisId** (list of int, 可选): Chassis ID数据内容，默认为空列表，列表长度应为0-255，元素取值范围为0-255的十进制整数。\n\n返回值：\n\n- 如果传入的是单个MP，则返回一个`Y1731ReplyIngressTlv`对象；\n- 如果传入的是多个MP，则返回对应数量的`Y1731ReplyIngressTlv`对象组成的列表。\n\n异常：\n\n- 如果`Mps`不是有效的MP对象或其集合，将抛出`TypeError`。\n\n功能描述：\n\n该方法封装了底层`Y1731.create_reply_ingress_tlv`方法，支持批量或单独创建Reply Ingress TLV对象。\n内部会对输入进行标准化处理（统一转换为列表），为每个MP创建对应的TLV对象，并根据输入MP的数量决定返回单个对象还是列表。  \n\n示例：\n\n.. code:: RobotFramework\n\n    | Create Y1731 Reply Ingress Tlv | Mps=${mp} | Length=10 |",
  "TesterLibrary.Protocol.y1731.start_y1731_1dm": "启动1DM（单向时延测量）\n\nDescription:\n该函数用于启动基于Y.1731协议的单向时延测量（1DM）。它根据提供的会话对象和配置参数，构造并执行相应的测量命令。\n\nParameters:\n- Sessions (list, tuple, set or single object): 一个或多个Y.1731协议会话对象。如果传入的是单个会话对象，函数内部会将其转换为列表形式。\n- **kwargs (dict): 可选的关键字参数，用于进一步配置1DM测量行为。这些参数包括：\n\n    - MsgType (str): 消息类型，默认值：MULTICAST，可选值：\n        MULTICAST\n        UNICAST\n\n    - MepHandles (:obj:`Y1731MpConfig` 或其组成的列表/元组/集合): MEP（维护实体组）配置对象或其集合。若提供的是单个对象，则会被转换为列表；若对象是Y1731MpConfig类型，将自动提取其`handle`属性用于配置。\n\n    - DestMacList (str): 目标MAC地址，默认值为空字符串\"\"，必须为合法的MAC地址格式。\n\n    - TxType (str): 发送类型，默认值：SINGLE，可选值：\n        SINGLE\n        CONTINUOUS\n        MULTIPLE\n\n    - TxRate (str): 发送速率，默认值：TXRATE_1_PER_SEC，可选值：\n        TXRATE_10_PER_SEC\n        TXRATE_1_PER_SEC\n        TXRATE_1_PER_MIN\n        TXRATE_1_PER_10MIN\n\n    - TxCount (int): 要发送的数据包数量，默认值：1，取值范围：0 ~ 65535。\n\nReturns:\n- True (bool): 表示1DM测量命令成功执行。\n- False (bool): 表示命令执行失败（此时会抛出ContinuableFailure异常）。\n\nNote:\n该函数内部调用Renix底层API `start_y1731_1dm` 来完成实际操作。若返回结果为False，则会抛出ContinuableFailure异常，并附带函数名作为错误信息的一部分。\n\nExamples:\n.. code:: RobotFramework\n\n    | Start Y1731 1dm | Sessions=${Sessions} | MsgType=UNICAST |",
  "TesterLibrary.Protocol.y1731.start_y1731_ais": "启动Y.1731 AIS（Alarm Indication Signal）传输\n\n该函数用于在一个或多个Y.1731会话上启动AIS（告警指示信号）传输。支持单个或多个会话对象的传入，并可选地指定MEP（维护实体点）句柄来控制使用哪些MEP发送AIS信号。\n\nArgs:\n\n    Sessions (Union[object, list, tuple, set]): Y.1731协议会话对象或其集合（列表、元组、集合）。每个会话对象必须包含一个`handle`属性，用于系统内部标识该会话。\n\nKeyword Args:\n\n    MepHandles (Union[list, tuple, set, :obj:`Y1731MpConfig`], optional): 指定用于发送AIS的MEP句柄。如果提供的是列表、元组或集合，则其中的元素可以是MEP对象或其句柄。若为`:obj:`Y1731MpConfig``类型，则自动提取其`handle`属性。\n\nReturns:\n\n    bool: 布尔值，表示AIS命令是否成功启动。始终返回True以表明操作已正确发起。\n\nNotes:\n\n    - 函数内部构建并执行一个`Y1731StartAisCommand`，包含提供的会话句柄和可选的MEP句柄。\n    - 如果在`kwargs`中未提供`MepHandles`，则命令将不包含MEP句柄信息直接执行。\n    - 本函数目前不使用`MsgType`与`DestMacList`参数，保留这些参数是为了兼容性考虑，建议后续版本中移除或确认用途。\n\nExamples:\n    .. code:: RobotFramework\n\n        | Start Y1731 AIS | Sessions=${Sessions} | MsgType=UNICAST |",
  "TesterLibrary.Protocol.y1731.start_y1731_ccm": "启动Y.1731连续性检查消息（CCM）传输\n\nArgs:\n\n    Sessions (:obj:`Y1731` 或 list/tuple/set of :obj:`Y1731`): 一个或多个Y.1731协议会话对象。每个会话对象必须具有'handle'属性，该属性在系统中唯一标识该会话。\n\nKeyword Args:\n\n    MepHandles (Union[list, tuple, set, :obj:`Y1731MpConfig`]): 与会话关联的MEP句柄。如果提供的是Y1731MpConfig对象列表，则自动提取其'handle'属性。\n    \n    MsgType (str): 消息类型，默认值：MULTICAST，可选值：\n    \n        MULTICAST\n        \n        UNICAST\n\n    DestMacList (str): 目标MAC地址，默认值为空字符串，取值范围为有效的MAC地址格式。\n\n    CcosList (list): 客户VLAN的服务等级值列表，默认值为空列表，列表元素取值范围：0-7。\n\n    ScosList (list): 服务提供商VLAN的服务等级值列表，默认值为空列表，列表元素取值范围：0-7。\n\nReturns:\n\n    bool: 命令执行成功时返回True；若执行失败则抛出ContinuableFailure异常。\n\nBehavior:\n\n    - 如果Sessions不是列表、元组或集合，则会被转换为包含单一会话的列表。\n    - 如果MepHandles是Y1731MpConfig对象列表，则会自动替换为其对应的handle值。\n    - 构造并执行Y1731StartCcmCommand命令，使用提供的会话handle和任何其他参数。\n\nNote:\n\n    - 本函数依赖于内部类型如Y1731MpConfig和Y1731StartCcmCommand，这些类型应在库的其他部分定义。\n    - 确保所有传入的对象都具有底层API识别的有效'handle'属性。\n    - 若命令执行期间发生错误，可能抛出异常（具体参见@abnormal_check装饰器行为）。\n\nExamples:\n    .. code:: RobotFramework\n\n        | Start Y1731 Ccm | Sessions=${Sessions} | MsgType=UNICAST |",
  "TesterLibrary.Protocol.y1731.start_y1731_dmm": "启动Y.1731延迟测量消息（DMM）操作\n\nDescription:\n该函数用于为指定的Y.1731会话对象启动延迟测量消息（DMM）操作。通过该函数可以发送单播或多播的DMM报文，支持多种发送模式和速率配置。\n\nArgs:\n\n    Sessions(:obj:`Y1731`): 一个或多个Y.1731协议会话对象，类型为list/tuple/set\n\nKeyword Args:\n\n    MsgType (str): 消息类型，默认值：MULTICAST，取值范围：\n\n        MULTICAST - 多播模式\n\n        UNICAST - 单播模式\n\n    MepHandles (:obj:`Y1731MpConfig`): 指定用于DMM操作的MEP配置对象，默认使用Session句柄。类型为单个对象或list/tuple/set\n\n    DestMacList (str): 目标MAC地址，默认值为空字符串，表示使用默认目标地址。取值范围：有效的MAC地址格式字符串\n\n    TxType (str): 发送类型，默认值：SINGLE，取值范围：\n\n        SINGLE - 单次发送\n\n        CONTINUOUS - 连续发送\n\n        MULTIPLE - 多次发送（需配合TxRate使用）\n\n    TxRate (str): 发送频率，默认值：TXRATE_1_PER_SEC，取值范围：\n\n        TXRATE_10_PER_SEC - 每秒10次\n\n        TXRATE_1_PER_SEC - 每秒1次\n\n        TXRATE_1_PER_MIN - 每分钟1次\n\n        TXRATE_1_PER_10MIN - 每10分钟1次\n\n    CcosList (int): 客户VLAN的业务等级列表，取值范围：0-7，可使用整数或整数列表\n\n    ScosList (int): 服务提供商VLAN的业务等级列表，取值范围：0-7，可使用整数或整数列表\n\nReturns:\n\n    bool: 命令执行成功返回True，失败抛出ContinuableFailure异常\n\nNote:\n该函数内部会构造并执行Y1731StartDmmCommand命令，自动将输入参数标准化为列表形式处理。对于未提供的MepHandles参数，默认使用Session句柄。",
  "TesterLibrary.Protocol.y1731.start_y1731_lbm": "启动Y.1731环回消息（LBM）操作\n\nDescription:\n该函数用于为一个或多个会话对象启动Y.1731环回消息（LBM）操作。它使用提供的会话配置和可选的关键字参数准备并执行相应的命令。\n\nArgs:\n\n    Sessions(:obj:`Y1731`): y1731协议会话对象，可以是单个对象或可迭代对象（列表、元组、集合）。每个会话对象必须有一个`handle`属性，该属性在API上下文中唯一标识该对象。\n\nKeyword Args:\n\n    MsgType (str): 消息类型，默认值：MULTICAST，可选值包括：\n\n        MULTICAST\n\n        UNICAST\n\n    MepHandles (:obj:`Y1731MpConfig`): Y.1731 MEP（维护端点）配置对象，可以是单个对象或可迭代对象，默认值：空字符串。如果提供了该参数，则会提取其`handle`属性用于命令的执行。\n\n    DestMacList (str): 目标MAC地址，默认值：空字符串，取值范围：有效的MAC地址。\n\n    InitTransactionId (int): 初始事务ID，默认值：1，取值范围：0-4294967295。\n\n    TxType (str): 发送类型，默认值：SINGLE，可选值包括：\n\n        SINGLE\n\n        CONTINUOUS\n\n        MULTIPLE\n\n    TxRate (str): 发送速率，默认值：TXRATE_1_PER_SEC，可选值包括：\n\n        TXRATE_10_PER_SEC\n\n        TXRATE_1_PER_SEC\n\n        TXRATE_1_PER_MIN\n\n        TXRATE_1_PER_10MIN\n\n    TxCount (int): 要发送的数据包数量，默认值：1，取值范围：0-65535。\n\nReturns:\n\n    bool: 命令成功执行则返回True，表示操作已发起。LBM操作的实际结果需通过其他机制（如轮询或事件通知）确定。\n\nNotes:\n- 如果输入的Sessions不是可迭代对象，则内部会将其转换为列表。\n- 该函数内部构造一个`Y1731StartLbmCommand`对象，并使用会话对象的句柄及任何有效的参数执行命令，然后通过`cmd.execute()`运行该命令。\n- 如果返回结果为False，将抛出ContinuableFailure异常；否则返回True。",
  "TesterLibrary.Protocol.y1731.start_y1731_lck": "启动Y.1731 LCK（Lock Signal）传输\n\nArgs:\n\n    Sessions (:obj:`Y1731` 或 list/tuple/set): y1731协议会话对象或会话对象的可迭代集合。每个会话对象必须包含一个 'handle' 属性，用于标识该会话的唯一ID。\n\nKeyword Args:\n\n    MsgType (str, optional): 消息类型，默认值：MULTICAST，取值范围：\n\n        MULTICAST: 发送LCK消息到组播地址\n\n        UNICAST: 发送LCK消息到单播地址\n\n    MepHandles (:obj:`Y1731MpConfig` 或 list/tuple/set of :obj:`Y1731MpConfig`, optional): \n        指定MEP（Maintenance End Point）的配置对象。如果提供的是Y1731MpConfig对象的列表，则会自动提取其handle。\n        默认值为空字符串或空集合。\n\n    DestMacList (str, optional): 目标MAC地址，默认值为\"\"（空字符串），表示不指定目标MAC地址。当MsgType为UNICAST时，建议设置有效的MAC地址。\n\nReturns:\n\n    bool: 成功执行命令后返回True；失败则返回False。\n\nRaises:\n\n    ContinuableFailure: 如果调用底层API失败（返回False），将抛出ContinuableFailure异常，并附带错误信息。\n\nExamples:\n    .. code:: RobotFramework\n\n        | Start Y1731 Lck | Sessions=${Sessions} | MsgType=UNICAST |\n\n说明：\n该函数用于在指定的Y.1731会话上启动LCK（Lock Signal）传输，通常用于指示网络中的信号丢失情况。内部构造并执行一个Y1731StartLckCommand命令，使用提供的会话句柄和可选参数进行配置。",
  "TesterLibrary.Protocol.y1731.start_y1731_lmm": "启动Y.1731 LMM（Loss Measurement Message，丢包测量消息）操作。\n\n该函数用于在一个或多个指定的会话上启动Y.1731协议中的LMM功能。它可以接收单个会话或会话集合，并可选地接受一组MEP（Maintenance End Point）配置或句柄。内部机制将所有输入标准化为列表格式，以确保与底层命令结构兼容。函数通过构造并执行`Y1731StartLmmCommand`来启动LMM操作，并在成功执行后返回`True`。\n\nArgs:\n\n    Sessions (:obj:`Y1731` 或 list, tuple, set): 一个或多个Y.1731协议会话对象。如果传入的是非集合类型，则会被转换为包含单个会话的列表。每个会话对象应具有`handle`属性，用于底层命令调用。\n\nKeyword Args:\n\n    MsgType (str, optional): 消息类型，默认值：MULTICAST，取值范围：\n\n        MULTICAST\n\n        UNICAST\n\n    MepHandles (:obj:`Y1731MpConfig` 或 list, tuple, set, optional): 与会话相关联的MEP配置对象或句柄。如果提供了`Y1731MpConfig`实例，则会自动提取其`handle`值。若为非集合类型，将被包装成列表。\n\n    DestMacList (str, optional): 目标MAC地址，默认为空字符串\"\"，取值必须为合法的MAC地址格式。\n\n    TxType (str, optional): 发送模式，默认值：SINGLE，取值范围：\n\n        SINGLE: 单次发送\n\n        CONTINUOUS: 连续发送\n\n    TxRate (str, optional): 发送频率，默认值：TXRATE_1_PER_SEC，取值范围：\n\n        TXRATE_10_PER_SEC\n\n        TXRATE_1_PER_SEC\n\n        TXRATE_1_PER_MIN\n\n        TXRATE_1_PER_10MIN\n\n    TxFCfMode (str, optional): 帧发送方式，默认值：STEP，取值范围：\n\n        STATIC: 固定帧数发送\n\n        STEP: 步进式增加帧数\n\n    TxFCfValue (int, optional): 当TxFCfMode为STATIC时为固定值，为STEP时为初始值，默认值：1，取值范围：0-4294967295\n\n    TxFCfStep (int, optional): 在步进模式下每次递增的步长值，默认值：1，取值范围：0-65535\n\n    CcosList (int 或 list/tuple/set of int, optional): 客户VLAN的CoS（服务等级）值列表，默认为空，取值范围：0-7\n\n    ScosList (int 或 list/tuple/set of int, optional): 服务提供商VLAN的CoS值列表，默认为空，取值范围：0-7\n\nReturns:\n\n    bool: 如果LMM操作成功启动则返回 `True`，否则抛出 `ContinuableFailure` 异常。\n\nExamples:\n    .. code:: RobotFramework\n\n        | Start Y1731 Lmm | Sessions=${Sessions} | MsgType=UNICAST | TxType=CONTINUOUS | TxRate=TXRATE_10_PER_SEC |",
  "TesterLibrary.Protocol.y1731.start_y1731_ltm": "启动Y.1731环回测试（LTM）\n\n描述:\n在指定的Y.1731会话上启动环回测试（LTM）操作。支持单播/多播模式，可配置目标MAC、TTL、事务ID等参数。\n\n参数:\n    Sessions (:obj:`list` of :obj:`Y1731`): Y.1731协议会话对象列表\n\n关键字参数:\n    MsgType (str): 消息发送模式，默认MULTICAST，可选：\n        MULTICAST - 多播模式\n        UNICAST - 单播模式\n\n    MepHandles (:obj:`Y1731MpConfig` or list): MEP端点配置对象或列表，默认为空\n\n    DestMacList (str): 目标MAC地址，默认为空字符串，需为有效MAC格式：\n        示例: \"00:11:22:33:44:55\"\n\n    InitTransactionId (int): 初始事务ID，默认值：1，取值范围：\n        0 - 4294967295\n\n    InitTtl (int): 初始生存时间值，默认值：255，取值范围：\n        0 - 255\n\n    TxType (str): 发送类型，默认SINGLE，可选：\n        SINGLE - 单次发送\n        CONTINUOUS - 连续发送\n        MULTIPLE - 多次发送\n\n    TxRate (str): 发送速率，默认TXRATE_1_PER_SEC，可选：\n        TXRATE_10_PER_SEC - 每秒10次\n        TXRATE_1_PER_SEC - 每秒1次\n        TXRATE_1_PER_MIN - 每分钟1次\n        TXRATE_1_PER_10MIN - 每10分钟1次\n\n    TxCount (int): 发送报文数量，默认值：1，取值范围：\n        0 - 65535（0表示无限发送直到手动停止）\n\n返回值:\n    bool: 操作成功返回True，失败抛出ContinuableFailure异常\n\n示例:\n    .. code:: RobotFramework\n\n        | Start Y1731 Ltm | Sessions=${Sessions} | MsgType=UNICAST | DestMacList=00:11:22:33:44:55 |\n        | Start Y1731 Ltm | Sessions=${Sessions} | TxType=CONTINUOUS | TxRate=TXRATE_10_PER_SEC |",
  "TesterLibrary.Protocol.y1731.stop_y1731_1dm": "停止1DM\n\n    停止指定Y.1731会话的一向延迟测量（1DM）操作。该函数发送命令以停止所有提供的会话或基于MEP句柄过滤的特定1DM操作。\n\n    Args:\n\n        Sessions (:obj:`list` of :obj:`Y1731` or single :obj:`Y1731`): \n            一个或多个y1731协议会话对象，用于停止其1DM操作。每个会话对象应包含唯一标识该会话的`handle`属性。\n\n    Keyword Args:\n\n        MepHandles (:obj:`list` of :obj:`Y1731MpConfig` or single :obj:`Y1731MpConfig`, optional):\n            指定与会话关联的维护端点（MEP）对象。如果提供了Y1731MpConfig对象，则自动提取其`handle`属性。这些句柄允许过滤哪些特定的MEP需要停止1DM测量。默认值为空字符串。\n\n    Returns:\n\n        bool: 布尔值表示操作是否成功（True / False）\n\n    Notes:\n        - 如果传入的是单个会话或MEP对象而不是列表、元组或集合，它将被自动包装成列表。\n        - 函数内部构造并执行一个带有适当句柄的`Y1731Stop1DmCommand`来完成停止1DM的操作。\n\n    Examples:\n        .. code:: RobotFramework\n\n            | Stop Y1731 1dm | Sessions=${Sessions} | MepHandles=${MepHandles} |",
  "TesterLibrary.Protocol.y1731.stop_y1731_ais": "停止Y.1731 AIS（告警指示信号）的传输\n\n描述:\n该函数用于停止一个或多个Y.1731会话中的AIS（Alarm Indication Signal）告警信号传输。它将向指定的维护端点（MEP）发送命令，停止AIS数据包的发送。\n\n参数:\n\n- Sessions (:obj:`Y1731` 或 list/tuple/set of :obj:`Y1731`): 一个或多个Y.1731协议会话对象。如果传入单个会话对象，会被自动转换为列表形式进行处理。每个会话对象必须包含有效的句柄信息。\n  \n关键字参数:\n\n- MepHandles (:obj:`Y1731MpConfig` 或 list/tuple/set of :obj:`Y1731MpConfig`, optional): 指定要停止AIS传输的维护端点（MEP）配置对象或其集合。若提供的是Y1731MpConfig对象，则会自动提取其句柄用于底层操作。默认值为空字符串，表示使用Sessions中关联的MEP。\n\n返回值:\n\n- bool: 命令执行结果，成功返回True，失败抛出ContinuableFailure异常。\n\n示例:\n\n.. code:: RobotFramework\n\n    | Stop Y1731 Ais | Sessions=${Sessions} |\n\n注意事项:\n\n- 如果仅提供一个会话对象，函数内部会将其转换为列表以统一处理。\n- MepHandles参数支持多种格式输入（单个、列表、元组、集合），并可混合使用Y1731MpConfig对象与原始句柄字符串。\n- 函数在调用失败时（返回False）会抛出ContinuableFailure异常，以便上层测试框架捕获并处理错误。",
  "TesterLibrary.Protocol.y1731.stop_y1731_ccm": "停止Y.1731连续性检查消息（CCM）会话\n\n该函数用于停止指定的Y.1731 CCM会话传输。它支持通过会话对象或其句柄来标识需要停止的会话，并可选地提供维护端点（MEP）句柄以进一步定制停止行为。\n\nArgs:\n\n    Sessions (:obj:`Y1731` or list, tuple, set of :obj:`Y1731`): \n        一个或多个Y1731协议会话对象，表示要停止的CCM会话。\n        如果传入的是单个会话对象而非集合类型，则会被自动转换为列表形式处理。\n        每个会话对象应包含一个 'handle' 属性，表示其唯一标识符。\n\nKeyword Args:\n\n    MepHandles (:obj:`Y1731MpConfig` or list, tuple, set of :obj:`Y1731MpConfig`, optional):\n        可选参数，指定与停止CCM相关的MEP配置对象。\n        如果提供了MEP对象而非原始句柄，函数会自动提取其 'handle' 属性。\n        若非集合类型，则会被转换为列表形式处理。\n        默认值为空字符串（即不指定MEP）。\n\nReturns:\n\n    bool: 布尔值，若命令成功执行则返回True，表示Y.1731 CCM会话已停止；否则抛出异常。\n\nExamples:\n    .. code:: RobotFramework\n\n        | Stop Y1731 Ccm | Sessions=${Sessions} |\n        \n        | Stop Y1731 Ccm | Sessions=${Session1} | MepHandles=${MepHandleList} |",
  "TesterLibrary.Protocol.y1731.stop_y1731_dmm": "停止Y.1731协议中的DMM（Delay Measurement Message，时延测量消息）操作。\n\n该函数用于在指定的会话（Sessions）上停止Y.1731 DMM功能。此外，可以通过提供MEP（Maintenance End Point，维护端点）句柄来控制特定端点上的DMM停止操作。\n\nArgs:\n\n    Sessions (:obj:`Y1731` 或 list, tuple, set): 一个或多个Y.1731协议会话对象。每个会话对象必须包含一个`handle`属性，用于底层命令执行。如果只传入单个会话对象，它将被自动封装为列表形式。\n\nKeyword Args:\n\n    MepHandles (:obj:`Y1731MpConfig` 或 list, tuple, set, optional): 指定与DMM停止操作相关的MEP对象。如果传入的是Y1731MpConfig对象，则会提取其`handle`属性用于命令执行。若未提供此参数，则停止所有相关MEP上的DMM操作。\n\nReturns:\n\n    bool: 如果命令成功执行则返回True，否则返回False。\n\nRaises:\n\n    ContinuableFailure: 如果调用失败（返回False），则抛出可继续执行的异常，并附带错误信息。\n\nExamples:\n    .. code:: RobotFramework\n\n        | Stop Y1731 Dmm | Sessions=${Sessions} |\n\nFunction Internals:\n该函数内部调用了`RenixAPI.stop_y1731_dmm`方法，构建并执行了`Y1731StopDmmCommand`命令以完成实际的DMM停止操作。",
  "TesterLibrary.Protocol.y1731.stop_y1731_lbm": "停止Y.1731的环回消息（LBM）操作。\n\n该函数用于停止指定会话或MEP句柄的Y.1731环回消息（LBM）操作。它会发送一个命令以终止正在进行的LBM操作，并返回一个布尔值表示操作是否成功。\n\nArgs:\n    Sessions (:obj:`Y1731` 或 list, tuple, set): 一个或多个Y.1731协议会话对象。每个会话对象必须包含一个`handle`属性，用于标识对应的会话。\n\nKeyword Args:\n    MepHandles (:obj:`Y1731MpConfig` 或 list, tuple, set): 可选参数，表示一个或多个Y.1731 MEP配置对象。如果提供了该参数，函数将使用其中的`handle`来更新命令中的`MepHandles`字段。如果传入的是`Y1731MpConfig`对象，则会自动提取其句柄。\n\nReturns:\n    bool: 如果命令执行成功则返回True，否则返回False。\n\nRaises:\n    ContinuableFailure: 如果调用失败（即返回值为False），将抛出可继续执行的异常，以便在测试框架中进行错误处理。\n\nExamples:\n    .. code:: RobotFramework\n\n        | Stop Y1731 Lbm | Sessions=${Sessions} |\n\n说明：\n- `Sessions`参数支持单个会话对象或多种集合类型（列表、元组、集合）的会话对象。\n- `MepHandles`是可选参数，可用于显式指定需要操作的MEP句柄。\n- 函数内部调用了底层API `RenixLibrary.common.base.RenixAPI.stop_y1731_lbm`来完成实际操作。",
  "TesterLibrary.Protocol.y1731.stop_y1731_lck": "Stops the Y.1731 LCK (Lock) operation for the specified sessions.\n\nPurpose:\n    This function is used to stop the Y.1731 LCK (Lock) operation on one or more session objects.\n    It internally calls a backend command (`renix.stop_y1731_lck`) to perform the actual operation.\n\nParameters:\n    Sessions (object or iterable of objects)\n        A single session object or an iterable (such as list, tuple, or set) containing session objects\n        for which the LCK operation should be stopped. Each session object must have a 'handle' attribute.\n\n    **kwargs (optional)\n        Additional keyword arguments to customize the behavior of the command. The following keyword argument is supported:\n\n        - MepHandles (object or iterable of objects, optional)\n            A single MEP handle or an iterable of MEP handles. If provided, and if the elements are instances\n            of `Y1731MpConfig`, they will be converted to their corresponding handles before being used in the command.\n\nReturns:\n    bool\n        Always returns True to indicate successful execution of the stop operation.\n        If the operation fails (i.e., the result is False), a `ContinuableFailure` exception is raised.\n\nExamples:\n    .. code:: RobotFramework\n\n        | Stop Y1731 LCK | Sessions=${Sessions} |\n\nDescription:\n    This function stops the Y.1731 LCK operation on the given sessions. It constructs and executes\n    a Y1731StopLckCommand using the handles of the provided session objects. Optionally, it allows\n    MEP handles to be passed in to further specify the targets of the stop operation. The function\n    ensures that all inputs are properly formatted as lists if they are not already, and converts\n    Y1731MpConfig objects into their respective handles when necessary.",
  "TesterLibrary.Protocol.y1731.stop_y1731_lmm": "停止Y.1731 Loss Measurement (LMM)操作。\n\n描述:\n该函数用于停止指定会话的Y.1731丢包测量(LMM)操作。如果提供了MEP句柄，则还可以选择性地为特定的维护端点(MEP)停止LMM。\n\n参数:\n\n    Sessions (:obj:`Y1731` 或 list, tuple, set): Y1731协议会话对象或会话对象的集合（列表、元组或集合）。如果传入的是单个会话对象，它将被内部转换为列表形式进行处理。\n\nKeyword Args:\n\n    MepHandles (:obj:`Y1731MpConfig` 或 list, tuple, set, 可选): MEP配置对象或其集合，表示需要停止LMM的维护端点。如果传入的是单个Y1731MpConfig对象，将提取其`handle`属性用于底层调用。默认值为空字符串，即不指定特定MEP。\n\n返回值:\n\n    bool: 如果成功发送停止LMM命令，返回True；否则抛出异常。\n\n注意事项:\n\n    - 函数内部通过构造并执行Y1731StopLmmCommand来实现LMM的停止。\n    - 该函数使用了@abnormal_check()装饰器，可能包含额外的错误检查或异常处理机制。\n    - 如果底层调用失败（返回False），函数会抛出ContinuableFailure异常，表明操作未成功完成。\n\n示例:\n    .. code:: RobotFramework\n\n        | Stop Y1731 Lmm | Sessions=${Sessions} |",
  "TesterLibrary.Protocol.y1731.stop_y1731_ltm": "停止Y.1731协议中的Loopback和Test Message (LTM)操作。\n\n该函数用于停止指定会话（Sessions）的Y.1731 LTM操作。此外，还可以通过提供MEP（Maintenance End Point）句柄来停止与特定维护端点相关的LTM操作。\n\nArgs:\n\n    Sessions (:obj:`list` of :obj:`Y1731`): 一个或多个Y1731协议会话对象的列表，表示要停止LTM操作的会话。\n\nKeyword Args:\n\n    MepHandles (:obj:`Y1731MpConfig` or list/tuple/set of :obj:`Y1731MpConfig`): 可选参数，指定与LTM操作关联的MEP配置对象。可以是单个对象、或包含多个对象的集合（如列表、元组或集合）。如果传递的是Y1731MpConfig对象，则将自动提取其`handle`属性用于底层命令。默认值为空。\n\nReturns:\n\n    bool: 如果成功执行停止操作，则返回True；若执行失败则返回False，并触发ContinuableFailure异常。\n\nExamples:\n    .. code:: RobotFramework\n\n        | Stop Y1731 Ltm | Sessions=${Sessions} |",
  "TesterLibrary.Protocol.y1731.get_y1731_port_statistic": "获取Y.1731协议端口级统计信息，返回指定统计项的统计结果。\n\n该函数用于获取一个或多个测试仪表端口上的Y.1731协议相关统计信息。它是一个封装函数，底层调用`_get_statictis`方法实现统计数据查询功能。用户可指定需要查询的端口对象及具体的统计项目。\n\nArgs:\n\n    Port (:obj:`Port` or list/set/tuple of :obj:`Port`, optional): 测试仪表端口对象或其集合，每个端口对象必须包含'Name'属性（表示端口句柄）。默认为None，表示不指定具体端口。\n\n    StaItems (list or str, optional): 指定需要获取的统计项列表，类型为list或str。若为字符串，则会被转换为单元素列表。支持的统计项包括：\n\n        MaOrMegCount: MA/Meg计数\n\n        DropPacketCount: 丢包数量\n\n        TxAis: 发送的AIS报文数量\n\n        RxAis: 接收的AIS报文数量\n\n        TxCcm: 发送的CCM报文数量\n\n        RxCcm: 接收的CCM报文数量\n\n        TxDmm: 发送的DMM报文数量\n\n        RxDmm: 接收的DMM报文数量\n\n        TxLbm: 发送的LBM报文数量\n\n        RxLbm: 接收的LBM报文数量\n\n        TxLck: 发送的LCK报文数量\n\n        RxLck: 接收的LCK报文数量\n\n        TxLmm: 发送的LMM报文数量\n\n        RxLmm: 接收的LMM报文数量\n\n        TxLtm: 发送的LTM报文数量\n\n        RxLtm: 接收的LTM报文数量\n\n        Tx1Dm: 发送的1DM报文数量\n\n        Rx1Dm: 接收的1DM报文数量\n\n        若未指定（即StaItems为None），则返回所有可用统计项。\n\nReturns:\n\n    dict or pd.DataFrame or bool:\n        - 如果只匹配到一行数据：返回一个字典，键为统计项名称，值为对应统计值。\n        - 如果匹配到多行数据：返回一个pandas DataFrame，包含所有匹配的Y.1731端口统计信息。\n        - 如果没有匹配到任何结果：返回False。\n\nRaises:\n\n    ContinuableFailure: 当底层调用失败时抛出此异常，表示测试流程可以继续执行。\n\nExamples:\n\n    .. code:: RobotFramework\n\n        | Get Y1731 Port Statistic | Port=${port_obj} | StaItems=@['Tx1Dm', 'Rx1Dm'] |",
  "TesterLibrary.Protocol.y1731.get_y1731_meg_statistic": "获取Y.1731 MEG（Maintenance Entity Group）统计信息。\n\n该函数用于根据指定的MEG对象和端口对象，获取对应的Y.1731 MEG统计结果。支持按需选择统计项，返回匹配的统计值。\n\n参数:\n\n    Meg (:obj:`Y1731MegConfig`, 可选): Y.1731 MEG配置对象，用于指定要查询的MEG实例。\n                                       如果未指定，则不按MEG过滤统计信息。\n\n    Port (:obj:`Port`, 可选): 测试仪表端口对象，用于指定要查询的端口。\n                             如果未指定，则不按端口过滤统计信息。\n\n    StaItems (list, 可选): 指定需要获取的统计项列表，类型为字符串列表。当前支持的统计项包括：\n\n        - MdOrMeLevel\n        - DropPacketCount\n        - TimeOuts\n        - UnexpectedId\n        - UnexpectedLevel\n        - Meps\n        - UnexpectedMeps\n        - UnexpectedPeriod\n        - BadCcReceiveCount\n        - CcRxState\n        - CcTxState\n\n                      如果未指定或为空，则返回所有可用统计项。\n\n返回值:\n\n    dict: 包含所请求统计项及其对应值的字典。例如::\n\n        {\n            'CcRxState': 10,\n            'CcTxState': 10,\n        }\n\n异常:\n\n    如果未找到匹配的统计结果，将抛出 `ContinuableFailure` 异常。\n\n示例:\n    .. code:: RobotFramework\n\n        | Get Y1731 Meg Statistic | Session=${Session} | StaItems=@{StaItems} |",
  "TesterLibrary.Protocol.y1731.get_y1731_mp_statistic": "获取Y.1731维护点（MP）的统计信息\n\n该函数用于获取指定Y.1731 MP对象的统计结果，支持多种统计项的选择，并返回对应的统计数据。\n\nParameters:\n    Mp (object or list/set/tuple of objects, optional): \n        一个或多个Y.1731 MP对象。如果未指定，则不进行特定MP过滤。\n        每个MP对象必须包含'Name'属性，该属性将作为唯一标识符使用。\n        默认值：None\n\n    StaItems (list or str or None, optional): \n        指定需要获取的统计项列表。如果为None，则返回所有可用统计项。\n        支持以下统计项：\n\n            SessionHandle\n            MpType\n            MepId\n            RemoteMeps\n            CcmTimeout\n            CcmUnexpectMeg\n            CcmUnexpectMep\n            CcmUnexpectMeLevel\n            UnexpectedPeriod\n            TxCcm300Hz\n            TxCcm10ms\n            TxCcm100ms\n            TxCcm1s\n            TxCcm10s\n            TxCcm1min\n            TxCcm10min\n            RxCcm\n            LastTxCcmSeqNum\n            LbmTimeout\n            LbTransIdMismatch\n            TxLbm\n            RxLbm\n            TxLbr\n            RxLbr\n            TxLtm\n            RxLtm\n            TxLtr\n            RxLtr\n            LtmTimeout\n            TxAis\n            RxAis\n            AisTimeout\n            TxLck\n            RxLck\n            LckTimeout\n            Tx1Dm\n            Rx1Dm\n            TxDmm\n            RxDmm\n            TxDmr\n            RxDmr\n            DmmTimeout\n            TxLmm\n            RxLmm\n            TxLmr\n            RxLmr\n            LmmTimeout\n\n        如果传入字符串，则会被转换为单元素列表。\n        默认值：None\n\nReturns:\n    dict or pd.DataFrame or bool:\n        - 如果仅匹配一行数据：返回一个字典，键对应`StaItems`中的统计项，值为其对应的数据。\n        - 如果匹配多行数据：返回一个pandas DataFrame，包含所有匹配的统计项。\n        - 如果没有找到匹配数据：返回False。\n\nRaises:\n    ContinuableFailure: 当内部调用失败时抛出此异常，表示测试可以继续执行后续步骤。\n    TesterException: 可能传播在命令执行或数据检索过程中引发的异常。\n    sqlite3.Error: 如果在相关函数中发生数据库访问错误。\n    KeyError: 如果请求的列名不存在于最终生成的DataFrame中。\n\nSide Effects:\n    - 调用`.get()`方法可能会刷新内部状态。\n    - 在分页查询时可能执行类似GotoResultPageCommand的操作。\n    - 若启用ResultView模式，会调用time.sleep(3)以确保页面切换后的数据一致性。\n    - 为了调试目的，会在日志中记录返回的DataFrame内容。\n\nExample:\n    .. code:: RobotFramework\n\n        | Get Y1731 Mp Statistic | Mp=${MpObject} | StaItems=@{StaItems} |",
  "TesterLibrary.Statistic.common.subscribe_result": "订阅测试仪表统计视图\n\n该函数用于配置统计结果的订阅，设置需要监控的统计类型，并根据提供的参数创建相应的结果视图和订阅。它支持持续性和一次性统计监控。\n\nArgs:\n\n    Types (list or None): 要订阅的统计类型列表。如果传入None，则使用默认的常见统计类型列表。\n                          有效类型包括但不限于：\n                          \n                          PortStats\n                          PortAvgLatencyStats\n                          StreamStats\n                          StreamTxStats\n                          StreamRxStats\n                          StreamBlockStats\n                          StreamBlockTxStats\n                          StreamBlockRxStats\n\n                          BfdIpv4SessionResult\n                          BfdIpv6SessionResult\n                          BfdSessionResult\n                          IsisBfdSessionResult\n                          IsisBfdIpv6SessionResult\n                          Ospfv2BfdSessionResult\n                          Ospfv3BfdSessionResult\n\n                          EvpnRoutesStatistic\n                          BgpLinkStateStatistic\n                          BgpSessionStatistic\n                          BgpSessionBlockStatistic\n\n                          IsisSessionStats\n                          IsisTlvStats\n\n                          Ospfv2SessionResultPropertySet\n                          Ospfv3SessionResultPropertySet\n\n                          PimSessionStats\n                          PimGroupStats\n\n                          RipSessionBlockStats\n                          RipSessionStats\n\n                          IgmpHostResults\n                          IgmpPortAggregatedResults\n                          IgmpQuerierResults\n\n                          MldHostResults\n                          MldPortAggregatedResults\n                          MldQuerierResults\n\n                          PppoePortStatistic\n                          PppoeServerBlockStatistic\n                          PppoeServerStatistic\n                          PppoeClientBlockStatistic\n                          PppoeClientStatistic\n\n                          Dhcpv4ServerStats\n                          Dhcpv4ClientBlockStats\n                          Dhcpv4ClientStats\n                          Dhcpv4PortStats\n\n                          Dhcpv6PortStatistics\n                          Dhcpv6ServerStatistics\n                          Dhcpv6ClientStatistics\n                          Dhcpv6ClientBlockStatistics\n                          Dhcpv6PdClientStatistics\n\n                          L2tpPortStatistic\n                          L2tpBlockStatistic\n                          L2tpSessionStatistic\n                          L2tpTunnelStatistic\n\n                          Dot1xBlockStatistics\n                          Dot1xPortStatistics\n                          Dot1xStatistics\n\n                          LdpSessionStatistic\n                          LdpLspStatistic\n\n                          PcepLspStatistic\n                          PcepLspBlockStatistic\n                          PcepPortStatistic\n                          PcepSessionStatistic\n                          PcepSessionBlockStatistic\n\n                          LspPingSessionStats\n                          LspPingEchoRequestStats\n                          LspTraceEchoRequestStats\n\nReturns:\n\n    bool: 如果订阅成功则返回True，否则抛出ContinuableFailure异常并返回False。\n\nSide Effects:\n    - 设置self.__subscribe为当前订阅的统计类型列表。\n    - 根据不同统计类型创建结果视图并订阅结果更新。\n    - 使用cl_instance执行内部Renix命令管理结果视图和订阅。\n\nNotes:\n    - 使用全局变量STATISTIC和ONESHOT_STATISTIC验证输入类型的有效性。\n    - 对每个有效的统计类型键值，会创建新的结果视图或查询已存在的视图，然后订阅结果更新。\n    - sys_entry属性作为创建ResultView实例时的上层上下文。\n    - cl_instance用于执行结果视图和订阅相关的内部命令。\n\nExamples:\n    robotframework:\n\n.. code:: robotframework\n\n    | @{Types} | Create List | PortStats | StreamBlockStats |\n    | Subscribe Result | Types=${Types} |",
  "TesterLibrary.Statistic.common.clear_result": "清除测试仪表统计\n\n该函数用于清除指定或所有已订阅的统计视图数据。\n\nArgs:\n\n    All (bool): 是否清除所有已经订阅的统计视图的数据。默认值: True。\n                如果设为 True，则清除系统中所有当前存在的统计视图（包括 PageResultView 和 ResultView）的数据；\n                如果设为 False，则仅清除 'Objects' 参数中指定的对象对应的统计视图数据。\n\n    Objects (list or None): 指定需要清空统计视图的对象列表，仅在 All=False 时生效。默认值: None。\n                            列表中的每个对象必须包含 'handle' 属性，用于标识其对应的统计视图。\n\nReturns:\n\n    bool: 返回布尔值表示操作是否成功。成功返回 True，失败返回 False。\n\nRaises:\n\n    ContinuableFailure: 如果底层调用失败（即返回 False），将抛出此异常，表示测试可以继续执行但该步骤失败。\n\nDescription:\n\n    该函数通过调用底层 API `renix.clear_result` 来实现统计视图数据的清除功能。\n    如果 All=True，函数会自动获取系统中所有的 PageResultView 和 ResultView 实例并清除它们的数据；\n    如果 All=False，则根据传入的 Objects 列表提取 handle 并清除对应视图的数据。\n\nExamples:\n    robotframework:\n\n.. code:: robotframework\n\n    | Subscribe Result |\n    | Start Stream |\n    | Sleep | 10 |\n    | Stop Stream |\n    | Sleep | 3 |\n    | Clear Result |\n\n    # 清除所有统计视图数据\n    | Clear Result | All=True |\n\n    # 清除特定对象的统计视图数据\n    | Clear Result | All=False | Objects=[${obj1}, ${obj2}] |",
  "TesterLibrary.Statistic.common.reset_statistic": "重置测试仪表已缓存的统计信息。\n\n该函数用于清除 RenixAPI 实例中存储的所有静态统计数据，有效地将统计信息恢复到初始状态。此操作通常在需要干净的统计状态时调用，例如在开始新的测试运行之前或在获取当前统计数据以进行报告之后。\n\n返回值：\n\n    bool: 如果操作成功执行，则返回 True；否则返回 False。当返回 False 时，会抛出一个可继续的异常（ContinuableFailure），提示函数调用失败。\n\n示例：\n\n    robotframework:\n\n.. code:: robotframework\n\n    | Reset Statistic |\n\n注意事项：\n\n    - 此函数会调用底层 RenixAPI 的 reset_statistic 方法。\n    - 如果底层调用返回 False，则会引发异常 ContinuableFailure，提示具体的失败信息。",
  "TesterLibrary.Statistic.common.save_result": "Saves the test instrument statistics results to a database (DB) file.\n\nThis function saves the statistical results from the test instrument into a database file at the specified directory path with the given filename. The function ensures that the target directory exists by creating it if necessary. A `.db` extension is automatically appended to the filename to form the complete database file name.\n\n### Parameters:\n- **Path** (`str`):  \n  The directory path where the DB file should be saved. If the directory does not exist, it will be created automatically.\n  \n- **FileName** (`str`):  \n  The name of the file (without the `.db` extension) to be used for saving the results. The function will automatically append the `.db` extension to this filename.\n\n### Returns:\n- `str`:  \n  The absolute full path to the saved DB file, including the `.db` extension.\n\n### Raises:\n- `ContinuableFailure`:  \n  If the operation fails (i.e., the result returned is `False`), a `ContinuableFailure` exception is raised with an appropriate error message.\n\n### Example Usage in Robot Framework:\n```robotframework\n| @{Subscribe} | Create List | PortStats | StreamBlockStats |\n| Subscribe Result | Types=@{Subscribe} |\n| Start Stream |\n| Sleep | 10 |\n| Stop Stream |\n| Sleep | 3 |\n| ${DB} | Save Result | Path=D:\\test | FileName=result_data |\n```\n\nIn this example, the function will save the results to a file named `result_data.db` inside the `D:\\test` directory and return the full path such as `D:\\test\\result_data.db`.",
  "TesterLibrary.Statistic.common.get_port_statistic": "获取测试仪表端口统计结果\n\n该函数用于从测试仪表中获取一个或多个端口的统计信息。支持多种统计项，包括发送和接收的帧数、速率、错误计数等。函数内部调用 `_get_statictis` 方法进行数据查询，并根据返回的数据行数决定返回类型（dict 或 pandas DataFrame）。\n\nArgs:\n\n    Port (object or list or set or tuple or None): 指定需要获取统计信息的一个或多个端口对象。如果为 None，则不指定特定端口。默认: None\n\n    Mode (bool): 是否在获取统计前刷新数据（即是否从仪表后台重新读取最新统计）。若为 True，则可能调用性能刷新方法确保数据最新；若为 False，则跳过刷新步骤。默认: True\n\n    StaItems (list or str or None): 指定需要获取的统计项列表。如果为 None，则返回所有可用统计项；如果传入字符串，则会被转换为单元素列表。支持的统计项包括但不限于：\n\n        TxTotalFrames：发送报文总数\n\n        RxTotalFrames：接收报文总数\n\n        TxStreamFrames：发送流报文总数\n\n        TxSignatureStreamFrames：发送带标签流报文总数(仅DarYu支持)\n\n        RxSignatureStreamFrames：接收带标签流报文总数\n\n        TxFrameRate：发送报文速率(fps)\n\n        RxFrameRate：接收报文速率(fps)\n\n        TxL1Rate：发送线速(bps)\n\n        RxL1Rate：接收线速(bps)\n\n        TxUtil：发送百分比(%)\n\n        RxUtil：接收百分比(%)\n\n        TxByteRate：发送字节速率(Bps)\n\n        RxByteRate：接收字节速率(Bps)\n\n        TxBitRate：发送比特速率(bps)\n\n        RxBitRate：接收比特速率(bps)\n\n        TxTotalBytes：发送字节总数(仅DarYu支持)\n\n        RxTotalBytes：接收字节总数(仅DarYu支持)\n\n        RxFCSErr：接收FCS错误数\n\n        RxIpv4ChecksumError：接收IPv4 Checksum Error报文数\n\n        RxTcpChecksumError：接收TCP Checksum Error报文数\n\n        RxUdpChecksumError：接收UDP Checksum Error报文数\n\n        RxPrbsFillBytes：接收PRBS填充字节数\n\n        RxPrbsErrorBits：接收PRBS错误位数\n\n        RxPrbsErrorFrames：接收PRBS错误报文数\n\n        RxIpv4Frames：接收IPv4帧数\n\n        RxIpv6Frames：接收IPv6帧数\n\n        RxTcpFrames：接收TCP帧数\n\n        RxUdpFrames：接收UDP帧数\n\n        RxMplsCount：接收MPLS帧数\n\n        RxIcmpFrames：接收ICMP帧数\n\n        RxVlanFrames：接收VLAN帧数\n\n        RxFCoEFrames：接收FCoE帧数\n\n        RxPauseFrames：接收Pause帧数\n\n        RxUndersizeFrames：接收超短帧数\n\n        RxOversizeFrames：接收超长帧数\n\n        RxJumboFrames：接收巨型帧数\n\n        RxOutofSequenceCount：接收乱序帧数\n\n        RxFilter0Count：接收过滤帧数_0\n\n        RxFilter1Count：接收过滤帧数_1\n\n        RxFilter2Count：接收过滤帧数_2\n\n        RxFilter3Count：接收过滤帧数_3\n\n        RxFilter4Count：接收过滤帧数_4\n\n        RxFilter5Count：接收过滤帧数_5\n\n        RxFilter6Count：接收过滤帧数_6\n\n        RxFilter7Count：接收过滤帧数_7\n\n        RxPktLossCount：接收丢包帧数\n\n        RxInOrderCount：接收有序帧数\n\n        RxReorderCount：接收重排序帧数\n\n        RxRepeatFrameCount：接收重复帧数\n\n        RxPortLateCount：接收端口延迟帧数\n\n        RxCorrectedRSFECErrorsFramesCodewords：接收Corrected RS FEC Error帧数（codewords）\n\n        RxUncorrectedRSFECErrorsFramesCodewords：接收Uncorrected RS FEC Error帧数（codewords）\n\n        RxCorrectedBaseRFECErrorsFramesCodewords：接收Corrected BaseR FEC Error帧数（codewords）\n\n        RxUncorrectedBaseRFECErrorsFramesCodewords：接收Uncorrected BaseR FEC Error帧数（codewords）\n\n        TxCrcFrameCount：发送CRC帧数\n\n        TxErr3CheckFrameCount：发送IP Checksum Error报文数\n\n        TxErr4CheckFrameCount：发送L4 Checksum Error报文数\n\n        TxIpv4Count：发送IPv4帧数\n\n        TxIpv6Count：发送IPv6帧数\n\n        TxMplsCount：发送MPLS帧数\n\n        TxIpv4FrameCount：发送IPv4流帧数\n\n        TxIpv6FrameCount：发送IPv6流帧数\n\n        TxVlanFrameCount：发送VLAN流帧数\n\n        TxMplsFrameCount：发送MPLS流帧数\n\n        TxOversizeFrames：发送超长帧数\n\n        TxUndersizeFrames：发送超短帧数\n\n        TxJumboFrames：发送巨型帧数\n\n        RxPFCFrames：接收PFC帧数\n\n        RxPFCRate：接收PFC速率\n\n        RxPFCPriority0Frames：接收PFC优先级是0的帧数\n\n        RxPFCPriority1Frames：接收PFC优先级是1的帧数\n\n        RxPFCPriority2Frames：接收PFC优先级是2的帧数\n\n        RxPFCPriority3Frames：接收PFC优先级是3的帧数\n\n        RxPFCPriority4Frames：接收PFC优先级是4的帧数\n\n        RxPFCPriority5Frames：接收PFC优先级是5的帧数\n\n        RxPFCPriority6Frames：接收PFC优先级是6的帧数\n\n        RxPFCPriority7Frames：接收PFC优先级是7的帧数\n\n        TxPFCFrames：发送PFC帧数\n\n        TxPFCRate：发送PFC速率\n\n        TxPFCPriority0Frames：发送PFC优先级是0的帧数\n\n        TxPFCPriority1Frames：发送PFC优先级是1的帧数\n\n        TxPFCPriority2Frames：发送PFC优先级是2的帧数\n\n        TxPFCPriority3Frames：发送PFC优先级是3的帧数\n\n        TxPFCPriority4Frames：发送PFC优先级是4的帧数\n\n        TxPFCPriority5Frames：发送PFC优先级是5的帧数\n\n        TxPFCPriority6Frames：发送PFC优先级是6的帧数\n\n        TxPFCPriority7Frames：发送PFC优先级是7的帧数\n\n        RxARPFrames：接收ARP报文数\n\n        TxARPFrames：发送ARP报文数\n\n        RxBroadcastFrames：接收广播报文数\n\n        TxBroadcastFrames：发送广播报文数\n\n        RxIpv4LengthErrorFrames：接收IPv4长度错误帧数\n\n        RxUserDefinedCapture0Frames：接收自定义统计0报文数\n\n        RxUserDefinedCapture0Rate：接收自定义统计0报文速率(fps)\n\n        RxUserDefinedCapture1Frames：接收自定义统计1报文数\n\n        RxUserDefinedCapture1Rate：接收自定义统计1报文速率(fps)\n\n        RxUserDefinedCapture2Frames：接收自定义统计2报文数\n\n        RxUserDefinedCapture2Rate：接收自定义统计2报文速率(fps)\n\n        RxUserDefinedCapture3Frames：接收自定义统计3报文数\n\n        RxUserDefinedCapture3Rate：接收自定义统计3报文速率(fps)\n\n        RxUserDefinedCapture4Frames：接收自定义统计4报文数\n\n        RxUserDefinedCapture4Rate：接收自定义统计4报文速率(fps)\n\n        RxUserDefinedCapture5Frames：接收自定义统计5报文数\n\n        RxUserDefinedCapture5Rate：接收自定义统计5报文速率(fps)\n\n        RxFirstFrameArrivalTime：接收第一个帧的时间戳\n\n        RxLastFrameArrivalTime：接收最后一个帧的时间戳\n\nReturns:\n\n    dict or pd.DataFrame:\n        - 如果只有一行匹配结果：返回一个字典，键为请求的统计项名（StaItems），值为其对应数值。\n        - 如果有多行匹配结果：返回一个 pandas DataFrame，包含所有匹配的行并按索引筛选。\n        - 如果没有找到匹配结果：返回 False。\n\nRaises:\n\n    ContinuableFailure: 当底层调用返回 False 时抛出可继续执行的失败异常。\n\nExamples:\n\n    robotframework 示例:\n\n.. code:: robotframework\n\n    | @{StaItems} | Create List | TxTotalFrames | RxTotalFrames |\n    | Subscribe Result |\n    | Start Stream |\n    | Sleep | 10 |\n    | Stop Stream |\n    | Sleep | 3 |\n    | ${Port} | Get Ports |\n    | &{Result} | Get Port Statistic | Port=${Port} | StaItems=@{StaItems} |\n    | ${DataFrame} | Get Port Statistic | StaItems=@{StaItems} |\n    | Clear Result |",
  "TesterLibrary.Statistic.common.get_port_latency_statistic": "获取测试仪表端口时延统计结果\n\n该函数用于获取指定端口的时延统计数据，支持多种统计项，并可根据需要从仪表后台刷新数据。它既可以处理单个端口对象，也可以处理多个端口对象的查询请求。\n\nArgs:\n    Port (object or list/tuple/set of objects, optional): 需要获取结果的端口对象或端口对象集合，默认为None。\n                                                         如果未提供，则不按端口过滤统计数据。\n                                                         每个端口对象必须包含 `Name` 属性作为其标识符。\n    Mode (bool, optional): 是否从仪表后台刷新并读取最新的统计信息，默认为True。\n                          如果设置为False，可能会使用其他方式获取数据，例如缓存值。\n    StaItems (list or str or None, optional): 需要获取的统计项列表，默认为None。\n                                            如果为None，则返回所有可用的统计项。\n                                            支持的统计项包括：\n                                                - PortID：端口名称\n                                                - MinLatency：最小时延\n                                                - MaxLatency：最大时延\n                                                - AvgLatency：平均时延（注意原拼写错误\"AvaLatency\"已修正为正确形式）\n    \nReturns:\n    dict or pd.DataFrame or bool:\n        - 如果仅匹配到一行数据：返回一个字典，键为请求的StaItems，值为其对应的统计值。\n        - 如果匹配到多行数据：返回一个pandas DataFrame，包含多个端口的统计信息。\n        - 如果未找到任何匹配的数据：返回False。\n\nRaises:\n    ContinuableFailure: 如果调用底层接口失败（即返回False），会抛出可继续执行的异常。\n    TesterException: 在命令执行或数据检索过程中可能抛出的异常。\n    sqlite3.Error: 如果在数据库访问过程中发生错误（如性能数据检索）。\n    KeyError: 如果提供的列名在结果DataFrame中不存在。\n\nSide Effects:\n    - 可能通过`.get()`调用修改内部状态以刷新数据。\n    - 如果涉及分页结果视图，可能会执行类似GotoResultPageCommand的操作。\n    - 为了确保数据一致性，在页面切换时可能会调用time.sleep(3)。\n    - 调试时会将结果DataFrame以表格形式记录日志。\n\nExample:\n    >>> api = RenixAPI()\n    >>> port1 = PortObject(Name='Port1')\n    >>> port2 = PortObject(Name='Port2')\n    >>> stats_single = get_port_latency_statistic(Port=port1, StaItems=['AvgLatency', 'MinLatency'])\n    >>> stats_multiple = get_port_latency_statistic(Port=[port1, port2], StaItems='AvgLatency')\n    >>> stats_all_ports = get_port_latency_statistic(StaItems=['AvgLatency', 'MaxLatency'], Mode=False)\n\nRobotFramework 示例:\n.. code:: robotframework\n\n    | @{StaItems} | Create List | MinLatency | MaxLatency |\n    | Subscribe Result |\n    | Start Stream |\n    | Sleep | 10 |\n    | Stop Stream |\n    | Sleep | 3 |\n    | ${Port} | Get Ports |\n    | &{Result} | Get Port Latency Statistic | Port=${Port} | StaItems=@{StaItems} |\n    | Clear Result |",
  "TesterLibrary.Statistic.common.get_streamblock_statistic": "获取测试仪表流模板块统计结果\n\n该函数用于获取一个或多个流模板块（StreamBlock）的统计信息。它支持从测试仪表后台读取性能数据，并可选择性地刷新统计数据。函数根据输入参数提取流模块标识符并调用内部方法获取和过滤统计信息。\n\nArgs:\n    Stream (:obj:`StreamBlock` 或 list/set/tuple of StreamBlock, optional): \n        一个或多个StreamBlock对象，表示需要查询统计信息的流模块。如果未指定，则不使用任何标识符进行过滤。\n    \n    StaItems (list or str or None):\n        指定要获取的统计项列表。如果为None，则返回所有可用统计项；如果为字符串，则将其转换为单元素列表。\n        支持的统计项包括：\n\n        - TxPortID：发送端口\n        - RxPortID：接收端口\n        - TxStreamFrames：发送带标签流报文总数\n        - RxStreamFrames：接收带标签流报文总数\n        - TxFrameRate：发送报文速率(fps)\n        - RxFrameRate：接收报文速率(fps)\n        - TxL1Rate：发送线速(bps)\n        - RxL1Rate：接收线速(bps)\n        - TxUtil：发送百分比(%)\n        - RxUtil：接收百分比(%)\n        - RxLossStreamFrames：实时丢包数\n        - RealtimeLossRate：实时丢包率(%)\n        - ResumeTime：恢复时间(s)\n        - StartTime：流启动时间\n        - MinLatency：最小延迟(us)\n        - MaxLatency：最大延迟(us)\n        - AvaLatency：平均延迟(us)\n        - MinJitter：最小延迟抖动(us)\n        - MaxJitter：最大延迟抖动(us)\n        - AvaJitter：平均延迟抖动(us)\n        - TxByteRate：发送字节速率(Bps)\n        - RxByteRate：接收字节速率(Bps)\n        - TxBitRate：发送比特速率(bps)\n        - RxBitRate：接收比特速率(bps)\n        - TxTotalBytes：发送字节总数\n        - RxTotalBytes：接收字节总数\n        - RxPayloadErr：接收Payload Error报文数\n        - RxInSequenceCount：接收Sequence Error报文数\n        - RxFCSErr：接收FCS错误数\n        - RxIpv4ChecksumError：接收IPv4 Checksum Error报文数\n        - RxTcpChecksumError：接收TCP Checksum Error报文数\n\n    Mode (bool, optional): 控制是否在获取统计前刷新性能计数器。默认值为True。\n    \nReturns:\n    dict or pd.DataFrame or bool:\n        - 如果只找到一行匹配的数据，返回dict类型，键为统计项，值为对应的统计值；\n        - 如果找到多行数据，返回pandas的DataFrame；\n        - 如果没有找到匹配结果，返回False。\n\nRaises:\n    TesterException: 如果从测试设备获取统计信息失败。\n    sqlite3.Error: 如果在基于性能的统计检索过程中发生数据库访问错误。\n    KeyError: 如果DataFrame中不存在基于索引列的列名。\n\nExamples:\n    robotframework:\n\n.. code:: robotframework\n\n    | @{StaItems} | Create List | MinLatency | RxIpv4ChecksumError |\n    | Subscribe Result |\n    | Start Stream |\n    | Sleep | 10 |\n    | Stop Stream |\n    | Sleep | 3 |\n    | ${Stream} | Get Streams |\n    | &{Result} | Get Streamblock Statistic | Stream=${Stream} | StaItems=@{StaItems} |\n    | Clear Result |",
  "TesterLibrary.Statistic.common.get_streamblock_tx_statistic": "获取测试仪表流模板块发送统计结果\n\nArgs:\n\n    Stream (:obj:`StreamTemplate` 或其集合/None): 流块对象或集合，用于指定查询的流模板。如果传入对象则使用其Name属性；支持列表/集合/元组等容器类型传入多个流块。默认值: None（不按流块过滤）\n\n    Port (:obj:`Port` 或其集合/None): 端口对象或集合，用于指定发送端口。如果传入对象则使用其handle属性；支持列表/集合/元组等容器类型传入多个端口。默认值: None（不按端口过滤）\n\n    Mode (bool): 统计数据获取模式。True表示从仪表后台主动读取最新统计数据（默认），False表示可能使用缓存数据或替代逻辑。默认值: True\n\n    StaItems (list/str 或 None): 需要获取的统计项列表。支持以下统计项目：\n\n        StreamBlockID - 流块ID\n        PortID - 端口ID\n        ChannelCount - 通道数量\n        TxStreamFrames - 发送报文数\n        TxFrameRate - 发送报文速率(fps)\n        TxByteRate - 发送字节速率(Bps)\n        TxBitRate - 发送比特速率(bps)\n        TxL1Rate - 发送线速(bps)\n        TxUtil - 发送百分比(%)\n        TxTotalBytes - 发送字节数\n\n        如果为字符串将自动转换为单元素列表；若为None则自动根据ROM属性确定统计项\n\nReturns:\n\n    dict or (:obj:`DataFrame`) or bool:\n        - 当匹配到单行数据时：返回dict类型数据，键对应请求的StaItems，示例::\n\n            {\"TxUtil\": 1000, \"TxTotalBytes\": 1000}\n\n        - 当匹配到多行数据时：返回Pandas的DataFrame数据，参考文档: https://www.pypandas.cn/\n\n        - 当没有匹配结果时：返回False\n\nRaises:\n\n    ContinuableFailure: 当底层实现返回False时抛出可继续执行的失败异常\n\nExamples:\n    robotframework使用示例：\n\n.. code:: robotframework\n\n    | @{StaItems} | Create List | MinLatency | RxIpv4ChecksumError |\n    | Subscribe Result |\n    | Start Stream |\n    | Sleep | 10 |\n    | Stop Stream |\n    | Sleep | 3 |\n    | ${Stream} | Get Streams |\n    | &{Result} | Get Streamblock Tx Statistic | Stream=${Stream} | Port=${Port} | StaItems=@{StaItems} |\n    | Clear Result |\n\nNotes:\n    - 支持通过集合类型参数批量查询多个流块/端口的统计信息\n    - 内部调用_get_statictis方法并处理分页结果，自动执行GotoResultPageCommand等操作\n    - 为保证数据一致性，在分页导航时会自动插入3秒延迟\n    - 返回结果会根据匹配行数自动在dict/DataFrame之间切换\n    - 若查询失败返回False并抛出ContinuableFailure异常",
  "TesterLibrary.Statistic.common.get_streamblock_rx_statistic": "获取指定端口上一个或多个流模块的接收统计信息\n\n该函数用于获取测试仪表中流模块在指定接收端口上的统计结果，支持按流模块和/或端口进行过滤，并可指定需要返回的统计项。统计项包括接收帧数、速率、时延、抖动、错误计数等。\n\nArgs:\n    Stream (:obj:`StreamTemplate` 或 list/set/tuple of objects, optional): 测试仪表流量对象，可以是一个流模块对象或其集合。\n        如果提供单个对象，则使用其 `.Name` 属性进行匹配；如果为 None，则不按流模块过滤。\n    \n    Port (:obj:`Port` 或 list/set/tuple of objects, optional): 接收端口对象，可以是一个端口对象或其集合。\n        如果提供单个对象，则使用其 `.handle` 属性进行匹配；如果为 None，则不按端口过滤。\n    \n    Mode (bool, optional): 是否从仪表后台刷新并读取最新统计信息，默认值为 True。\n    \n    StaItems (list or str or None, optional): 需要获取的统计项列表，支持以下项目（可选一项或多项）：\n        \n        - StreamBlockID: 流模块 ID\n        - PortID: 端口 ID\n        - LoadBalance: 负载均衡信息\n        - RxStreamFrames: 接收报文数\n        - RxFrameRate: 接收报文速率（fps）\n        - RxByteRate: 接收字节速率（Bps）\n        - RxSeqErr: 接收序列错误\n        - RxPayloadErr: 接收负载错误\n        - MinLatency: 最小时延（us）\n        - MaxLatency: 最大时延（us）\n        - AvaLatency: 平均时延（us）\n        - ShortTermAvgLatency: 短期平均时延（us）\n        - RxBitRate: 接收比特速率（bps）\n        - RxUtil: 接收线速（bps）\n        - MinJitter: 最小延迟抖动（us）\n        - MaxJitter: 最大延迟抖动（us）\n        - AvaJitter: 平均延迟抖动（us）\n        - ShortTermAvgJitter: 短期平均延迟抖动（us）\n        - RxLossStreamFrames: 丢失的流帧数量\n        - RxIpLengthErrorCount: 接收IP长度错误帧数\n        - RxL1Rate: L1层接收速率\n        - RxIpv4ChecksumErrorFrames: 接收IPv4校验错误帧数\n        - PrbsFillBytes: PRBS填充字节数\n        - DuplicateFrames: 接收重复帧数\n        - InOrderFrames: 接收有序帧数\n        - ReOrderFrames: 接收重排序帧数\n        - PrbsErrorBits: PRBS错误位数\n        - PrbsErrorFrames: PRBS错误帧数\n        - RxFcsErrorFrames: 接收FCS错误帧数\n        - RxFcsErrorFrameRate: 接收FCS错误帧速率（fps）\n        - TcpChecksumErrorFrames: 接收TCP/UDP校验错误帧数\n        - RxAvgRate: 接收平均速率\n        - RxAvgFps: 接收平均帧率\n        - RxMaxRate: 接收最大速率\n        - RxMaxFps: 接收最大帧率\n        - RxTotalBytes: 接收总字节数\n        - RxLateCount: 接收延迟计数\n        - RxInSequenceCount: 按序接收帧计数\n        - RxOutofSequenceCount: 乱序接收帧计数\n        - RxMinInterArrivalTime: 接收最小到达时间（us）\n        - RxMaxInterArrivalTime: 接收最大到达时间（us）\n        - RxAvgInterArrivalTime: 接收平均到达时间（us）\n        - RxShortTermAvgInterArrivalTime: 接收短期平均到达时间（us）\n\nReturns:\n    dict or (:obj:`DataFrame`) or bool:\n        - 如果仅匹配到一行数据：返回一个 dict，键为统计项名称，值为对应值。\n        - 如果匹配到多行数据：返回一个 pandas.DataFrame 包含所有匹配行。\n        - 如果未找到匹配数据：返回 False。\n\nRaises:\n    TesterException: 在与测试设备交互过程中发生异常时抛出。\n    sqlite3.Error: 在性能模式下访问数据库失败时抛出。\n    KeyError: 如果内部构造的列名不存在于最终的 DataFrame 中。\n\nSide Effects:\n    - 可能会调用对象的 `.get()` 方法以刷新数据。\n    - 执行 GotoResultPageCommand 命令来浏览分页结果。\n    - 使用 time.sleep(3) 来确保 ResultView 模式下的数据一致性。\n    - 将最终的 DataFrame 以表格形式记录日志以便调试。\n\nExamples:\n    robotframework 示例：\n\n.. code:: robotframework\n\n    | @{StaItems} | Create List | MinLatency | RxIpv4ChecksumError |\n    | Subscribe Result |\n    | Start Stream |\n    | Sleep | 10 |\n    | Stop Stream |\n    | Sleep | 3 |\n    | ${Stream} | Get Streams |\n    | &{Result} | Get Streamblock Rx Statistic | Stream=${Stream} | Port=${Port} | StaItems=@{StaItems} |\n    | Clear Result |",
  "TesterLibrary.Statistic.common.get_stream_statistic": "获取测试仪表流模板统计结果\n\n该函数用于获取一个或多个流量流的详细性能指标，包括发送/接收帧数、速率、延迟、抖动、利用率、错误计数等。它封装了底层 `_get_statictis` 方法，并预配置了适用于流级数据的统计项。用户可以通过指定流对象或流ID来过滤目标流，并可选择性地指定需要查询的统计项。\n\nArgs:\n\n    Stream (:obj:`StreamTemplate` 或其子类对象，可选): 测试仪表中的流量对象，若提供，则使用其 Name 属性作为 `StreamBlockID` 进行查询。\n        默认值: None\n\n    StreamID (int, str, list, 可选): 指定要查询的流模板中流的 ID，可以是单个 ID 或多个 ID 的列表。\n        默认值: None\n        范围: 1 - 4294967295\n\n    Mode (bool, optional): 是否从仪表后台刷新并读取最新的统计数据。如果为 True（默认），则在获取前刷新数据；否则使用缓存值。\n        默认值: True\n\n    StaItems (list of str, optional): 需要获取的统计项列表，支持以下项目：\n\n        - StreamBlockID：流量模板名称\n        - StreamID：流量ID\n        - TxPortID：发送端口\n        - RxPortID：接收端口\n        - LoadBalance：负载均衡信息\n        - TxStreamFrames：发送报文数\n        - RxStreamFrames：接收报文数\n        - TxFrameRate：发送报文速率(fps)\n        - RxFrameRate：接收报文速率(fps)\n        - TxL1Rate：发送线速(bps)\n        - RxL1Rate：接收线速(bps)\n        - RxLossStreamFrames：实时丢包数\n        - RealtimeLossRate：实时丢包率(%)\n        - ResumeTime：恢复时间(s)\n        - StartTime：流启动时间\n        - TxUtil：发送带宽利用率(%)\n        - RxUtil：接收带宽利用率(%)\n        - RxPayloadErr：接收 Payload Error 报文数\n        - RxSeqErr：接收 Sequence Error 报文数\n        - RxIpLengthErrorCount：接收 IP 长度错误计数\n        - TxByteRate：发送字节速率(Bps)\n        - RxByteRate：接收字节速率(Bps)\n        - TxBitRate：发送比特速率(bps)\n        - RxBitRate：接收比特速率(bps)\n        - MinLatency：最小延迟(us)\n        - MaxLatency：最大延迟(us)\n        - AvaLatency：平均延迟(us)\n        - MinJitter：最小延迟抖动(us)\n        - MaxJitter：最大延迟抖动(us)\n        - AvaJitter：平均延迟抖动(us)\n        - RxIpv4ChecksumErrorFrames：接收 IPv4 校验和错误帧数\n        - PrbsFillBytes：PRBS 填充字节数\n        - DuplicateFrames：重复帧数量\n        - InOrderFrames：按序到达的帧数量\n        - ReOrderFrames：乱序帧数量\n        - PrbsErrorBits：PRBS 错误比特数\n        - PrbsErrorFrames：PRBS 错误帧数\n        - RxFcsErrorFrames：接收 FCS 校验错误帧数\n        - RxFcsErrorFrameRate：FCS 校验错误帧速率\n        - TcpChecksumErrorFrames：TCP 校验和错误帧数\n        - LostStreamFrames：总丢包数\n\n    如果未指定 StaItems，则默认返回一组完整的流相关统计项（仅当 Mode 不为 'db' 时有效）。\n\nReturns:\n\n    dict or pd.DataFrame or bool:\n        - 如果匹配到一个流的结果：返回一个字典，键为统计项名称，值为对应数值。\n        - 如果匹配到多个流的结果：返回一个 pandas DataFrame，包含所有匹配行，列与所请求的 StaItems 对应。\n        - 如果没有找到匹配结果：返回 False。\n\nRaises:\n\n    TesterException: 在执行底层命令获取数据过程中可能发生异常。\n    sqlite3.Error: 如果访问数据库时发生错误。\n    KeyError: 如果提供的列名在结果中不存在。\n\nSide Effects:\n\n    - 内部可能调用 `.get()` 方法刷新关联对象的数据。\n    - 执行类似 GotoResultPageCommand 的命令以处理分页结果。\n    - 使用 time.sleep(3) 等待数据同步，确保获取最新统计。\n    - 将最终结果以表格形式记录日志，用于调试。\n\nExample:\n\n.. code-block:: python\n\n    result = get_stream_statistic(Stream=my_stream, StaItems=[\"MinLatency\", \"RxIpv4ChecksumErrorFrames\"])\n    print(result)\n    # 输出示例：\n    # {'StreamBlockID': 'Stream1', 'MinLatency': 1.2, 'RxIpv4ChecksumErrorFrames': 5}\n\nRobot Framework 示例:\n\n.. code:: robotframework\n\n    | @{StaItems} | Create List | MinLatency | RxIpv4ChecksumError |\n    | Subscribe Result |\n    | Start Stream |\n    | Sleep | 10 |\n    | Stop Stream |\n    | Sleep | 3 |\n    | ${Stream} | Get Streams |\n    | &{Result} | Get Stream Statistic | Stream=${Stream} | StaItems=@{StaItems} |\n    | Clear Result |",
  "TesterLibrary.Statistic.common.get_stream_tx_statistic": "获取测试仪表流模板的发送统计结果\n\n该函数用于获取一个或多个指定流模板的发送统计信息。它支持根据流对象、端口或特定的StreamID进行过滤，并可选择性地指定需要获取的统计项。\n\nArgs:\n    Stream (:obj:`StreamTemplate` or list/set/tuple of :obj:`StreamTemplate`, optional):\n        测试仪表流量对象或对象集合，用于指定需要获取统计信息的流模板。\n        默认值：None\n\n    Port (:obj:`Port` or list/set/tuple of :obj:`Port`, optional):\n        发送端口对象或对象集合，用于指定与流相关的发送端口。\n        默认值：None\n\n    StreamID (int or str, optional):\n        指定需要获取结果的流模板中流的Id。范围: 1-4294967295\n        默认值：None\n\n    Mode (bool, optional):\n        是否从仪表后台读取统计信息。如果为True，则在获取统计前刷新数据；如果为False，则使用现有数据。\n        默认值：True\n\n    StaItems (list or str, optional):\n        需要获取的统计项目列表。如果为None，则返回所有可用统计项；如果为字符串，则转换为单元素列表。\n        支持的统计项包括：\n\n            StreamID - 流ID\n\n            StreamBlockID - 流块ID\n\n            ChannelId - 通道ID\n\n            PortID - 端口ID\n\n            TxStreamFrames - 发送报文数\n\n            TxFrameRate - 发送报文速率(fps)\n\n            TxByteRate - 发送字节速率(Bps)\n\n            TxBitRate - 发送比特速率(bps)\n\n            TxL1Rate - 发送线速(bps)\n\n            TxUtil - 发送百分比(%)\n\n            TxTotalBytes - 发送总字节数\n\nReturns:\n    dict or (:obj:`DataFrame`) or bool:\n        - 如果只获取到一行数据，则返回包含所请求统计项的字典(dict)。\n        - 如果获取到多行数据，则返回Pandas的DataFrame对象。\n        - 如果没有匹配的结果，则返回False。\n\nRaises:\n    ContinuableFailure: 如果底层调用失败，则抛出ContinuableFailure异常。\n\nExamples:\n    robotframework示例:\n\n.. code:: robotframework\n\n    | @{StaItems} | Create List | TxUtil | TxTotalBytes |\n    | Subscribe Result |\n    | Start Stream |\n    | Sleep | 10 |\n    | Stop Stream |\n    | Sleep | 3 |\n    | ${Stream} | Get Streams |\n    | &{Result} | Get Stream Tx Statistic | Stream=${Stream} | StaItems=@{StaItems} |\n    | Clear Result |",
  "TesterLibrary.Statistic.common.get_stream_rx_statistic": "获取测试仪表流模板接收端统计结果\n\nArgs:\n\n    Stream (:obj:`StreamTemplate` or list/set/tuple of :obj:`StreamTemplate`, optional): 测试仪表流量对象或对象集合，用于指定需要获取统计的流模板。如果提供多个流模板，则会批量获取它们的统计信息。默认值：None\n\n    Port (:obj:`Port` or list/set/tuple of :obj:`Port`, optional): 接收端口对象或对象集合，用于过滤特定端口上的统计信息。如果提供多个端口，则会合并这些端口的数据进行统计。默认值：None\n\n    StreamID (int or str, optional): 指定需要获取统计的流模板中流的ID，用于进一步筛选特定流的数据。取值范围: 1-4294967295，默认不指定，即获取所有流的统计信息。默认值：None\n\n    Mode (bool, optional): 是否从仪表后台刷新并读取最新的统计信息。若为True，则确保返回的是最新统计；若为False，则可能返回缓存数据以提高性能。默认值：True\n\n    StaItems (list or str, optional): 需要获取的统计项列表。支持的统计项包括：\n\n        StreamID\n        StreamBlockID\n        ChannelId\n        PortID\n        LoadBalance\n        RxStreamFrames：接收报文数\n        RxFrameRate：接收报文速率(fps)\n        RxByteRate：接收字节速率(Bps)\n        RxSeqErr\n        RxPayloadErr\n        MinLatency：最小时延(us)\n        MaxLatency：最大时延(us)\n        AvaLatency：平均时延(us)\n        ShortTermAvgLatency：短期平均时延(us)\n        RxBitRate：接收比特速率(bps)\n        RxUtil：接收百分比(%)\n        MinJitter：最小延迟抖动(us)\n        MaxJitter：最大延迟抖动(us)\n        AvaJitter：平均延迟抖动(us)\n        ShortTermAvgJitter：短期平均延迟抖动(us)\n        RxLossStreamFrames：实时丢包数\n        RxIpLengthErrorCount\n        RxIpv4ChecksumErrorFrames：接收IPv4 Checksum Error报文数\n        PrbsFillBytes：接收PRBS填充字节\n        DuplicateFrames：接收重复帧\n        InOrderFrames：接收有序帧\n        ReOrderFrames：接收重排序帧\n        PrbsErrorBits：接收PRBS错误位数\n        PrbsErrorFrames：接收PRBS错误帧数\n        RxFcsErrorFrames：接收FCS错误帧\n        RxFcsErrorFrameRate：接收FCS错误帧速率(fps)\n        TcpChecksumErrorFrames：接收TCP/UDP校验错误帧\n        RxL1Rate：接收线速(bps)\n        RxTotalBytes：接收总字节数\n        RxLateCount：接收延迟计数\n        RxInSequenceCount：接收按顺序计数\n        RxOutofSequenceCount：接收未按顺序计数\n        RxMinInterArrivalTime：接收最小到达时间(us)\n        RxMaxInterArrivalTime：接收最大到达时间(us)\n        RxAvgInterArrivalTime：接收平均到达时间(us)\n        RxShortTermAvgInterArrivalTime：接收短期平均到达时间(us)\n\n        如果StaItems为None，则返回所有可用统计项；如果为字符串，则自动转换为单元素列表。默认值：None\n\nReturns:\n\n    dict or (:obj:`DataFrame`) or bool:\n        - 如果匹配到一条记录：返回dict类型，键为统计项名称，值为对应统计值\n        - 如果匹配到多条记录：返回pandas.DataFrame类型，包含符合条件的所有统计信息\n        - 如果没有匹配到任何记录：返回False\n        更多关于pandas的使用，请参考: https://www.pypandas.cn/\n\nRaises:\n\n    TesterException: 执行命令或访问统计视图时发生异常\n    sqlite3.Error: 数据库相关错误（如列名不存在）\n    KeyError: 提供的统计项不在支持的列表中\n\nExamples:\n    robotframework示例:\n\n.. code:: robotframework\n\n    | @{StaItems} | Create List | RxAvgInterArrivalTime | RxShortTermAvgInterArrivalTime |\n    | Subscribe Result |\n    | Start Stream |\n    | Sleep | 10 |\n    | Stop Stream |\n    | Sleep | 3 |\n    | ${Stream} | Get Streams |\n    | &{Result} | Get Stream Rx Statistic | Stream=${Stream} | StaItems=@{StaItems} |\n    | Clear Result |\n\nSide Effects:\n    - 内部可能会调用`.get()`方法刷新统计数据，从而影响内部状态\n    - 当处理分页结果时，会执行GotoResultPageCommand命令跳转到相应页面\n    - 在访问结果视图时会调用time.sleep(3)以确保数据一致性\n    - 为了调试目的，最终的结果DataFrame会被记录日志",
  "TesterLibrary.Stream.common.add_stream": "Adds a stream of specified type (raw, pcap, or binding) to the test configuration with optional configurations.\n\nThis function supports creating three types of streams:\n- 'raw': Creates raw traffic streams on specified ports.\n- 'pcap': Loads packet data from a PCAP file and creates corresponding streams.\n- 'binding': Binds source and destination endpoints for protocol-specific traffic based on Layer.\n\nDepending on the Type parameter, different sets of parameters are used. The created stream(s) can be further customized using keyword arguments via `edit_stream`.\n\nParameters:\n    Type (str, optional): Type of stream to create. Valid values: 'raw', 'pcap', 'binding'. Default is 'raw'.\n    Ports (Port object or list of Port objects, optional): Port(s) where the stream will be added.\n        Required for 'raw' and 'pcap' types. Ignored if Type is 'binding'.\n    Names (str or list of str, optional): Name(s) to assign to the created stream(s). If not None, each stream\n        will be named accordingly. For multiple streams, the name will be appended with an incrementing number.\n    FilePath (str, optional): Path to the PCAP file containing packet data. Required only if Type is 'pcap'.\n    IncludeCrc (bool, optional): Whether to include CRC in the packets when loading from a PCAP file.\n        Applicable only if Type is 'pcap'. Default is True.\n    SrcPoints (Endpoint object or list of Endpoint objects, optional): Source endpoint(s) for binding streams.\n        Used if Type is 'binding'. Overrides SrcInterface if both are provided.\n    DstPoints (Endpoint object or list of Endpoint objects, optional): Destination endpoint(s) for binding streams.\n        Used if Type is 'binding'. Overrides DstInterface if both are provided.\n    SrcInterface (Interface object or list of Interface objects, optional): Source interface(s) from which to derive\n        source endpoints for binding streams. Used if Type is 'binding' and SrcPoints is not provided.\n    DstInterface (Interface object or list of Interface objects, optional): Destination interface(s) from which to derive\n        destination endpoints for binding streams. Used if Type is 'binding' and DstPoints is not provided.\n    Bidirection (bool, optional): If True, creates bidirectional traffic between source and destination endpoints.\n        Applicable only for 'binding' Type.\n    Direction (str, optional): Direction of traffic for binding streams. Can be 'source_to_destination',\n        'destination_to_source', or other valid direction strings as expected by the backend.\n    Layer (str, optional): Protocol layer to use for binding streams. Supported values: 'ethernetii'/'eth',\n        'vlan', 'gre', 'ipv4', 'ipv6'. Determines the top layer type used during binding.\n    TrafficMeshMode (int, optional): Specifies how endpoints are paired in binding streams. See backend documentation.\n    EndpointMapping (list of tuples, optional): Custom mapping between source and destination endpoints.\n        Each tuple represents a pair (source_endpoint, destination_endpoint).\n    AutoCreateTunnel (bool, optional): If True, automatically creates tunnels for binding streams. Default is False.\n    StreamOnly (bool, optional): If set, configures whether the stream should be treated as \"stream-only\" mode,\n        affecting how it's handled in the test configuration.\n    **kwargs (dict): Additional attributes to apply to the created stream(s), passed through `edit_stream`.\n        These may include any valid stream properties like rate, frame size, etc.\n\nReturns:\n    StreamTemplate or list of StreamTemplate: The created stream(s). Returns a single stream if only one is created;\n        otherwise returns a list of streams. Each stream is also edited according to the provided `Names` and `**kwargs`.\n\nRaises:\n    TypeError: If invalid combinations or types of input parameters are provided.\n    ValueError: If required parameters like FilePath (for pcap) or Src/Dst points/interfaces (for binding) are missing.\n    TesterException: If backend operations fail or invalid attributes are passed via **kwargs.\n\nNote:\n    - Uses internal command execution (e.g., CreateStreamFromPcapCommand, CreateBindingStreamCommand).\n    - Relies on `edit_stream` to apply names and additional configurations after stream creation.\n    - Assumes that Port, Interface, and Endpoint objects have methods like `get_children()` and a `handle` property.",
  "TesterLibrary.Stream.common.edit_stream": "修改测试仪表流量模板参数，支持对一个或多个流模板的属性进行批量修改，并可配置接收端口关系。\n\nArgs:\n    Stream (:obj:`StreamTemplate` 或 iterable of :obj:`StreamTemplate`): 要编辑的测试仪表流量模板对象或对象集合。如果传入的是单个流对象，则内部会自动转换为列表进行处理。\n\nKeyword Args:\n    RepeatCount (int): 流模板发送重复次数，默认值：1，支持范围：1-4294967295\n    EnableSignature (bool): 启用签名，默认值：True\n    FrameLengthType (str): 帧长度类型，默认值：FIXED，支持值：FIXED、INCREMENT、RANDOM、AUTO、DECREMENT、IMIX\n    RandomLengthSeed (int): 随机帧长生成种子，默认值：10900842，支持范围：0-4294967295\n    FixedLength (int): 固定帧长，默认值：128，支持范围：12-16383\n    MinLength (int): 最小帧长，默认值：128，支持范围：12-16383\n    MaxLength (int): 最大帧长，默认值：256，支持范围：12-16383\n    StepLength (int): 帧长步进值，默认值：1，支持范围：1-8192\n    PayloadType (str): 净荷模式，默认值：CYCLE，支持值：CYCLE、INCREMENT、RANDOM\n    PayloadValue (str): 净荷值，默认值：0x0\n    PayloadValueType (str): 净荷值类型，默认值：CYCLE，支持值：SINGLE_BYTE、DOUBLE_BYTE\n    EnableNDResponse (bool): 是否启用ARP/ND自动回复，默认值：False\n    TopLayerType (str): 报文模板最上层协议类型，默认值：IPV4，支持值：ETHERNETII、VLAN、GRE、IPV4、IPV6\n    RxPorts (list of :obj:`Port` 或 Port object): 指定关联的接收端口或端口列表。如果是单个Port对象，会被转换为列表处理。此操作会触发SelectRxPortCommand命令，配置流与接收端口的一对多关系。\n    TrafficMeshMode (str): 流绑定模式，默认值：MANY_TO_MANY，支持值：ONE_TO_ONE、MANY_TO_MANY、FULL_MESH、CONGESTION、LEARNING、BACK_BONE、PAIR\n    HostsMesh (str): 主机绑定模式，默认值：ROUND_ROBIN，支持值：ROUND_ROBIN、MANY_TO_MANY\n\nReturns:\n    bool: 如果所有流和相关配置成功更新则返回 True；若失败则返回 False（此时将抛出 ContinuableFailure 异常）。\n\nRaises:\n    ContinuableFailure: 当流配置失败时抛出该异常，包含错误信息。\n    TesterException: 如果尝试设置的属性在流对象中不存在，则可能由底层引发TesterException（AttributeError类型）。\n\nExamples:\n    .. code:: RobotFramework\n\n        | Edit Stream | Stream=${Stream} | TopLayerType=ETHERNETII | TrafficMeshMode=FULL_MESH |\n    .. code:: RobotFramework\n\n        | Edit Stream | Stream=${StreamList} | RepeatCount=10 | RxPorts=@{RxPortList} |\n\nDescription:\n    该函数的主要功能包括：\n    1. 支持对单个或多个流模板进行属性批量修改。\n    2. 特殊处理 'RxPorts' 参数，配置流与接收端口的一对多关系，使用 SelectRxPortCommand 命令实现。\n    3. 在修改完属性后调用 `get()` 方法刷新流对象状态。\n    4. 返回布尔值表示操作是否成功，失败时抛出 ContinuableFailure 异常以供测试框架捕获继续执行。\n\nNote:\n    - 所有参数均通过关键字参数方式传递。\n    - 若传入了不支持的属性名，可能会引发 TesterException。\n    - 函数内部依赖 RenixAPI 实例来执行实际的修改逻辑。",
  "TesterLibrary.Stream.common.create_stream_header": "创建流量报文头部\n\n该函数用于在指定的流量对象中创建或插入一个或多个报文头部。可以根据提供的头部类型列表生成对应的协议头部，并将其插入到指定的索引位置，或者在未提供索引时重新创建整个报文头部结构。\n\nArgs:\n\n    Stream (:obj:`StreamTemplate`): 测试仪表流量对象，类型为 `StreamTemplate` 或其子类。该对象表示要操作的流量流。\n\n    Index (int, optional): 指定插入新报文头部的位置。取值范围为 None 或 0-16383。当为 None 时，表示重新创建整个报文头部（即替换现有头部）。若绑定流则必须指定此参数，默认为 None。\n\n    HeaderTypes (list of str): 要创建的报文头部类型的字符串列表，支持多种协议头部（不区分大小写），包括但不限于：\n\n        - EthernetII\n        - VLAN\n        - IPv4 / IPv6\n        - TCP / UDP\n        - ARP / ICMPv4 / ICMPv6\n        - PPP / PPPoE\n        - MPLS\n        - IGMP / MLD\n        - OSPF\n        - SCTP\n        - 自定义头部（Custom）\n\n        完整支持的头部类型请参见下方详细列表。\n\nReturns:\n\n    bool: 返回布尔值，表示操作是否成功。True 表示成功，False 表示失败（此时会抛出异常）。\n\nRaises:\n\n    ContinuableFailure: 如果底层调用返回 False，则抛出可继续执行的失败异常，包含详细的错误信息。\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${HeaderTypes} | Create List | EthernetII | IPv4 | TCP |\n        | Create Stream Header | Stream=${Stream} | HeaderTypes=${HeaderTypes} |\n\nSupported Header Types (不区分大小写):\n\n    ethernetii: EthernetII Instance  \n    raw: Ethernet802.3 Raw Instance  \n    vlan: VLAN Instance  \n    vxlan: VXLAN Header Instance  \n    arp: ARP Instance  \n    gre: GRE Instance  \n    ipv4: IPv4 Instance  \n    ipv6: IPv6 Instance  \n    tcp: TCP Instance  \n    udp: UDP Instance  \n    l2tpv2data: L2TPv2 Data Over UDP Instance  \n    l2tpv2control: L2TPv2 Control Over UDP Instance  \n    l2tpv3controloverip: L2TPv3 Control Over IP Instance  \n    l2tpv3controloverudp: L2TPv3 Control Over UDP Instance  \n    l2tpv3dataoverip: L2TPv3 Data Over IP Instance  \n    l2tpv3dataoverudp: L2TPv3 Data Over UDP Instance  \n    dhcpv4server  \n    dhcpv4client  \n    dhcpv6client  \n    dhcpv6server  \n    ppp: PPP Instance  \n    pppoe: PPPoE Instance  \n    pppoediscovery: PPPoE Discovery Instance  \n    icmpv4echorequest: ICMPv4 EchoRequest Instance  \n    destunreach: ICMPv4 DestUnreach Instance  \n    icmpv4echoreply: ICMPv4 EchoReply Instance  \n    informationreply: ICMPv4 InformationReply Instance  \n    informationrequest: ICMPv4 InformationRequest Instance  \n    icmpv4parameterproblem: ICMPv4 ParameterProblem Instance  \n    icmpv4redirect: ICMPv4 Redirect Instance  \n    sourcequench: ICMPv4 SourceQuench Instance  \n    timeexceeded: ICMPv4 TimeExceeded Instance  \n    timestampreply: ICMPv4 TimestampReply Instance  \n    timestamprequest: ICMPv4 TimestampRequest Instance  \n    icmpmaskrequest: ICMPv4 Address Mask Request Instance  \n    icmpmaskreply: ICMPv4 Address Mask Reply Instance  \n    destinationunreachable: ICMPv6 DestinationUnreachable Instance  \n    icmpv6echoreply: ICMPv6 EchoReply Instance  \n    icmpv6echorequest: ICMPv6 EchoRequest Instance  \n    packettoobig: ICMPv6 PacketTooBig Instance  \n    icmpv6parameterproblem: ICMPv6 ParameterProblem Instance  \n    timeexceed: ICMPv6 TimeExceed Instance  \n    routersolicit: Router Solicitation Instance  \n    routeradvertise: Router Advertisement Instance  \n    icmpv6redirect: Redirect Instance  \n    neighborsolicit: Neighbor Solicitation Instance  \n    neighboradvertise: Neighbor Advertisement Instance  \n    mldv1query: ICMPv6 MLDv1 Query Instance  \n    mldv1report: ICMPv6 MLDv1 Report Instance  \n    mldv1done: ICMPv6 MLDv1 Done Instance  \n    mldv2query: ICMPv6 MLDv2 Query Instance  \n    mldv2report: ICMPv6 MLDv2 Report Instance  \n    igmpv1: IGMPv1 Report Instance  \n    igmpv1query: IGMPv1 Query Instance  \n    igmpv2: IGMPv2 Report Instance  \n    igmpv2query: IGMPv2 Query Instance  \n    igmpv3report: IGMPv3 Report Instance  \n    igmpv3query: IGMPv3 Query Instance  \n    custom: Custom Instance  \n    ospfv2linkstateupdate: OSPFv2 Link State Update Instance  \n    ospfv2linkstaterequest: OSPFv2 Link State Request Instance  \n    ospfv2databasedescription: OSPFv2 Database Description Instance  \n    ospfv2linkstateacknowledge: OSPFv2 Link State Acknowledge Instance  \n    ospfv2unknown: OSPFv2 Unknown Instance  \n    ospfv2hello: OSPFv2 Hello Instance  \n    mpls: MPLS Instance  \n    l1csnpheader: ISIS-L1 CSNP Config Instance  \n    isisl1helloheader: ISIS-L1 Hello Config Instance  \n    l1lspheader: ISIS-L1 LSP Config Instance  \n    l1psnpheader: ISIS-L1 PSNP Config Instance  \n    l2csnpheader: ISIS-L2 CSNP Config Instance  \n    isisl2helloheader: ISIS-L2 Hello Config Instance  \n    l2lspheader: ISIS-L2 LSP Config Instance  \n    l2psnpheader: ISIS-L2 PSNP Config Instance  \n    p2phelloheader: ISIS P2P Hello Config Instance  \n    gtpv1: GTPv1 Instance  \n    gtpv1opt: GTPv1 Optional Fields Instance  \n    gtpv1exthdr: GTPv1 Extension Header  \n    gtpv1ext: GTPv1 Optional Fields and Extension Header Instance  \n    ipv6fragmentheader: IPv6 Fragment Header  \n    ipv6routingheader: IPv6 Routing Header  \n    ipv6authenticationheader: IPv6 Authentication Header  \n    ipv6destinationheader: IPv6 Destination Header  \n    ipv6encapsulationheader: IPv6 Encapsulation Header  \n    ipv6hopbyhopheader: IPv6 Hop By Hop Header  \n    ipv6srheader: IPv6 SR Header  \n    stag: Customer STag Ethernet  \n    encapethernetii: Encapsulated Customer EthernetII Instance  \n    encapbackboneeth: Encapsulated MAC-in-Mac  \n    itag: iTag Instance  \n    mac-in-mac: MAC-in-MAC Instance  \n    encapcustomereth: Encapsulated Customer Ethernet Instance  \n    portmanagement: ANCP Instance  \n    bier: BIER Instance  \n    ccm: Continuity Check Message (CCM)  \n    chdlc: Cisco HDLC Instance  \n    cw: Control Word Instance  \n    elsflogi: ELS FLOGI Instance  \n    8023: Ethernet802.3 Instance  \n    goose: Goose Instance  \n    logiclinkcontrol: LLC Header  \n    cfg: MSTP Config Instance  \n    pause: Pause Instance  \n    pfc: PFC Instance  \n    vntag: VN Tag Instance  \n    fc: Fibre Channel Instance  \n    chassisidtlv: LLDP Chassis ID TLV  \n    portidtlv: LLDP Port ID TLV  \n    ttltlv: LLDP Time To Live TLV  \n    endtlv: LLDP End TLV  \n    hsrtag: HSR Tag Instance  \n    prptag: PRP Tag Instance  \n    rtag: R Tag Instance  \n    sctp: SCTP Instance  \n    trill: TRILL Instance",
  "TesterLibrary.Stream.common.edit_modifier": "修改测试仪表流量模板中指定报文字段的跳变域，用于配置或编辑流模板中特定报文头部字段的跳变行为。\n\nArgs:\n    Stream (:obj:`StreamTemplate`): 测试仪表流量对象，表示要修改的流量模板。\n    Attribute (str): 要修改的报文字段属性名称，例如 \"source\"、\"destination\" 等。\n    Level (int, optional): 当 HeaderType 为 None 时，表示在流量模板所有报文头部中的序列号；当 HeaderType 不为 None 时，表示在相同类型报文头部中的序列号。默认值为 0。\n    Index (int, optional): 跳变编号，用于标识该字段的第几个跳变配置。若未指定，默认使用第一个可用索引。默认值为 None。\n\nKeyword Args:\n    Type (str, optional): 跳变类型，支持以下几种：\n        - Increment: 递增\n        - Decrement: 递减\n        - Random: 随机\n        - List: 按照列表循环\n    Start (str, optional): 跳变起始值，如 IP 地址、端口号等字符串形式的起始数据。\n    Count (int, optional): 跳变值的数量。\n    Step (int, optional): 每次跳变的步长。\n    Repeat (int, optional): 跳变值重复次数。\n    Range (int, optional): 随机跳变范围的最大值（随机值在 [Start, Start + Range) 之间）。\n    Seed (int, optional): 随机跳变种子，用于控制随机数生成的一致性。\n    StreamType (str, optional): 流跳变类型，支持：\n        - IntraModifier: 同一流内部跳变\n        - InterModifier: 流之间跳变\n    Offset (int, optional): 跳变字段的偏移位，用于定位具体操作的位置。\n    Mask (str, optional): 跳变掩码，用于按位操作。\n    List (list, optional): 跳变列表，当 Type 为 List 时使用，提供具体的跳变值列表。\n    HeaderType (str, optional): 要修改的报文头部类型名称（不区分大小写），如果不指定则根据 Level 选择任意类型的头部。支持的头部类型包括：\n        - ethernetii\n        - vlan\n        - vxlan\n        - arp\n        - ipv4\n        - ipv6\n        - tcp\n        - udp\n        - l2tpv2data\n        - ppp\n        - icmpv4echorequest\n        - destunreach\n        - icmpv4echoreply\n        - informationreply\n        - informationrequest\n        - icmpv4parameterproblem\n        - icmpv4redirect\n        - sourcequench\n        - timeexceeded\n        - timestampreply\n        - timestamprequest\n        - icmpmaskrequest\n        - icmpmaskreply\n        - destinationunreachable\n        - icmpv6echoreply\n        - icmpv6echorequest\n        - packettoobig\n        - icmpv6parameterproblem\n        - timeexceed\n        - routersolicit\n        - routeradvertise\n        - icmpv6redirect\n        - neighborsolicit\n        - neighboradvertise\n        - mldv1query\n        - mldv1report\n        - mldv1done\n        - mldv2query\n        - mldv2report\n        - igmpv1\n        - igmpv1query\n        - igmpv2\n        - igmpv2query\n        - igmpv3report\n        - igmpv3query\n        - custom\n        - ospfv2linkstateupdate\n        - ospfv2linkstaterequest\n        - ospfv2databasedescription\n        - ospfv2linkstateacknowledge\n        - ospfv2unknown\n        - ospfv2hello\n        - mpls\n\nReturns:\n    dict: 包含跳变配置结果的字典，包含以下键：\n        - 'Stream': 应用跳变的流对象。\n        - 'Header': 被修改的报文头部名称。\n        - 'Attribute': 被修改的字段属性名称。\n        - 'Index': 跳变在该字段中的索引位置。\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${Streams} | add_stream | Port=${Port} |\n        | ${HeaderTypes} | Create List | EthernetII | IPv4 | TCP |\n        | Create Stream Header | Stream=${Stream} | HeaderTypes=${HeaderTypes} |\n        # 不指定HeaderType, Level=1选中IPv4头部\n        | Edit Modifier | Stream=${Stream} | Level=1 | Attribute=source | Start=192.168.1.1 | Count=10 | Step=1 |\n        # 指定HeaderType=IPv4, Level=0选中IPv4头部\n        | Edit Modifier | Stream=${Stream} | Level=0 | HeaderType=IPv4 | Attribute=destination | Start=192.168.1.1 | Count=10 | Step=1 |",
  "TesterLibrary.Stream.common.edit_modifier_link": "修改测试仪表流量模板中指定报文字段的跳变域的链接关系。\n\n该函数用于配置或更新流量模板中某个字段跳变（modifier）之间的链接关系。通过该功能，可以将多个跳变参数进行关联，实现复杂的流量行为控制。该函数最终调用 Renix API 执行实际操作。\n\nArgs:\n\n    Stream (:obj:`StreamTemplate` 或其列表/元组/集合): 流量模板对象，表示一个待编辑的流量实例。\n        如果传入的是可迭代对象（如 list、tuple、set），则仅使用第一个元素。\n        该对象必须包含一个 'handle' 属性，用于唯一标识该流。\n\n    Link (list 或 list of lists): 表示链接信息的列表。每个元素应为字典类型，包含以下三个键：\n        - 'Header': 报文头部名称（例如 IPv4）\n        - 'Attribute': 字段名（例如 source, destination）\n        - 'Index': 跳变索引编号\n        如果 `Link` 是嵌套列表（即多个链接），则分别处理每个子列表。\n\n    LinkModifierType (str, optional): 指定跳变链接的类型，默认为 'MODIFIER_ID'。\n        可选值包括 'MODIFIER_ID' 和 'LINK_MODIFIER_PATH'。\n        该参数直接影响底层系统对跳变的解析方式。\n\n    BindingModifier (bool, optional): 是否绑定跳变，默认为 False。\n        若设为 True，则跳变与字段绑定；否则不绑定，影响跳变的生命周期或行为。\n\nReturns:\n\n    bool: 命令执行成功时返回 True，失败时抛出 ContinuableFailure 异常。\n\nExamples:\n    ::\n\n        | ${Streams} | add_stream | Port=${Port} |\n        | ${HeaderTypes} | Create List | EthernetII | IPv4 | TCP |\n        | Create Stream Header | Stream=${Stream} | HeaderTypes=${HeaderTypes} |\n        # 不指定HeaderType, Level=1选中IPv4头部\n        | ${Modifier_1} | Edit Modifier | Stream=${Stream} | Level=1 | Attribute=source | Start=192.168.1.1 | Count=10 | Step=1 |\n        # 指定HeaderType=IPv4, Level=0选中IPv4头部\n        | ${Modifier_2} | Edit Modifier | Stream=${Stream} | Level=0 | HeaderType=IPv4 | Attribute=destination | Start=192.168.1.1 | Count=10 | Step=1 |\n        | ${LinkModifier} | Create List | ${Modifier_1} | ${Modifier_2} |\n        | Edit Modifier Link | Stream=${Stream} | Link=${LinkModifier} |",
  "TesterLibrary.Stream.common.select_rx_port": "选择流量的收端口\n\n该函数用于为一个或多个指定的流量流（Stream）配置接收端口（RX Port），在底层调用 Renix API 执行实际操作，并根据执行结果返回布尔值表示成功或失败。\n\nArgs:\n\n    Streams (list (:obj:`StreamTemplate`)): 测试仪表流量对象列表，每个对象应包含 `handle` 属性，用于唯一标识 Renix 系统中的流量。\n\n    RxPorts (list (:obj:`Port`)): 指定流量的接收端口对象列表，每个对象应包含 `handle` 属性，用于唯一标识 Renix 系统中的端口。\n\n    Mode (int, optional): 配置 RX 端口的选择模式。默认值为 1（对应 ONE_TO_ONE 模式）。支持的模式包括：\n\n        1: ONE_TO_ONE（一对一）\n\n        2: ONE_TO_MANY（一对多）\n\n        3: MANY_TO_ONE（多对一）\n\n        4: PAIR（成对绑定）\n\n    ExcludeTxPort (bool, optional): 是否排除发送端口作为接收端口使用，默认值为 True。\n\nReturns:\n\n    bool: 成功返回 True，失败抛出 ContinuableFailure 异常并附带错误信息。\n\nRaises:\n\n    ContinuableFailure: 当底层调用返回 False 时抛出，表示操作失败但测试可以继续执行。\n\nExamples:\n    ::\n\n    | Select Rx Port | Streams=${Streams} | RxPorts=${Ports} | Mode=2 | ExcludeTxPort=True |",
  "TesterLibrary.Stream.common.start_stream": "Starts one or more streams based on the provided type and objects.\n\n    This function determines how to start streams depending on the 'Type' argument.\n    If 'Type' is 'port', it starts all streams associated with the given ports. Otherwise,\n    it treats the provided objects directly as streams to be started. If no type is specified,\n    it starts all available streams.\n\n    Parameters:\n        Type (str, optional): Specifies the type of object for which streams should be started.\n                              Valid values include 'port' or None. If None, all streams are started.\n                              Default: None\n        Objects (list or object, optional): A single object or list of objects representing the ports or\n                                          streams to start. If Type is 'port', this should be a list of port\n                                          objects; otherwise, a list of stream objects.\n                                          Default: None\n\n    Returns:\n        bool: Returns True if the operation is executed successfully, False otherwise.\n\n    Description:\n        The method wraps either a StartAllStreamCommand or a StartStreamCommand depending on the input.\n        When 'Type' is 'port', it retrieves all stream templates associated with the provided port objects.\n        For other cases, it assumes that the Objects parameter contains direct references to stream objects.\n        It then executes the command via the cl_instance (command layer instance) and sets an internal flag\n        indicating that statistics should be collected after starting the stream(s).\n\n    Example usage:\n        >>> TesterLibrary.Stream.common.start_stream()  # Starts all streams\n        >>> TesterLibrary.Stream.common.start_stream(Type='port', Objects=[port1, port2])  # Starts streams under specific ports\n        >>> TesterLibrary.Stream.common.start_stream(Objects=[stream1, stream2])  # Starts specific streams",
  "TesterLibrary.Stream.common.stop_stream": "停止发送数据流操作，用于终止测试仪表的一个或多个数据流的发送。该函数支持全局停止所有数据流，或根据指定对象（端口或流模板）停止对应的数据流。\n\nArgs:\n\n    Type (str, optional): 指定操作的目标类型。默认为 None，表示停止所有数据流。\n                          可选值包括：\n                          - 'port': 表示根据提供的端口对象停止其关联的所有流模板数据流。\n                          - 其他值（或不传）表示将提供的 Objects 视为直接的流相关对象并停止它们。\n\n    Objects (list or object, optional): 要停止数据流的对象或对象列表。如果 Type 为 'port'，\n                                        则每个对象应为包含子级 'StreamTemplate' 的端口对象；\n                                        否则，这些对象本身应为流相关实体（如流模板）。若未提供且 Type 不为 'port'，\n                                        则不会执行具体操作，除非 Type 为 None（此时停止所有流）。\n\nReturns:\n\n    bool: 如果命令成功执行，返回 True；如果失败，抛出 ContinuableFailure 异常，并附带错误信息。\n\nExamples:\n    .. code:: RobotFramework\n\n        | Subscribe Result |\n        | Start Stream |\n        | Sleep | 10 |\n        | Stop Stream |  # 停止所有数据流\n        | Sleep | 3 |\n        | @{Objects} | Get Ports |\n        | Start Stream | Types=port | Objects=@{Objects} |\n        | Sleep | 10 |\n        | Stop Stream | Types=port | Objects=@{Objects} |  # 停止指定端口上的数据流",
  "TesterLibrary.Stream.common.wait_stream_state": "等待测试仪表流量达到指定状态\n\nArgs:\n\n    Stream ((:obj:`StreamTemplate`) or list/set/tuple of :obj:`StreamTemplate`): 测试仪表流模板对象或对象集合。若为None（默认值），则监控由rom_manager管理的所有流。\n\n    State (str or list/set/tuple of str): 流模板的期望目标状态，默认值为['READY']，支持以下状态：\n\n        DISABLED\n\n        NOTREADY\n\n        READY\n\n        RUNNING\n\n        STOPPED\n\n        PAUSED\n\n    TimeOut (int): 超时时间（单位秒），默认值：60\n\nReturns:\n\n    bool: 如果所有流在超时时间内进入指定的状态之一，则返回True；否则返回False。\n\nExamples:\n    .. code:: RobotFramework\n\n        | Start Stream |\n        | Sleep | 10 |\n        | Wait Stream State |\n        | Sleep | 3 |\n\n描述:\n该函数持续检查每个提供的流（或如果未提供流，则检查所有已知流）的当前状态。\n它会一直等待，直到每个流都进入指定的目标状态之一。\n如果在指定的时间内未能全部进入目标状态，则记录超时信息并返回False。\n否则，一旦所有流进入目标状态，返回True。",
  "TesterLibrary.Stream.common.start_l2_learning": "启动测试仪表流量二层学习\n\n该函数用于在指定的端口或流量模板上启动二层（L2）学习。支持两种类型的L2学习：标准L2学习（Tx）和基于接收的L2学习（Rx）。如果未指定任何端口或流，则默认会在系统中所有可用的流量模板上启动L2学习。\n\nArgs:\n    Type (str, optional): 指定要执行的L2学习类型，支持字符串值：\"Tx\" 或 \"Rx\"。\n                          如果为None，则使用标准L2学习命令(StartL2LearningCommand)。\n                          如果提供了值（通常表示基于接收的学习），则使用StartL2RxLearningCommand。\n\n    Ports (list (:obj:`Port`), optional): 要执行L2学习的一个或多个端口对象列表。\n                                        每个端口应具有get_children('StreamTemplate')方法以获取关联的流模板。\n                                        如果不为None，则Streams必须为None。默认为None。\n\n    Streams (list (:obj:`StreamTemplate`), optional): 用于L2学习的一个或多个流量模板对象列表。\n                                                  每个流必须包含'handle'属性。\n                                                  如果不为None，则Ports必须为None。默认为None。\n\n    WaitLearningDone (bool, optional): 是否等待L2学习完成后再返回结果。仅当Type为None且WaitLearningDone为True时有效。\n                                      如果为True，则函数会等待直到学习过程完成；\n                                      如果为False，则异步启动学习过程。默认为True。\n\n    WaitTime (int, optional): 等待L2学习完成的最大时间（秒）。仅当Type为None、WaitLearningDone为True时有效。\n                             默认值为30秒。\n\nReturns:\n    bool: 布尔值表示操作是否成功启动。若返回False将抛出ContinuableFailure异常，否则返回True。\n\nRaises:\n    TesterException: 如果同时提供了Ports和Streams参数，将引发异常，因为这两个参数互斥。\n\nExamples:\n    .. code:: RobotFramework\n\n        | Subscribe Result |\n        | Start L2 Learning |\n        | Sleep | 10 |\n        | Stop L2 Learning |\n        | Sleep | 3 |",
  "TesterLibrary.Stream.common.stop_l2_learning": "停止测试仪表流量二层学习过程。\n\n该函数用于在指定的端口或流模板上停止正在进行的二层（L2）学习过程。它通过调用 Renix API 来执行停止操作。\n\n### 参数说明：\n\n- **Ports** (`list` of `Port`, optional): 测试仪表上的端口对象列表，表示在哪些端口上停止 L2 学习。默认为 `None`。\n  \n- **Streams** (`list` of `StreamTemplate`, optional): 测试仪表上的流量模板对象列表，表示基于哪些流模板停止 L2 学习。默认为 `None`。\n\n> 注意：`Ports` 和 `Streams` 是互斥参数，不能同时设置。如果两者都为 `None`，则会停止系统中所有可用流模板的 L2 学习。\n\n### 返回值：\n\n- `bool`: 布尔值，表示操作是否成功：\n  - `True`: 成功停止 L2 学习。\n  - `False`: 操作失败，并将抛出 `ContinuableFailure` 异常。\n\n### 示例：\n\n```robotframework\n| Subscribe Result |\n| Start L2 Learning |\n| Sleep | 10 |\n| Stop L2 Learning |\n| Sleep | 3 |\n```\n\n### 功能描述：\n\n此函数通过调用底层 `renix.start_l2_learning()` 接口来停止 L2 学习。若返回结果为 `False`，则会抛出可继续执行的异常 `ContinuableFailure`；否则返回 `True` 表示操作成功。\n\n### 异常处理：\n\n- 如果同时指定了 `Ports` 和 `Streams`，将引发 `TesterException`，因为这两个参数是互斥的。",
  "TesterLibrary.Stream.common.start_l3_learning": "启动测试仪表流量三层ARP学习\n\n该函数用于在指定的端口或流模板上启动ARP学习。支持以下三种模式：\n1. 仅提供 Ports 参数时，将获取每个端口关联的所有流模板，并在这些流模板上启动L3学习。\n2. 仅提供 Streams 参数时，将在指定的流模板上直接启动L3学习。\n3. 如果两者均不提供，则会在所有可用流模板上启动ARP学习。\n\n参数:\n    Ports (Union[object, list], optional): 端口对象或端口对象列表，用于获取其关联的流模板。默认为 None\n    Streams (Union[object, list], optional): 流模板对象或流模板对象列表，用于直接启动L3学习。默认为 None\n\n返回值:\n    bool: 如果操作成功启动，则返回 True；否则返回 False\n\n异常:\n    TesterException: 如果同时提供了 Ports 和 Streams 参数，则会抛出此异常\n\n注意事项:\n    - 每个端口对象必须包含 get_children 方法，用于获取关联的流模板\n    - 每个流模板对象必须包含 handle 属性\n    - 只能使用 Ports 或 Streams 其中之一进行调用，不能同时使用\n    - 若未提供任何参数，则会在所有可用流模板上启动ARP学习\n\n示例:\n    .. code:: RobotFramework\n\n        | Subscribe Result |\n        | Start L3 Learning |\n        | Sleep | 10 |\n        | Stop L3 Learning |\n        | Sleep | 3 |",
  "TesterLibrary.Stream.common.stop_l3_learning": "停止测试仪表流量三层ARP ND学习。\n\n该函数用于停止指定端口或流量模板的三层（L3）ARP/ND学习操作。可以基于提供的端口对象自动获取其关联的所有流量模板，也可以显式指定流量模板进行操作。仅允许使用 `Ports` 或 `Streams` 其中之一进行调用，同时提供两者将引发异常。若两者均未提供，则停止所有流上的L3学习。\n\n参数:\n    Ports (Union[object, list], optional): 一个端口或端口列表，用于获取其关联的流量模板以停止L3学习。每个端口对象需具备 `get_children` 方法以获取 `StreamTemplate` 类型的子对象。默认值为 None。\n\n    Streams (Union[object, list], optional): 一个流量模板或流量模板列表，直接用于停止L3学习。每个流对象必须包含 `handle` 属性。默认值为 None。\n\n返回值:\n    bool: 如果操作成功执行，返回 True；如果操作失败，返回 False。\n\n行为说明:\n    - 若仅提供 `Ports`，则收集与每个端口相关联的所有 `StreamTemplate` 对象句柄，并对这些流停止L3学习。\n    - 若仅提供 `Streams`，则直接使用这些流的句柄进行L3学习的停止。\n    - 若 `Ports` 和 `Streams` 均未提供，则调用 `StopAllStreamArpCommand` 停止所有流上的L3学习。\n    - 同时提供 `Ports` 和 `Streams` 将抛出 `TesterException` 异常。\n\n异常:\n    TesterException: 如果同时提供了 `Ports` 和 `Streams` 参数。\n\n示例:\n    .. code:: RobotFramework\n\n        | Subscribe Result |\n        | Start L3 Learning |\n        | Sleep | 10 |\n        | Stop L3 Learning |\n        | Sleep | 3 |",
  "TesterLibrary.Stream.common.del_stream": "删除测试仪流量\n\n该函数用于删除指定的流量模板，支持以下几种操作模式：\n- 如果未提供 `Ports` 和 `Streams` 参数，则会删除当前会话中的所有流量模板。\n- 如果仅提供 `Ports` 参数，则会删除与这些端口关联的所有流量模板。\n- 如果仅提供 `Streams` 参数，则会删除指定的流量模板。\n- 如果同时提供了 `Ports` 和 `Streams` 参数，函数将返回 False，表示此为无效操作。\n\nArgs:\n\n    Ports (list (:obj:`Port`), optional): 测试仪表端口对象列表。如果提供，将删除与这些端口关联的所有流量。默认值为 None。\n\n    Streams (list (:obj:`StreamTemplate`), optional): 测试仪表流量对象列表。如果提供，将删除指定的流量，无论其关联的端口是什么。默认值为 None。\n\nReturns:\n\n    bool: 布尔值，表示删除操作是否成功。  \n        - True：操作成功（包括部分成功的情况）。\n        - False：同时提供了 `Ports` 和 `Streams` 参数，被视为无效操作。\n\nNotes:\n    - 该函数还会从全局变量 `map_stream_header` 中移除每个流量相关的处理器。\n    - 每个流量模板通过其自身的 `delete()` 方法进行删除。\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${Stream_1} | Add Stream | Ports=${Port_1}\n        | ${Stream_2} | Add Stream | Ports=${Port_2}\n        | ${Stream_3} | Add Stream | Ports=${Port_3}\n        | Del Stream | Streams=${Stream_1} |  # 删除指定流量\n        | Del Stream | Ports=${Port_2} |      # 删除 Port_2 上的所有流量\n        | Del Stream |                          # 删除所有流量",
  "TesterLibrary.Stream.common.get_streams": "获取测试仪表流量对象\n\n    该函数用于获取与指定端口关联的所有StreamTemplate对象（流）。如果未提供端口，则从系统中所有可用端口检索流。\n    此外，该函数会为所有检索到的流调用`set_stream_header_map`来配置头映射，以准备每个流的头对象。\n\n    Args:\n        Ports (Port object or list of Port objects, optional): 要从中检索流的单个端口或端口列表。\n            如果为None（默认），则考虑系统中的所有端口。\n\n    Returns:\n        Streams (list (:obj:`StreamTemplate`)): 表示配置在指定端口上流的StreamTemplate对象列表。\n            每个StreamTemplate对象包含有关该流的信息，包括其句柄和映射后的相关头信息。\n\n    Description:\n        - 当 `Ports` 为 None 时：\n          1. 函数使用 `get_children('Port')` 获取系统条目下的所有端口对象。\n          2. 对于每个端口，它提取相关的StreamTemplate对象，并将它们累积到结果列表中。\n        - 当提供了 `Ports` 参数时：\n          1. 确保输入是一个列表（如果不是，则将其封装进一个列表）。\n          2. 对于列表中的每个端口，提取相关的StreamTemplate对象并添加到结果中。\n        - 在收集完所有流后，调用 `set_stream_header_map(Streams=result)` 来配置这些流的头映射。\n\n    该函数通常用于在网络流量模拟或涉及多个端口的测试场景中收集所有相关流，以便进一步配置或分析。",
  "TesterLibrary.Stream.common.start_stream_arp": "Starts the ARP stream on specified ports or for specific stream objects.\n\nThis function initiates an ARP stream either globally for all streams on given ports,\nfor specific stream objects, or for all streams in the system if no ports or streams are specified.\n\nThe function ensures that either `Ports` or `Stream` is provided, but not both. If `Stream`\nis provided, it must be a single stream object or a list of stream objects. If `Ports` is\nprovided, it must be a single port or a list of ports, and each port's associated streams\nwill be used to determine which ARP streams to start.\n\nParameters:\n    Ports (Union[Port, List[Port]], optional): A port or list of ports whose associated streams\n        should have their ARP transmission started. If both `Ports` and `Stream` are None,\n        all streams in the system will be targeted. Default: None.\n\n    Stream (Union[Stream, List[Stream]], optional): A specific stream or list of streams for which\n        ARP transmission should be started. If provided, `Ports` must be None. Default: None.\n\nReturns:\n    bool: True if the operation succeeds, False otherwise. If the operation fails, a ContinuableFailure exception is raised.\n\nRaises:\n    ContinuableFailure: If the operation fails (result is False).\n\nExamples:\n    robotframework:\n\n    .. code:: robotframework\n\n        | Start Stream Arp |\n\nDescription:\n    - When `Stream` is not None: The handles of the provided stream objects are collected and passed\n      to the command to start ARP transmission only for those streams.\n    - When `Ports` is not None: The function retrieves all child stream objects from each port and\n      starts ARP transmission for all those streams.\n    - When both `Ports` and `Stream` are None: A command to start ARP for all streams in the system\n      is issued.\n\nInternally, this function uses either `StartStreamArpCommand` or `StartAllStreamArpCommand`\ndepending on the input parameters, and executes the appropriate command via the `cl_instance`.",
  "TesterLibrary.Stream.common.stop_stream_arp": "停止指定端口或流的ARP功能。\n\n此函数用于停止与特定端口相关联的或直接指定的流对象的ARP发送。支持以下几种模式：\n- 如果指定了 `Stream` 参数，将停止这些指定流的ARP发送，此时 `Ports` 必须为 None。\n- 如果未指定 `Stream` 但提供了 `Ports`，将停止所有与这些端口相关联的流的ARP发送。\n- 如果 `Ports` 和 `Stream` 都未提供，则停止所有全局流的ARP发送。\n\n参数:\n    Ports (Union[Port, List[Port]], optional): 单个或多个端口对象，用于停止其关联的所有流的ARP发送，默认为 None。\n    Stream (Union[Stream, List[Stream]], optional): 单个或多个流对象，用于直接停止其ARP发送，默认为 None。\n\n返回值:\n    bool: 操作结果，成功返回 True，失败抛出异常。\n\n异常:\n    ContinuableFailure: 当操作失败时抛出该异常，提示函数调用失败。\n\n示例:\n\nRobotFramework 示例：\n\n.. code:: robotframework\n\n    | Stop Stream Arp |\n\n带参数调用示例（Python）：\n\n.. code:: python\n\n    # 停止特定端口上关联的所有流的ARP\n    stop_stream_arp(Ports=[port1, port2])\n\n    # 停止特定流的ARP\n    stop_stream_arp(Stream=[stream1, stream2])\n\n    # 停止所有全局流的ARP\n    stop_stream_arp()",
  "TesterLibrary.Stream.imix.create_imix": "Creates and returns an IMix template object for traffic generation with the specified name and optional seed.\n\nThis function serves as a factory method to create IMix template objects used in network testing. It wraps the underlying `renix.create_imix` function and provides error handling: if the creation fails (returns False), a `ContinuableFailure` exception is raised. A successful call returns the newly created IMix object.\n\nParameters:\n-----------\nName : str\n    The identifier name for the IMIX template. This is required and used to reference the created IMix object later.\nSeed : int, optional\n    An optional integer value used as the random seed for the IMIX template. If not provided, a default value of None is used.\n\nReturns:\n--------\nobj:`Imix`\n    The newly created Imix template object, ready to be configured or used in test scenarios.\n\nRaises:\n-------\nContinuableFailure\n    If the internal call to `renix.create_imix` returns False, indicating failure in creating the Imix template.\n\nExamples:\n---------\n.. code:: RobotFramework\n\n    | Create Imix | Name=Imix_1 | Seed=10121112 |\n\nSee Also:\n---------\n`renix.create_imix` – The backend function that performs the actual creation of the IMix object.",
  "TesterLibrary.Stream.imix.get_imix_from_name": "获取与指定名称关联的 IMIX 模板对象。\n\n该函数通过提供的 Imix 模板名称从全局或预定义的映射中检索对应的 IMIX 值。其内部使用装饰器 `@abnormal_check()`，该装饰器可能在执行主逻辑之前进行额外检查或处理异常情况。函数查找一个名为 `map_name_imix` 的全局字典，并返回与输入名称相关联的 IMIX 值。\n\n参数:\n    Name (str): 要检索的 IMIX 模板名称。该名称应是 `map_name_imix` 字典中的一个有效键。\n\n返回值:\n    any: 与指定名称关联的 IMIX 值。具体类型取决于 `map_name_imix` 字典中存储的值。\n\n可能引发的异常:\n    KeyError: 如果输入的 `Name` 在 `map_name_imix` 字典中不存在，将引发 KeyError。\n    ContinuableFailure: 如果底层调用 `renix.get_imix_from_name` 失败，将引发此异常。\n\n示例:\n    .. code:: RobotFramework\n\n        | ${Imix_TCPv4} | Get Imix From Name | Name=TCPv4 |",
  "TesterLibrary.Stream.imix.bind_stream_imix": "将Imix模板和流量模板绑定，配置流量模板的帧长度类型以支持IMIX。\n\n此函数确保提供的流量模板（Stream）使用 IMIX 作为其帧长度类型，并将其与指定的 IMIX 模板关联。如果传入多个流量模板，仅会使用第一个。该函数会在内部更新一个全局映射表，记录流量模板与 IMIX 模板之间的关联。\n\n参数：\n    Stream (Union[StreamObject, List[StreamObject], Set[StreamObject], Tuple[StreamObject]]): \n        单个流量模板对象或一组流量模板对象。若为集合类型，仅第一个元素会被用于绑定。\n    \n    IMix (Union[StreamImixTemplate, Any]):\n        要绑定的 IMIX 模板对象。若传入的对象不是 `StreamImixTemplate` 类型，则应包含一个名为 'template' 的属性，指向有效的 `StreamImixTemplate` 对象。\n\n返回值：\n    int: 返回 EnumBase.TRUE.value（表示操作成功完成的状态码）\n\n副作用：\n    - 修改 Stream 的 FrameLengthType 为 EnumFrameLengthType.IMIX（值为5）。\n    - 使用 set_relatives() 方法将 Stream 与 IMIX 模板建立关联。\n    - 更新全局字典 map_stream_imix，保存 Stream 与 IMix 的映射关系。\n\n示例：\n    .. code:: RobotFramework\n\n        | ${Imix} | Create Imix | Name=Imix_1 | Seed=10121112 |\n        | Bind Stream Imix | Stream=${Stream} | Imix=${Imix} |",
  "TesterLibrary.Stream.imix.add_imix_distribution_frame": "Adds a frame length distribution configuration to the specified IMix object based on the provided parameters.\n\nArgs:\n    IMix (:obj:`Imix`): 测试仪表Imix模板对象.\n\n    Type (str): 测试仪表Imix模板自定义帧长类型. 可选值包括:\n\n        - 'fixed': 固定帧长，使用Length参数指定长度。\n        - 'random'/'range': 随机范围帧长，使用Min和Max参数定义范围。\n\n    Length (int or None, optional): 当Type为'fixed'时使用的固定帧长。默认为None。\n\n    Min (int or None, optional): 当Type为'random'或类似范围类型时的最小帧长。默认为None。\n\n    Max (int or None, optional): 当Type为'random'或类似范围类型时的最大帧长。默认为None。\n\n    Weight (int or None, optional): 用于加权分布的概率权重，影响该帧长或范围在流量模型中的选择概率。默认为None。\n\nReturns:\n    bool: 布尔值Bool (范围：True / False)，表示是否成功添加帧长配置。\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${Imix} | Create Imix | Name=Imix_1 | Seed=10121112 |\n        | Add IMix Distribution Frame | IMix=${Imix} | Type=random | Min=64 | Max=128 | Weight=50 |\n        | Add IMix Distribution Frame | IMix=${Imix} | Type=random | Min=128 | Max=256 | Weight=50 |\n        | Bind Stream Imix | Stream=${Stream} | Imix=${Imix} |",
  "TesterLibrary.Stream.imix.del_imix_distribution_frame": "删除Imix模板中指定的自定义帧长\n\n该函数用于从Imix模板的帧长分布中删除指定索引位置的自定义帧长条目。如果未提供索引值，将根据底层实现删除默认或最后一个条目。\n\n参数:\n\n    IMix (:obj:`Imix`): 表示测试仪表中的Imix模板对象，必须包含`del_frame_length`方法用于移除帧长条目。\n    \n    Index (int, optional): 要删除的帧长条目在Imix模板分布中的索引位置。若未提供此参数，其行为取决于`IMix.del_frame_length`的具体实现（可能删除最后一个或默认条目）。\n\n返回值:\n\n    bool: 操作结果，表示是否成功删除帧长条目。若操作失败，则抛出`ContinuableFailure`异常。\n\n异常:\n\n    当删除操作失败时（例如索引无效或底层调用错误），会抛出`ContinuableFailure`异常并附带相应的错误信息。\n\n示例:\n\n    .. code:: RobotFramework\n\n        | ${Imix} | Create Imix | Name=Imix_1 | Seed=10121112 |\n        | Add IMix Distribution Frame | IMix=${Imix} | Type=random | Min=64 | Max=128 | Weight=50 |\n        | Add IMix Distribution Frame | IMix=${Imix} | Type=random | Min=128 | Max=256 | Weight=50 |\n        | Bind Stream Imix | Stream=${Stream} | Imix=${Imix} |\n        | Del IMix Distribution Frame | IMix=${Imix} | Index=1\n\n注意事项:\n\n    - Index 的取值范围应为当前Imix模板中存在的有效索引，否则可能导致异常。\n    - 返回值依赖于底层`IMix.del_frame_length`方法的具体实现，建议查阅相关文档以了解更详细的行为描述。",
  "TesterLibrary.Stream.Header.bier.edit_header_bier": "修改测试仪表流量模板中指定层级的Bier报文头部字段内容。\n\n该函数用于修改流模板中的BIER（Bit Index Explicit Replication）头部属性。首先会获取流对象中的所有头部信息，并筛选出所有类型为“bier”的头部，然后根据给定的Level索引选择要修改的具体Bier头部。仅传入的非None参数会被更新到对应的头部字段中。\n\nParameters:\n    Stream (:obj:`StreamTemplate`): 测试仪表流量模板对象，必须包含一个唯一标识该流的handle属性。\n    Level (int, optional): 要修改的Bier头部在所有Bier头部列表中的索引位置，默认值为0。取值范围：0-65535。\n    **kwargs (任意关键字参数): 以下任一可选字段及其取值：\n        - BiftId (int): 设置'BIFT-ID'字段，取值范围：0-1048575，默认值：1\n        - TrafficClass (int): 设置'Traffic Class'字段，取值范围：0-7，默认值：0\n        - SBit (bit): 设置'S-Bit'字段，取值范围：0或1，默认值：1\n        - Ttl (int): 设置'TTL'字段，取值范围：0-255，默认值：64\n        - Nibble (bit): 设置'Nibble'字段，取值范围：0000-1111的4位二进制数，默认值：'0101'\n        - BierVer (int): 设置'Bier Version'字段，取值范围：0-7，默认值：0\n        - Bsl (int): 设置'BSL'字段，表示Bit String Length，取值范围：0-7，默认值：4\n        - Entropy (int): 设置'Entropy'字段，用于熵检测，取值范围：0-1048575，默认值：1\n        - Oam (int): 设置'OAM'字段，用于操作维护管理，取值范围：0-3，默认值：0\n        - Rsv (int): 设置'Reserved'字段，保留字段，取值范围：0-3，默认值：0\n        - Dscp (int): 设置'DSCP'字段，用于差分服务代码点，取值范围：0-63，默认值：0\n        - Protocol (int): 设置'Protocol'字段，表示上层协议类型，取值范围：0-63，默认值：63\n        - BfirId (int): 设置'BFIR-ID'字段，表示BFIR设备标识符，取值范围：0-65535，默认值：1\n        - BierbitString (int): 设置'BitString'字段，表示插入的bit string个数，取值范围：0-100，默认值：0\n\nReturns:\n    dict: 返回一个字典，其中键是传入的参数名称，值是其对应内部字段名。例如::\n        {\n            'BiftId': 'biftId',\n            'TrafficClass': 'trafficClass',\n            'SBit': 'sBit',\n            'Ttl': 'ttl',\n            'Nibble': 'nibble',\n            'BierVer': 'bierVer',\n            'Bsl': 'bsl',\n            'Entropy': 'entropy',\n            'Oam': 'oam',\n            'Rsv': 'rsv',\n            'Dscp': 'dscp',\n            'Protocol': 'protocol',\n            'BfirId': 'bfirId'\n        }\n    注意：只有成功设置的字段才会包含在返回字典中。\n\nRaises:\n    ContinuableFailure: 如果调用底层实现失败，则抛出此异常并附带相关信息。\n\nSide Effects:\n    - 若尚未缓存该流的头部信息，则会从系统中检索并缓存。\n    - 修改流模板内部状态中对应Level的Bier头部属性。\n\nExamples:\n    .. code:: RobotFramework\n\n        | Edit Header Bier | Stream=${Stream} | Level=0 | BiftId=10 |",
  "TesterLibrary.Stream.Header.bier.edit_header_bier_bit_string": "Modifies the bit string configuration of a BIER (Bit Index Explicit Replication) header associated with a given stream. This function allows editing specific fields within the BIER bit string at a specified index and level in the header hierarchy.\n\nArgs:\n    Stream (:obj:`StreamTemplate` or list): Either a single stream object or a list of stream objects.\n                                            If a list is provided, the function processes the first stream.\n                                            Each stream must have a 'handle' attribute for identification.\n\n    Level (int): The index into the list of BIER headers associated with the stream, specifying which\n                 BIER header to modify (e.g., inner or outer header). Defaults to 0.\n\n    Index (int): The position within the selected BIER header's bit string where the configuration\n                 should be applied. Defaults to 0.\n\nKeyword Args:\n    **kwargs: Arbitrary keyword arguments representing the configuration options to update in the BIER\n              bit string. These are passed directly to the `config_bit_string` method of the selected\n              BIER header. Common options include:\n\n        BitString (bit): A 32-bit binary number representing the primary bit string value.\n                         Default: '01010101010101010101010101010101'\n\n        BitString2 (bit): A second 32-bit binary number used for extended configurations.\n                          Default: '01010101010101010101010101010101'\n\nReturns:\n    dict or False: A dictionary containing mapping information of configured bit string fields if successful,\n                   such as::\n\n                       {\n                           'BitString': 'bierbitString.customOption_0.bitStringsOption.bitString',\n                           'BitString2': 'bierbitString.customOption_0.bitStringsOption.bitString2',\n                       }\n\n                   Returns False if the operation fails or no result is returned from the backend.\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${Stream} | add_stream | Port=${Port} |\n        | Create Stream Header | Stream=${Stream} | HeaderTypes=bier |\n        | Edit Header Bier Bit String | Stream=${Stream} | Level=0 | Index=0 | BitString=10101010101010101010101010101010 |\n\nSide Effects:\n    - Retrieves and caches the stream's header information if not already cached.\n    - Invokes the configuration method on a specific BIER header, potentially modifying internal state or triggering updates in the underlying test equipment or simulation engine.\n\nRaises:\n    ContinuableFailure: If the backend returns False, indicating a failure in configuration.",
  "TesterLibrary.Stream.Header.eoam.edit_header_eoam": "修改测试仪表流量模板中Eoam报文头部内容。\n\n该函数用于编辑指定流量流中的EOAM（Ethernet Operations, Administration and Maintenance）协议头部参数，具体作用是修改流量模板中“ccm”（Connectivity Check Message）类型的报文头部字段。可以自定义多个EOAM头部字段，如维护域等级、版本号、操作码、保留位、发送间隔等。只有提供了的参数会被更新，未提供的参数保持原样。\n\nArgs:\n\n    Stream (:obj:`StreamTemplate`): 测试仪表流量对象，类型为StreamTemplate或其子类实例，必须包含唯一标识该流的句柄(handle)属性。\n\n    Level (int, optional): 指定要修改的Eoam头部在流中的索引位置，默认值为0（即第一个Eoam头部），取值范围：0-65535。\n\nKeyword Args:\n\n    MDlevel (int, optional): 设置维护域等级(MD level)，取值范围：0-7，默认值：0。\n\n    Version (int, optional): 设置协议版本号(Version)，取值范围：0-31，默认值：0。\n\n    OpCode (hex, optional): 设置操作码(OpCode)，表示EOAM消息类型，取值为长度为1字节的十六进制数，默认值：0x01。\n\n    RDIbit (int, optional): 设置远程缺陷指示(RDI bit)，取值范围：\n\n        0: zero\n\n        1: one\n\n        默认值：0。\n\n    Reserved (bit, optional): 设置保留字段(Reserved bits)，取值范围：0-15，默认值：0（四位二进制为0000）。\n\n    CCMIntervalField (int, optional): 设置CCM发送间隔，取值范围：\n\n        0: invalid\n\n        1: 3 1/3 ms\n\n        2: 10 ms\n\n        3: 100 ms\n\n        4: 1 s\n\n        5: 10 s\n\n        6: 1 min\n\n        7: 10 min\n\n        默认值：4（对应1秒）。\n\n    FirstTLVOffset (hex, optional): 设置第一个TLV(Type-Length-Value)块距离帧起始的偏移量，取值范围：00-FF，默认值：0x46。\n\n    SequenceNumber (int, optional): 设置序列号(Sequence Number)，用于CCM消息追踪，取值范围：0-4294967295，默认值：0。\n\n    MAEPI (int, optional): 设置维护关联端点标识符(Maintenance Association End Point Identifier)，取值范围：0-8191，默认值：0。\n\n    MDNF (hex, optional): 设置维护域名称格式(MDNF)，取值范围：\n\n        00：Reserved for IEEE 802.1 (00)\n\n        01：No Maintenance Domain Name Present\n\n        02：Domain Name Based String\n\n        03：MAC address + 2-octet Integer\n\n        04：Character String\n\n        05：Reserved for IEEE 802.1 (05)\n\n        20：Defined by ITU-T Y.1731\n\n        40：Reserved for IEEE 802.1 (64)\n\n        默认值：0x01。\n\n    MDNL (hex, optional): 设置维护域名称长度(MDNL)，取值范围：00-FF，默认值：00（自动计算）。\n\n    MDN (hex, optional): 设置维护域名称(MDN)，取值为长度0-255字节的十六进制数，默认值：00。\n\n    SMAF (hex, optional): 设置源MAC地址标志(SMAF)，取值范围：00-FF，默认值：0x01。\n\n    SMAL (hex, optional): 设置源MAC地址长度(SMAL)，取值范围：00-FF，默认值：0x01。\n\n    SMAN (hex, optional): 设置源MAC地址名称(SMAN)，取值为长度1-255字节的十六进制数，默认值：0x00。\n\n    Padding (hex, optional): 设置填充数据(Padding)，取值为长度0-48字节的十六进制数，默认值：0x00。\n\n    ITUTY1731 (hex, optional): 启用或设置ITU-T Y.1731兼容标志，取值为长度16字节的十六进制数，默认值：00000000000000000000000000000000。\n\n    Tlvs (list, optional): 添加额外的TLV(Type-Length-Value)字段，可选类型包括：\n\n        SenderIDTLV: SenderID TLV\n\n        PortStatusTLV: Port Status TLV\n\n        InterfaceStatusTLV: Interface Status TLV\n\n        OrgSpecTLV: Organization-Specific TLV\n\n        EndTLV: End TLV\n\n        默认值为空列表[]。\n\nReturns:\n\n    dict: 返回一个字典，将每个传入的参数名映射到被修改的内部属性名。例如::\n\n        {\n            'MDlevel': 'cfmHeader.MDlevel',\n            'Version': 'cfmHeader.Version',\n            'OpCode': 'OpCode',\n            'RDIbit': 'RDIbit',\n            'Reserved': 'Reserved',\n            'CCMIntervalField': 'CCMIntervalField',\n            'FirstTLVOffset': 'FirstTLVOffset',\n            'SequenceNumber': 'SequenceNumber',\n            'MAEPI': 'MAEPI',\n            'MDNF': 'MAID.MDNF',\n            'MDNL': 'MAID.theMDNL.MDNLength_0.MDNL',\n            'MDN': 'MAID.theMDN.MaintenanceDomainName_0.MDN',\n            'SMAF': 'MAID.SMAF',\n            'SMAL': 'MAID.SMAL',\n            'SMAN': 'MAID.SMAN',\n            'Padding': 'MAID.thePad.Padding_0.Pad',\n            'ITUTY1731': 'ITU-TY1731'\n        }\n\n    如果没有提供任何参数，则返回空字典{}。\n\nExamples:\n    .. code:: RobotFramework\n\n        | Edit Header Eoam | Stream=${Stream} | Level=0 | MDlevel=7 |",
  "TesterLibrary.Stream.Header.eoam.edit_header_eoam_sender_id_tlv": "修改测试仪表流量模板中Eoam报文头部的Sender ID TLV（Type-Length-Value）配置。\n\n该函数用于编辑指定流模板中特定层级的Eoam头部下的某个Sender ID TLV字段。它调用底层接口对TLV中的具体字段进行设置，并返回操作结果。\n\nArgs:\n\n    Stream (:obj:`StreamTemplate`): 测试仪表流量对象，类型为StreamTemplate或兼容对象。必须是已创建的有效流对象，包含必要的句柄信息。\n\n    Level (int): 指定Eoam头部在该流中所有Eoam头部中的层级索引，默认值：0。用于定位要修改的Eoam头部。\n\n    Index (int): 指定要修改的Sender ID TLV在其所属Eoam头部内的索引位置，默认值：0。用于定位具体哪一个TLV字段。\n\nKeyword Args:\n\n    Type (hex): TLV中的Type字段，1字节长度的十六进制数值，默认值：0x01。\n\n    Length (hex): TLV中的Length字段，2字节长度的十六进制数值，默认值：0x0000。\n\n    ChassisIDLen (hex): Chassis ID Length字段，1字节长度的十六进制数值，默认值：0x00。\n\n    TheChassisID (str): Chassis ID字段内容，可选字符串值包括：\n\n        ChassisComponent\n\n        InterfaceAlias\n\n        PortComponent\n\n        MacAddress\n\n        NetworkAddress4\n\n        NetworkAddress6\n\n        InterfaceName\n\n        LocallyAssigned\n\n        Custom\n\n    TheManagementAddressDomain (str): Management Address Domain字段内容，可选字符串值包括：\n\n        MADtDU4\n\n        MADtDU6\n\n        MADtDU4z\n\n        MADtDU6z\n\n        MADtDT4\n\n        MADtDT6\n\n        MADtDT4z\n\n        MADtDT6z\n\n        MADtDS4\n\n        MADtDS6\n\n        MADtDS4z\n\n        MADtDS6z\n\n        MADtDL\n\n        MADtDU\n\n        MADtTU\n\n        MADtSU\n\n        MADsI802\n\n        MADCustom\n\nReturns:\n\n    dict: 包含操作后TLV字段实际配置值的字典，例如::\n\n        {\n            'Type': 'theCCMTLVS.CCMTLVList_0.SenderIDTLV.Type',\n            'Length': 'theCCMTLVS.CCMTLVList_0.SenderIDTLV.Length',\n            'ChassisIDLen': 'theCCMTLVS.CCMTLVList_0.SenderIDTLV.ChassisIDLen'\n        }\n\nRaises:\n\n    ContinuableFailure: 如果内部调用失败则抛出此异常，表示当前操作可以继续执行。\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${Stream} | add_stream | Port=${Port} |\n        | Create Stream Header | Stream=${Stream} | HeaderTypes=ccm |\n        | Edit Header Eoam | Stream=${Stream} | Level=0 | Tlvs=SenderIDTLV |\n        | Edit Header Eoam Sender Id Tlv | Stream=${Stream} | Level=0 | Index=0 | Type=FF |",
  "TesterLibrary.Stream.Header.eoam.edit_header_eoam_sender_id_tlv_chassis_id": "修改测试仪表流量模板中指定Eoam报文头部的Sender ID TLV中的Chassis ID内容。\n\n该函数用于配置和修改EOAM报文中Sender ID TLV的Chassis ID字段。它首先根据提供的流对象（Stream）找到对应的CCM类型报文头部，然后根据参数设置Chassis ID的值。支持多种Chassis ID类型，并可通过索引选择特定的报头、TLV和Chassis ID条目进行修改。\n\n参数：\n    Stream (:obj:`StreamTemplate` 或 list): 测试仪表流量对象或包含该对象的列表。如果传入列表，则仅使用第一个元素。\n                                            该对象必须具有一个唯一标识它的 'handle' 属性。\n    Type (str): 要设置的Chassis ID类型。有效取值包括：\n                ChassisComponent, InterfaceAlias, PortComponent, MacAddress,\n                NetworkAddress4, NetworkAddress6, InterfaceName, LocallyAssigned, Custom\n    Level (int, optional): 在流的所有'ccm'类型报文头部中选择要修改的索引位置，默认为0。\n    TlvIndex (int, optional): 在EOAM报文中选择Sender ID TLV的索引位置，默认为0。\n    Index (int, optional): 在TLV中选择具体的Chassis ID条目的索引，默认为0。\n    **kwargs: 可选关键字参数，用于提供更详细的配置选项。这些参数会被直接传递给底层配置方法。\n              不同Type对应不同的关键字参数，如：\n                  - ChassisIDSubtype: 设置Chassis ID子类型（hex）\n                  - ChassisID: 设置Chassis ID的具体值（str或hex，取决于Type）\n                  - IanaFamilyNumber: 用于IPv4/IPv6地址类型的IANA协议族编号（hex）\n\n返回值：\n    dict: 包含配置结果的字典，例如路径表达式表示的字段位置。\n    如果配置失败且没有返回结果，则抛出ContinuableFailure异常。\n\n示例：\n    .. code:: RobotFramework\n\n        | ${Stream} | add_stream | Port=${Port} |\n        | Create Stream Header | Stream=${Stream} | HeaderTypes=ccm |\n        | Edit Header Eoam | Stream=${Stream} | Level=0 | Tlvs=SenderIDTLV |\n        | Edit Header Eoam Sender Id Tlv | Stream=${Stream} | Level=0 | TlvIndex=0 | Index=0 | ChassisID=FF |\n\n注意事项：\n    - 修改的是流量模板中的配置，不是实时流量数据。\n    - 函数内部可能与缓存交互（如map_stream_header），以获取和存储构建的报文头部对象。\n    - 若底层配置方法返回False，则会抛出ContinuableFailure异常。",
  "TesterLibrary.Stream.Header.eoam.edit_header_eoam_sender_id_tlv_management_address_domain": "修改测试仪表流量模板中Eoam报文头部的Sender ID TLV中的Management Address Domain内容。\n\n该函数用于配置流模板中指定Eoam头部的Sender ID TLV内的Management Address Domain字段。它通过指定Type、TlvIndex和Index来定位到具体的Management Address Domain条目，并根据传入的参数进行配置。\n\n参数:\n    Stream (:obj:`StreamTemplate`): 测试仪表流量对象，类型为StreamTemplate或包含StreamTemplate的列表。如果传入的是列表，则使用第一个元素。\n    Type (str): 要设置的Management Address Domain类型。取值包括：\n        MADtDU4, MADtDU6, MADtDU4z, MADtDU6z,\n        MADtDT4, MADtDT6, MADtDT4z, MADtDT6z,\n        MADtDS4, MADtDS6, MADtDS4z, MADtDS6z,\n        MADtDL, MADtDU, MADtTU, MADtSU,\n        MADsI802, MADCustom\n    Level (int, optional): 指定在流量模板中所有'ccm'类型的Eoam头部中的索引位置，默认为0。\n    TlvIndex (int, optional): 指定在Eoam头部中Sender ID TLV的索引，默认为0。\n    Index (int, optional): 指定在Sender ID TLV中Management Address Domain的索引，默认为0。\n    **kwargs: 根据所选的Type提供额外的配置参数，具体参数如下：\n\n        - 对于MADtDU4:\n            - MADL (hex): Management Address Domain Length，默认值：08，范围：00-FF\n            - MAD (hex): Management Address Domain，默认值：2b06010201640101，范围：长度0-255字节的十六进制数\n            - MAL (hex): Management Address Length，默认值：06，范围：00-FF\n            - IPv4 (str): IPv4地址，默认值：0.0.0.0，有效IPv4地址\n            - Port (hex): 端口号，默认值：0000，范围：0000-FFFF\n\n        - 对于MADtDU6:\n            - MADL (hex): Management Address Domain Length，默认值：08，范围：00-FF\n            - MAD (hex): Management Address Domain，默认值：2b06010201640102，范围：长度0-255字节的十六进制数\n            - MAL (hex): Management Address Length，默认值：12，范围：00-FF\n            - IPv6 (str): IPv6地址，默认值：::0，有效IPv6地址\n            - Port (hex): 端口号，默认值：0000，范围：0000-FFFF\n\n        - 对于其他类似结构的Type，请参考上述格式，每个Type有对应的参数和默认值。\n\n返回值:\n    dict or False: 如果配置成功，返回一个包含配置结果的字典，例如：\n        {\n            'MADL': 'theCCMTLVS.CCMTLVList_0.SenderIDTLV.theManagementAddressDomain.MADList_0.MADtDU4.MADL',\n            'MAD': 'theCCMTLVS.CCMTLVList_0.SenderIDTLV.theManagementAddressDomain.MADList_0.MADtDU4.MAD',\n            'MAL': 'theCCMTLVS.CCMTLVList_0.SenderIDTLV.theManagementAddressDomain.MADList_0.MADtDU4.MAL'\n        }\n    如果配置失败，返回False，并抛出ContinuableFailure异常。\n\n注意事项:\n    - 如果流模板尚未缓存其头部信息，调用此函数会触发获取并缓存头部数据。\n    - 此函数会通过底层API修改系统中对应EOAM头部的配置。",
  "TesterLibrary.Stream.Header.eoam.edit_header_eoam_port_status_tlv": "修改测试仪表流量模板中指定Eoam报文头部的Port Status TLV字段内容。\n\n该函数用于配置流量模板中特定Eoam头部下的Port Status TLV信息。首先会根据传入的Stream对象获取所有报文头部，并筛选出类型为'ccm'（Continuity Check Message）的头部，然后选择其中第Level个Eoam头部，在其Port Status TLV列表中选取第Index个TLV进行配置。支持通过关键字参数传递TLV字段及其值进行修改。\n\nArgs:\n    Stream (:obj:`StreamTemplate` 或 list): 测试仪表流量对象，或包含一个流量对象的列表。必须具有唯一标识流的'handle'属性。\n    Level (int, optional): 指定要修改的'ccm'类型Eoam头部在该流所有Eoam头部中的索引位置，默认为0。\n    Index (int, optional): 指定要修改的Port Status TLV在其所属Eoam头部中TLV列表的索引位置，默认为0。\n\nKeyword Args:\n    Type (hex, optional): TLV的Type字段，长度为1字节的十六进制数，默认值：02。\n    Length (hex, optional): TLV的Length字段，长度为2字节的十六进制数，默认值：<AUTO>，表示自动计算长度。\n    PortStatusValues (hex, optional): 端口状态值，表示端口当前的状态，取值范围：\n        01: Blocked（端口被阻塞）\n        02: Up（端口正常）\n\nReturns:\n    dict: 包含配置后的TLV字段值的字典，例如::\n        {\n            'Type': 'theCCMTLVS.CCMTLVList_0.PortStatusTLV.Type',\n            'Length': 'theCCMTLVS.CCMTLVList_0.PortStatusTLV.Length',\n            'PortStatusValues': 'theCCMTLVS.CCMTLVList_0.PortStatusTLV.PortStatusValues'\n        }\n    如果操作失败，则返回False并抛出ContinuableFailure异常。\n\nSide Effects:\n    - 若未缓存头部信息，则可能查询并缓存流的头部数据。\n    - 修改系统中对应头部的Port Status TLV配置。\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${Stream} | add_stream | Port=${Port} |\n        | Create Stream Header | Stream=${Stream} | HeaderTypes=ccm |\n        | Edit Header Eoam | Stream=${Stream} | Level=0 | Tlvs=SenderIDTLV |\n        | Edit Header Eoam Port Status Tlv | Stream=${Stream} | Level=0 | Index=0 | Type=FF |",
  "TesterLibrary.Stream.Header.eoam.edit_header_eoam_interface_status_tlv": "修改测试仪表流量模板中指定Eoam报文头部的Interface Status TLV内容\n\n该函数用于配置流模板中特定Eoam头部的Interface Status TLV字段。首先会根据传入的Stream对象获取其所有报文头部，并筛选出类型为'ccm'(Continuity Check Message)的头部。然后根据Level参数选择对应的头部，再通过Index参数定位到具体的Interface Status TLV条目进行配置。\n\nArgs:\n    Stream (:obj:`StreamTemplate` 或 list): 测试仪表流量对象或包含单个流量对象的列表。\n        - 如果传入的是列表，则仅使用第一个元素\n        - 该对象必须包含一个'handle'属性，用于在系统中唯一标识该流\n    Level (int, optional): 在筛选后的'ccm'类型头部列表中，选择目标头部的索引。默认值: 0\n    Index (int, optional): 配置Interface Status TLV时使用的索引，用于标识多个TLV实例中的特定一个。默认值: 0\n\nKeyword Args:\n    Type (hex, optional): TLV类型字段，1字节十六进制数，默认值: 04\n    Length (hex, optional): TLV长度字段，2字节十六进制数，默认值: <AUTO>\n    IntStatusValues (hex, optional): 端口状态值，可选值及含义：\n        01: Up\n        02: Down\n        03: Testing\n        04: Unknown\n        05: Dormant\n        06: notPresent\n        07: lowerLayerDown\n        默认值: 01\n\nReturns:\n    dict 或 bool: 如果配置成功，返回包含配置结果的字典，示例::\n        {\n            'Type': 'theCCMTLVS.CCMTLVList_0.InterfaceStatusTLV.Type',\n            'Length': 'theCCMTLVS.CCMTLVList_0.InterfaceStatusTLV.Length',\n            'IntStatusValues': 'theCCMTLVS.CCMTLVList_0.InterfaceStatusTLV.IntStatusValues'\n        }\n    如果配置失败，返回False\n\nSide Effects:\n    - 如果尚未缓存该流的头部信息，则会检索并缓存\n    - 执行配置命令以修改所选头部的Interface Status TLV字段\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${Stream} | add_stream | Port=${Port} |\n        | Create Stream Header | Stream=${Stream} | HeaderTypes=ccm |\n        | Edit Header Eoam | Stream=${Stream} | Level=0 | Tlvs=SenderIDTLV |\n        | Edit Header Eoam Interface Status Tlv | Stream=${Stream} | Level=0 | Index=0 | Type=FF |",
  "TesterLibrary.Stream.Header.eoam.edit_header_eoam_organization_specific_tlv": "修改测试仪表流量模板中指定层级的Eoam报文头部中的Organization Specific TLV字段内容。\n\n**参数说明:**\n\n- **Stream** (:obj:`StreamTemplate` 或 list): 测试仪表流量对象，类型为StreamTemplate。如果传入的是列表，则使用第一个元素。该对象应包含一个唯一标识流的 'handle' 属性。\n- **Level** (int, 可选): 从流量对象中检索出的所有Eoam（'ccm' 类型）头部列表中的索引值，表示要编辑的Eoam头部层级，默认为0。\n- **Index** (int, 可选): 在选定的Eoam头部中，Organization Specific TLV列表的索引值，表示要编辑的具体TLV项，默认为0。\n\n**关键字参数（可选）:**\n\n- **Type** (hex): TLV类型字段，长度为1字节的十六进制数，默认值：1F。\n- **Length** (hex): TLV长度字段，长度为2字节的十六进制数，默认值由系统自动计算（<AUTO>）。\n- **OUI** (hex): 组织唯一标识符（Organizationally Unique Identifier），长度为3字节的十六进制数，默认值：000000。\n- **SubType** (hex): 子类型字段，长度为1字节的十六进制数，默认值：00。\n- **Value** (hex): TLV的数据内容字段，长度范围为0到65535字节的十六进制数，默认值为空字符串(\"\")。\n\n**返回值:**\n\n- dict: 包含配置后的TLV字段路径信息的字典，例如：\n\n    .. code:: python\n\n        {\n            'Type': 'theCCMTLVS.CCMTLVList_0.OrgSpecTLV.Type',\n            'Length': 'theCCMTLVS.CCMTLVList_0.OrgSpecTLV.Length',\n            'OUI': 'theCCMTLVS.CCMTLVList_0.OrgSpecTLV.OUI',\n            'SubType': 'theCCMTLVS.CCMTLVList_0.OrgSpecTLV.SubType',\n            'Value': 'theCCMTLVS.CCMTLVList_0.OrgSpecTLV.theValue.Value_0.Value'\n        }\n\n  如果配置失败则返回False，并抛出ContinuableFailure异常。\n\n**副作用:**\n\n- 如果尚未缓存该流的头部信息，则会检索并缓存相关头部数据。\n- 修改指定层级和索引的Eoam头部中的Organization Specific TLV字段内容。",
  "TesterLibrary.Stream.Header.eoam.edit_header_eoam_end_tlv": "修改测试仪表流量模板中Eoam报文头部的End Tlv内容。\n\n该函数用于编辑指定流量模板中某个EOAM（Ethernet Operations, Administration, and Maintenance）报文头部的End TLV（Type-Length-Value）字段。函数会获取与流关联的报文头部，并过滤出EOAM CCM（Continuity Check Message）类型的头部，然后根据给定的Level和Index编辑对应的End TLV内容。\n\nArgs:\n\n    Stream (:obj:`StreamTemplate` 或 list): 测试仪表流量对象，类型为StreamTemplate或包含StreamTemplate对象的列表。\n                                           如果传入列表，则仅使用第一个元素。该对象必须包含一个唯一标识它的句柄（handle）属性。\n    Level (int, optional): 指定要修改的EOAM CCM头部在其所属流中的层级，默认值：0。\n    Index (int, optional): 要编辑的End TLV在其所在EOAM头部TLV列表中的索引位置，默认值：0。\n\nKeyword Args:\n\n    Type (hex, optional): End TLV的Type字段值，长度为1字节的十六进制数，默认值：0x01。\n\nReturns:\n\n    dict: 如果操作成功，返回包含更新后的配置信息的字典，例如::\n\n        {\n            'Type': 'theCCMTLVS.CCMTLVList_0.EndTLV.Type'\n        }\n\n    bool: 如果操作失败或未进行任何更改，则返回False（此时会抛出ContinuableFailure异常）。\n\nRaises:\n\n    ContinuableFailure: 当底层调用失败时抛出此异常，表示该操作可继续执行后续步骤。\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${Stream} | add_stream | Port=${Port} |\n        | Create Stream Header | Stream=${Stream} | HeaderTypes=ccm |\n        | Edit Header Eoam | Stream=${Stream} | Level=0 | Tlvs=SenderIDTLV |\n        | Edit Header Eoam End Tlv | Stream=${Stream} | Level=0 | Index=0 | Type=FF |",
  "TesterLibrary.Stream.Header.trill.edit_header_trill": "修改测试仪表流量模板中TRILL报文头部的指定字段内容。\n\n该函数用于编辑指定流量模板中的TRILL（TRansparent Interconnection of Lots of Links）头部字段。可以根据需要修改一个或多个字段，未提供的字段不会被修改。\n\nArgs:\n\n    Stream (:obj:`StreamTemplate` 或 list): 流量模板对象，或包含单个流量模板对象的列表。该对象必须具有唯一标识流的 'handle' 属性。\n    \n    Level (int, optional): 要编辑的TRILL头部在其头部列表中的层级位置，默认为0（即第一个TRILL头部）。取值范围：0-65535。\n\nKeyword Args:\n\n    Version (int, optional): TRILL头部的版本号，默认值1，取值范围：0-3。\n\n    Reserved (int, optional): 保留字段，默认值0，取值范围：0-3。\n\n    MultiDestination (int, optional): 多目标标志位，表示数据包是否具有多个目标，默认值1，取值范围：0-1。\n\n    OptionLength (int, optional): 可选字段长度，默认值0，取值范围：0-31。\n\n    HopCount (int, optional): 跳数限制字段，表示数据包可经过的最大跳数，默认值1，取值范围：0-63。\n\n    EgressRBridge (int, optional): 数据包离开TRILL域时的出口RBridge昵称，默认值0，取值范围：0-65535。\n\n    IngressBridge (int, optional): 数据包进入TRILL域时的入口RBridge昵称，默认值0，取值范围：0-65535。\n\nReturns:\n\n    dict: 返回成功修改的参数名及其对应字段名称的字典。例如::\n\n        {\n            'Version': 'version',\n            'Reserved': 'reserved',\n            'MultiDestination': 'multiDestination',\n            'OptionLength': 'optionLength',\n            'HopCount': 'hopCount',\n            'EgressRBridge': 'egressRBridge',\n            'IngressBridge': 'ingressBridge'\n        }\n\n    如果没有修改任何字段，则返回 False。\n\nRaises:\n\n    ContinuableFailure: 如果操作失败，抛出此异常并附带相应的错误信息。\n\nSide Effects:\n\n    - 如果尚未缓存，则会检索并缓存给定流量模板的头部信息。\n    - 修改流量模板内部TRILL头部对象的状态。\n\nExamples:\n    .. code:: RobotFramework\n\n        | Edit Header Trill | Stream=${Stream} | Level=0 | Version=3 |",
  "TesterLibrary.Stream.Header.Access.ancp.edit_header_ancp": "修改测试仪表流量模板中ANCP Port Management报文头部内容。\n\n该函数用于编辑指定流中的ANCP（Access Node Control Protocol）端口管理报文头部字段。通过该函数可以对ANCP头部的各种字段进行自定义设置，以满足不同的测试需求。函数会根据提供的参数更新对应字段，并返回包含所有已修改字段及其内部属性名称映射的字典。\n\nArgs:\n    Stream (:obj:`StreamTemplate`): 测试仪表流量对象，表示一个流量模板。必须具有唯一标识流的 `handle` 属性，类型为对象。如果传入的是列表，则使用第一个元素。\n    Level (int): 表示在流量模板中所有ANCP Port Management头部中的索引位置，默认值为0。用于选择要修改的具体ANCP头部。\n\nKeyword Args:\n    Identifier (hex): TCP/IP封装头部的Identifier字段，默认值：880C，长度为2的十六进制数。\n    Length (int): TCP/IP封装头部的Length字段，默认值：0，取值范围：0-65535。\n    Version (int): ANCP端口管理消息头部的Version字段，默认值：50，取值范围：0-255。\n    MessageType (int): Message Type字段，默认值：32，取值范围：0-255，对应messageType1。\n    ResultField (int): Result Field字段，默认值：0，取值范围：0-4。\n    ResultCode (int): Result Code字段，默认值：0，取值包括：\n        0: No result\n        2: Invalid request message\n        6: One or more of the specified ports are down\n        19: Out of resources\n        81: Request message type not implemented\n        83: Malformed message\n        84: Mandatory TLV missing\n        85: Invalid TLV contents\n        1280: One or more of the specified ports do not exist\n    PartitionId (int): Partition ID字段，默认值：0，取值范围：0-255。\n    TransactionId (int): Transaction ID字段，默认值：0，取值范围：0-16777215。\n    Ignore (int): Ignore标志位，默认值：1，取值范围：0或1。\n    SubMessageNumber (int): 子消息编号，默认值：1，取值范围：0-32767。\n    Length2 (int): ANCP头部Length字段，默认值：<AUTO>0，取值范围：0-65535。\n    Unused (hex): 未使用字段，默认值：0000000000000000000000000000，长度为14的十六进制数。\n    Function (hex): Function字段，默认值：09，长度为1的十六进制数。\n    XFunction (hex): X-Function字段，默认值：00，长度为1的十六进制数。\n    Unused2 (hex): 未使用字段2，默认值：00000000，长度为4的十六进制数。\n    ExtensionFlag (hex): 扩展标志位，默认值：00，长度为1的十六进制数。\n    MessageType2 (int): 第二个Message Type字段，默认值：32，取值范围：0-255，对应messageType2。\n    Reserved (hex): 保留字段，默认值：0000，长度为2的十六进制数。\n    NumberOfTlvs (int): TLV数量，默认值：0，取值范围：0-65535。\n    ExtensionBlockLength (int): 扩展块长度，默认值：0，取值范围：0-65535。\n    AccessLineIdentifyingTlvs (int): 要插入的Access Line Identifying TLVs数量，默认值：0，取值范围：0-256。\n    TestingRelatedTlvs (int): 要插入的Testing Related TLVs数量，默认值：0，取值范围：0-256。\n    StatusInfoTlvs (int): 要插入的Status-Info TLVs数量，默认值：0，取值范围：0-256。\n\nReturns:\n    dict: 返回一个字典，包含所有被修改字段与它们在系统内部属性名之间的映射关系。例如：\n        {\n            'Identifier': 'tcpipEncapHeaderField.id',\n            'Length': 'tcpipEncapHeaderField.len',\n            'Version': 'ancpPortManagementMsgHeader.version',\n            ...\n        }\n    未提供或未修改的字段不会出现在返回结果中。\n\nSide Effects:\n    - 根据提供的参数直接修改指定流的ANCP头部字段。\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${Stream} | add_stream | Port=${Port} |\n        | Create Stream Header | Stream=${Stream} | HeaderTypes=portManagement |\n        | Edit Header Ancp | Stream=${Stream} | Level=0 | Identifier=ffff | MessageType=100 | ResultCode=83 | PartitionId=1 | TransactionId=1234567 | Ignore=0 | SubMessageNumber=5 | Length2=100 | Unused=112233445566778899AABBCCDD | Function=FF | XFunction=AA | Unused2=11223344 | ExtensionFlag=01 | MessageType2=50 | Reserved=FFFF | NumberOfTlvs=10 | ExtensionBlockLength=20 | AccessLineIdentifyingTlvs=2 | TestingRelatedTlvs=1 | StatusInfoTlvs=3 |",
  "TesterLibrary.Stream.Header.Access.ancp.edit_header_ancp_access_line_identifying_tlv": "修改测试仪表流量模板中ANCP Port Management报文头部的Access Loop Circuit ID TLV内容。\n\n该函数用于配置或修改指定流中的ANCP Access Line Identifying TLV（Type-Length-Value）字段。它会查找流中类型为'portmanagement'的头部，并根据提供的Level参数选择对应的头部，然后在该头部中编辑指定索引（TlvIndex）的Access Loop Circuit ID TLV。\n\n参数:\n    Stream (object 或 list): 流对象或包含流对象的列表。如果传入列表，则使用第一个元素作为流对象。\n    Level (int, optional): 要操作的Port Management头部在所有Port Management头部中的索引，默认值为0。\n    TlvIndex (int, optional): 要修改的TLV在其头部中的索引，默认值为0。\n    **kwargs: 任意关键字参数，用于配置TLV字段，支持的字段包括：\n        Type (hex): TLV类型值，长度为2字节的十六进制数，默认值：0001。\n        Length (int): TLV值部分的长度，取值范围：0-65535，默认值：<AUTO>0，表示自动计算。\n        Value (hex): TLV的值，长度为0-63字节的十六进制数，默认值：00。\n\n返回值:\n    dict 或 bool: 如果操作成功，返回包含配置结果的字典，例如::\n\n        {\n            'Type': 'accLineIdentifyingTLVs.accessLineIdentifyingTLVs_0.accLoopCircuitIdTLV.type',\n            'Length': 'accLineIdentifyingTLVs.accessLineIdentifyingTLVs_0.accLoopCircuitIdTLV.length',\n            'Value': 'accLineIdentifyingTLVs.accessLineIdentifyingTLVs_0.accLoopCircuitIdTLV.value',\n        }\n\n    如果操作失败或未找到匹配的头部，返回False。\n\n示例:\n    .. code:: RobotFramework\n\n        | ${Stream} | add_stream | Port=${Port} |\n        | Create Stream Header | Stream=${Stream} | HeaderTypes=portManagement |\n        | Edit Header Ancp Access Line Identifying Tlv | Stream=${Stream} | Level=0 | TlvIndex=0 | Type=ffff |\n\n注意事项:\n    - 该函数会直接修改流模板中的头部信息。\n    - 如果流对象不存在或没有匹配的头部，函数将返回False并抛出ContinuableFailure异常。\n    - 函数内部依赖缓存机制来高效获取和管理流的头部信息。",
  "TesterLibrary.Stream.Header.Access.ancp.edit_header_ancp_testing_related_tlv": "修改测试仪表流量模板中ANCP Port Management报文头部的Testing Related TLV内容。\n\n该函数用于编辑指定流模板中特定ANCP Port Management头部下的某个Testing Related TLV。它支持对TLV的Type、Length、Value1和Value2字段进行配置。\n\n参数:\n    Stream (:obj:`StreamTemplate` 或 list): 流模板对象，或包含单个流模板对象的列表。如果传入列表，则仅使用第一个元素。\n    Level (int, optional): 指定Port Management头部在流模板所有Port Management头部中的索引，默认为0。\n    TlvIndex (int, optional): 指定要修改的TLV在其所属Port Management头部中的索引，默认为0。\n    **kwargs: 可选的关键字参数，用于指定TLV的配置值，包括：\n        Type (hex): TLV的类型字段，长度为2的十六进制数，默认值：0008。\n        Length (int): TLV的长度字段，默认值：<AUTO>0，表示自动计算，取值范围：0-65535。\n        Value1 (int): TLV的值字段1，默认值：0，取值范围：0-4294967295。\n        Value2 (int): TLV的值字段2，默认值：0，取值范围：0-4294967295。\n\n返回值:\n    dict or False: 如果配置成功，返回一个字典，包含配置后的TLV字段及其系统内部标识符映射，例如：\n        {\n            'Type': 'testRelatedTLVs.testingRelatedTLVs_0.opaqueTLV.type',\n            'Length': 'testRelatedTLVs.testingRelatedTLVs_0.opaqueTLV.length',\n            'Value1': 'testRelatedTLVs.testingRelatedTLVs_0.opaqueTLV.value1',\n            'Value2': 'testRelatedTLVs.testingRelatedTLVs_0.opaqueTLV.value2',\n        }\n    如果配置失败或未产生效果，返回False。\n\n异常:\n    如果操作失败，会抛出ContinuableFailure异常。\n\n示例:\n    .. code:: RobotFramework\n\n        | ${Stream} | add_stream | Port=${Port} |\n        | Create Stream Header | Stream=${Stream} | HeaderTypes=portManagement |\n        | Edit Header Ancp Testing Related Tlv | Stream=${Stream} | Level=0 | TlvIndex=0 | Type=ffff |\n\n说明:\n    该函数内部调用get_stream_header()获取流的所有头部信息，并筛选出Port Management类型头部，然后根据Level选择目标头部，并在其上执行config_testing_related_tlv()方法来更新指定TlvIndex的TLV配置。",
  "TesterLibrary.Stream.Header.Access.ancp.edit_header_ancp_status_info_tlv": "修改测试仪表流量模板中ANCP Port Management报文头部的Status Info TLV内容。\n\n该函数用于编辑指定流模板中的ANCP（Access Node Control Protocol）Port Management头部的Status Info TLV字段。它会从流模板中筛选出类型为'portmanagement'的头部，并根据提供的Level索引选择对应头部，再根据TlvIndex索引修改其中的Status Info TLV配置。\n\n参数:\n    Stream (:obj:`StreamTemplate` 或 list): 测试仪表流量对象或包含单个流量对象的列表。如果传入列表，则使用第一个元素。\n    Level (int): 指定要修改的Port Management头部在所有Port Management头部中的索引，默认值：0\n    TlvIndex (int): 指定要修改的Status Info TLV在其所属Port Management头部中的索引，默认值：0\n    **kwargs: 任意关键字参数，用于配置Status Info TLV的具体字段，包括：\n\n        - Type (hex): TLV的Type字段，默认值：0106，取值范围：长度为2的十六进制数\n        - Length (int): TLV的Length字段，默认值：<AUTO>0，取值范围：0-65535\n        - Reserved (hex): Reserved字段，默认值：00，取值范围：长度为1的十六进制数\n        - MsgType (int): Message Type字段，默认值：0，取值范围：0-255\n        - ErrMsgLength (int): Error Message Length字段，默认值：<AUTO>0，取值范围：0-65535\n        - ErrMsg (hex): Error Message字段，默认值：\"\"，取值范围：长度为0-65535的十六进制数\n        - OptionalSubTLV (int): 要插入的Optional Sub TLV的数量，默认值：0，取值范围：0-64\n\n返回值:\n    dict: 包含配置结果的字典，示例如下::\n\n        {\n            'Type': 'statusInfoTLVs.status-InfoTLV_0.statusinfoTLV.type',\n            'Length': 'statusInfoTLVs.status-InfoTLV_0.statusinfoTLV.length',\n            'Reserved': 'statusInfoTLVs.status-InfoTLV_0.statusinfoTLV.reserved',\n            'MsgType': 'statusInfoTLVs.status-InfoTLV_0.statusinfoTLV.msgType',\n            'ErrMsgLength': 'statusInfoTLVs.status-InfoTLV_0.statusinfoTLV.errMsgLength',\n            'ErrMsg': 'statusInfoTLVs.status-InfoTLV_0.statusinfoTLV.errMsg'\n        }\n\n示例:\n    .. code:: RobotFramework\n\n        | ${Stream} | add_stream | Port=${Port} |\n        | Create Stream Header | Stream=${Stream} | HeaderTypes=portManagement |\n        | Edit Header Ancp Status Info Tlv | Stream=${Stream} | Level=0 | TlvIndex=0 | Type=ffff |",
  "TesterLibrary.Stream.Header.Access.ancp.edit_header_ancp_status_info_tlv_optional_sub_tlv": "修改测试仪表流量模板中ANCP Port Management报文头部的Status Info TLV的Optional Sub TLV内容。\n\n该函数用于编辑流量模板中指定层级的ANCP Port Management头部中的Status Info TLV下的可选Sub TLV字段。首先验证提供的流对象有效性，并获取其关联的头部信息，筛选出类型为'portmanagement'的头部并选择指定Level的头部。随后根据给定的TlvIndex和SubTlvIndex配置对应的Optional Sub TLV字段。\n\nArgs:\n\n    Stream (:obj:`StreamTemplate`): 测试仪表流量对象object, 类型为：object\n\n    Level (int): 要修改的ANCP Port Management头部在流量模板中所有ANCP Port Management头部的序列号，默认值：0\n\n    TlvIndex (int): 要修改的ANCP Port Management头部Status Info Tlv在流量模板中所有ANCP Port Management头部Status Info Tlv的序列号，默认值：0\n\n    SubTlvIndex (int): 要修改的ANCP Port Management头部Status Info Tlv的Optional Sub Tlv在流量模板中所有ANCP Port Management头部Status Info Tlv的Optional Sub Tlv的序列号，默认值：0\n\nKeyword Args:\n\n    Type (hex): Optional Sub TLV 的 Type 字段，长度为2字节的十六进制数，默认值：0001\n\n    Length (int): Optional Sub TLV 的 Length 字段，表示Data部分的长度，取值范围：0-65535，默认值：<AUTO>0（自动计算）\n\n    Data (hex): Optional Sub TLV 的 Data 字段，十六进制格式的数据字符串，长度范围为0到65535，默认值：空字符串 ''\n\nReturns:\n\n    dict: 如果操作成功，返回包含所配置字段路径的字典，例如::\n\n        {\n            'Type': 'statusInfoTLVs.status-InfoTLV_0.statusinfoTLV.optionalSubTLV.customTLV_0.type',\n            'Length': 'statusInfoTLVs.status-InfoTLV_0.statusinfoTLV.optionalSubTLV.customTLV_0.length',\n            'Data': 'statusInfoTLVs.status-InfoTLV_0.statusinfoTLV.optionalSubTLV.customTLV_0.data',\n        }\n\n    bool: 如果底层配置未返回结果，则返回False，表示操作失败。\n\nRaises:\n\n    ContinuableFailure: 如果底层调用返回False，抛出此异常，表示配置失败但脚本仍可继续执行。",
  "TesterLibrary.Stream.Header.Access.common.edit_header_ppp": "Modifies specific fields of a Point-to-Point Protocol (PPP) header in the given stream template. This function allows editing of the 'addresses', 'controls', and 'protocol' fields of the selected PPP header.\n\nThe function first checks if the provided Stream is a list; if so, it uses the first element. It then retrieves the list of headers for the stream using `get_stream_header`, filters to only PPP-type headers, and selects the header at the specified Level index.\n\nIf any of the editable fields (Addresses, Controls, Protocol) are provided, their corresponding values are updated in the selected header, and the result dictionary is populated with the names of the modified fields and their new values (as string references to internal attributes).\n\nParameters:\n    Stream (:obj:`StreamTemplate` or list): 测试仪表流量对象或包含一个流量对象的列表。如果传入列表，将使用第一个元素。流量对象必须具有唯一标识其的 'handle' 属性。\n    Level (int): 要修改的PPP头部在流量模板中所有PPP头部的索引序号，默认值为0，取值范围：0-65535。\n    **kwargs: 可选关键字参数，用于指定要修改的字段及其新值。\n\n        - Addresses (hex): address字段的新值，默认值：<AUTO>FF，取值范围：00-FF\n        - Controls (hex): control字段的新值，默认值：<AUTO>03，取值范围：00-FF\n        - Protocol (hex): protocol字段的新值，默认值：<AUTO>0000，取值范围：0000-FFFF\n\nReturns:\n    dict or bool: 如果有字段被成功修改，则返回一个字典，映射被修改的字段名（'Addresses', 'Controls', 'Protocol'）到其对应的新值（内部属性的字符串引用）。如果没有字段被修改，则返回False。\n\nRaises:\n    ContinuableFailure: 如果函数执行失败（即返回False），则抛出此异常，表示操作未成功但测试可以继续执行。\n\nExamples:\n    .. code:: RobotFramework\n\n        | Edit Header Ppp | Stream=${Stream} | Level=0 | Addresses=FF | Controls=03 | Protocol=0021 |\n\nSide Effects:\n    - 可能会执行命令以获取头部名称（如果尚未缓存），通过get_stream_header实现。\n    - 通过更新流头部对象的属性来修改其内部状态。\n    - 更新全局缓存map_stream_header，存储为流构造的头部信息。",
  "TesterLibrary.Stream.Header.Access.common.edit_header_pppoe": "修改测试仪表流量模板中PPPoE报文头部的指定字段内容。\n\n该函数用于修改指定流量模板中的某个PPPoE（以太网上的点对点协议）头部的特定字段。支持修改的字段包括Version（版本）、Type（类型）、Code（代码）、SessionId（会话ID）和PayloadLen（有效载荷长度）。用户可以通过Level参数指定要修改的是第几个PPPoE头部（在存在多个PPPoE头部的情况下）。\n\n参数:\n    Stream (:obj:`StreamTemplate` 或 list): 流量模板对象，或者包含流量模板对象的列表。如果传入的是列表，则使用第一个元素。该对象必须包含一个唯一标识该流的'handle'属性。\n    Level (int, optional): 指定要修改的PPPoE头部在其所属流量模板中的索引位置，默认为0，即修改第一个PPPoE头部。取值范围：0-65535。\n    **kwargs (可选): 要修改的字段及其对应的新值：\n        Version (int): PPPoE头部的版本号，默认值：1，取值范围：0-15。\n        Type (int): PPPoE头部的类型，默认值：1，取值范围：0-15。\n        Code (int): PPPoE头部的操作码，以十六进制表示，例如0x11，默认值：0x00，取值范围：0x00-0xFF。\n        SessionId (int): PPPoE会话的唯一标识符，默认值：0，取值范围：0-65535。\n        PayloadLen (int): PPPoE头部后跟随的数据长度，默认值由系统自动计算并填充为0，取值范围：0-65535。\n\n返回值:\n    dict: 一个字典，将输入的修改字段名映射到实际在PPPoE头部中被修改的属性名称（例如{'Version': 'version', 'SessionId': 'sessionId'}）。如果没有字段被修改，则返回空字典。\n    False: 如果所有传入的字段值均为None，即没有任何修改发生，则返回False。\n\n副作用:\n    - 若尚未缓存该流的头部信息，会调用get_stream_header()函数获取并缓存。\n    - 直接修改所选PPPoE头部对象的属性。\n\n示例:\n    .. code:: RobotFramework\n\n        | Edit Header Pppoe | Stream=${Stream} | Level=0 | Code=11 | SessionId=1234 |",
  "TesterLibrary.Stream.Header.Access.common.edit_header_pppoe_discovery": "修改测试仪表流量模板中PPPoE Discovery报文头部内容。\n\n该函数用于修改指定流量模板中某一层PPPoE Discovery头部的字段值。用户可以选择要修改的头部层级（Level），并设置各个字段的新值。如果提供了某个字段的值（非None），则会更新该字段对应的属性，并将该字段记录在返回结果字典中。部分Tag字段仅用于控制是否插入对应标签，但不会被包含在返回结果中。\n\n参数：\n    Stream (:obj:`StreamTemplate`): 测试仪表流量对象，表示一个流量模板。如果传入的是列表，则使用第一个元素作为流量模板对象。\n\n    Level (int, optional): 指定要修改的PPPoE Discovery头部在该流量模板中所有PPPoE Discovery头部中的索引位置，默认为0。取值范围：0-65535。\n\n关键字参数（可选）:\n    Version (int): 设置Version字段的值，默认值1，取值范围0-15。\n    \n    Type (int): 设置Type字段的值，默认值1，取值范围0-15。\n    \n    Code (int): 设置Code字段的值，默认值9，取值包括：\n        9: PADI\n        7: PADO\n        25: PADR\n        101: PADS\n        167: PADT\n    \n    SessionId (int): 设置Session ID字段的值，默认值0，取值范围0-65535。\n    \n    PayloadLen (int): 设置Payload Length字段的值，默认由系统自动计算（<AUTO>0），取值范围0-65535。\n    \n    EndOfListTag (int): 插入End Of List Tag的个数，默认0，取值范围0-1。\n    \n    ServiceNameTag (int): 插入Service Name Tag的个数，默认0，取值范围0-1。\n    \n    AcNameTag (int): 插入Ac Name Tag的个数，默认0，取值范围0-1。\n    \n    HostUniqTag (int): 插入Host Uniq Tag的个数，默认0，取值范围0-1。\n    \n    AcCookieTag (int): 插入Ac Cookie Tag的个数，默认0，取值范围0-1。\n    \n    VendorSpecificTag (int): 插入Vendor Specific Tag的个数，默认0，取值范围0-1。\n    \n    RelaySessionIdTag (int): 插入Relay Session Id Tag的个数，默认0，取值范围0-1。\n    \n    ServiceNameErrorTag (int): 插入Service Name Error Tag的个数，默认0，取值范围0-1。\n    \n    AcSystemErrorTag (int): 插入Ac System Error Tag的个数，默认0，取值范围0-1。\n    \n    GenericErrorTag (int): 插入Generic Error Tag的个数，默认0，取值范围0-1。\n    \n    UnknownTag (int): 插入Unknown Tag的个数，默认0，取值范围0-1。\n\n返回值：\n    dict: 包含已修改字段及其对应内部属性名的映射字典。例如：\n        {\n            'Version': 'version',\n            'Type': 'type',\n            'Code': 'code',\n            'SessionId': 'sessionId',\n            'PayloadLen': 'payloadLen'\n        }\n    注意：Tag类字段虽然可能被修改，但不会出现在返回字典中。\n\n示例：\n    .. code:: RobotFramework\n\n        | Edit Header Pppoe Discovery | Stream=${Stream} | Level=0 | Code=11 |\n\n异常：\n    如果底层调用失败，抛出ContinuableFailure异常。",
  "TesterLibrary.Stream.Header.Access.common.edit_header_pppoe_discovery_end_of_list_tag": "修改测试仪表流量模板中PPPoE Discovery报文头部的End Of List Tag内容。\n\n该函数用于编辑指定流模板中的PPPoE Discovery头部的'End of List'标签。若提供了多个PPPoE Discovery头部，可通过Level参数选择要修改的具体层级；若该层级中有多个End Of List Tag字段，则可通过TagIndex参数指定具体修改哪一个。\n\nParameters:\n    Stream (:obj:`StreamTemplate` 或 list): 测试仪表流量对象或包含该对象的列表。\n        - 若提供list类型，仅使用第一个元素。\n        - Stream应具有唯一标识其的handle属性。\n\n    Level (int, optional): PPPoE Discovery头部在流模板中的层级索引，默认为0（表示最顶层的PPPoE Discovery头部）。\n\n    TagIndex (int, optional): 要修改的End Of List Tag在该PPPoE Discovery头部中的索引，默认为0。\n\nKeyword Args:\n    Type (hex, optional): 标签类型，十六进制格式，默认值：0000。有效取值如下：\n\n        - 0000: End Of List\n        - 0101: Service Name\n        - 0102: AC Name\n        - 0103: Host Uniq\n        - 0104: AC Cookie\n        - 0105: Vendor Specific\n        - 0110: Relay Session Id\n        - 0201: Service Name Error\n        - 0202: AC System Error\n        - 0203: Generic Error\n\n    Length (int, optional): 标签长度，默认值：<AUTO>0，表示自动计算。可选范围：0-65535。\n\nReturns:\n    dict: 如果配置成功，返回包含操作结果的字典，例如::\n\n        {\n            'Type': 'tags.tagList_0.tagEndOfList.type',\n            'Length': 'tags.tagList_0.tagEndOfList.length',\n        }\n\n    bool: 如果配置失败或所选头部无效，返回False。\n\nRaises:\n    ContinuableFailure: 如果底层调用失败（即返回False），抛出此异常以指示错误。\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${Stream} | add_stream | Port=${Port} |\n        | Create Stream Header | Stream=${Stream} | HeaderTypes=pppoediscovery |\n        | Edit Header Pppoe Discovery End Of List Tag | Stream=${Stream} | Level=0 | TagIndex=0 | Type=0101 |\n\nSide Effects:\n    - 修改了流模板中指定PPPoE Discovery头部的End Of List Tag配置。\n    - 内部可能会检索并缓存与流相关的头部信息（如尚未缓存）。",
  "TesterLibrary.Stream.Header.Access.common.edit_header_pppoe_discovery_service_name_tag": "修改测试仪表流量模板中PPPoE Discovery头部的Service Name Tag内容。\n\n该函数用于配置指定流模板中第Level个PPPoE Discovery头部中的第TagIndex个Service Name Tag字段。首先会从流对象中获取所有PPPoE Discovery头部，并选择指定索引（Level）的头部进行操作，随后在该头部中定位到指定索引（TagIndex）的Service Name Tag并进行配置。\n\n参数:\n    Stream (object or list): 流模板对象或包含单个流模板对象的列表。如果传入的是列表，则使用第一个元素。流对象必须包含一个'handle'属性，用于系统中唯一标识该流。\n    Level (int, optional): 指定要修改的PPPoE Discovery头部在其所属流中的索引位置，默认为0（即第一个PPPoE Discovery头部）。\n    TagIndex (int, optional): 指定要修改的Service Name Tag在PPPoE Discovery头部中的索引位置，默认为0。\n    **kwargs: 可变关键字参数，用于配置Service Name Tag的具体字段，包括：\n        Type (hex, optional): Tag类型值，默认为0101，可选值包括：\n            0000: End Of List\n            0101: Service Name\n            0102: AC Name\n            0103: Host Uniq\n            0104: AC Cookie\n            0105: Vendor Specific\n            0110: Relay Session Id\n            0201: Service Name Error\n            0202: AC System Error\n            0203: Generic Error\n        Length (int, optional): Tag数据部分长度，默认值为<AUTO>0，表示由系统自动计算；取值范围：0-65535。\n        Value (hex, optional): Tag的值字段，十六进制格式，默认为0；取值长度范围：0-250字节。\n\n返回值:\n    dict or False: 若配置成功，返回包含Type、Length和Value等字段路径的字典示例，如：\n        {\n            'Type': 'tags.tagList_0.tagServiceName.type',\n            'Length': 'tags.tagList_0.tagServiceName.length',\n            'Value': 'tags.tagList_0.tagServiceName.value',\n        }\n    若配置失败或未应用任何更改，则返回False。\n\n副作用:\n    - 如果流对象尚未缓存其头部信息，则会从系统中检索并缓存。\n    - 对流中指定PPPoE Discovery头部的Service Name Tag进行修改，并将更改提交至系统。\n\n示例:\n    .. code:: RobotFramework\n\n        | ${Stream} | add_stream | Port=${Port} |\n        | Create Stream Header | Stream=${Stream} | HeaderTypes=pppoediscovery |\n        | Edit Header Pppoe Discovery Server Name Tag | Stream=${Stream} | Level=0 | TagIndex=0 | Type=0101 |",
  "TesterLibrary.Stream.Header.Access.common.edit_header_pppoe_discovery_ac_name_tag": "修改测试仪表流量模板中PPPoE Discovery报文头部的Access Concentrator (AC) Name Tag内容。\n\n该函数用于编辑指定流模板中某个PPPoE Discovery头部中的AC Name Tag。如果流对象中存在多个PPPoE Discovery头部，可通过Level参数选择目标头部；\n若头部中包含多个AC Name Tag，可通过TagIndex参数选择特定的Tag进行编辑。所有配置参数通过关键字参数（kwargs）传递，包括Type、Length和Value等字段。\n\nParameters:\n    Stream (:obj:`StreamTemplate` 或 list of :obj:`StreamTemplate`): 测试仪表流量模板对象，可以是一个单独的对象或者只包含一个元素的列表。\n                                                              如果传入的是列表，则仅使用第一个元素作为目标流。\n    Level (int, optional): 指定要修改的PPPoE Discovery头部在流中所有此类头部中的索引位置，默认值为0。\n    TagIndex (int, optional): 指定要修改的AC Name Tag在其所属PPPoE Discovery头部中的索引位置，默认值为0。\n    **kwargs: 任意关键字参数，用于配置AC Name Tag的具体字段。支持以下字段：\n        - Type (hex, optional): Tag类型，十六进制表示，默认值：0102，合法取值范围：\n\n            0000: End Of List  \n            0101: Service Name  \n            0102: AC Name  \n            0103: Host Uniq  \n            0104: AC Cookie  \n            0105: Vendor Specific  \n            0110: Relay Session Id  \n            0201: Service Name Error  \n            0202: AC System Error  \n            0203: Generic Error  \n\n        - Length (int, optional): Tag长度，默认值：<AUTO>0，取值范围：0-65535\n        - Value (hex, optional): Tag值，十六进制字符串，默认值：0，取值范围：长度0-250的十六进制数\n\nReturns:\n    dict or None: 若配置成功，返回包含配置结果的字典，示例格式如下：\n\n        {\n            'Type': 'tags.tagList_0.tagACName.type',\n            'Length': 'tags.tagList_0.tagACName.length',\n            'Value': 'tags.tagList_0.tagACName.value',\n        }\n\n    若配置失败且返回False，则抛出ContinuableFailure异常。\n\nSide Effects:\n    - 若流对象未缓存其头部信息，将首次检索并缓存相关头部。\n    - 修改指定PPPoE Discovery头部中的AC Name Tag配置，并影响后续生成或发送的数据包内容。\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${Stream} | add_stream | Port=${Port} |\n        | Create Stream Header | Stream=${Stream} | HeaderTypes=pppoediscovery |\n        | Edit Header Pppoe Discovery Ac Name Tag | Stream=${Stream} | Level=0 | TagIndex=0 | Type=0101 |",
  "TesterLibrary.Stream.Header.Access.common.edit_header_pppoe_discovery_host_uniq_tag": "修改测试仪表流量模板中PPPoE Discovery报文头部的'Host-Uniq'标签内容。\n\n该函数用于从指定的流模板中选择特定的PPPoE Discovery头部，并编辑该头部中的'Host-Uniq'标签。可以通过传入额外的关键字参数来配置标签的具体值。\n\nParameters:\n    Stream (object or list): 测试仪表流对象，或包含单个流对象的列表。如果提供列表，则使用第一个元素。\n                            流对象必须具有唯一标识系统中流的 'handle' 属性。\n    Level (int, optional):  在流的所有PPPoE Discovery头部中要修改的头部索引。若存在多个PPPoE Discovery头部，\n                            此参数用于选择具体哪一个头部进行修改，默认为0。\n    TagIndex (int, optional): 在PPPoE Discovery头部中，'Host-Uniq'标签的索引，用于指定修改哪个标签。\n                              默认为0。\n    **kwargs:               任意关键字参数，用于配置'Host-Uniq'标签的具体内容（如Type、Length、Value等），\n                              这些参数直接传递给底层 header 对象的 config_host_uniq_tag 方法。\n\nReturns:\n    dict or bool:            如果成功返回一个字典，包含配置更改的结果；如果未进行更改或操作失败，则返回False。\n\nSide Effects:\n    - 如果尚未缓存流的头部信息，则通过调用 get_stream_header 函数查询并缓存。\n    - 修改选定的PPPoE Discovery头部中的指定'Host-Uniq'标签的配置。\n\nExample:\n    .. code:: RobotFramework\n\n        | ${Stream} | add_stream | Port=${Port} |\n        | Create Stream Header | Stream=${Stream} | HeaderTypes=pppoediscovery |\n        | Edit Header Pppoe Discovery Host Uniq Tag | Stream=${Stream} | Level=0 | TagIndex=0 | Type=0101 | Value=0A0B0C0D |",
  "TesterLibrary.Stream.Header.Access.common.edit_header_pppoe_discovery_ac_cookie_tag": "修改测试仪表流量模板中PPPoE Discovery报文头部的AC-Cookie标签内容。\n\n该函数用于配置或修改指定流量流中某个PPPoE Discovery头部中的AC-Cookie标签。它首先获取与该流量流关联的所有头部，并筛选出类型为'pppoediscovery'的头部，然后根据提供的Level参数选择特定索引位置的头部，并在该头部中编辑指定TagIndex的AC-Cookie标签。\n\nParameters:\n    Stream (:obj:`StreamTemplate`): 测试仪表流量对象，代表要编辑头部的流量流。必须是有效的StreamTemplate实例。\n    Level (int, optional): 指定在所有PPPoE Discovery头部中选择第几个头部进行编辑，默认值为0。\n    TagIndex (int, optional): 指定在所选PPPoE Discovery头部内选择第几个AC-Cookie标签进行编辑，默认值为0。\n    **kwargs: 任意关键字参数，用于配置AC-Cookie标签的具体字段，支持以下参数：\n        Type (hex): 标签类型，默认值为0104（表示AC Cookie）。其他可用值包括：\n            0000: End Of List\n            0101: Service Name\n            0102: AC Name\n            0103: Host Uniq\n            0104: AC Cookie\n            0105: Vendor Specific\n            0110: Relay Session Id\n            0201: Service Name Error\n            0202: AC System Error\n            0203: Generic Error\n        Length (int): 标签长度，默认值为<AUTO>0，取值范围：0-65535。\n        Value (hex): 标签值，默认值为0，取值范围：长度0-250的十六进制数值。\n\nReturns:\n    dict or bool: 如果操作成功，返回包含配置结果的字典，例如：\n\n        {\n            'Type': 'tags.tagList_0.tagACCookie.type',\n            'Length': 'tags.tagList_0.tagACCookie.length',\n            'Value': 'tags.tagList_0.tagACCookie.value',\n        }\n\n    如果操作失败且未返回具体错误信息，则返回False。\n\nSide Effects:\n    - 如果尚未缓存该流量流的头部信息，将首次获取并缓存。\n    - 对所选PPPoE Discovery头部中的AC-Cookie标签进行配置更改。\n\nExamples:\n\n    .. code:: RobotFramework\n\n        | ${Stream} | add_stream | Port=${Port} |\n        | Create Stream Header | Stream=${Stream} | HeaderTypes=pppoediscovery |\n        | Edit Header Pppoe Discovery Ac Cookie Tag | Stream=${Stream} | Level=0 | TagIndex=0 | Type=0101 |",
  "TesterLibrary.Stream.Header.Access.common.edit_header_pppoe_discovery_vendor_specific_tag": "修改测试仪表流量模板中Pppoe Discovery报文头部的Vendor Specific Tag内容。\n\n该函数用于编辑指定流模板中，特定层级的PPPoE Discovery头部内的Vendor Specific Tag字段。通过此函数可以配置如Type、Length和Value等Vendor Specific Tag相关参数。\n\n参数:\n    Stream (object 或 list): 测试仪表流量对象，类型为StreamTemplate或包含该对象的列表。\n                             如果传入列表，则使用第一个元素。该对象必须具有'handle'属性以唯一标识流模板。\n    Level (int): 指定要修改的PPPoE Discovery头部在流中的索引位置，默认值：0（表示第一个PPPoE Discovery头部）。\n    TagIndex (int): 指定要修改的Vendor Specific Tag在其所属PPPoE Discovery头部中的索引位置，默认值：0。\n    **kwargs: 任意关键字参数，用于设置Vendor Specific Tag的字段值，包括：\n        Type (hex): 标签类型，十六进制格式，默认值：0105，可选值包括：\n            0000: End Of List\n            0101: Service Name\n            0102: AC Name\n            0103: Host Uniq\n            0104: AC Cookie\n            0105: Vendor Specific\n            0110: Relay Session Id\n            0201: Service Name Error\n            0202: AC System Error\n            0203: Generic Error\n        Length (int): 标签数据长度，取值范围：0-65535，默认值由系统自动计算（<AUTO>0）。\n        Value (hex): 标签数据内容，十六进制格式，最大长度250字节，默认值：0。\n\n返回值:\n    dict: 包含配置结果的字段映射信息，例如：\n        {\n            'Type': 'tags.tagList_0.tagVendorSpecific.type',\n            'Length': 'tags.tagList_0.tagVendorSpecific.length',\n            'Value': 'tags.tagList_0.tagVendorSpecific.value',\n        }\n    bool: 若未进行任何配置更改或操作失败，则返回False。\n\n副作用:\n    - 修改了流模板中指定PPPoE Discovery头部的Vendor Specific Tag配置。\n    - 可能会调用get_stream_header()方法来获取头部名称并更新内部缓存。\n\n示例:\n    .. code:: RobotFramework\n\n        | ${Stream} | add_stream | Port=${Port} |\n        | Create Stream Header | Stream=${Stream} | HeaderTypes=pppoediscovery |\n        | Edit Header Pppoe Discovery Vendow Specific Tag | Stream=${Stream} | Level=0 | TagIndex=0 | Type=0101 |",
  "TesterLibrary.Stream.Header.Access.common.edit_header_pppoe_discovery_relay_session_id_tag": "修改测试仪表流量模板中PPPoE Discovery报文头部的Relay Session ID Tag内容。\n\n该函数根据提供的Level参数定位到流量模板中的指定PPPoE Discovery头部，并使用TagIndex参数选择要配置的Relay Session ID Tag，随后通过传入的**kwargs参数对其进行配置。\n\n参数:\n    Stream (object 或 list): 流量模板对象或仅包含一个流量对象的列表。如果传入列表，则仅使用第一个元素。\n                             流量对象必须具有'handle'属性以在系统中唯一标识它。\n    Level (int): 在流的PPPoE Discovery头部列表中的索引，用于选择要修改的头部，默认为0。\n    TagIndex (int): 在选定的PPPoE Discovery头部中，Relay Session ID Tag的索引，用于指定要编辑的具体标签，默认为0。\n    **kwargs: 任意关键字参数，用于配置Relay Session ID Tag的内容，包括Type、Length和Value等字段。\n\n关键字参数说明:\n    Type (hex): Tag类型，默认值：0110，表示Relay Session Id；其他可选值包括Service Name、AC Name等。\n    Length (int): Tag长度，默认值：<AUTO>0，取值范围：0-65535。\n    Value (hex): Tag值，默认值：0，取值范围：长度0-250的十六进制数。\n\n返回值:\n    dict 或 bool: 如果配置成功，返回包含配置结果的字典；若未应用任何更改或操作失败，则返回False。\n\n示例:\n    .. code:: RobotFramework\n\n        | ${Stream} | add_stream | Port=${Port} |\n        | Create Stream Header | Stream=${Stream} | HeaderTypes=pppoediscovery |\n        | Edit Header Pppoe Discovery Relay Session Id Tag | Stream=${Stream} | Level=0 | TagIndex=0 | Type=0101 |\n\n副作用:\n    - 如果尚未缓存，则获取并缓存与给定流相关的头部对象。\n    - 修改指定PPPoE Discovery头部中的Relay Session ID Tag配置。",
  "TesterLibrary.Stream.Header.Access.common.edit_header_pppoe_discovery_server_name_error_tag": "修改测试仪表流量模板中Pppoe Discovery报文头部的Server Name Error Tag内容\n\n该函数用于配置PPPoE Discovery头部中的Server Name Error Tag字段。它会筛选提供的流对象中类型为'pppoediscovery'的头部，选择指定Level的头部，并在其上应用对Server Name Error Tag的配置。可以通过关键字参数传递额外的配置参数。\n\nArgs:\n\n    Stream (:obj:`StreamTemplate` 或 list): 可以是单个流对象或包含一个流对象的列表。如果传入列表，仅使用第一个元素。\n                                          流对象必须具有唯一标识它的 'handle' 属性。\n    Level (int): 在过滤后的'pppoediscovery'类型头部列表中，要修改的PPPoE Discovery头部的索引。默认值：0\n    TagIndex (int): 在PPPoE Discovery头部中，要配置的Server Name Error Tag的索引。默认值：0\n\nKeyword Args:\n\n    Type (hex): Tag的类型，十六进制格式，默认值：0110，取值范围：\n\n        0000: End Of List\n\n        0101: Service Name\n\n        0102: AC Name\n\n        0103: Host Uniq\n\n        0104: AC Cookie\n\n        0105: Vendor Specific\n\n        0110: Relay Session Id\n\n        0201: Service Name Error\n\n        0202: AC System Error\n\n        0203: Generic Error\n\n    Length (int): Tag长度，默认值：<AUTO>0，取值范围：0-65535\n    Value (hex): Tag值，十六进制格式，默认值：0，取值范围：长度0-250的十六进制数\n\nReturns:\n\n    dict 或 False: 配置操作的结果字典，格式如示例所示。若操作失败或底层方法未返回结果，则返回False。\n\n    eg::\n        {\n            'Type': 'tags.tagList_0.tagServiceNameError.type',\n            'Length': 'tags.tagList_0.tagServiceNameError.length',\n            'Value': 'tags.tagList_0.tagServiceNameError.value',\n        }\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${Stream} | add_stream | Port=${Port} |\n        | Create Stream Header | Stream=${Stream} | HeaderTypes=pppoediscovery |\n        | Edit Header Pppoe Discovery Server Name Error Tag | Stream=${Stream} | Level=0 | TagIndex=0 | Type=0201 | Value=DEADBEEF |\n\nSide Effects:\n    - 可能会修改系统中选定PPPoE Discovery头部的配置\n    - 内部调用get_stream_header，可能会查询系统获取头部名称并在未缓存时构建头部对象",
  "TesterLibrary.Stream.Header.Access.common.edit_header_pppoe_discovery_ac_system_error_tag": "修改测试仪表流量模板中PPPoE Discovery报文头部的AC-System-Error标签内容。\n\n该函数用于在指定的流量模板中，对特定层级的PPPoE Discovery头部中的AC-System-Error标签进行配置或修改。可以根据需要设置标签的类型（Type）、长度（Length）和值（Value）等参数。\n\n参数:\n    Stream (:obj:`StreamTemplate` 或 list): 流量模板对象，表示待修改的流量；也可以传入包含一个流量对象的列表，若为列表，则使用第一个元素。\n    Level (int, optional): 指定PPPoE Discovery头部在流量模板中嵌套的层级，默认为0，即最顶层的PPPoE Discovery头部。\n    TagIndex (int, optional): AC-System-Error标签在该PPPoE Discovery头部中标签列表的索引位置，默认为0。\n    **kwargs: 可选的关键字参数，用于配置AC-System-Error标签的具体属性，例如：\n        - Type (hex): 标签类型，默认值为0202（对应AC System Error），其他可选值包括Service Name、Host Uniq等。\n        - Length (int): 标签长度，默认值为<AUTO>0，取值范围为0到65535。\n        - Value (hex): 标签值，默认值为0，取值为长度不超过250的十六进制数值。\n\n返回值:\n    dict 或 False: 如果配置成功，返回一个字典，包含配置项及其对应的系统内部标识符，如Type、Length、Value等字段；如果未进行任何更改或操作失败，则返回False。\n\n副作用:\n    - 如果尚未缓存该流量的头部信息，会从系统中检索并缓存。\n    - 修改指定PPPoE Discovery头部中的AC-System-Error标签内容。\n\n示例:\n    .. code:: RobotFramework\n\n        | ${Stream} | add_stream | Port=${Port} |\n        | Create Stream Header | Stream=${Stream} | HeaderTypes=pppoediscovery |\n        | Edit Header Pppoe Discovery Ac System Error Tag | Stream=${Stream} | Level=0 | TagIndex=0 | Type=0101 |",
  "TesterLibrary.Stream.Header.Access.common.edit_header_pppoe_discovery_generic_error_tag": "修改测试仪表流量模板中PPPoE Discovery报文头部的Generic Error Tag内容。\n\n该函数用于编辑指定流量模板中的PPPoE Discovery头部的Generic Error Tag。通过Level参数可以选择流量模板中多个PPPoE Discovery头部中的某一个，TagIndex参数可以指定该头部中的某个Generic Error Tag进行修改。支持传入多个关键字参数（**kwargs）来配置Tag的具体字段。\n\n参数:\n    Stream (object 或 list): 流量模板对象或对象列表。若为列表，则仅使用第一个元素。\n    Level (int, 可选): PPPoE Discovery头部在头部层级结构中的索引，默认为0。\n    TagIndex (int, 可选): 要编辑的Generic Error Tag在头部中的索引，默认为0。\n    **kwargs: 任意关键字参数，用于配置Generic Error Tag的字段，如Type、Length、Value等。\n\n返回值:\n    dict 或 bool: 若配置成功，返回包含配置结果的字典；若失败，返回False。\n\n可能的关键字参数示例:\n    Type (hex): Tag类型，默认值：0203，可选值包括：\n        0000: End Of List\n        0101: Service Name\n        0102: AC Name\n        0103: Host Uniq\n        0104: AC Cookie\n        0105: Vendor Specific\n        0110: Relay Session Id\n        0201: Service Name Error\n        0202: AC System Error\n        0203: Generic Error\n    Length (int): Tag长度，默认值：<AUTO>0，取值范围：0-65535\n    Value (hex): Tag值，默认值：0，取值范围：长度0-250的十六进制数\n\n示例:\n    .. code:: RobotFramework\n\n        | ${Stream} | add_stream | Port=${Port} |\n        | Create Stream Header | Stream=${Stream} | HeaderTypes=pppoediscovery |\n        | Edit Header Pppoe Discovery Generic Error Tag | Stream=${Stream} | Level=0 | TagIndex=0 | Type=0101 |\n\n注意事项:\n    - 该函数会调用底层API对PPPoE Discovery头部的Generic Error Tag进行修改。\n    - 如果传入多个流对象，仅第一个会被使用。\n    - 函数内部使用缓存机制获取和存储流对象的头部信息。",
  "TesterLibrary.Stream.Header.Access.common.edit_header_pppoe_discovery_unknown_tag": "修改测试仪表流量模板中PPPoE Discovery报文头部的未知Tag配置。\n\n该函数用于编辑指定流量模板中某个PPPoE Discovery头部内的未知Tag信息。函数会检索流对象中的所有PPPoE Discovery头部，并根据提供的Level参数定位到特定的头部，然后在该头部中修改指定索引（TagIndex）的未知Tag内容。\n\n参数:\n    Stream (object or list): 流模板对象或仅包含一个流对象的列表。如果传入列表，则使用第一个元素。流对象必须包含一个唯一标识它的 'handle' 属性。\n    Level (int, optional): PPPoE Discovery头部在流中的层级索引，默认为0。\n    TagIndex (int, optional): 要编辑的未知Tag在其所属PPPoE Discovery头部中的索引，默认为0。\n    **kwargs: 任意关键字参数，表示要设置的Tag字段及其值。支持的字段包括：\n        - Type (hex): Tag类型，默认值为0000，取值范围00-FF。\n        - Length (int): Tag长度，默认值为0（可自动填充），取值范围0-65535。\n        - Value (hex): Tag值，默认值为0，取值为长度0到40之间的十六进制字符串。\n\n返回:\n    dict: 如果操作成功，返回包含更新后的字段路径的字典，例如：\n        {\n            'Type': 'tags.tagList_0.tagGenericError.type',\n            'Length': 'tags.tagList_0.tagGenericError.length',\n            'Value': 'tags.tagList_0.tagGenericError.value',\n        }\n    bool: 如果未进行任何更改或操作失败，返回False。\n\n副作用:\n    - 如果尚未缓存流的头部信息，则会检索并缓存。\n    - 修改指定层级和索引位置的PPPoE Discovery头部中的未知Tag配置。",
  "TesterLibrary.Stream.Header.Access.dhcpv4.edit_header_dhcpv4_server": "修改测试仪表流量模板中指定层级的DHCPv4 Server报文头部内容，支持对多种DHCPv4字段和选项进行自定义配置。\n\nArgs:\n\n    Stream (:obj:`StreamTemplate` 或 list): 测试仪表流量对象，类型为StreamTemplate或包含单个StreamTemplate对象的列表。若传入列表，则仅使用第一个元素。\n\n    Level (int, optional): 要修改的DHCPv4 Server头部在流模板中的索引位置，默认值：0\n\nKeyword Args:\n\n    MessageType (int, optional): DHCP消息类型（如discover, offer, request等），默认值：2，取值范围：0-255\n\n    HardwareType (int, optional): 硬件类型字段，默认值：1，取值范围：0-255\n\n    HaddrLen (int, optional): 客户端硬件地址长度，默认值：6，取值范围：0-255\n\n    Hops (int, optional): 消息跳数限制，默认值：0，取值范围：0-255\n\n    Xid (int, optional): 事务ID，默认值：1，取值范围：0-4294967295\n\n    Elapsed (int, optional): 客户端尝试获取租约所耗时间（单位秒），默认值：0，取值范围：0-65535\n\n    Bootpflags (hex, optional): BOOTP标志位，默认值：8000，取值范围：0000-FFFF\n\n    ClientAddr (str, optional): 客户端IP地址，默认值：0.0.0.0，取值范围：有效的IPv4地址\n\n    YourAddr (str, optional): 分配给客户端的IP地址，默认值：0.0.0.0，取值范围：有效的IPv4地址\n\n    NextServerAddr (str, optional): 下一跳服务器IP地址，默认值：0.0.0.0，取值范围：有效的IPv4地址\n\n    RelayAgentAddr (str, optional): 中继代理IP地址，默认值：0.0.0.0，取值范围：有效的IPv4地址\n\n    ClientMac (str, optional): 客户端MAC地址，默认值：00:00:02:00:00:02，取值范围：有效的MAC地址格式\n\n    ClientHWPad (hex, optional): 客户端硬件地址填充字段，默认值：00000000000000000000，取值范围：固定长度10字节十六进制字符串\n\n    ServerHostName (hex, optional): 服务器主机名字段，默认值：全零字符串（64字节），取值范围：长度64字节十六进制字符串\n\n    BootFileName (hex, optional): 启动文件名字段，默认值：全零字符串（128字节），取值范围：长度128字节十六进制字符串\n\n    MagicCookie (hex, optional): DHCP魔数cookie，默认值：63825363，取值范围：固定长度4字节十六进制字符串\n\n    Padding (hex, optional): 报文填充字段，默认值为空字符串，取值范围：最多1500字节十六进制字符串\n\n    OptionHeaders (list or dict, optional): DHCP选项字段列表或字典，支持如下参数：\n\n        messageType\n\n        serverId\n\n        message\n\n        leaseTime\n\n        endOfOptions\n\n        messageSize\n\n        clientIdHW\n\n        clientIdNoneHW\n\n        hostName\n\n        paramReqList\n\n        reqAddr\n\n        optionOverload\n\n        customOption\n\n        generalTLV\n\nReturns:\n\n    dict: 包含成功更新字段的字典，例如::\n\n        {\n            'MessageType': 'messageType',\n            'HardwareType': 'hardwareType',\n            'HaddrLen': 'haddrLen',\n            'Hops': 'hops',\n            'Xid': 'xid',\n            'Elapsed': 'elapsed',\n            'Bootpflags': 'bootpflags',\n            'ClientAddr': 'clientAddr',\n            'YourAddr': 'yourAddr',\n            'NextServerAddr': 'nextServerAddr',\n            'RelayAgentAddr': 'relayAgentAddr',\n            'ClientMac': 'clientMac',\n            'ClientHWPad': 'clientHWPad',\n            'ServerHostName': 'serverHostName',\n            'BootFileName': 'bootFileName',\n            'MagicCookie': 'magicCookie',\n            'Padding': 'padding',\n            'OptionHeaders': True\n        }\n\n    若未修改任何字段则返回False\n\nSide Effects:\n\n    - 直接修改指定流模板中对应Level的DHCPv4 Server头部内容\n    - 内部调用get_stream_header函数筛选'dhcpv4server'类型的头部\n    - 根据提供的参数更新一个或多个字段\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${Stream} | add_stream | Port=${Port} |\n        | ${HeaderTypes} | Create List | EthernetII | IPv4 | UDP | dhcpv4Server |\n        | ${OptionHeaders} | Create List | messageSize | clientIdHW | clientIdNoneHW | hostName |\n        | Create Stream Header | Stream=${Stream} | HeaderTypes=${HeaderTypes} |\n        | Edit Header DHCPv4 Server | Stream=${Stream} | Level=0 | messageType=1 | OptionHeaders=${OptionHeaders} |",
  "TesterLibrary.Stream.Header.Access.dhcpv4.edit_header_dhcpv4_client": "修改测试仪表流量模板中DHCPv4 Client报文头部内容。\n\n该函数用于编辑指定流模板中某个DHCPv4 Client头部的字段内容。可以通过指定参数来更新Message Type、Hardware Type、IP地址、MAC地址以及其他可选字段。如果提供了参数（非None），则会更新对应的字段。若成功修改，返回一个包含所有被修改字段名称及其内部对应字段名的字典；如果没有提供任何参数，则不会进行修改并返回False。\n\n参数:\n\n    Stream (:obj:`StreamTemplate` 或 list): 测试仪表流量对象或包含单个流对象的列表，必须具有唯一标识流的handle属性。\n\n    Level (int, 可选): 要编辑的DHCPv4 Client头部在流中的索引号，默认为0。用于处理存在多个DHCPv4 Client头部的情况。\n\n关键字参数（可选）:\n\n    MessageType (str 或 int): DHCP消息类型，如DHCPDISCOVER、DHCPOFFER等。\n\n    HardwareType (str 或 int): 硬件地址类型，例如Ethernet为1。\n\n    HaddrLen (int): 硬件地址长度（以字节为单位）。\n\n    Hops (int): 客户端与服务器之间的中继代理数量。\n\n    Xid (str 或 int): 事务ID，标识此次DHCP事务。\n\n    Elapsed (int): 客户端尝试获取IP地址所经过的时间（秒）。\n\n    Bootpflags (str 或 int): BOOTP协议中的标志位。\n\n    ClientAddr (str): 客户端当前使用的IP地址。\n\n    YourAddr (str): 服务器分配给客户端的IP地址。\n\n    NextServerAddr (str): 下一跳服务器的IP地址。\n\n    RelayAgentAddr (str): 中继代理的IP地址。\n\n    ClientMac (str): 客户端的MAC地址。\n\n    ClientHWPad (str): 客户端硬件地址填充字段。\n\n    ServerHostName (str): 提供配置信息的服务器名称。\n\n    BootFileName (str): 客户端请求的启动文件名。\n\n    MagicCookie (str): DHCP消息识别魔数字段。\n\n    Padding (str): 填充字段，用于保证数据包达到最小长度。\n\n    OptionHeaders (list 或 dict): 指定要插入到DHCPv4头部中的选项字段。支持的选项包括：\n\n        messageType\n\n        messageSize\n\n        clientIdHW\n\n        clientIdNoneHW\n\n        hostName\n\n        paramReqList\n\n        reqAddr\n\n        optionOverload\n\n        serverId\n\n        message\n\n        leaseTime\n\n        customOption\n\n        endOfOptions\n\n        generalTLV\n\n返回值:\n\n    dict: 包含所有成功修改的字段名及其内部字段名的映射关系。例如::\n\n        {\n            'MessageType': 'messageType',\n            'ClientMac': 'clientMac'\n        }\n\n    False: 如果没有提供任何参数导致未进行修改，则返回False。\n\n副作用:\n\n    - 修改了指定流模板中的DHCPv4 Client头部内容。\n    - 如果提供了OptionHeaders参数，会在DHCPv4头部中插入相应的选项字段。\n\n示例:\n\n    .. code:: RobotFramework\n\n        | ${Stream} | add_stream | Port=${Port} |\n        | ${HeaderTypes} | Create List | EthernetII | IPv4 | UDP | dhcpv4Client |\n        | ${OptionHeaders} | Create List | messageSize | clientIdHW | clientIdNoneHW | hostName |\n        | Create Stream Header | Stream=${Stream} | HeaderTypes=${HeaderTypes} |\n        | Edit Header DHCPv4 Client | Stream=${Stream} | Level=0 | messageType=1 | OptionHeaders=${OptionHeaders} |",
  "TesterLibrary.Stream.Header.Access.dhcpv4.edit_header_dhcpv4_option": "修改测试仪表流量模板中DHCPv4 Client/Server报文中Option头部内容。\n\n该函数用于编辑指定流对象中的DHCPv4协议选项字段。根据提供的Types参数，它会识别出对应层级的DHCPv4头部，并调用相应的方法来修改特定的选项字段。支持多种DHCPv4选项，如Server ID、Message Type、Lease Time、Client ID等。\n\nArgs:\n    Stream (:obj:`StreamTemplate` 或 list): 要修改的测试仪表流量对象，类型为StreamTemplate或包含一个StreamTemplate对象的列表。如果传入列表，则只使用第一个元素。\n    \n    Types (str): 指定要编辑的DHCPv4选项类型。有效值包括：\n        - 'MessageType': DHCP消息类型（如Discover, Offer, Request）\n        - 'MessageSize': 最大DHCP消息大小\n        - 'ClientIdHW': 客户端硬件标识符\n        - 'ClientIdNoneHW': 非硬件客户端标识符\n        - 'HostName': 主机名\n        - 'ParamReqList': 参数请求列表\n        - 'ReqAddr': 请求的IP地址\n        - 'OptionOverload': 选项溢出字段\n        - 'ServerId': 服务器标识符\n        - 'Message': 消息内容\n        - 'LeaseTime': IP地址租约时间\n        - 'CustomOption': 自定义选项\n        - 'EndOfOptions': 选项结束标记\n        - 'GeneralTLV': 通用TLV（Type-Length-Value）数据\n\n    Level (int, optional): DHCPv4头部在流中所有头部中的索引位置，默认为0（最顶层的DHCPv4头部）。\n\n    Index (int, optional): 如果选项字段包含多个条目，此参数指定要修改的条目索引，默认为0。\n\nKeyword Args:\n    根据选择的选项类型提供不同的参数，例如：\n\n    MessageType支持：\n        Type (hex): Option Type，默认值：35，取值范围：00-FF\n        Length (int): Length，默认值：<AUTO>1，取值范围：0-255\n        Code (int): Code，默认值：1，取值范围：1-8\n\n    MessageSize支持：\n        Type (hex): Option Type，默认值：39，取值范围：00-FF\n        Length (int): Length，默认值：<AUTO>2，取值范围：0-255\n        Value (hex): Option Value，默认值：0240，取值范围：长度0-256字节十六进制数\n\n    clientIdHW支持：\n        Type (hex): Option Type，默认值：3D，取值范围：00-FF\n        Length (int): Length，默认值：<AUTO>7，取值范围：0-255\n        IdType (hex): ID Type，默认值：01，取值范围：00-FF\n        ClientHWA (hex): Client HW Address，默认值：00:00:02:01:01:02，取值范围：有效的mac地址\n\n    clientIdNoneHW支持：\n        Type (hex): Option Type，默认值：3D，取值范围：00-FF\n        Length (int): Length，默认值：<AUTO>7，取值范围：0-255\n        IdType (hex): ID Type，默认值：00，取值范围：00-FF\n        Value (hex): Option Value，默认值：000102030405，取值范围：长度0-256字节十六进制数\n\n    hostName支持：\n        Type (hex): Option Type，默认值：0C，取值范围：00-FF\n        Length (int): Length，默认值：<AUTO>6，取值范围：0-255\n        Value (hex): Option Value，默认值：636465666768，取值范围：长度0-256字节十六进制数\n\n    paramReqList支持：\n        Type (hex): Option Type，默认值：37，取值范围：00-FF\n        Length (int): Length，默认值：<AUTO>4，取值范围：0-255\n        Value (hex): Option Value，默认值：01060f21，取值范围：长度0-256字节十六进制数\n\n    reqAddr支持：\n        Type (hex): Option Type，默认值：32，取值范围：00-FF\n        Length (int): Length，默认值：<AUTO>4，取值范围：0-255\n        ReqAddr (str): Request Address，默认值：0.0.0.0，取值范围：有效的ipv4地址\n\n    optionOverload支持：\n        Type (hex): Option Type，默认值：34，取值范围：00-FF\n        Length (int): Length，默认值：<AUTO>4，取值范围：0-255\n        Overload (int): Overload，默认值：3，取值范围：1-8\n\n    serverId支持：\n        Type (hex): Option Type，默认值：36，取值范围：00-FF\n        Length (int): Length，默认值：<AUTO>4，取值范围：0-255\n        ReqAddr (str): Request Address，默认值：0.0.0.0，取值范围：有效的ipv4地址\n\n    message支持：\n        Type (hex): Option Type，默认值：38，取值范围：00-FF\n        Length (int): Length，默认值：<AUTO>4，取值范围：0-255\n        Value (hex): Option Value，默认值：00，取值范围：长度0-256字节十六进制数\n\n    leaseTime支持：\n        Type (hex): Option Type，默认值：33，取值范围：00-FF\n        Length (int): Length，默认值：<AUTO>4，取值范围：0-255\n        LeaseTime (int): Lease Time(s)，默认值：0，取值范围：0-4294967295\n\n    customOption支持：\n        Type (hex): Option Type，默认值：FE，取值范围：00-FF\n        Length (int): Length，默认值：<AUTO>1，取值范围：0-255\n        Overload (hex): Overload，默认值：00，取值范围：长度0-256字节十六进制数\n\n    endOfOptions支持：\n        Type (hex): Option Type，默认值：FE，取值范围：00-FF\n\n    generalTLV支持：\n        Type (hex): Option Type，默认值：00，取值范围：00-FF\n        Length (int): Length，默认值：<AUTO>0，取值范围：0-255\n        Value (hex): value，默认值：”“，取值范围：长度0-256字节十六进制数\n\nReturns:\n    dict: 包含编辑结果的字典，示例：\n        {\n            'Type': 'options.Dhcpv4Options_0.serverId.type'\n            'Length': 'options.Dhcpv4Options_0.serverId.length'\n            'ReqAddr': 'options.Dhcpv4Options_0.serverId.reqAddr'\n        }\n    如果没有执行有效的编辑操作，则返回False。\n\nRaises:\n    ContinuableFailure: 如果底层API调用失败（返回False），则抛出此异常。\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${Stream} | add_stream | Port=${Port} |\n        | ${HeaderTypes} | Create List | EthernetII | IPv4 | UDP | dhcpv4Client |\n        | ${LsaHeaders} | Create List | messageSize | clientIdHW | clientIdNoneHW | hostName |\n        | Create Stream Header | Stream=${Stream} | HeaderTypes=${HeaderTypes} |\n        | Edit Header DHCPv4 Client | Stream=${Stream} | Level=0 | UsePriority=1 | OptionHeaders=${OptionHeaders} |\n        | Edit Header DHCPv4 Client Option | Stream=${Stream} | Level=0 | Index=0 | Types=MessageSize | Xid=1 |\n        | Edit Header DHCPv4 Client Option | Stream=${Stream} | Level=0 | Index=1 | Types=ClientIdHW | Xid=1 |\n        | Edit Header DHCPv4 Client Option | Stream=${Stream} | Level=0 | Index=2 | Types=ClientIdNoneHW | Xid=1 |\n        | Edit Header DHCPv4 Client Option | Stream=${Stream} | Level=0 | Index=3 | Types=HostName | Xid=1 |\n        | Edit Header DHCPv4 Client Option | Stream=${Stream} | Level=0 | Index=4 | Types=ParamReqList | Xid=1 |\n        | Edit Header DHCPv4 Client Option | Stream=${Stream} | Level=0 | Index=5 | Types=ReqAddr | Xid=1 |\n        | Edit Header DHCPv4 Client Option | Stream=${Stream} | Level=0 | Index=6 | Types=OptionOverload | Xid=1 |\n        | Edit Header DHCPv4 Client Option | Stream=${Stream} | Level=0 | Index=7 | Types=CustomOption | Xid=1 |\n        | Edit Header DHCPv4 Client Option | Stream=${Stream} | Level=0 | Index=8 | Types=GeneralTLV | Xid=1 |",
  "TesterLibrary.Stream.Header.Access.dhcpv6.edit_header_dhcpv6_client": "修改测试仪表流量模板中指定层级的DHCPv6 Client报文头部字段内容。\n\n该函数用于修改指定流对象中某一DHCPv6 Client头部的特定字段，包括Message Type、Transaction ID以及Option Headers。仅传入非None的字段会被更新。\n\n参数:\n    Stream (object): 测试仪表流量对象，预期包含唯一标识流的`handle`属性。\n                     若传入列表，则仅使用第一个元素。\n    Level (int, 可选): DHCPv6 Client头部在流中的索引值，默认为0。\n    **kwargs (可变关键字参数): 支持以下字段：\n        MessageType (str or int, 可选): 设置DHCPv6消息类型，取值范围：0-255，默认值：1\n        TransId (str or int, 可选): 设置事务ID，取值范围：0-16777215，默认值：1\n        OptionHeaders (dict or list, 可选): 要插入或更新的选项头部信息，支持的选项包括：\n\n            clientIdOption\n\n            serverIdOption\n\n            ianaOption\n\n            requestOption\n\n            elapsedTimeOption\n\n            serverUnicastOption\n\n            statusCodeOption\n\n            rapidCommitOption\n\n            interfaceIdOption\n\n            reconfigureAcceptOption\n\n            iapdOption\n\n            customOption\n\n            generalTLV\n\n返回值:\n    dict: 包含被修改字段及其对应内部属性名称的字典。例如::\n\n        {\n            'MessageType': 'messageType',\n            'TransId': 'transId',\n            'OptionHeaders': True\n        }\n\n    如果所有输入参数均为None，则返回False。\n\n副作用:\n    - 修改流对象内部的DHCPv6 Client头部状态\n    - 使用`get_stream_header`函数获取并缓存流头部信息\n    - 若提供OptionHeaders参数，可能会插入新的选项头部\n\n示例:\n    .. code:: RobotFramework\n\n        | ${Stream} | add_stream | Port=${Port} |\n        | ${HeaderTypes} | Create List | EthernetII | IPv6 | UDP | dhcpv6Client |\n        | ${OptionHeaders} | Create List | clientIdOption | serverIdOption | ianaOption | requestOption |\n        | Create Stream Header | Stream=${Stream} | HeaderTypes=${HeaderTypes} |\n        | Edit Header DHCPv6 Client | Stream=${Stream} | Level=0 | messageType=1 | OptionHeaders=${OptionHeaders} |",
  "TesterLibrary.Stream.Header.Access.dhcpv6.edit_header_dhcpv6_server": "修改测试仪表流量模板中指定位置的DHCPv6 Server报文头部字段属性\n\n函数功能：\n该函数用于编辑指定流模板中的DHCPv6 Server协议头部字段。支持修改Message Type、Transaction ID以及Option Headers等关键字段。\n\n参数说明：\n    Stream (object): 流量模板对象，必须包含唯一标识流的'handle'属性。如果传入列表类型，则仅使用第一个元素。\n    Level (int, optional): 要修改的DHCPv6 Server头部在流中所有DHCPv6 Server头部中的索引位置，默认为0。\n\n关键字参数（可选）：\n    MessageType (str or int, optional): 设置新的消息类型字段值，取值范围0-255。若不提供则不修改该字段。\n    TransId (str or int, optional): 设置新的事务ID字段值，取值范围0-16777215。若不提供则不修改该字段。\n    OptionHeaders (dict or list, optional): 用于插入或更新选项字段的内容。格式需符合底层系统要求，可通过列表形式指定多个选项，支持选项包括：\n        - clientIdOption\n        - serverIdOption\n        - ianaOption\n        - requestOption\n        - elapsedTimeOption\n        - serverUnicastOption\n        - statusCodeOption\n        - rapidCommitOption\n        - interfaceIdOption\n        - reconfigureAcceptOption\n        - iapdOption\n        - customOption\n        - generalTLV\n    若不提供该参数，则不修改选项字段。\n\n返回值：\n    dict: 包含成功修改字段的字典，键为字段名('MessageType', 'TransId', 'OptionHeaders')，值为其对应的内部属性名称。若未成功修改任何字段，则返回False。\n\n异常处理：\n    当返回结果为False时，会抛出ContinuableFailure类型的异常，提示函数调用失败。\n\n注意事项：\n    - 修改后的字段会在内存中保留更改。\n    - 如果对OptionHeaders进行了操作，可能会影响头部选项的结构。",
  "TesterLibrary.Stream.Header.Access.dhcpv6.edit_header_dhcpv6_option": "修改测试仪表流量模板中指定的DHCPv6 Option字段内容。\n\n该函数用于编辑流模板中特定DHCPv6报文Option字段的内容。支持多种类型的Option字段，包括ClientIdOption、ServerIdOption、IanaOption等。函数会先从流对象中找到对应的DHCPv6头部，然后根据提供的参数和关键字参数对指定的Option字段进行修改。\n\nArgs:\n\n    Stream (:obj:`StreamTemplate` or list): 流模板对象或包含一个流模板对象的列表。如果提供的是列表，则只使用第一个元素。\n    \n    Types (str): 要编辑的Option类型。有效值包括：\n                 'ClientIdOption', 'ServerIdOption', 'IanaOption', 'RequestOption',\n                 'ElapsedTimeOption', 'ServerUnicastOption', 'StatusCodeOption',\n                 'RapidCommitOption', 'InterfaceIdOption', 'ReconfigureAcceptOption',\n                 'IapdOption', 'CustomOption', 'GeneralTLV'（不区分大小写）。\n    \n    Level (int, optional): DHCPv6头部在流模板中的索引号（用于处理多个DHCPv6头部的情况）。默认为0。\n    \n    Index (int, optional): 在选定的Option类型中，要编辑的具体Option实例的索引号。默认为0。\n\nKeyword Args:\n\n    支持的关键字参数取决于所选的Option类型。每个Option类型都有其特定的可配置字段。例如：\n\n    - ClientIdOption:\n        - Type (int): Option类型，默认：1\n        - Length (int): 长度，默认：10\n        - Duid (hex): DUID，默认：00030001000003010103\n\n    - ServerIdOption:\n        - Type (int): Option类型，默认：1\n        - Length (int): 长度，默认：10\n        - DuidType (int): DUID类型，默认：3\n        - HardwareType (int): 硬件类型，默认：1\n        - LinkAddress (str): 链路层地址，默认：00:00:03:01:01:02\n\n    - IanaOption:\n        - Type (int): Option类型，默认：3\n        - Length (int): 长度，默认：12\n        - Iaid (hex): IAID，默认：00050001\n        - T1 (int): T1，默认：302400\n        - T2 (int): T2，默认：483840\n        - IaOption (int): IA选项数量，默认：0\n\n    - 其他Option类型也各自有不同的关键字参数，请参见原始文档。\n\nReturns:\n\n    dict: 编辑结果的字典表示，通常包含状态信息或更新后的字段值。具体结构取决于底层调用的方法。\n    \n    bool: 如果未执行任何编辑操作（例如无效的Types值或Index超出范围），则返回False。\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${Stream} | add_stream | Port=${Port} |\n        | ${HeaderTypes} | Create List | EthernetII | IPv6 | UDP | dhcpv6Server |\n        | ${LsaHeaders} | Create List | clientIdOption | serverIdOption | ianaOption | iapdOption |\n        | Create Stream Header | Stream=${Stream} | HeaderTypes=${HeaderTypes} |\n        | Edit Header DHCPv6 Server | Stream=${Stream} | Level=0 | UsePriority=1 | OptionHeaders=${OptionHeaders} |\n        | Edit Header DHCPv6 Server Option | Stream=${Stream} | Level=0 | Index=0 | Types=ClientIdOption | Length=1 |\n        | Edit Header DHCPv6 Server Option | Stream=${Stream} | Level=0 | Index=1 | Types=ServerIdOption | Length=1 |\n        | Edit Header DHCPv6 Server Option | Stream=${Stream} | Level=0 | Index=2 | Types=IanaOption | Length=1 | OptionIndex=0 | Subtype=Dhcpv6IaAddress | IaOption=1 |\n        | Edit Header DHCPv6 Server Option | Stream=${Stream} | Level=0 | Index=2 | Types=iapdOption | Length=1 | OptionIndex=0 | Subtype=Dhcpv6IaPrefix | IaOption=1 |",
  "TesterLibrary.Stream.Header.Access.dhcpv6.edit_header_dhcpv6_option_ia_address": "修改测试仪表流量模板中DHCPv6 Server/Client头部的IA（Identity Association）Address Option内容。\n\nArgs:\n\n    Stream (:obj:`StreamTemplate` 或 list): 测试仪表流量对象，类型为StreamTemplate或包含单个StreamTemplate对象的列表。如果传入的是列表，则使用第一个元素作为流对象。\n\n    Level (int, optional): DHCPv6头部在流模板中的索引位置，默认值：0。用于定位要修改的DHCPv6 Server或Client头部。\n\n    Index (int, optional): IA Address Option在选中的DHCPv6头部中的索引位置，默认值：0。用于定位要修改的具体IA Address Option。\n\nKeyword Args:\n\n    Type (int): Option字段的值，默认值：<AUTO>5，取值范围：0-65535\n\n    Length (int): Option长度字段的值，默认值：<AUTO>24，取值范围：0-65535\n\n    Ipv6Address (str): IPv6地址字段的值，默认值：2001::3，取值必须是有效的IPv6地址格式\n\n    PreferredLifetime (hex or int): 优选生命周期字段的值，默认值：604800（十六进制或整数），取值范围：0-4294967245\n\n    ValidLifetime (int): 有效生命周期字段的值，默认值：2592000，取值范围：0-4294967245\n\nReturns:\n\n    dict: 包含修改后的字段值的字典，例如::\n\n        {\n            'Type': 'options.Dhcpv6Options_2.ianaOption.iaOption.Dhcpv6IaAddress_0.type',\n            'Length': 'options.Dhcpv6Options_2.ianaOption.iaOption.Dhcpv6IaAddress_0.length',\n            'Ipv6Address': 'options.Dhcpv6Options_2.ianaOption.iaOption.Dhcpv6IaAddress_0.ipv6Address',\n            'PreferredLifetime': 'options.Dhcpv6Options_2.ianaOption.iaOption.Dhcpv6IaAddress_0.preferredLifetime',\n            'ValidLifetime': 'options.Dhcpv6Options_2.ianaOption.iaOption.Dhcpv6IaAddress_0.validLifetime'\n        }\n\n    如果操作失败则返回False，并抛出ContinuableFailure异常。\n\nDescription:\n    - 如果传入的是列表，函数会使用列表的第一个元素作为StreamTemplate对象。\n    - 函数会从流模板中获取所有DHCPv6相关的头部信息（Server或Client类型）。\n    - 根据Level参数选择指定索引的DHCPv6头部。\n    - 使用Index参数和提供的关键字参数(**kwargs)修改该DHCPv6头部中的IA Address Option字段。\n    - 修改完成后返回包含字段路径的字典，表示修改成功的字段及其路径；若失败则返回False并抛出异常。\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${Stream} | add_stream | Port=${Port} |\n        | ${HeaderTypes} | Create List | EthernetII | IPv6 | UDP | dhcpv6Server |\n        | ${LsaHeaders} | Create List | clientIdOption | serverIdOption | ianaOption | iapdOption |\n        | Create Stream Header | Stream=${Stream} | HeaderTypes=${HeaderTypes} |\n        | ${IaOptionone} | Create Dictionary | type=5 | ipv6Address=2020::1 |\n        | ${IaOptiontwo} | Create Dictionary | prefixLength=128 | ipv6Address=2022::3 |\n        | Edit Header DHCPv6 Server | Stream=${Stream} | Level=0 | UsePriority=1 | OptionHeaders=${OptionHeaders} |\n        | Edit Header DHCPv6 Server Option | Stream=${Stream} | Level=0 | Index=0 | Types=ClientIdOption | Length=1 |\n        | Edit Header DHCPv6 Server Option | Stream=${Stream} | Level=0 | Index=1 | Types=ServerIdOption | Length=1 |\n        | Edit Header DHCPv6 Server Option | Stream=${Stream} | Level=0 | Index=2 | Types=IanaOption | Length=1 | OptionIndex=0 | Subtype=Dhcpv6IaAddress | IaOption=1 |\n        | Edit Header DHCPv6 Server Option | Stream=${Stream} | Level=0 | Index=3 | Types=iapdOption | Length=1 | OptionIndex=0 | Subtype=Dhcpv6IaPrefix | IaOption=1 |\n        | Edit Header Dhcpv6 Option Ia Address | Stream=${Stream} | Level=0 | Index=2 | Type=5 | Ipv6Address=2020::1 |",
  "TesterLibrary.Stream.Header.Access.dhcpv6.edit_header_dhcpv6_option_ia_prefix": "修改测试仪表流量模板中DHCPv6 Server/Client IA Prefix选项内容。\n\n该函数用于编辑指定流中的DHCPv6头部（Server或Client）的IA Prefix选项。函数会查找与流关联的所有DHCPv6头部，并根据提供的Level参数选择特定的DHCPv6头部，然后调用其`edit_ia_prefix_option`方法来修改指定索引（Index）处的IA Prefix选项。\n\nArgs:\n\n    Stream (:obj:`StreamTemplate` 或 list): 测试仪表流量对象，类型为StreamTemplate或者包含单个StreamTemplate对象的列表。\n        如果传入列表，则仅使用第一个元素。必须具有唯一标识符'handle'属性。\n\n    Level (int, optional): DHCPv6头部在流中所有DHCPv6头部（Server或Client）中的索引位置，默认值为0。\n\n    Index (int, optional): 要修改的IA Prefix选项在其所属DHCPv6头部中的索引位置，默认值为0。\n\nKeyword Args:\n\n    Type (int): Option字段值，默认值：26，取值范围：0-65535\n\n    Length (int): 选项长度字段值，默认值：25，取值范围：0-65535\n\n    PreferredLifetime (hex): 首选生命周期时间（单位秒），默认值：604800（十六进制表示），取值范围：0-4294967245\n\n    ValidLifetime (int): 有效生命周期时间（单位秒），默认值：2592000，取值范围：0-4294967245\n\n    PrefixLength (int): 前缀长度，默认值：64，取值范围：0-255\n\n    Ipv6Address (str): IPv6地址，默认值：2001::3，取值必须为有效的IPv6地址格式字符串\n\nReturns:\n\n    dict or False: 成功时返回一个字典，包含操作结果信息，例如::\n\n        {\n            'Type': 'options.Dhcpv6Options_0.generalTLV.type'\n            'Length': 'options.Dhcpv6Options_0.generalTLV.length'\n            'Ipv6Address': 'options.Dhcpv6Options_0.generalTLV.value'\n        }\n\n    如果未发生更改或操作失败，返回False。\n\nRaises:\n\n    ContinuableFailure: 如果底层实现返回False，表示操作失败，将抛出此异常。\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${Stream} | add_stream | Port=${Port} |\n        | ${HeaderTypes} | Create List | EthernetII | IPv6 | UDP | dhcpv6Server |\n        | ${LsaHeaders} | Create List | clientIdOption | serverIdOption | ianaOption | iapdOption |\n        | Create Stream Header | Stream=${Stream} | HeaderTypes=${HeaderTypes} |\n        | ${IaOptionone} | Create Dictionary | type=5 | ipv6Address=2020::1 |\n        | ${IaOptiontwo} | Create Dictionary | prefixLength=128 | ipv6Address=2022::3 |\n        | Edit Header DHCPv6 Server | Stream=${Stream} | Level=0 | UsePriority=1 | OptionHeaders=${OptionHeaders} |\n        | Edit Header DHCPv6 Server Option | Stream=${Stream} | Level=0 | Index=0 | Types=ClientIdOption | Length=1 |\n        | Edit Header DHCPv6 Server Option | Stream=${Stream} | Level=0 | Index=1 | Types=ServerIdOption | Length=1 |\n        | Edit Header DHCPv6 Server Option | Stream=${Stream} | Level=0 | Index=2 | Types=IanaOption | Length=1 | OptionIndex=0 | Subtype=Dhcpv6IaAddress | IaOption=1 |\n        | Edit Header DHCPv6 Server Option | Stream=${Stream} | Level=0 | Index=3 | Types=iapdOption | Length=1 | OptionIndex=0 | Subtype=Dhcpv6IaPrefix | IaOption=1 |\n        | Edit Header Dhcpv6 Option Ia Address | Stream=${Stream} | Level=0 | Index=2 | Type=5 | Ipv6Address=2020::1 |\n        | Edit Header Dhcpv6 Option Ia Prefix | Stream=${Stream} | Level=0 | Index=3 | PrefixLength=128 | Ipv6Address=2022::3 |\n\nNotes:\n\n    - 如果存在多个DHCPv6头部，可以通过Level参数指定要编辑哪一个。\n    - 编辑行为依赖于对应DHCPv6头部对象的`edit_ia_prefix_option`方法的具体实现。\n    - 在获取头部过程中可能会执行命令并更新内部缓存（通过`get_stream_header`）。",
  "TesterLibrary.Stream.Header.Access.l2tpv2.edit_header_l2tpv2_data": "修改测试仪表流量模板中L2TPv2 Data报文头部的指定字段内容。\n\n该函数用于修改给定流量模板中某个L2TPv2 Data头部的多个可配置字段，包括类型、序列号、隧道ID、会话ID以及其他保留或标志字段。仅修改用户指定的字段，未指定的字段保持不变。\n\n参数:\n    Stream (:obj:`StreamTemplate`): 测试仪表流量模板对象，必须包含唯一标识流的句柄（handle属性）。如果传入列表，则只使用第一个元素。\n    Level (int): 要修改的L2TPv2 Data头部在流中所有L2TPv2 Data头部中的索引序号，默认值为0，取值范围：0-65535\n\n关键字参数（均为可选）:\n    Type (bit): 设置Type字段的值，默认值：1，取值范围：0-1\n    UseLength (bit): 设置UseLength字段的值，表示是否使用长度字段，默认值：1，取值范围：0-1\n    Reserved1 (bit): 设置第一个保留字段（reserved1）的值，默认值：00，取值范围：00-11\n    UseSequence (bit): 设置UseSequence字段的值，表示是否使用序列号，默认值：1，取值范围：0-1\n    Reserved2 (bit): 设置第二个保留字段（reserved2）的值，默认值：0，取值范围：0-1\n    UseOffset (bit): 设置UseOffset字段的值，表示是否使用偏移字段，默认值：0，取值范围：0-1\n    UsePriority (bit): 设置UsePriority字段的值，表示优先级使用情况，默认值：0，取值范围：0-1\n    Reserved3 (bit): 设置第三个保留字段（reserved3）的值，默认值：0000，取值范围：0000-1111\n    Version (int): 设置版本号字段（version）的值，默认值：2，取值范围：0-15\n    LengthOption (int): 设置长度选项字段（lengthOption）的值，默认值：0，取值范围：0-65535\n    TunnelId (int): 设置隧道ID（tunnelId）的值，默认值：0，取值范围：0-65535\n    SessionId (int): 设置会话ID（sessionId）的值，默认值：0，取值范围：0-65535\n    SeqNum (int): 设置消息序列号（seqNum）节点个数，默认值：0，取值范围：0-1\n    OffsetPadding (int): 设置偏移填充（offsetPadding）节点个数，默认值：0，取值范围：0-1\n\n返回值:\n    dict: 一个字典，将被修改的字段名映射到其内部属性名称。例如：\n        {\n            'Type': 'type',\n            'UseLength': 'useLength',\n            ...\n        }\n    注意：只有被实际修改的字段才会出现在返回结果中。\n\n示例:\n    .. code:: RobotFramework\n\n        | Edit Header L2tpv2 Data | Stream=${Stream} | Level=0 | TunnelId=1000 | UseSequence=0 |",
  "TesterLibrary.Stream.Header.Access.l2tpv2.edit_header_l2tpv2_data_option": "修改测试仪表流量模板中L2TPv2 Data报文中Option选项内容。\n\n该函数用于编辑指定流模板中某个'L2TPv2 Data'头部的Option字段。系统会检索该流模板中所有'L2TPv2 Data'类型的头部，并根据给定的Level索引选择目标头部进行编辑。支持通过关键字参数传递任意数量的Option字段配置，这些字段将被更新至目标头部。\n\nArgs:\n\n    Stream (:obj:`StreamTemplate` or list): 流模板对象或包含单个流模板对象的列表，必须已经配置了至少一个'L2TPv2 Data'头部。\n    Level (int): 要编辑的'L2TPv2 Data'头部在匹配头部列表中的索引位置，默认为0（即第一个'L2TPv2 Data'头部）。\n\nKeyword Args:\n\n    Size (int): Offset Padding Size，表示填充字段长度。默认值：0，取值范围：0-65535。\n    Value (hex): Offset Padding Value，表示填充字段的十六进制值。默认值：空字符串，取值范围：长度0-1500字节的十六进制数。\n    Ns (int): Sequence Number Ns Value，表示Ns序列号字段值。默认值：0，取值范围：0-65535。\n    Nr (int): Sequence Number Nr Value，表示Nr序列号字段值。默认值：0，取值范围：0-65535。\n\nReturns:\n\n    dict or False: 如果成功编辑头部的Option字段，则返回由`editHeaderOptions`方法返回的结果字典；如果操作失败则返回False。示例返回值如下：\n\n    .. code:: python\n\n        {\n            'Size': 'type',\n            'Value': 'useLength',\n            'Ns': 'reserved1',\n            'Nr': 'useSequence'\n        }\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${Stream} | add_stream | Port=${Port} |\n        | ${HeaderTypes} | Create List | EthernetII | IPv4 | UDP | l2tpv2Data |\n        | Create Stream Header | Stream=${Stream} | HeaderTypes=${HeaderTypes} |\n        | Edit Header L2tpv2 Data | Stream=${Stream} | Level=0 | UsePriority=1 |\n        | Edit Header L2tpv2 Data Option | Stream=${Stream} | Level=0 | size=1 | value=FF | ns=1 | nr=2 |\n\nSide Effects:\n    - 修改流模板中指定'L2TPv2 Data'头部的Option字段配置。\n    - 可能导致相关头部对象内部状态发生变化。",
  "TesterLibrary.Stream.Header.Access.l2tpv2.edit_header_l2tpv2_control": "修改测试仪表流量模板中L2TPv2 Control报文头部内容。\n\n该函数用于编辑指定流模板中的L2TPv2 Control报文头部字段。它会从给定的流对象中检索所有报文头部，筛选出类型为L2TPv2 Control的头部，并根据提供的Level索引选择特定的头部进行字段更新。如果某个字段未提供新值（即设为None），则该字段不会被修改。\n\n参数:\n    Stream (:obj:`StreamTemplate`): 测试仪表流量对象，必须包含一个唯一标识流的'handle'属性。若传入的是列表，则仅使用第一个元素。\n    Level (int, optional): L2TPv2 Control头部在该流中同类头部列表中的索引位置，默认为0。\n    **kwargs (任意可选参数): 要修改的字段及其新值，支持以下参数：\n\n        Type (bit, optional): Type字段的新值，默认为1，取值范围：0-1。\n        UseLength (bit, optional): UseLength字段的新值，默认为1，取值范围：0-1。\n        Reserved1 (bit, optional): Reserved1字段的新值，默认为00，取值范围：00-11。\n        UseSequence (bit, optional): UseSequence字段的新值，默认为1，取值范围：0-1。\n        Reserved2 (bit, optional): Reserved2字段的新值，默认为0，取值范围：0-1。\n        UseOffset (bit, optional): UseOffset字段的新值，默认为0，取值范围：0-1。\n        UsePriority (bit, optional): UsePriority字段的新值，默认为0，取值范围：0-1。\n        Reserved3 (bit, optional): Reserved3字段的新值，默认为0000，取值范围：0000-1111。\n        Version (int, optional): Version字段的新值，默认为2，取值范围：0-15。\n        Length (int, optional): Length字段的新值，默认为0，取值范围：0-65535。\n        TunnelId (int, optional): Tunnel ID字段的新值，默认为0，取值范围：0-65535。\n        SessionId (int, optional): Session ID字段的新值，默认为0，取值范围：0-65535。\n        Ns (int, optional): Ns Value字段的新值，默认为0，取值范围：0-65535。\n        Nr (int, optional): Nr Value字段的新值，默认为0，取值范围：0-65535。\n        OptionHeaders (list, optional): 选项头部列表，支持的参数包括：\n\n            generalTLV\n\n            messageType\n\n            resultCode\n\n            protocolVersion\n\n            framingCapabilities\n\n            bearerCapabilities\n\n            tieBreaker\n\n            firmwareRevision\n\n            assignedTunnelId\n\n            receiveWindowSize\n\n            assignedSessionId\n\n            response\n\n            callSerialNumber\n\n            minimumBps\n\n            maximumBps\n\n            bearerType\n\n            framingType\n\n            txConnectSpeed\n\n            rxConnectSpeed\n\n            physicalChannelId\n\n            proxyAuthenType\n\n            proxyAuthenId\n\n返回值:\n    dict: 包含成功更新字段的字典，键为输入参数名，值为内部字段名（如{'Type': 'type'}）。\n    bool: 如果没有字段被更新（即所有参数都为None），则返回False。\n\n副作用:\n    - 修改指定流中选定的L2TPv2 Control头部的属性。\n    - 若提供了OptionHeaders参数，将通过insert_option_header方法处理新增的选项头部。\n\n示例:\n    .. code:: RobotFramework\n\n        | ${Stream} | add_stream | Port=${Port} |\n        | ${HeaderTypes} | Create List | EthernetII | IPv4 | UDP | l2tpv2Control |\n        | ${OptionHeaders} | Create List | generalTLV | messageType | resultCode | protocolVersion |\n        | Create Stream Header | Stream=${Stream} | HeaderTypes=${HeaderTypes} |\n        | Edit Header L2tpv2 Control | Stream=${Stream} | Level=0 | UsePriority=1 | OptionHeaders=${OptionHeaders} |",
  "TesterLibrary.Stream.Header.Access.l2tpv2.edit_header_l2tpv2_control_option": "修改测试仪表流量模板中L2TPv2 Control报文中Option头部内容.\n\nArgs:\n    Stream (:obj:`StreamTemplate`): 测试仪表流量对象object, 类型为：object\n\n    Types (str): L2PTv2 Control报文option类型支持：\n\n        GeneralTLV\n\n        MessageType\n\n        ResultCode\n\n        ProtocolVersion\n\n        FramingCapabilities\n\n        BearerCapabilities\n\n        TieBreaker\n\n        FirmwareRevision\n\n        AssignedTunnelId\n\n        ReceiveWindowSize\n\n        AssignedSessionId\n\n        Response\n\n        CallSerialNumber\n\n        MinimumBps\n\n        MaximumBps\n\n        BearerType\n\n        FramingType\n\n        TxConnectSpeed\n\n        RxConnectSpeed\n\n        PhysicalChannelId\n\n        ProxyAuthenType\n\n        ProxyAuthenId\n\n    Level (int): 要修改的L2TPv2 Control头部在流量模板中所有L2TPv2 Control头部的序列号\n\n    Index (int): 要修改的L2TPv2 Control Option头部在流量模板中所有L2TPv2 Control Option头部的序列号\n\nKeyword Args:\n\n    GeneralTLV支持：\n\n        Mbit (bit): M Bit, 默认值：0，取值范围：0-1\n\n        Hbit (bit): H Bit, 默认值：0，取值范围：0-1\n\n        Reserved (bit): Reserved Bits, 默认值：0000，取值范围：0000-1111\n\n        Length (int): Length, 默认值：<AUTO>0，取值范围：0-1023\n\n        VendorId (int): Vendor ID, 默认值：0，取值范围：0-65535\n\n        Type (int): Attribute Type, 默认值：13，取值范围：0-65535\n\n        AttributeValue (hex): Attribute Value, 默认值：00000000000000000000000000000000，取值范围：长度0-1017字节的十六进制数\n\n    MessageType支持：\n\n        Mbit (bit): M Bit, 默认值：1，取值范围：0-1\n\n        Hbit (bit): H Bit, 默认值：0，取值范围：0-1\n\n        Reserved (bit): Reserved Bits, 默认值：0000，取值范围：0000-1111\n\n        Length (int): Length, 默认值：<AUTO>0，取值范围：0-1023\n\n        VendorId (int): Vendor ID, 默认值：0，取值范围：0-65535\n\n        Type (int): Attribute Type, 默认值：0，取值范围：0-65535\n\n        messageType (int): Message Type, 默认值：1，取值范围：0-65535\n\n    ResultCode支持：\n\n        Mbit (bit): M Bit, 默认值：1，取值范围：0-1\n\n        Hbit (bit): H Bit, 默认值：0，取值范围：0-1\n\n        Reserved (bit): Reserved Bits, 默认值：0000，取值范围：0000-1111\n\n        Length (int): Length, 默认值：<AUTO>0，取值范围：0-1023\n\n        VendorId (int): Vendor ID, 默认值：0，取值范围：0-65535\n\n        Type (int): Attribute Type, 默认值：0，取值范围：0-65535\n\n        ResultCode (int): Result Code, 默认值：0，取值范围：0-65535\n\n        ErrorCode (int): Error Code, 默认值：0，取值范围：0-65535\n\n        ErrorMessage (hex): Error Message, 默认值：\"\"，取值范围：长度0-1017字节的十六进制数\n\n    ProtocolVersion支持：\n\n        Mbit (bit): M Bit, 默认值：1，取值范围：0-1\n\n        Hbit (bit): H Bit, 默认值：0，取值范围：0-1\n\n        Reserved (bit): Reserved Bits, 默认值：0000，取值范围：0000-1111\n\n        Length (int): Length, 默认值：<AUTO>0，取值范围：0-1023\n\n        VendorId (int): Vendor ID, 默认值：0，取值范围：0-65535\n\n        Type (int): Attribute Type, 默认值：2，取值范围：0-65535\n\n        Ver (int): ver, 默认值：1，取值范围：0-255\n\n        Rev (int): rev, 默认值：0，取值范围：0-255\n\n    FramingCapabilities支持：\n\n        Mbit (bit): M Bit, 默认值：1，取值范围：0-1\n\n        Hbit (bit): H Bit, 默认值：0，取值范围：0-1\n\n        Reserved (bit): Reserved Bits, 默认值：0000，取值范围：0000-1111\n\n        Length (int): Length, 默认值：<AUTO>0，取值范围：0-1023\n\n        VendorId (int): Vendor ID, 默认值：0，取值范围：0-65535\n\n        Type (int): Attribute Type, 默认值：3，取值范围：0-65535\n\n        Reserved1 (int): Reserved, 默认值：0，取值范围：0-1073741823\n\n        Abit (bit): A, 默认值：0，取值范围：0-1\n\n        Sbit (bit): S, 默认值：0，取值范围：0-1\n\n    BearerCapabilities支持：\n\n        Mbit (bit): M Bit, 默认值：1，取值范围：0-1\n\n        Hbit (bit): H Bit, 默认值：0，取值范围：0-1\n\n        Reserved (bit): Reserved Bits, 默认值：0000，取值范围：0000-1111\n\n        Length (int): Length, 默认值：<AUTO>0，取值范围：0-1023\n\n        VendorId (int): Vendor ID, 默认值：0，取值范围：0-65535\n\n        Type (int): Attribute Type, 默认值：4，取值范围：0-65535\n\n        Reserved1 (int): Reserved, 默认值：0，取值范围：0-1073741823\n\n        Abit (bit): A, 默认值：0，取值范围：0-1\n\n        Dbit (bit): D, 默认值：0，取值范围：0-1\n\n    TieBreaker支持：\n\n        Mbit (bit): M Bit, 默认值：1，取值范围：0-1\n\n        Hbit (bit): H Bit, 默认值：0，取值范围：0-1\n\n        Reserved (bit): Reserved Bits, 默认值：0000，取值范围：0000-1111\n\n        Length (int): Length, 默认值：<AUTO>0，取值范围：0-1023\n\n        VendorId (int): Vendor ID, 默认值：0，取值范围：0-65535\n\n        Type (int): Attribute Type, 默认值：5，取值范围：0-65535\n\n        tieBreakerValue (hex): Tie Breaker Value, 默认值：0000000000000000，取值范围：长度0-8字节的十六进制数\n\n    FirmwareRevision支持：\n\n        Mbit (bit): M Bit, 默认值：1，取值范围：0-1\n\n        Hbit (bit): H Bit, 默认值：0，取值范围：0-1\n\n        Reserved (bit): Reserved Bits, 默认值：0000，取值范围：0000-1111\n\n        Length (int): Length, 默认值：<AUTO>0，取值范围：0-1023\n\n        VendorId (int): Vendor ID, 默认值：0，取值范围：0-65535\n\n        Type (int): Attribute Type, 默认值：6，取值范围：0-65535\n\n        firmwareRevision (int): Firmware Revision, 默认值：0，取值范围：0-65535\n\n    AssignedTunnelId支持：\n\n        Mbit (bit): M Bit, 默认值：1，取值范围：0-1\n\n        Hbit (bit): H Bit, 默认值：0，取值范围：0-1\n\n        Reserved (bit): Reserved Bits, 默认值：0000，取值范围：0000-1111\n\n        Length (int): Length, 默认值：<AUTO>0，取值范围：0-1023\n\n        VendorId (int): Vendor ID, 默认值：0，取值范围：0-65535\n\n        Type (int): Attribute Type, 默认值：9，取值范围：0-65535\n\n        tunnelId (int): Assigned Tunnel ID, 默认值：0，取值范围：0-65535\n\n    ReceiveWindowSize支持：\n\n        Mbit (bit): M Bit, 默认值：1，取值范围：0-1\n\n        Hbit (bit): H Bit, 默认值：0，取值范围：0-1\n\n        Reserved (bit): Reserved Bits, 默认值：0000，取值范围：0000-1111\n\n        Length (int): Length, 默认值：<AUTO>0，取值范围：0-1023\n\n        VendorId (int): Vendor ID, 默认值：0，取值范围：0-65535\n\n        Type (int): Attribute Type, 默认值：10，取值范围：0-65535\n\n        WindowSize (int): Window Size, 默认值：0，取值范围：0-65535\n\n    AssignedSessionId支持：\n\n        Mbit (bit): M Bit, 默认值：1，取值范围：0-1\n\n        Hbit (bit): H Bit, 默认值：0，取值范围：0-1\n\n        Reserved (bit): Reserved Bits, 默认值：0000，取值范围：0000-1111\n\n        Length (int): Length, 默认值：<AUTO>0，取值范围：0-1023\n\n        VendorId (int): Vendor ID, 默认值：0，取值范围：0-65535\n\n        Type (int): Attribute Type, 默认值：13，取值范围：0-65535\n\n        sessionId (int): Assigned Session ID, 默认值：0，取值范围：0-65535\n\n    Response支持：\n\n        Mbit (bit): M Bit, 默认值：1，取值范围：0-1\n\n        Hbit (bit): H Bit, 默认值：0，取值范围：0-1\n\n        Reserved (bit): Reserved Bits, 默认值：0000，取值范围：0000-1111\n\n        Length (int): Length, 默认值：<AUTO>0，取值范围：0-1023\n\n        VendorId (int): Vendor ID, 默认值：0，取值范围：0-65535\n\n        Type (int): Attribute Type, 默认值：13，取值范围：0-65535\n\n        responseValue (hex): Response Value, 默认值：00000000000000000000000000000000，取值范围：长度0-16字节的十六进制数\n\n    CallSerialNumber支持：\n\n        Mbit (bit): M Bit, 默认值：1，取值范围：0-1\n\n        Hbit (bit): H Bit, 默认值：0，取值范围：0-1\n\n        Reserved (bit): Reserved Bits, 默认值：0000，取值范围：0000-1111\n\n        Length (int): Length, 默认值：<AUTO>0，取值范围：0-1023\n\n        VendorId (int): Vendor ID, 默认值：0，取值范围：0-65535\n\n        Type (int): Attribute Type, 默认值：15，取值范围：0-65535\n\n        callSerialNumber (int): Call Serial Number, 默认值：0，取值范围：0-4294967295\n\n    MinimumBps支持：\n\n        Mbit (bit): M Bit, 默认值：1，取值范围：0-1\n\n        Hbit (bit): H Bit, 默认值：0，取值范围：0-1\n\n        Reserved (bit): Reserved Bits, 默认值：0000，取值范围：0000-1111\n\n        Length (int): Length, 默认值：<AUTO>0，取值范围：0-1023\n\n        VendorId (int): Vendor ID, 默认值：0，取值范围：0-65535\n\n        Type (int): Attribute Type, 默认值：16，取值范围：0-65535\n\n        MinimumBps (int): Minimum BPS, 默认值：0，取值范围：0-65535\n\n    MaximumBps支持：\n\n        Mbit (bit): M Bit, 默认值：1，取值范围：0-1\n\n        Hbit (bit): H Bit, 默认值：0，取值范围：0-1\n\n        Reserved (bit): Reserved Bits, 默认值：0000，取值范围：0000-1111\n\n        Length (int): Length, 默认值：<AUTO>0，取值范围：0-1023\n\n        VendorId (int): Vendor ID, 默认值：0，取值范围：0-65535\n\n        Type (int): Attribute Type, 默认值：17，取值范围：0-65535\n\n        MaximumBps (int): Maximum BPS, 默认值：0，取值范围：0-4294967295\n\n    BearerType支持：\n\n        Mbit (bit): M Bit, 默认值：1，取值范围：0-1\n\n        Hbit (bit): H Bit, 默认值：0，取值范围：0-1\n\n        Reserved (bit): Reserved Bits, 默认值：0000，取值范围：0000-1111\n\n        Length (int): Length, 默认值：<AUTO>0，取值范围：0-1023\n\n        VendorId (int): Vendor ID, 默认值：0，取值范围：0-65535\n\n        Type (int): Attribute Type, 默认值：18，取值范围：0-65535\n\n        Reserved1 (int): Reserved, 默认值：0，取值范围：0-1073741823\n\n        Abit (bit): A, 默认值：0，取值范围：0-1\n\n        Dbit (bit): D, 默认值：0，取值范围：0-1\n\n    FramingType支持：\n\n        Mbit (bit): M Bit, 默认值：1，取值范围：0-1\n\n        Hbit (bit): H Bit, 默认值：0，取值范围：0-1\n\n        Reserved (bit): Reserved Bits, 默认值：0000，取值范围：0000-1111\n\n        Length (int): Length, 默认值：<AUTO>0，取值范围：0-1023\n\n        VendorId (int): Vendor ID, 默认值：0，取值范围：0-65535\n\n        Type (int): Attribute Type, 默认值：19，取值范围：0-65535\n\n        Reserved1 (int): Reserved, 默认值：0，取值范围：0-1073741823\n\n        Abit (bit): A, 默认值：0，取值范围：0-1\n\n        Sbit (bit): S, 默认值：0，取值范围：0-1\n\n    TxConnectSpeed支持：\n\n        Mbit (bit): M Bit, 默认值：1，取值范围：0-1\n\n        Hbit (bit): H Bit, 默认值：0，取值范围：0-1\n\n        Reserved (bit): Reserved Bits, 默认值：0000，取值范围：0000-1111\n\n        Length (int): Length, 默认值：<AUTO>0，取值范围：0-1023\n\n        VendorId (int): Vendor ID, 默认值：0，取值范围：0-65535\n\n        Type (int): Attribute Type, 默认值：15，取值范围：0-65535\n\n        Bps (int): BPS, 默认值：0，取值范围：0-4294967295\n\n    RxConnectSpeed支持：\n\n        Mbit (bit): M Bit, 默认值：1，取值范围：0-1\n\n        Hbit (bit): H Bit, 默认值：0，取值范围：0-1\n\n        Reserved (bit): Reserved Bits, 默认值：0000，取值范围：0000-1111\n\n        Length (int): Length, 默认值：<AUTO>0，取值范围：0-1023\n\n        VendorId (int): Vendor ID, 默认值：0，取值范围：0-65535\n\n        Type (int): Attribute Type, 默认值：38，取值范围：0-65535\n\n        HighBPS (int): BPS(H), 默认值：0，取值范围：0-65535\n\n        LowBPS (int): BPS(L), 默认值：0，取值范围：0-65535\n\n    PhysicalChannelId支持：\n\n        Mbit (bit): M Bit, 默认值：0，取值范围：0-1\n\n        Hbit (bit): H Bit, 默认值：0，取值范围：0-1\n\n        Reserved (bit): Reserved Bits, 默认值：0000，取值范围：0000-1111\n\n        Length (int): Length, 默认值：<AUTO>0，取值范围：0-1023\n\n        VendorId (int): Vendor ID, 默认值：0，取值范围：0-65535\n\n        Type (int): Attribute Type, 默认值：25，取值范围：0-65535\n\n        PhysicalChannelId (int): Physical Channel ID, 默认值：0，取值范围：0-4294967295\n\n    ProxyAuthenType支持：\n\n        Mbit (bit): M Bit, 默认值：1，取值范围：0-1\n\n        Hbit (bit): H Bit, 默认值：0，取值范围：0-1\n\n        Reserved (bit): Reserved Bits, 默认值：0000，取值范围：0000-1111\n\n        Length (int): Length, 默认值：<AUTO>0，取值范围：0-1023\n\n        VendorId (int): Vendor ID, 默认值：0，取值范围：0-65535\n\n        Type (int): Attribute Type, 默认值：29，取值范围：0-65535\n\n        AuthenType (int): Authen Type, 默认值：0，取值范围：0-65535\n\n    ProxyAuthenId支持：\n\n        Mbit (bit): M Bit, 默认值：1，取值范围：0-1\n\n        Hbit (bit): H Bit, 默认值：0，取值范围：0-1\n\n        Reserved (bit): Reserved Bits, 默认值：0000，取值范围：0000-1111\n\n        Length (int): Length, 默认值：<AUTO>0，取值范围：0-1023\n\n        VendorId (int): Vendor ID, 默认值：0，取值范围：0-65535\n\n        Type (int): Attribute Type, 默认值：29，取值范围：0-65535\n\n        Reserved1 (int): Reserved, 默认值：0，取值范围：0-255\n\n        AuthenId (int): Authen ID, 默认值：0，取值范围：0-255\n\nReturns:\n\n    dict: eg::\n\n        {\n            'Mbit': 'type'\n            'Hbit': 'useLength'\n            'Reserved': 'reserved1'\n            'Length': 'useSequence'\n            'VendorId':\n            'Type':\n            'Reserved1':\n            'AuthenId':\n        }\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${Stream} | add_stream | Port=${Port} |\n        | ${HeaderTypes} | Create List | EthernetII | IPv4 | UDP | l2tpv2Control |\n        | ${LsaHeaders} | Create List | generalTLV | messageType | resultCode | protocolVersion | FramingCapabilities |\n        | Create Stream Header | Stream=${Stream} | HeaderTypes=${HeaderTypes} |\n        | Edit Header L2tpv2 Control | Stream=${Stream} | Level=0 | UsePriority=1 | OptionHeaders=${OptionHeaders} |\n        | Edit Header L2tpv2 Control Option | Stream=${Stream} | Level=0 | Index=0 | Types=MessageType | Mbit=1 |\n        | Edit Header L2tpv2 Control Option | Stream=${Stream} | Level=0 | Index=1 | Types=ResultCode | Mbit=1 |\n        | Edit Header L2tpv2 Control Option | Stream=${Stream} | Level=0 | Index=2 | Types=ProtocolVersion | Mbit=1 |\n        | Edit Header L2tpv2 Control Option | Stream=${Stream} | Level=0 | Index=3 | Types=FramingCapabilities | Mbit=1 |\n        | Edit Header L2tpv2 Control Option | Stream=${Stream} | Level=0 | Index=4 | Types=BearerCapabilities | Mbit=1 |\n        | Edit Header L2tpv2 Control Option | Stream=${Stream} | Level=0 | Index=5 | Types=TieBreaker | Mbit=1 |\n        | Edit Header L2tpv2 Control Option | Stream=${Stream} | Level=0 | Index=6 | Types=FirmwareRevision | Mbit=1 |\n        | Edit Header L2tpv2 Control Option | Stream=${Stream} | Level=0 | Index=7 | Types=AssignedTunnelId | Mbit=1 |\n        | Edit Header L2tpv2 Control Option | Stream=${Stream} | Level=0 | Index=8 | Types=ReceiveWindowSize | Mbit=1 |\n        | Edit Header L2tpv2 Control Option | Stream=${Stream} | Level=0 | Index=9 | Types=AssignedSessionId | Mbit=1 |\n        | Edit Header L2tpv2 Control Option | Stream=${Stream} | Level=0 | Index=10 | Types=Response | Mbit=1 |\n        | Edit Header L2tpv2 Control Option | Stream=${Stream} | Level=0 | Index=11 | Types=CallSerialNumber | Mbit=1 |\n        | Edit Header L2tpv2 Control Option | Stream=${Stream} | Level=0 | Index=12 | Types=MinimumBps | Mbit=1 |\n        | Edit Header L2tpv2 Control Option | Stream=${Stream} | Level=0 | Index=13 | Types=MaximumBps | Mbit=1 |\n        | Edit Header L2tpv2 Control Option | Stream=${Stream} | Level=0 | Index=14 | Types=BearerType | Mbit=1 |\n        | Edit Header L2tpv2 Control Option | Stream=${Stream} | Level=0 | Index=15 | Types=FramingType | Mbit=1 |\n        | Edit Header L2tpv2 Control Option | Stream=${Stream} | Level=0 | Index=16 | Types=TxConnectSpeed | Mbit=1 |\n        | Edit Header L2tpv2 Control Option | Stream=${Stream} | Level=0 | Index=17 | Types=RxConnectSpeed | Mbit=1 |\n        | Edit Header L2tpv2 Control Option | Stream=${Stream} | Level=0 | Index=18 | Types=PhysicalChannelId | Mbit=1 |\n        | Edit Header L2tpv2 Control Option | Stream=${Stream} | Level=0 | Index=19 | Types=ProxyAuthenType | Mbit=1 |\n        | Edit Header L2tpv2 Control Option | Stream=${Stream} | Level=0 | Index=20 | Types=ProxyAuthenId | Mbit=1 |",
  "TesterLibrary.Stream.Header.Access.l2tpv3.edit_header_l2tpv3_control_over_ip": "修改测试仪表流量模板中L2TPv3 Control Over IP报文头部内容。\n\n该函数用于编辑指定流模板中某一层级的L2TPv3 Control Over IP头部字段。可以通过参数设置更新Session ID、Type、UseLength、Reserved字段、Version、ExcludeSessionLength、Control Connection ID、Sequence Number等基本字段，同时支持通过OptionHeaders参数添加扩展选项头（如generalTLV、messageType等）。\n\n参数说明：\n\n- **Stream** (:obj:`StreamTemplate`): 要操作的流模板对象，类型为StreamTemplate或其封装对象。\n- **Level** (int, optional): 指定要编辑的L2TPv3 Control Over IP头部在当前流模板中同类头部中的索引位置，默认为0。\n\n关键字参数（可选）:\n\n- **SessionId** (int): 设置Session ID，取值范围：0-4294967295，默认值：0。\n- **Type** (bit): 设置Type字段，取值范围：0或1，默认值：1。\n- **UseLength** (bit): 设置UseLength标志位，取值范围：0或1，默认值：0。\n- **Reserved1** (bit): 设置第一个保留字段，取值范围：00-11，默认值：00。\n- **UseSequence** (bit): 设置UseSequence标志位，取值范围：00-11，默认值：<AUTO>0。\n- **Reserved2** (bit): 设置第二个保留字段，取值范围：0000000-1111111，默认值：0000000。\n- **Version** (int): 设置协议版本号，取值范围：0-15，默认值：3。\n- **ExcludeSessionLength** (int): 设置Length Option中的excludeSessionLength值，取值范围：0-65535，默认值：<AUTO>0。\n- **ControlId** (int): 设置Control Connection ID，取值范围：0-4294967295，默认值：0。\n- **SequenceNumberNs** (int): 设置消息序列号Ns值，取值范围：0-65535，默认值：0。\n- **SequenceNumberNr** (int): 设置消息序列号Nr值，取值范围：0-65535，默认值：0。\n- **OptionHeaders** (list or any): 添加的可选头部列表，支持的字段包括：\n  \n  - generalTLV\n  - messageType\n  - resultCode\n  - tieBreaker\n  - receiveWindowSize\n  - callSerialNumber\n  - physicalChannelId\n  - circuitError\n  - routeId\n  - assignedConnection\n  - localSessionId\n  - remoteSessionId\n  - assignedCookie\n  - pwType\n  - l2SpecificSub\n  - dataSequencing\n  - txConnectSpeed\n  - rxConnectSpeed\n  - circuitStatus\n\n返回值：\n\n- dict: 包含所有成功修改字段及其内部属性名称或路径映射的字典。例如：\n  \n  ::\n\n      {\n          'SessionId': 'sessionId',\n          'Type': 'type',\n          'UseLength': 'useLength',\n          ...\n          'OptionHeaders': True\n      }\n\n- 如果未提供任何有效参数或没有字段被修改，则返回False。\n\n示例：\n\n.. code:: RobotFramework\n\n    | ${Stream} | add_stream | Port=${Port} |\n    | ${HeaderTypes} | Create List | EthernetII | IPv4 | l2tpv3ControlOverIp |\n    | ${OptionHeaders} | Create List | generalTLV | messageType | resultCode | tieBreaker |\n    | Create Stream Header | Stream=${Stream} | HeaderTypes=${HeaderTypes} |\n    | Edit Header L2tpv3 Control Over Ip | Stream=${Stream} | Level=0 | Type=1 | OptionHeaders=${OptionHeaders} |",
  "TesterLibrary.Stream.Header.Access.l2tpv3.edit_header_l2tpv3_control_over_udp": "修改测试仪表流量模板中L2TPv3 Control Over UDP报文头部内容。\n\n该函数用于编辑指定流量流中某一层的L2TPv3 Control Over UDP头部字段。用户可以通过指定Level参数来选择要修改的L2TPv3 Control头部（在多个L2TPv3 Control Over UDP头部中的位置）。每个字段如果被传入值，则会被更新到对应的头部字段，并将结果记录在返回字典中；如果没有提供任何字段值（即未修改），则返回False。\n\n参数:\n    Stream (:obj:`StreamTemplate` 或 list): 测试仪表流量对象或包含一个流量对象的列表，必须具有'handle'属性。\n    Level (int, optional): L2TPv3 Control头部在流量模板中所有L2TPv3 Control Over Udp头部中的索引位置，默认为0。\n\n关键字参数（可选）:\n    Type (bit, optional): 设置头部的Type字段值，默认1，取值范围0-1。\n    UseLength (bit, optional): 设置UseLength字段值，默认0，取值范围0-1。\n    Reserved1 (bit, optional): 设置Reserved1字段值，默认00，取值范围00-11。\n    UseSequence (bit, optional): 设置UseSequence字段值，默认0，取值范围00-11。\n    Reserved2 (bit, optional): 设置Reserved2字段值，默认0000000，取值范围0000000-1111111。\n    Version (int, optional): 设置Version字段值，默认3，取值范围0-15。\n    Length (int, optional): 设置Length字段值，默认0，取值范围0-65535。\n    ControlId (int, optional): 设置Control Connection ID字段值，默认0，取值范围0-4294967295。\n    SequenceNumberNs (int, optional): 设置消息序列号Ns值，默认0，取值范围0-65535。\n    SequenceNumberNr (int, optional): 设置消息序列号Nr值，默认0，取值范围0-65535。\n    OptionHeaders (list, optional): 需要插入的附加选项头部列表，支持以下参数：\n        generalTLV\n        messageType\n        resultCode\n        tieBreaker\n        receiveWindowSize\n        callSerialNumber\n        physicalChannelId\n        circuitError\n        routeId\n        assignedConnection\n        localSessionId\n        remoteSessionId\n        assignedCookie\n        pwType\n        l2SpecificSub\n        dataSequencing\n        txConnectSpeed\n        rxConnectSpeed\n        circuitStatus\n\n返回值:\n    dict or bool: 包含修改成功的字段映射的字典，若没有任何修改则返回False。例如::\n\n        {\n            'Type': 'type'\n            'UseLength': 'useLength'\n            'Reserved1': 'reserved1'\n            'UseSequence': 'useSequence'\n            'Reserved2': 'reserved2'\n            'Version': 'version'\n            'Length': 'lengthOption.length_0.value'\n            'ControlId': 'controlId'\n            'SequenceNumberNs': 'sequenceNumber_0.ns'\n            'SequenceNumberNr': 'sequenceNumber_0.nr'\n            'OptionHeaders': True\n        }\n\n示例:\n    .. code:: RobotFramework\n\n        | ${Stream} | add_stream | Port=${Port} |\n        | ${HeaderTypes} | Create List | EthernetII | IPv4 | UDP | l2tpv3ControlOverUdp |\n        | ${OptionHeaders} | Create List | generalTLV | messageType | resultCode | tieBreaker |\n        | Create Stream Header | Stream=${Stream} | HeaderTypes=${HeaderTypes} |\n        | Edit Header L2tpv3 Control Over Udp | Stream=${Stream} | Level=0 | Type=1 | OptionHeaders=${OptionHeaders} |\n\n注意事项:\n    - 修改会影响流对象内部的L2TPv3 Control Over UDP头部结构。\n    - 通过调用底层方法如'get_stream_header'，可能会更新系统缓存的头部对象。",
  "TesterLibrary.Stream.Header.Access.l2tpv3.edit_header_l2tpv3_control_option": "修改测试仪表流量模板中L2TPv3 Control Over IP/UDP报文中指定Option头部的字段内容。\n\n**Args:**\n\n- **Stream** (:obj:`StreamTemplate`): 测试仪表流量对象，类型为 StreamTemplate。\n- **Types** (str): 要修改的 L2TPv3 Control Option 类型。支持以下选项（大小写不敏感）：\n\n  - GeneralTLV\n  - MessageType\n  - ResultCode\n  - TieBreaker\n  - ReceiveWindowSize\n  - CallSerialNumber\n  - PhysicalChannelId\n  - CircuitError\n  - RouteId\n  - AssignedConnection\n  - LocalSessionId\n  - RemoteSessionId\n  - AssignedCookie\n  - PwType\n  - L2SpecificSub\n  - DataSequencing\n  - TxConnectSpeed\n  - RxConnectSpeed\n  - CircuitStatus\n\n- **Level** (int, optional): 指定要修改的 L2TPv3 Control 头部在流量模板中的层级索引（用于处理多个 L2TPv3 Control 头的情况）。默认值：0。\n- **Index** (int, optional): 指定要修改的 Option 在该类型中的索引位置（用于处理同一类型多个 Option 的情况）。默认值：0。\n\n**Keyword Args（根据 Types 不同而不同）:**\n\n每个 `Types` 参数对应一组可选的字段参数，具体如下：\n\n- **GeneralTLV 支持字段**：\n  - Mbit (bit): M Bit，默认值：0，取值范围：0-1\n  - Hbit (bit): H Bit，默认值：0，取值范围：0-1\n  - Reserved (bit): Reserved Bits，默认值：0000，取值范围：0000-1111\n  - Length (int): Length，默认值：<AUTO>0，取值范围：0-1023\n  - VendorId (int): Vendor ID，默认值：0，取值范围：0-65535\n  - Type (int): Attribute Type，默认值：13，取值范围：0-65535\n  - AttributeValue (hex): Attribute Value，默认值：00000000000000000000000000000000，取值范围：长度0-1017字节的十六进制数\n\n- **MessageType 支持字段**：\n  - Mbit (bit): M Bit，默认值：1，取值范围：0-1\n  - Hbit (bit): H Bit，默认值：0，取值范围：0-1\n  - Reserved (bit): Reserved Bits，默认值：0000，取值范围：0000-1111\n  - Length (int): Length，默认值：<AUTO>0，取值范围：0-1023\n  - VendorId (int): Vendor ID，默认值：0，取值范围：0-65535\n  - Type (int): Attribute Type，默认值：0，取值范围：0-65535\n  - MessageType (int): Message Type，默认值：1，取值范围：0-65535\n\n- **ResultCode 支持字段**：\n  - Mbit (bit): M Bit，默认值：1，取值范围：0-1\n  - Hbit (bit): H Bit，默认值：0，取值范围：0-1\n  - Reserved (bit): Reserved Bits，默认值：0000，取值范围：0000-1111\n  - Length (int): Length，默认值：<AUTO>0，取值范围：0-1023\n  - VendorId (int): Vendor ID，默认值：0，取值范围：0-65535\n  - Type (int): Attribute Type，默认值：0，取值范围：0-65535\n  - ResultCode (int): Result Code，默认值：0，取值范围：0-65535\n  - ErrorCode (int): Error Code，默认值：0，取值范围：0-65535\n  - ErrorMessage (hex): Error Message，默认值：\"\"，取值范围：长度0-1017字节的十六进制数\n\n...（其他 Types 字段支持详见原始 Docstring）\n\n**Returns:**\n\n- **dict**: 包含操作结果的字典，通常包括成功状态和由底层头修改方法返回的相关信息。如果未进行任何更改或操作失败，则返回 False。\n\n**Examples:**\n\n```robotframework\n| ${Stream} | add_stream | Port=${Port} |\n| ${HeaderTypes} | Create List | EthernetII | IPv4 | l2tpv3ControlOverIp |\n| Create Stream Header | Stream=${Stream} | HeaderTypes=${HeaderTypes} |\n| Edit Header L2tpv3 Control Option | Stream=${Stream} | Level=0 | Index=0 | Types=GeneralTLV | Mbit=1 |\n| Edit Header L2tpv3 Control Option | Stream=${Stream} | Level=0 | Index=1 | Types=MessageType | Mbit=1 |\n```",
  "TesterLibrary.Stream.Header.Access.l2tpv3.edit_header_l2tpv3_data_over_ip": "修改测试仪表流量模板中L2TPv3 Data Over IP报文头部的指定字段内容。\n\n该函数用于更新指定流量模板中第 Level 个 L2TPv3 Data Over IP 头部的字段信息。支持修改 Session ID、4字节 Cookie、8字节 Cookie、L2 特定子层标志以及 ATM 特定子层标志等关键字段。\n\n参数:\n\n    Stream (:obj:`StreamTemplate`): 测试仪表流量模板对象，类型为 StreamTemplate，表示要修改的流量模板。\n\n    Level (int, optional): 指定要修改的 L2TPv3 Data Over IP 头部在该流量中所有同类头部中的索引位置，默认为 0。\n\n关键字参数（可选）:\n\n    SessionId (int): 设置会话标识符(Session ID)，取值范围：0 ~ 4294967295，默认值：0。\n\n    Cookie4Byte (str, hex): 设置4字节的Cookie值，格式为16进制字符串，例如 '00000001'，默认值为 '00000000'。\n\n    Cookie8Byte (str, hex): 设置8字节的Cookie值，格式为16进制字符串，例如 '0000000000000001'，默认值为 '0000000000000000'。\n\n    L2specificsublayer (int): 设置是否包含L2特定子层，取值只能为 0 或 1，默认值为 0。\n\n    Atmspecificsublayer (int): 设置是否包含ATM特定子层，取值只能为 0 或 1，默认值为 0。\n\n返回值:\n\n    dict: 返回一个字典，表明每个成功修改的字段及其对应的内部标识字符串，例如::\n\n        {\n            'SessionId': 'sessionId',\n            'Cookie4Byte': 'cookie4Byte',\n            'Cookie8Byte': 'cookie8Byte'\n        }\n\n示例:\n\n    .. code:: RobotFramework\n\n        | ${Stream} | add_stream | Port=${Port} |\n        | ${HeaderTypes} | Create List | EthernetII | IPv4 | l2tpv3DataOverIp |\n        | Create Stream Header | Stream=${Stream} | HeaderTypes=${HeaderTypes} |\n        | Edit Header L2tpv3 Data Over Ip | Stream=${Stream} | Level=0 | SessionId=1 | Cookie4Byte=00000001 |\n\n注意事项:\n\n- 如果未找到对应 Level 的 L2TPv3 Data Over IP 头部，或传入的 Stream 对象无效，则函数将抛出 ContinuableFailure 异常。\n- 所有字段修改只影响指定 Level 的 L2TPv3 Data Over IP 头部。",
  "TesterLibrary.Stream.Header.Access.l2tpv3.edit_header_l2tpv3_data_over_udp": "修改测试仪表流量模板中L2TPv3 Data Over UDP报文头部内容。\n\n该函数用于编辑指定流模板中某个L2TPv3 Data Over UDP头部的字段值。可以修改的字段包括Type、Reserved1、Version、Reserved2、SessionId、Cookie4Byte、Cookie8Byte、L2specificsublayer和Atmspecificsublayer等。未提供的字段将保持不变。\n\n参数:\n    Stream (:obj:`StreamTemplate`): 测试仪表流量对象，必须包含一个有效的handle属性来标识该流。如果传入多个流，则使用第一个流。\n\n    Level (int, optional): 指定要编辑的L2TPv3 Data Over UDP头部在其所属流中的索引位置（即第几个L2TPv3 Data Over UDP头部），默认为0。\n\n关键字参数（可选）:\n    Type (bit): 设置头部的Type字段，默认为0，取值范围：0-1\n\n    Reserved1 (bit): 设置保留字段Reserved1，默认值为00000000000，取值范围：00000000000到11111111111\n\n    Version (int): 设置协议版本Version，默认为3，取值范围：0-15\n\n    Reserved2 (int): 设置保留字段Reserved2，默认为0，取值范围：0-65535\n\n    SessionId (int): 设置会话标识SessionId，默认为0，取值范围：0-4294967295\n\n    cookie4Byte (hex): 设置4字节的Cookie值，默认为00000000，取值范围：00000000到FFFFFFFF\n\n    cookie8Byte (hex): 设置8字节的Cookie值，默认为0000000000000000，取值范围：0000000000000000到FFFFFFFFFFFFFFFF\n\n    L2specificsublayer (int): 设置L2特定子层的数量，默认为0，有效取值仅限于0或1\n\n    Atmspecificsublayer (int): 设置ATM特定子层的数量，默认为0，有效取值仅限于0或1\n\n返回值:\n    dict: 返回一个字典，表示每个成功修改的关键字参数名与对应实际字段路径的映射关系。例如：\n        {\n            'Type': 'type',\n            'Cookie4Byte': 'cookieData.cookie_0.cookie4Byte.value'\n        }\n    未被修改的字段不会出现在返回结果中。\n\n示例:\n    .. code:: RobotFramework\n\n        | ${Stream} | add_stream | Port=${Port} |\n        | ${HeaderTypes} | Create List | EthernetII | IPv4 | UDP | l2tpv3DataOverUdp |\n        | Create Stream Header | Stream=${Stream} | HeaderTypes=${HeaderTypes} |\n        | Edit Header L2tpv3 Data Over Udp | Stream=${Stream} | Level=0 | SessionId=1 | Cookie4Byte=00000001 |\n\n注意事项:\n    - 函数内部调用get_stream_header获取并过滤出所有类型为'l2tpv3dataoverudp'的头部信息。\n    - 如果传入的Stream参数无效或找不到对应的L2TPv3头部，可能导致操作失败并抛出异常。",
  "TesterLibrary.Stream.Header.Access.l2tpv3.edit_header_l2tpv3_data_sublayer": "修改测试仪表流量模板中L2TPv3 Data Specific Sublayer报文头部内容。\n\n该函数用于编辑指定流中的L2TPv3数据头部的特定子层（specific sublayer）配置。它会从流对象中筛选出所有L2TPv3 over IP/UDP类型的头部，并根据提供的Level参数选择对应的头部进行修改。实际的修改操作通过调用对应头部对象的`edit_specific_sublayer`方法完成。\n\n### 参数说明：\n\n- **Stream** (`object` 或 `list`):  \n  测试仪表流量模板对象，或者包含单个流对象的列表。如果传入的是列表，则使用第一个元素。该对象必须具有一个`handle`属性，用于在系统中唯一标识该流。\n\n- **Type** (`str`):  \n  要修改的子层类型，取值范围为：\n  - `'L2specificsublayer'`\n  - `'Atmspecificsublayer'`\n\n- **Level** (`int`, 可选):  \n  指定要修改第几个L2TPv3 Data Over UDP/IP头部（索引从0开始），默认值为0。当流中存在多个L2TPv3头部时，可通过此参数选择具体要修改的头部。\n\n- **\\*\\*kwargs (任意关键字参数)**:  \n  根据所选子层类型传递不同的字段及其值，支持如下字段：\n\n  #### 如果 Type 是 `'L2specificsublayer'`：\n  - `Xbit` (`bit`): X Bit，默认值：0，取值范围：0-1\n  - `Sbit` (`bit`): S Bit，默认值：1，取值范围：0-1\n  - `Xbits` (`bit`): X Bits，默认值：000000，取值范围：000000-111111\n  - `Sequence` (`int`): Sequence Number，默认值：0，取值范围：0-16777215\n\n  #### 如果 Type 是 `'Atmspecificsublayer'`：\n  - `Xbit` (`bit`): X Bit，默认值：0，取值范围：0-1\n  - `Sbit` (`bit`): S Bit，默认值：1，取值范围：0-1\n  - `Bbit` (`bit`): B Bit，默认值：0，取值范围：0-1\n  - `Ebit` (`bit`): E Bit，默认值：0，取值范围：0-1\n  - `Tbit` (`bit`): T Bit，默认值：0，取值范围：0-1\n  - `Gbit` (`bit`): G Bit，默认值：0，取值范围：0-1\n  - `Cbit` (`bit`): C Bit，默认值：0，取值范围：0-1\n  - `Ubit` (`bit`): U Bit，默认值：0，取值范围：0-1\n  - `Sequence` (`int`): Sequence Number，默认值：0，取值范围：0-16777215\n\n### 返回值：\n\n- `dict`: 包含修改后的字段及其路径映射关系的字典，例如：\n  ```python\n  {\n      'Xbit': 'l2SpecificSublayer.l2-SpecificSublayerList_0.atm-SpecificSublayerOption.xbit',\n      'Sbit': 'l2SpecificSublayer.l2-SpecificSublayerList_0.atm-SpecificSublayerOption.sbit',\n      'Bbit': 'l2SpecificSublayer.l2-SpecificSublayerList_0.atm-SpecificSublayerOption.bbit',\n      'Sequence': 'l2SpecificSublayer.l2-SpecificSublayerList_0.atm-SpecificSublayerOption.sequence'\n  }\n  ```\n- 如果操作失败，返回 `False`。\n\n### 注意事项：\n\n- 仅处理类型为 `'l2tpv3dataoverip'` 或 `'l2tpv3dataoverudp'` 的头部。\n- 若未提供`Level`，默认修改第一个匹配的L2TPv3头部。\n- 修改会影响头部对象的内部状态，可能导致后续发送的数据包结构发生变化。\n- 如果尚未缓存流头部信息，可能触发一次获取头部名称的操作（如调用`get_stream_header`）。\n\n### 使用示例（RobotFramework）:\n\n```robotframework\n| ${Stream} | add_stream | Port=${Port} |\n| ${HeaderTypes} | Create List | EthernetII | IPv4 | UDP | l2tpv3DataOverUdp |\n| Create Stream Header | Stream=${Stream} | HeaderTypes=${HeaderTypes} |\n| Edit Header L2tpv3 Data Over Udp | Stream=${Stream} | Level=0 | SessionId=1 | Cookie4Byte=00000001 |\n```",
  "TesterLibrary.Stream.Header.Basic.common.edit_header_custom": "修改测试仪表流量模板中Custom报文头部的选项内容（Pattern和/或Checksum）\n\n该函数用于编辑指定流对象中Custom头部的特定层级中的选项字段。可编辑的选项包括Pattern（模式字节）和Checksum（校验和），如果提供了Index参数，则在指定位置修改已有选项；否则将插入新的选项。\n\nArgs:\n    Stream (:obj:`StreamTemplate` 或 list): 流模板对象，或包含单个流对象的列表。若传入列表，则使用第一个元素。\n    Level (int, optional): 要编辑的Custom头部的层级编号，默认为0，取值范围：0-65535\n    Index (int, optional): 要编辑的选项在Custom头部中的索引位置，默认为空（即插入新选项），取值范围：0-2\n\nKeyword Args:\n    Pattern (list or str, optional): 模式字节值，表示为十六进制字符串或字节列表。默认为'00'，长度范围：1-16384字节\n    Checksum (str, optional): 校验和值，十六进制字符串（如'FFFF'）或'AUTO'表示自动计算，默认为'0000'\n\nReturns:\n    dict: 包含成功更新的字段及其对应路径的字典，例如：\n        {\n            'Pattern': 'patternByte.customOption_0.customPatternByteOption.patternByteOption',\n            'Checksum': 'patternByte.customOption_1.customChecksumOption.checksumOption'\n        }\n    若未执行任何更改（如参数无效或缺失），则返回False\n\nRaises:\n    ContinuableFailure: 当底层调用失败时抛出可继续执行的异常\n\nSide Effects:\n    - 修改流对象头部结构，可能插入或更新Pattern和Checksum字段\n    - 内部调用renix模块的实际实现函数进行操作\n    - 使用get_stream_header机制缓存构造的头部对象\n\nExamples:\n    robotframework:\n\n.. code:: robotframework\n\n    | Init Tester |\n    | ${Locations} | Create List | //192.168.0.180/1/1 | //192.168.0.180/1/2 |\n    | ${Port} | reserve_port | Locations=${Locations} |\n    | ${HeaderTypes} | Create List | EthernetII | IPv4 | Custom |\n    | Create Stream Header | Stream=${Stream} | HeaderTypes=${HeaderTypes} |\n    | edit_header_custom | Stream=${Stream} | Pattern=1212121212 |\n    | edit_header_custom | Stream=${Stream} | Checksum=Auto |\n    | edit_header_custom | Stream=${Stream} | Pattern=343434343 | Checksum=Auto |\n    | edit_header_custom | Stream=${Stream} | Index=0 | Pattern=565656565 |\n    | &{Attribute} | edit_header_custom | Stream=${Stream} | Index=2 | Pattern=787878787 |\n    | Edit Modifier | Stream=${Stream} | Level=0 | HeaderType=Custom | Attribute=${Attribute}[Pattern] | Type=Increment | Count=10 | Step=2 |",
  "TesterLibrary.Stream.Header.dot1ah.dot1ah.edit_header_8021ah_CustomerStagEthernet": "修改测试仪表流量模板中802.1ah Customer S-tag Ethernet报文头部内容。\n\n该函数用于编辑指定流量流中第Level层的'Service VLAN Tag'(S-tag)头部字段。如果提供了任意参数（非None），则会更新对应的头部属性，并将变更记录在结果字典中。\n\nArgs:\n    Stream (:obj:`StreamTemplate` 或 list): 测试仪表流量对象，可以是单个流对象或包含单个流对象的列表。若为列表，仅使用第一个元素。\n    Level (int): 要编辑的stag头部在流中的索引位置，默认为0（即第一个stag头部）\n\nKeyword Args:\n    EtherType (hex, optional): 设置头部的EtherType字段值，默认为88B5，取值范围：两位十六进制数\n    VlanType (hex, optional): 设置S-tag头部的VLAN类型字段值，默认为88a8，取值范围：两位十六进制数\n    VlanPCP (bit, optional): 设置S-tag头部的优先级代码点(Priority Code Point, PCP)字段值，默认为001，取值范围：三位二进制数\n    Dei (bit, optional): 设置S-tag头部的丢弃合格指示器(Drop Eligible Indicator, DEI)字段值，默认为0，取值范围：一位二进制数\n    Vid (bit, optional): 设置S-tag头部的VLAN标识符(VLAN Identifier, VID)字段值，默认为000000000100，取值范围：十二位二进制数\n\nReturns:\n    dict: 包含成功修改的参数及其对应头部字段路径的字典。例如::\n        {\n            'EtherType': 'etherType',\n            'VlanType': 'tag.sTagOption_0.sTag.vlanType',\n            'VlanPCP': 'tag.sTagOption_0.sTag.vlanPCP',\n            'Dei': 'tag.sTagOption_0.sTag.dei',\n            'Vid': 'tag.sTagOption_0.sTag.vid'\n        }\n    如果未提供任何参数或未进行任何更改，则返回False。\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${Stream} | add_stream | Port=${Port} |\n        | Create Stream Header | Stream=${Stream} | HeaderTypes=sTag |\n        | Edit Header 8021ah CustomerStagEthernet | Stream=${Stream} | Level=0 | VlanPCP=111 |\n\nRaises:\n    ContinuableFailure: 如果底层调用失败，则抛出可继续执行的异常。",
  "TesterLibrary.Stream.Header.dot1ah.dot1ah.edit_header_8021ah_EncapsulatedCustomerEthernetII": "修改测试仪表流量模板中802.1ah Encapsulated Customer Ethernet II报文头部内容。该函数用于编辑指定流中特定层级的802.1ah封装客户以太网II头部字段，包括EtherType设置、插入Service Tag或Customer Tag等操作。\n\nArgs:\n    Stream (:obj:`StreamTemplate` 或 list): 流对象或包含流对象的列表。如果传入的是列表，则仅使用第一个元素。流对象必须具有唯一标识句柄(handle)属性。\n    Level (int, optional): 指定要修改的encapethernetii头部在流头部列表中的索引位置，默认为0。\n\nKeyword Args:\n    EtherType (str or int, optional): 设置Encapsulated Ethernet II头部的EtherType值（例如：'88B5', 0x88B5），默认不更改。\n    ServiceTag (any, optional): 若为真值(True)，则调用insert_service_tag()方法向头部插入Service Tag节点，默认不插入。\n    CustomerTag (any, optional): 若为真值(True)，则调用insert_customer_tag()方法向头部插入Customer Tag节点，默认不插入。\n\nReturns:\n    dict: 包含成功更新字段的字典，键为字段名('EtherType')，值为实际设置的属性名('etherType')。只有输入参数非None的字段才会被包含在结果中。\n\nRaises:\n    ContinuableFailure: 如果内部调用返回False，表示编辑失败，并抛出异常中断流程。\n\nSide Effects:\n    - 修改流缓存头部列表中的header对象\n    - 调用get_stream_header获取/重建头部对象\n    - 通过header方法执行命令间接影响系统对头部结构的表示\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${Stream} | add_stream | Port=${Port} |\n        | Create Stream Header | Stream=${Stream} | HeaderTypes=encapEthernetII |\n        | Edit Header 8021ah EncapsulatedCustomerEthernetII | Stream=${Stream} | Level=0 | ServiceTag=True |",
  "TesterLibrary.Stream.Header.dot1ah.dot1ah.edit_header_8021ah_EncapsulatedCustomerEthernetII_serviceTag": "修改测试仪表流量模板中802.1ah encapsulated customer Ethernet II报文头部的service tag字段。\n\n该函数用于编辑指定流模板中某一层802.1ah封装以太网II报文头部的service tag信息。通过Level参数选择要修改的特定service tag，支持设置VLAN类型、优先级代码点（PCP）、丢弃资格指示符（DEI）和VLAN标识符（VID）等字段。所有字段均可选，若未指定则使用默认值。\n\nArgs:\n    Stream (:obj:`StreamTemplate`): 测试仪表流量对象，表示待编辑的流量模板。\n    Level (int): 指定要修改的802.1ah encapsulated customer Ethernet II头部在该流中同类型头部列表中的索引位置，默认为0。\n\nKeyword Args:\n    VlanType (hex, optional): Service VLAN Type，长度为2字节的十六进制字符串，默认值为'88a8'。\n    VlanPCP (bit, optional): Service VLAN Priority Code Point，长度为3位的二进制字符串或整数，默认值为'001'。\n    Dei (bit, optional): Drop Eligible Indicator，长度为1位的二进制字符串或整数，默认值为'1'。\n    Vid (bit, optional): VLAN Identifier，长度为12位的二进制字符串或整数，默认值为'000000000100'。\n\nReturns:\n    dict: 包含所修改字段及其新值的字典。例如::\n\n        {\n            'VlanType': 'sTag.serviceTag_0.vlanType',\n            'VlanPCP': 'sTag.serviceTag_0.vlanPCP',\n            'Dei': 'sTag.serviceTag_0.dei',\n            'Vid': 'sTag.serviceTag_0.vid',\n        }\n\n    如果没有实际修改任何字段（即所有参数均为None），则返回False。\n\nRaises:\n    ContinuableFailure: 当底层调用失败时抛出此异常，表示操作未能完成但可以继续执行后续步骤。\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${Stream} | add_stream | Port=${Port} |\n        | Create Stream Header | Stream=${Stream} | HeaderTypes=encapEthernetII |\n        | Edit Header 8021ah EncapsulatedCustomerEthernetII | Stream=${Stream} | Level=0 | ServiceTag=True |\n        | Edit Header 8021ah EncapsulatedCustomerEthernetII ServiceTag | Stream=${Stream} | Level=0 | VlanPCP=111 |",
  "TesterLibrary.Stream.Header.dot1ah.dot1ah.edit_header_8021ah_EncapsulatedCustomerEthernetII_customerTag": "修改测试仪表流量模板中802.1ah Encapsulated Customer Ethernet II报文头部的Customer Tag字段内容。\n\n该函数用于配置或修改指定流中的802.1ah Encapsulated Customer Ethernet II头部中的Customer Tag字段。可以修改的字段包括Type（类型）、Pcp（优先级代码点）、Cfi（标准格式指示符）和Id（标识符）。若未显式提供某个参数，则使用默认值进行配置。\n\nParameters:\n    Stream (:obj:`StreamTemplate`): 测试仪表流量对象，表示一个流量模板，类型为object，必须参数。\n\n    Level (int, optional): 指定要修改的Encapsulated Customer Ethernet II头部在该流中所有此类头部中的索引位置，默认为0。\n\nKeyword Args:\n    Type (str, optional): 设置Customer Tag的类型字段，长度为2的十六进制数，默认值：'8100'。\n\n    Pcp (str 或 int, optional): 设置Priority Code Point（PCP）字段，表示帧的优先级，长度为3的二进制数，默认值：'001'。\n\n    Cfi (str 或 int, optional): 设置Canonical Format Indicator（CFI）字段，表示MAC地址格式是否为标准格式，长度为3的二进制数，默认值：'1'。\n\n    Id (str 或 int, optional): 设置Identifier（ID）字段，通常代表VLAN ID，长度为12的二进制数，默认值：'000000000100'。\n\nReturns:\n    dict: 包含成功修改字段及其新值的字典。例如::\n\n        {\n            'Type': 'cTag.customerTag_0.type',\n            'Pcp': 'cTag.customerTag_0.pcp',\n            'Cfi': 'cTag.customerTag_0.cfi',\n            'Id': 'cTag.customerTag_0.id',\n        }\n\n    若未传入任何修改参数或修改失败，返回 False。\n\nRaises:\n    ContinuableFailure: 如果底层调用失败，则抛出可继续执行的异常，并附带错误信息。\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${Stream} | add_stream | Port=${Port} |\n        | Create Stream Header | Stream=${Stream} | HeaderTypes=encapEthernetII |\n        | Edit Header 8021ah EncapsulatedCustomerEthernetII | Stream=${Stream} | Level=0 | CustomerTag=True |\n        | Edit Header 8021ah EncapsulatedCustomerEthernetII CustomerTag | Stream=${Stream} | Level=0 | Pcp=111 |\n\nSide Effects:\n    - 调用 get_stream_header() 查询并可能缓存流的头部信息。\n    - 修改流中指定Encapsulated Customer Ethernet II头部的Customer Tag字段配置。",
  "TesterLibrary.Stream.Header.dot1ah.dot1ah.edit_header_8021ah_EncapsulatedBackboneEthernet": "修改测试仪表流量模板中802.1ah Encapsulated Backbone Ethernet报文头部的指定字段内容。\n\n该函数用于在指定的流量流(Stream)中，修改第Level层Encapsulated Backbone Ethernet（PBB）头部中的一个或多个字段。支持修改的字段包括EtherType、VLAN类型、VLAN优先级（PCP）、丢弃使能指示符（DEI）以及VLAN ID（VID）。\n\n参数:\n    Stream (:obj:`StreamTemplate` 或 list): 流量模板对象或包含单个流量模板对象的列表。若传入列表，仅使用第一个元素。必须具有唯一标识其的handle属性。\n    Level (int, optional): 要修改的Encapsulated Backbone Ethernet头部的索引层级，默认为0（即第一个Encapsulated Backbone Ethernet头部）。\n    EtherType (str 或 int, optional): 新的EtherType值，用于设置报文的以太网类型，默认不修改。\n    VlanType (str 或 int, optional): 新的VLAN类型值（通常为十六进制表示），默认不修改。\n    VlanPCP (str 或 int, optional): 新的VLAN优先级代码点（3位二进制数），默认不修改。\n    Dei (str 或 int, optional): 新的丢弃使能指示符（1位二进制数），默认不修改。\n    Vid (str 或 int, optional): 新的VLAN ID（取值范围0-4095），默认不修改。\n\n返回值:\n    dict: 包含被成功修改字段及其对应内部属性路径的字典，例如：\n        {\n            'EtherType': 'etherType',\n            'VlanType': 'bVLANTag.tagOption_0.btag.vlanType',\n            'VlanPCP': 'bVLANTag.tagOption_0.btag.vlanPCP',\n            'Dei': 'bVLANTag.tagOption_0.btag.dei',\n            'Vid': 'bVLANTag.tagOption_0.btag.vid'\n        }\n    False: 如果未提供任何参数或没有实际修改发生，则返回False。\n\n注意事项:\n    - 该函数会直接修改缓存中的Encapsulated Backbone Ethernet头部数据，可能影响后续操作，除非正确保存或应用更改。\n    - 使用前确保该流已配置至少一个Encapsulated Backbone Ethernet头部，并且Level参数不超过实际存在的Encapsulated Backbone Ethernet头部数量。\n    - 默认值说明：EtherType默认为88B5，VlanType默认为88A8，VlanPCP默认为001，Dei默认为1，Vid默认为100。\n\n示例:\n    .. code:: RobotFramework\n\n        | ${Stream} | add_stream | Port=${Port} |\n        | Create Stream Header | Stream=${Stream} | HeaderTypes=encapbackboneeth |\n        | Edit Header 8021ah EncapsulatedBackboneEthernet | Stream=${Stream} | Level=0 | VlanPCP=111 |",
  "TesterLibrary.Stream.Header.dot1ah.dot1ah.edit_header_8021ah_iTag": "修改测试仪表流量模板中802.1ah iTag报文头部的字段内容。\n\n该函数用于编辑指定流量模板中的某个802.1ah iTag头部的各个字段。仅更新用户提供的参数对应的字段，未提供的参数将保持原值不变。\n\nArgs:\n    Stream (:obj:`StreamTemplate` 或 list of :obj:`StreamTemplate`): 要修改iTag头部的流量对象。如果传入多个流（列表），则只使用第一个。\n    Level (int): 指定要修改的iTag头部在该流所有iTag头部中的索引位置，默认为0。\n\nKeyword Args:\n    Pcp (int, optional): 优先级代码点 (Priority Code Point)，取值范围：0-7（3位二进制数）。\n    Drop (bool, optional): 是否标记为可丢弃 (Drop Eligible Indicator)，True 表示1，False 表示0。\n    Uca (str, optional): 指定为目标地址类型是单播还是多播，有效值为 'unicast' 或 'multicast'。\n    Res1 (int, optional): 保留字段1，取值范围：0或1。\n    Res2 (int, optional): 保留字段2，取值范围：0-3（2位二进制数）。\n    ServiceId (int, optional): 服务标识符 (Service Identifier)，取值范围：0-16777215。\n    EncapCusDstAddr (str, optional): 封装客户目标MAC地址，格式为标准MAC字符串如 '00:00:00:00:00:00'。\n    SourceMacAdd (str, optional): 源MAC地址，格式同上。\n\nReturns:\n    dict: 包含被修改字段名称与内部属性名称映射的字典，例如::\n\n        {\n            'Pcp': 'pcp',\n            'Drop': 'drop',\n            'Uca': 'uca',\n            'Res1': 'res1',\n            'Res2': 'res2',\n            'ServiceId': 'serviceId',\n            'EncapCusDstAddr': 'encapCusDstAddr',\n            'SourceMacAdd': 'sourceMacAdd'\n        }\n\n    bool: 如果没有字段被修改（即所有参数为None），返回False。\n\nRaises:\n    ContinuableFailure: 当底层调用失败时抛出此异常，表示操作未能完成但程序可以继续执行。\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${Stream} | add_stream | Port=${Port} |\n        | Create Stream Header | Stream=${Stream} | HeaderTypes=iTag |\n        | Edit Header 8021ah Itag | Stream=${Stream} | Level=0 | Pcp=7 | Drop=True | Uca=unicast | ServiceId=12345 | EncapCusDstAddr=00:11:22:33:44:55 | SourceMacAdd=00:AA:BB:CC:DD:EE |",
  "TesterLibrary.Stream.Header.dot1ah.dot1ah.edit_header_8021ah_MacInMac": "修改测试仪表流量模板中802.1ah Mac-in-Mac报文头部内容。\n\n该函数用于修改指定流量模板中某一层级的802.1ah Mac-in-Mac（Mac-in-Mac）头部字段。支持修改的字段包括目的MAC地址、源MAC地址、EtherType、VLAN类型、VLAN优先级（PCP）、丢弃资格指示（DEI）以及VLAN标识符（VID）。仅当传入非None值时，才会更新对应的字段。\n\nArgs:\n\n    Stream (:obj:`StreamTemplate` 或 list): 测试仪表流量对象，必须具有唯一标识流的 'handle' 属性。\n                                           也可以是一个包含该对象的列表，此时使用第一个元素。\n    Level (int): 指定要修改的802.1ah Mac-in-Mac头部在该流量中的层级索引（当存在多个相同类型头部时使用）\n\nKeyword Args:\n\n    DestMacAdd (str): 目的MAC地址，默认值：00:00:00:13:40:20，格式应为标准MAC地址字符串\n\n    SourceMacAdd (str): 源MAC地址，默认值：00:00:00:12:30:10，格式应为标准MAC地址字符串\n\n    EtherType (str or hex): EtherType字段值，默认值：88B5，取值范围：长度为2的十六进制数\n\n    VlanType (str or hex): 服务VLAN类型，默认值：88a8，取值范围：长度为2的十六进制数\n\n    VlanPCP (str or bit): 服务VLAN优先级代码点（PCP），默认值：001，取值范围：长度为3的二进制数或0~7之间的整数\n\n    Dei (str or bit): 丢弃资格指示（DEI），默认值：1，取值范围：长度为1的二进制数或0/1\n\n    Vid (str or int): 服务VLAN ID，默认值：100，取值范围：0-4095\n\nReturns:\n\n    dict: 返回一个字典，表示成功修改的字段与内部字段名的映射关系。例如::\n\n        {\n            'DestMacAdd': 'destMacAdd',\n            'SourceMacAdd': 'sourceMacAdd',\n            'EtherType': 'etherType',\n            'VlanType': 'bVLANTag.tagOption_0.btag.vlanType',\n            'VlanPCP': 'bVLANTag.tagOption_0.btag.vlanPCP',\n            'Dei': 'bVLANTag.tagOption_0.btag.dei',\n            'Vid': 'bVLANTag.tagOption_0.btag.vid'\n        }\n\n    如果没有提供任何有效的修改参数，则返回 False。\n\nRaises:\n\n    ContinuableFailure: 当修改失败时抛出异常，错误信息中包含函数名。\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${Stream} | add_stream | Port=${Port} |\n        | Create Stream Header | Stream=${Stream} | HeaderTypes=mac-in-mac |\n        | Edit Header 8021ah MacInMac | Stream=${Stream} | Level=0 | VlanPCP=111 |",
  "TesterLibrary.Stream.Header.dot1ah.dot1ah.edit_header_8021ah_EncapsulatedCustomerEthernet": "修改测试仪表流量模板中802.1ah Encapsulated Customer Ethernet报文头部的EtherType字段。\n\n该函数用于修改指定流模板中，某一位置的802.1ah Encapsulated Customer Ethernet头部的EtherType字段。系统会先获取流对象的所有头部，并筛选出所有'encapcustomereth'类型的头部，然后根据Level参数选择对应位置的头部进行修改。\n\nArgs:\n\n    Stream (:obj:`StreamTemplate` 或 list): 测试仪表流量对象或包含流量对象的单元素列表。如果传入列表，则使用第一个元素。流量对象必须具有唯一标识其的 'handle' 属性。\n\n    Level (int): 要修改的Encapsulated Customer Ethernet头部在该流中所有Encapsulated Customer Ethernet头部中的索引位置，默认为0。\n\nKeyword Args:\n\n    EtherType (int 或 str, optional): 新的EtherType值，十六进制表示，长度为2字节（例如：0x1111 或 '1111'）。如果不提供该参数，则不会修改EtherType字段。\n\nReturns:\n\n    dict: 如果成功修改了EtherType字段，则返回 {'EtherType': 'etherType'}；如果未进行任何修改，则返回False。\n\nRaises:\n\n    ContinuableFailure: 如果底层调用失败，则抛出可继续执行的异常。\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${Stream} | add_stream | Port=${Port} |\n        | Create Stream Header | Stream=${Stream} | HeaderTypes=encapCustomerEth |\n        | Edit Header 8021ah EncapsulatedCustomerEthernet | Stream=${Stream} | Level=0 | EtherType=1111 |\n\nSide Effects:\n\n    - 修改流模板中指定Encapsulated Customer Ethernet头部的EtherType值。\n    - 使用get_stream_header内部缓存机制来获取和存储构造好的头部对象。",
  "TesterLibrary.Stream.Header.Gre.common.edit_header_gre": "修改测试仪表流量模板中GRE报文头部内容。\n\n该函数用于编辑指定流量模板中的GRE（通用路由封装）头部配置。它可以从提供的流对象中获取GRE头部，并修改指定索引（Level）处的GRE头部属性。如果提供了可选参数，则会将这些参数应用到对应的GRE头部字段中。函数支持修改基本的GRE头部字段以及可选子字段，如校验和（Checksum）、密钥（Key）和序列号（Sequence Number）等。\n\nArgs:\n\n    Stream (:obj:`StreamTemplate`): 流量模板对象，必须包含一个唯一标识流的 `handle` 属性。如果传入的是列表，则只处理第一个元素。\n\n    Level (int, optional): 指定要修改的GRE头部在流中的索引位置，默认为0（即第一个GRE头部），取值范围：0-65535。\n\nKeyword Args:\n\n    ChecksumPresent (int, optional): 是否启用校验和字段，0表示不启用，1表示启用，默认值为0。\n\n    Routing (int, optional): 配置与路由相关的信息字段，默认值为0。\n\n    KeyPresent (int, optional): 是否启用GRE Key字段，0表示不启用，1表示启用，默认值为0。\n\n    SequenceNumberPresent (int, optional): 是否启用序列号字段，0表示不启用，1表示启用，默认值为0。\n\n    Reserved (int, optional): 设置保留字段的值，默认为0，取值范围：0-511。\n\n    Version (int, optional): GRE协议版本号，默认为0，取值范围：0-7。\n\n    Protocol (hex, optional): GRE封装的载荷类型，默认为0x0800（IPv4）。有效值包括：\n\n        - 0800: IPv4\n        - 6558: Ethernet II\n        - 8847: MPLS\n        - 86DD: IPv6\n\n    Checksum (int, optional): 设置GRE头部的校验和值，默认为0，取值范围：0-65535。\n\n    ChecksumReserved (int, optional): 设置校验和字段中的保留位，默认为0，取值范围：0-65535。\n\n    Key (int, optional): 设置GRE隧道的密钥值，默认为0，取值范围：0-4924967295。\n\n    SequenceNumber (int, optional): 设置GRE数据包的序列号，默认为0，取值范围：0-4924967295。\n\n    EnableKeepAlive (int, optional): 启用或禁用GRE隧道的KeepAlive功能，0表示禁用，1表示启用，默认为0。\n\n    KeepAlivePeriod (int, optional): 设置KeepAlive消息的发送间隔时间（单位：秒），默认为10，取值范围：0-65535。\n\n    KeepAliveRetries (int, optional): 设置连续失败多少次后认为KeepAlive失败，默认为3，取值范围：0-255。\n\nReturns:\n\n    dict: 返回一个字典，映射每个成功修改的参数名到其在GRE头部中对应的内部字段名称。例如：\n\n        {\n            'ChecksumPresent': 'checksumPresent',\n            'Routing': 'routing',\n            'KeyPresent': 'keyPresent.GreKey_0.key',\n            'SequenceNumberPresent': 'sequenceNumber.GreSequenceNumber_0.sequenceNumber',\n            'Reserved': 'reserved',\n            'Version': 'version',\n            'Protocol': 'protocol',\n            'EnableKeepAlive': 'enableKeepAlive',\n            'KeepAlivePeriod': 'keepAlivePeriod',\n            'KeepAliveRetries': 'keepAliveRetries',\n            'Checksum': 'checksum.GreChecksum_0.checksum',\n            'ChecksumReserved': 'checksum.GreChecksum_0.reserved',\n            'Key': 'Key.GreKey_0.key'\n        }\n\n    如果没有任何参数被设置（即所有参数都为None），则返回 False。\n\nRaises:\n\n    ContinuableFailure: 如果修改操作失败，则抛出此异常。\n\nExamples:\n\n    .. code:: RobotFramework\n\n        | ${Stream} | add_stream | Port=${Port} |\n        | ${HeaderTypes} | Create List | EthernetII | IPv4 | GRE |\n        | Create Stream Header | Stream=${Stream} | HeaderTypes=${HeaderTypes} |\n        | Edit Header Gre | Stream=${Stream} | Level=0 | KeepAlivePeriod=100 | KeepAliveRetries=200 |",
  "TesterLibrary.Stream.Header.L2.common.edit_header_ethernet": "修改测试仪表流量模板中Ethernet报文头部内容。\n\n该函数用于修改指定流模板中的以太网（Ethernet）头部字段。通过该函数可以编辑目标MAC地址、源MAC地址以及上层协议类型等字段。仅传递了新值的字段会被修改，未传递参数的字段保持不变。\n\nArgs:\n\n    Stream (:obj:`StreamTemplate`): 测试仪表流量对象，表示需要修改的流模板。如果传入的是列表，则只处理第一个元素。\n\n    Level (int, optional): 指定要修改的Ethernet头部在头部链中的索引位置，默认值为0，表示第一个Ethernet头部。取值范围：0-65535。\n\n    DestMacAdd (str, optional): 新的目标MAC地址，默认值为 '00:00:00:13:40:20'，格式应为标准的MAC地址格式（如 'FF:FF:FF:FF:FF:FF'）。\n\n    SourceMacAdd (str, optional): 新的源MAC地址，默认值为 '00:00:00:12:30:10'，格式同上。\n\n    ProtocolType (str, optional): Ethernet帧的上层协议类型，通常使用十六进制字符串表示，默认值为 '88B5'。支持的常见协议类型包括：\n\n        - 0800：IPv4\n        - 0806：ARP\n        - 8100：VLAN\n        - 8863：PPPoE Discovery\n        - 8864：PPPoE\n        - 86DD：IPv6\n        - 8808：Pause\n        - 8847：MPLS\n        - 8926：VNTag\n        - 8914：FIP\n        - 8906：FCoE\n        - 88CC：Chassis ID TLV\n        - 88B8：Goose\n\nReturns:\n\n    dict: 返回一个字典，包含已修改的参数名称及其对应的内部属性名，例如：\n    \n        {\n            'DestMacAdd': 'destMacAdd',\n            'SourceMacAdd': 'sourceMacAdd',\n            'ProtocolType': 'protocolType'\n        }\n\n    bool: 如果没有提供任何参数进行修改，则返回 False，表示未执行任何更改。\n\nRaises:\n\n    ContinuableFailure: 当内部调用失败时抛出此异常，函数将继续执行流程但标记操作失败。\n\nExamples:\n\n    robotframework 示例代码如下：\n\n.. code:: robotframework\n\n    | Init Tester |\n    | ${Locations} | Create List | //192.168.0.180/1/1 | //192.168.0.180/1/2 |\n    | ${Port} | reserve_port | Locations=${Locations} |\n    | ${Stream} | add_stream | Port=${Port[0]} |\n    | ${HeaderTypes} | Create List | EthernetII | IPv4 |\n    | Create Stream Header | Stream=${Stream} | HeaderTypes=${HeaderTypes} |\n    | &{Attribute} | Edit Header Ethernet | Stream=${Stream} | Level=0 | DestMacAdd=00:01:01:01:01:02 |\n    | Edit Modifier | Stream=${Stream} | Level=0 | HeaderType=EthernetII | Attribute=${Attribute}[DestMacAdd] | Type=Increment | Count=10 | Step=2 |\n    | ${Pattern} | Create Capture Pdu Pattern | Port=${Port[1]} | HeaderTypes=${HeaderTypes} |  Level=0  | Attribute=${Attribute}[DestMacAdd] | Value=00:01:01:01:01:02 | MaxValue=00:01:01:01:01:02 |\n    | Edit Capture Filter | Port=${Port} | Expression=${Pattern} |\n\nSide Effects:\n\n    - 函数会直接修改流模板中对应的Ethernet头部字段。\n    - 内部调用了 `get_stream_header` 获取头部对象，并可能复用缓存的头部信息。",
  "TesterLibrary.Stream.Header.L2.common.edit_header_raw_8023": "修改测试仪表流量模板中的原始802.3 Ethernet头部字段内容。\n\n该函数用于修改指定流量流中某一特定层级的原始（raw）802.3 Ethernet头部的一个或多个字段，包括目的MAC地址、源MAC地址和Payload Length。仅传入的非None参数会被更新，其余字段保持不变。\n\nArgs:\n\n    Stream (:obj:`StreamTemplate` or list of :obj:`StreamTemplate`): 测试仪表流量对象。如果传入的是列表，则仅使用第一个元素。必须包含唯一标识符'handle'以被系统识别。\n\n    Level (int, optional): 指定要修改的头部在原始头部列表中的索引位置，默认为0，取值范围：0-65535\n\n    DestMacAdd (str, optional): 新的目的MAC地址，格式应为有效的MAC地址，例如：'00:00:00:13:40:20'。若为None，则不修改此字段。\n\n    SourceMacAdd (str, optional): 新的源MAC地址，格式应为有效的MAC地址。若为None，则不修改此字段。\n\n    PayloadLength (int, optional): 新的payload长度值。若为None或AUTO，则不修改此字段。\n\nReturns:\n\n    dict: 包含被修改字段的映射字典，键为传入的参数名，值为对应的内部属性名称，如 {'DestMacAdd': 'destMacAdd'}。如果没有字段被修改（即所有参数均为None），则返回False。\n\nRaises:\n\n    ContinuableFailure: 如果底层调用失败，则抛出可继续执行的异常。\n\nSide Effects:\n\n    - 会在内存中直接修改对应头部对象的属性（destMacAdd, sourceMacAdd, payloadLength），这些更改将影响实际流量配置，直到应用到硬件。\n\nExamples:\n\n    robotframework示例：\n\n.. code:: robotframework\n\n    | Init Tester |\n    | ${Locations} | Create List | //192.168.0.180/1/1 | //192.168.0.180/1/2 |\n    | ${Port} | reserve_port | Locations=${Locations} |\n    | ${Stream} | add_stream | Port=${Port[0]} |\n    | ${HeaderTypes} | Create List | EthernetII | IPv4 |\n    | Create Stream Header | Stream=${Stream} | HeaderTypes=${HeaderTypes} |\n    | &{Attribute} | Edit Header Ethernet | Stream=${Stream} | Level=0 | DestMacAdd=00:01:01:01:01:02 |\n    | Edit Modifier | Stream=${Stream} | Level=0 | HeaderType=EthernetII | Attribute=${Attribute}[DestMacAdd] | Type=Increment | Count=10 | Step=2 |\n    | ${Pattern} | Create Capture Pdu Pattern | Port=${Port[1]} | HeaderTypes=${HeaderTypes} | Level=0 | Attribute=${Attribute}[DestMacAdd] | Value=00:01:01:01:01:02 | MaxValue=00:01:01:01:01:02 |\n    | Edit Capture Filter | Port=${Port} | Expression=${Pattern} |",
  "TesterLibrary.Stream.Header.L2.common.edit_header_8023": "修改测试仪表流量模板中的 IEEE 802.3 报文头部字段内容。\n\n该函数用于修改指定流量模板中某个 IEEE 802.3 头部（即以太网原始帧格式）的一个或多个字段，包括目的 MAC 地址、源 MAC 地址、负载长度、LLC（逻辑链路控制）字段（DSAP、SSAP、Control），以及 SNAP（子网访问协议）字段（OUI、Type）。该函数会根据提供的 Level 索引定位到具体的 IEEE 802.3 头部进行修改。\n\nArgs:\n\n    Stream (:obj:`StreamTemplate` 或 list of :obj:`StreamTemplate`): 测试仪表的流量模板对象。如果传入的是列表，则只使用第一个元素。该对象必须包含一个 'handle' 属性用于标识。\n\n    Level (int, optional): 要修改的 IEEE 802.3 头部在流量模板中的索引位置，默认值为 0，表示第一个 IEEE 802.3 头部。取值范围：0 - 65535。\n\nKeyword Args:\n\n    DestMacAdd (str, optional): 设置新的目的 MAC 地址，默认值: '00:00:00:13:40:20'，格式必须是合法的 MAC 地址字符串，如 '00:11:22:33:44:55'。\n\n    SourceMacAdd (str, optional): 设置新的源 MAC 地址，默认值: '00:00:00:12:30:10'，格式同上。\n\n    PayloadLength (int, optional): 设置负载长度字段，默认值为 <AUTO>46（自动填充为最小帧大小），取值范围：0 - 65535。\n\n    Dsap (str, optional): LLC 头部的目的服务访问点字段（DSAP），十六进制字符串格式，默认值: 'AA'，取值范围：00 - FF。\n\n    Ssap (str, optional): LLC 头部的源服务访问点字段（SSAP），十六进制字符串格式，默认值: 'AA'，取值范围：00 - FF。\n\n    Control (str, optional): LLC 控制字段，十六进制字符串格式，默认值: '03'，取值范围：00 - FF。\n\n    Oui (str, optional): SNAP 头部的组织唯一标识符（OUI），十六进制字符串格式，默认值: '000000'，必须为 3 字节长度的十六进制数，例如 '00-00-00'。\n\n    Type (str, optional): SNAP 头部的协议类型字段，十六进制字符串格式，默认值: 'FFFF'，必须为 2 字节长度的十六进制数，例如 '0800' 表示 IPv4。\n\nReturns:\n\n    dict or False: 返回一个字典，显示成功修改的字段名与内部属性名称之间的映射关系，例如：\n\n        {\n            'DestMacAdd': 'destMacAdd',\n            'SourceMacAdd': 'sourceMacAdd',\n            'PayloadLength': 'length',\n            'Dsap': 'llcHeaderIns.dsap',\n            'Ssap': 'llcHeaderIns.ssap',\n            'Control': 'llcHeaderIns.control',\n            'Oui': 'snapIns.oui',\n            'Type': 'snapIns.type'\n        }\n\n    如果未提供任何可修改的参数或修改失败，则返回 False。\n\nRaises:\n\n    ContinuableFailure: 如果底层调用失败，则抛出可继续执行的异常，并附带函数名作为错误信息的一部分。\n\nExamples:\n\n    robotframework 示例：\n\n    .. code:: robotframework\n\n        | Edit Header 8023 | Stream=${Stream} | Level=0 | DestMacAdd=00:01:01:01:01:02 | Type=0800 |",
  "TesterLibrary.Stream.Header.L2.common.edit_header_llc": "修改测试仪表流量模板中的LLC（逻辑链路控制）头部字段内容。该函数支持对LLC头部的DSAP（目标服务访问点）、SSAP（源服务访问点）和Control（控制字段）进行修改，仅当传入了对应的参数值时才会更新相应的字段。\n\n参数:\n    Stream (:obj:`StreamTemplate` 或 list): 流量模板对象或包含一个流量模板对象的列表。如果传入的是列表，则仅使用第一个元素。\n    Level (int, optional): 指定要修改的LLC头部在流中所有LLC头部中的索引位置，默认为0，即修改第一个遇到的LLC头部。\n\n关键字参数（可选）:\n    Dsap (hex): 设置LLC头部的DSAP字段值，默认为AA，有效取值范围：00-FF\n    Ssap (hex): 设置LLC头部的SSAP字段值，默认为AA，有效取值范围：00-FF\n    Control (int): 设置LLC头部的Control字段值，默认为03，有效取值范围：00-FF\n\n返回值:\n    dict: 如果有字段被成功修改，返回一个字典，将字段名（'Dsap', 'Ssap', 'Control'）映射到其内部标识符（'dsap', 'ssap', 'control'）\n    bool: 如果没有字段被修改（例如所有传入值都为None），则返回False\n\n示例（Robot Framework）:\n\n.. code:: robotframework\n\n    | Edit Header Llc | Stream=${Stream} | Level=0 | Dsap=FF |",
  "TesterLibrary.Stream.Header.L2.common.edit_header_vlan": "修改测试仪表流量模板中的VLAN报文头部属性。\n\n此函数用于修改指定流模板中某个VLAN头部的字段内容。它会获取该流的所有头部并筛选出VLAN类型头部，然后根据提供的Level索引选择对应VLAN头部进行属性更新。\n\nArgs:\n\n    Stream (:obj:`StreamTemplate`): 测试仪表流量模板对象，必须包含一个唯一标识流的handle属性。如果传入的是流对象列表，则只使用第一个。\n\n    Level (int, optional): VLAN头部在流所有VLAN头部中的索引位置，用于支持存在多个VLAN头的情况，默认值为0。\n\n    Priority (int, optional): 设置VLAN头部的优先级字段，取值范围0-7，默认值为0。\n\n    CFI (int, optional): 设置Canonical Format Indicator（CFI）字段，取值范围0-1，默认值为0。\n\n    ID (int, optional): 设置VLAN标识符（VID），取值范围1-4095，默认值为1。\n\n    Protocol (int or str, optional): 设置上层协议类型字段。默认值为88B5，可选值包括：\n\n        0800：IPv4\n\n        0806：ARP\n\n        8100：VLAN\n\n        8863：PPPoE Discovery\n\n        8864：PPPoE\n\n        86DD：IPv6\n\n        8808：Pause\n\n        8847：MPLS\n\n        8926：VNTag\n\n        8914：FIP\n\n        8906：FCoE\n\n        88CC：Chassis ID TLV\n\n        88B8：Goose\n\nReturns:\n\n    dict: 返回一个字典，将修改的字段名称映射到其内部属性名。例如::\n\n        {\n            'Priority': 'priority',\n            'CFI': 'cfi',\n            'ID': 'id',\n            'Protocol': 'protocol'\n        }\n\n    如果未成功修改任何属性，返回False。\n\nRaises:\n\n    ContinuableFailure: 当修改失败时抛出异常，错误信息为“edit_header_vlan Failure”。\n\nSide Effects:\n\n    - 直接修改指定流模板中对应VLAN头部的属性。\n    - 内部调用get_stream_header()函数，可能会影响系统缓存状态，并在缓存未命中时向设备查询头部信息。\n\nExamples:\n    robotframework示例:\n\n.. code:: robotframework\n\n    | Init Tester |\n    | ${Locations} | Create List | //192.168.0.180/1/1 | //192.168.0.180/1/2 |\n    | ${Port} | reserve_port | Locations=${Locations} |\n    | ${Stream} | add_stream | Port=${Port[0]} |\n    | ${HeaderTypes} | Create List | EthernetII | VLAN |\n    | Create Stream Header | Stream=${Stream} | HeaderTypes=${HeaderTypes} |\n    | &{Attribute} | Edit Header Vlan | Stream=${Stream} | Level=0 | ID=4000 |\n    | Edit Modifier | Stream=${Stream} | Level=1 | Attribute=${Attribute}[ID] | Type=Increment | Count=10 | Step=2 |\n    | ${Pattern} | Create Capture Pdu Pattern | Port=${Port[1]} | HeaderTypes=${HeaderTypes} | Level=1 | Attribute=${Attribute}[ID] | Value=4000 | MaxValue=4000 |\n    | Edit Capture Filter | Port=${Port} | Expression=${Pattern} |",
  "TesterLibrary.Stream.Header.L2.common.edit_header_arp": "修改测试仪表流量模板中ARP报文头部的字段内容。\n\n该函数用于编辑指定流量流中的ARP（Address Resolution Protocol）头部字段，允许对ARP协议的各种字段进行自定义配置。ARP头部通过在流中头部列表的位置（Level）来标识，默认为0。\n\n参数:\n    Stream (:obj:`StreamTemplate`): 测试仪表流量模板对象，必须包含唯一标识的handle属性。如果传入的是列表，则仅使用第一个元素。\n\n    Level (int): ARP头部在流的头部列表中的索引位置，默认值：0，取值范围：0-65535\n\n关键字参数（可选）:\n    HardwareType (int): 硬件类型字段，表示使用的硬件类型（如以太网），默认值：1，取值范围：1-65535\n\n    ProtocolType (hex): 协议类型字段，表示正在解析的协议地址类型（如IPv4），默认值：0800，取值范围：0000-FFFF\n\n    HardwareSize (int): 硬件地址长度（字节），默认值：6，取值范围：0-255\n\n    ProtocolSize (int): 协议地址长度（字节），默认值：4，取值范围：0-255\n\n    Opcode (int): 操作码，指示是ARP请求还是应答，默认值：1，取值范围：0-65535\n\n    SendMac (str): 发送方MAC地址，默认值：00:00:00:12:30:10，取值范围：有效的MAC地址格式\n\n    SendIpv4 (str): 发送方IPv4地址，默认值：192.168.0.1，取值范围：有效的IPv4地址格式\n\n    TargetMac (str): 目标MAC地址，默认值：00:00:00:00:00:00，取值范围：有效的MAC地址格式\n\n    TargetIpv4 (str): 目标IPv4地址，默认值：0.0.0.0，取值范围：有效的IPv4地址格式\n\n返回值:\n    dict: 包含已成功设置字段名和对应内部属性名称的字典。例如:\n\n        {\n            'HardwareType': 'hardwareType',\n            'ProtocolType': 'protocolType',\n            'HardwareSize': 'hardwareSize',\n            'ProtocolSize': 'protocolSize',\n            'Opcode': 'opcode',\n            'SendMac': 'sendMac',\n            'SendIpv4': 'sendIpv4',\n            'TargetMac': 'targetMac',\n            'TargetIpv4': 'targetIpv4'\n        }\n\n    如果没有成功设置任何字段，则返回 False。\n\n异常:\n    如果调用失败，将抛出 ContinuableFailure 异常。\n\n副作用:\n    - 修改了流中指定ARP头部的内部状态。\n    - 内部调用 get_stream_header 函数获取流的头部列表。\n\n示例:\n    robotframework 示例代码如下：\n\n.. code:: robotframework\n\n    | Init Tester |\n    | ${Locations} | Create List | //192.168.0.180/1/1 | //192.168.0.180/1/2 |\n    | ${Port} | reserve_port | Locations=${Locations} |\n    | ${Stream} | add_stream | Port=${Port[0]} |\n    | ${HeaderTypes} | Create List | EthernetII | ARP |\n    | Create Stream Header | Stream=${Stream} | HeaderTypes=${HeaderTypes} |\n    | &{Attribute} | Edit Header Arp | Stream=${Stream} | Level=0 | SendMac=00:00:01:01:01:01 |\n    | Edit Modifier | Stream=${Stream} | Level=1 | Attribute=${Attribute}[SendMac] | Type=Increment | Count=10 | Step=2 |\n    | ${Pattern} | Create Capture Pdu Pattern | Port=${Port[1]} | HeaderTypes=${HeaderTypes} |  Level=1  | Attribute=${Attribute}[SendMac] | Value=00:00:01:01:01:01 | MaxValue=00:00:01:01:01:01 |\n    | Edit Capture Filter | Port=${Port} | Expression=${Pattern} |",
  "TesterLibrary.Stream.Header.L2.common.edit_header_mpls": "修改测试仪表流量模板中指定层级的MPLS报文头部字段内容。\n\n该函数用于编辑指定流对象中某个MPLS头部的字段值（如Label、Exp、Bottom、TTL）。内部会查找流对象中的所有MPLS头部，并根据Level参数选择要编辑的MPLS头。如果未提供任何字段修改参数（即Label、Exp、Bottom、TTL均为None），则函数不会做任何修改并返回False。\n\nArgs:\n    Stream (:obj:`StreamTemplate` or list of :obj:`StreamTemplate`): 流对象或流对象列表，若为列表则仅处理第一个流对象。该对象必须包含唯一标识流的'handle'属性。\n    Level (int, optional): 指定MPLS头部在流中的索引位置，默认值: 0（表示第一个MPLS头部），取值范围：0-65535。\n\nKeyword Args:\n    Label (int, optional): MPLS标签值，默认不修改；默认值: 16，取值范围: 0-1048575。\n    Exp (int, optional): 实验位（Experimental Bits）值，默认不修改；默认值: 0（二进制000），取值范围: 0-7（即二进制000到111）。\n    Bottom (int, optional): 栈底标志位（Bottom Of Stack），默认不修改；默认值: 0，取值范围: 0 或 1。\n    TTL (int, optional): 生存时间（Time-To-Live）值，默认不修改；默认值: 64，取值范围: 0-255。\n\nReturns:\n    dict or False: 如果有任何字段被成功修改，则返回一个字典，映射修改的字段名（如'Label', 'Exp'等）到其内部属性名称（如'label', 'exp'等）。如果没有字段被修改或参数无效，则返回False。\n\nExamples:\n    robotframework 示例:\n\n.. code:: robotframework\n\n    | Init Tester |\n    | ${Locations} | Create List | //192.168.0.180/1/1 | //192.168.0.180/1/2 |\n    | ${Port} | reserve_port | Locations=${Locations} |\n    | ${Stream} | add_stream | Port=${Port[0]} |\n    | ${HeaderTypes} | Create List | EthernetII | MPLS | IPv4 |\n    | Create Stream Header | Stream=${Stream} | HeaderTypes=${HeaderTypes} |\n    | &{Attribute} | Edit Header MPLS | Stream=${Stream} | Level=0 | Label=1000 | TTL=100 |\n    | Edit Modifier | Stream=${Stream} | Level=1 | Attribute=${Attribute}[Label] | Type=Increment | Count=10 | Step=2 |\n    | ${Pattern} | Create Capture Pdu Pattern | Port=${Port[1]} | HeaderTypes=${HeaderTypes} |  Level=1  | Attribute=${Attribute}[Label] | Value=1000 | MaxValue=1000 |\n    | Edit Capture Filter | Port=${Port} | Expression=${Pattern} |\n\nSide Effects:\n    - 修改了指定MPLS头部对象的 label、exp、bottom、ttl 等属性。\n    - 内部调用 get_stream_header 函数，可能会查询系统并更新头部对象的缓存。",
  "TesterLibrary.Stream.Header.L2.common.edit_header_goose": "修改测试仪表流量模板中Goose报文头部的一个或多个字段。\n\n该函数用于检索与指定流对象相关的Goose类型报文头部，并在指定层级修改其一个或多个字段。若未提供任何需修改的字段，则返回False；否则，返回包含修改字段的字典，字典键为参数名（如'Appid'），值为其在报文头部中对应的属性名（如'appid'）。\n\n参数:\n    Stream (object): 表示测试仪表流量的流对象。该对象应具有唯一标识流的'handle'属性。如果传入的是列表，则只使用第一个元素。\n    \n    Level (int, optional): 指定要编辑的Goose头部在其所属流中的索引位置。默认值为0，表示第一个找到的Goose头部。\n\n    Appid (any, optional): 如果提供，将更新Goose头部的'appid'字段为此值。\n\n    Length (any, optional): 如果提供，将更新Goose头部的'length'字段与此值。\n\n    Reserve (any, optional): 如果提供，将更新Goose头部的'reserve'字段与此值。\n\n    Reserve1 (any, optional): 如果提供，将更新Goose头部的'reserve1'字段与此值。\n\n    Apdu (any, optional): 如果提供，将更新Goose头部的'apdu'字段与此值。\n\n返回值:\n    dict or bool: 一个字典，映射被修改的参数名到其在Goose头部中对应的属性名（如{'Appid': 'appid'}）。如果没有提供任何修改参数，则返回False。\n\n副作用:\n    - 如果尚未缓存流的头部信息，则会通过get_stream_header获取并缓存。\n    - 在内存中修改指定Goose头部对象的属性。\n\n示例:\n    robotframework:\n\n.. code:: robotframework\n\n    | &{Attribute} | Edit Header Goose | Stream=${Stream} | Level=0 | Appid=1000 |\n    | Edit Modifier | Stream=${Stream} | Level=1 | Attribute=${Attribute}[Appid] | Type=Increment | Count=10 | Step=2 |",
  "TesterLibrary.Stream.Header.L2.common.edit_header_pause": "修改测试仪表流量模板中指定Pause报文头部的字段内容。\n\n该函数用于获取指定流量流的所有报文头部，并从中筛选出类型为'pause'的头部。然后根据传入的Level参数（即索引）选择特定的Pause头部进行修改。如果提供了新的值，则更新该头部的PauseCode和/或PauseTime字段。函数返回一个字典，指示哪些字段被成功修改；若未进行任何修改，则返回False。\n\nArgs:\n    Stream (:obj:`StreamTemplate`): 测试仪表流量对象，表示要编辑Pause头部的流量流。该对象需包含唯一标识该流的'handle'属性。\n                                  如果传入的是列表，则使用第一个元素作为流对象。\n    Level (int): 要修改的Pause头部在其同类头部中的索引位置，默认为0，有效范围：0-65535\n\nKeyword Args:\n    PauseCode (hex, optional): 新的Pause Opcode值（十六进制），默认值：0001，取值范围：0000-FFFF。若不提供则不修改该字段。\n    PauseTime (hex, optional): 新的Pause Time值（十六进制），默认值：0000，取值范围：0000-FFFF。若不提供则不修改该字段。\n\nReturns:\n    dict or bool: 若有字段被修改，返回如下格式的字典，映射用户输入的关键字与实际修改的内部字段名；\n                  若没有任何字段被修改，则返回False。例如::\n\n        {\n            'PauseCode': 'pauseCode',\n            'PauseTime': 'pauseTime',\n        }\n\nRaises:\n    ContinuableFailure: 如果修改操作失败，抛出可继续执行的异常。\n\nSide Effects:\n    - 如果尚未缓存流的头部信息，将调用get_stream_header()方法获取并缓存。\n    - 直接在原对象上修改所选Pause头部的属性（pauseCode、pauseTime）。\n\nExamples:\n    robotframework:\n\n.. code:: robotframework\n\n    | &{Attribute} | Edit Header Pause | Stream=${Stream} | Level=0 | PauseCode=FFFF |\n    | Edit Modifier | Stream=${Stream} | Level=1 | Attribute=${Attribute}[PauseCode] | Type=Increment | Count=10 | Step=2 |",
  "TesterLibrary.Stream.Header.L2.common.edit_header_pfc": "修改测试仪表流量模板中的PFC（Priority Flow Control）报文头部属性。\n\n该函数用于编辑指定流对象中某个PFC头部的多个字段属性。系统会从提供的流对象中获取所有头部，并筛选出PFC类型的头部，然后根据给定的Level索引定位具体的PFC头部进行修改。如果提供了对应的可选参数，则这些参数值将被设置到PFC头部对应字段中。\n\nParameters:\n    Stream (object): 测试仪表流量对象，通常为`StreamTemplate`类型。该对象应包含一个唯一标识流的`handle`属性。若传入的是列表，则使用第一个元素。\n\n    Level (int, optional): 指定要修改的PFC头部在该流所有PFC头部中的索引位置，默认值为0，有效范围：0-65535。\n\nKeyword Args:\n    OpCode (hex, optional): 设置PFC头部的OpCode字段，默认值为0x0101，有效范围：0x0000-0xFFFF。\n\n    MsOctet (bit, optional): 设置优先级启用向量的msOctet字段，默认值为\"00000000\"，必须为长度为8的二进制字符串或整数值。\n\n    P7 (bit, optional): 设置优先级7的启用状态，默认值为0，取值范围：0或1。\n\n    P6 (bit, optional): 设置优先级6的启用状态，默认值为0，取值范围：0或1。\n\n    P5 (bit, optional): 设置优先级5的启用状态，默认值为0，取值范围：0或1。\n\n    P4 (bit, optional): 设置优先级4的启用状态，默认值为0，取值范围：0或1。\n\n    P3 (bit, optional): 设置优先级3的启用状态，默认值为0，取值范围：0或1。\n\n    P2 (bit, optional): 设置优先级2的启用状态，默认值为0，取值范围：0或1。\n\n    P1 (bit, optional): 设置优先级1的启用状态，默认值为0，取值范围：0或1。\n\n    P0 (bit, optional): 设置优先级0的启用状态，默认值为0，取值范围：0或1。\n\n    Time0 (hex, optional): 设置Time0字段，默认值为0，有效范围：0x0000-0xFFFF。\n\n    Time1 (hex, optional): 设置Time1字段，默认值为0，有效范围：0x0000-0xFFFF。\n\n    Time2 (hex, optional): 设置Time2字段，默认值为0，有效范围：0x0000-0xFFFF。\n\n    Time3 (hex, optional): 设置Time3字段，默认值为0，有效范围：0x0000-0xFFFF。\n\n    Time4 (hex, optional): 设置Time4字段，默认值为0，有效范围：0x0000-0xFFFF。\n\n    Time5 (hex, optional): 设置Time5字段，默认值为0，有效范围：0x0000-0xFFFF。\n\n    Time6 (hex, optional): 设置Time6字段，默认值为0，有效范围：0x0000-0xFFFF。\n\n    Time7 (hex, optional): 设置Time7字段，默认值为0，有效范围：0x0000-0xFFFF。\n\nReturns:\n    dict: 返回一个字典，表示成功更新的参数名与对应字段路径的映射关系。例如::\n\n        {\n            'OpCode': 'opCode',\n            'MsOctet': 'priorityEnableVector.msOctet',\n            'P7': 'priorityEnableVector.p7',\n            ...\n            'Time7': 'time7'\n        }\n\n    如果没有提供任何可选参数（即未修改任何字段），则返回False。\n\nRaises:\n    ContinuableFailure: 如果内部调用失败（即返回False），则抛出ContinuableFailure异常，提示函数执行失败。\n\nSide Effects:\n    - 会修改流对象内部PFC头部的状态。\n    - 后续对该流对象的操作可能会反映此次修改后的值。\n\nExamples:\n    robotframework 示例：\n\n    .. code:: robotframework\n\n        | &{Attribute} | Edit Header Pfc | Stream=${Stream} | Level=0 | OpCode=FFFF |\n        | Edit Modifier | Stream=${Stream} | Level=1 | Attribute=${Attribute}[OpCode] | Type=Increment | Count=10 | Step=2 |",
  "TesterLibrary.Stream.Header.L2.common.edit_header_vntag": "修改测试仪表流量模板中指定层级的VNTag报文头部字段内容。\n\n该函数用于编辑流量模板中某一VNTag报文头部的特定字段。首先会通过`get_stream_header`接口获取流的所有报文头部，然后筛选出所有VNTag类型的头部，并根据给定的Level选择对应的VNTag头部进行修改。可修改的字段包括版本号、保留位、方向、指针、目标VIF、源VIF、Looped标志和协议类型。\n\n参数:\n    Stream (object): 流模板对象，代表一个流量流。该对象必须包含一个唯一标识流的'handle'属性。\n                     如果传入的是列表，则使用列表中的第一个元素。\n    Level (int, optional): 要修改的VNTag头部在所有VNTag头部中的索引位置，默认为0。\n                           有效范围：0-65535。\n    **kwargs (optional): 可选的关键字参数，用于指定要修改的字段及其新值。支持以下字段：\n\n        - Ver (bit): 版本号字段，取值范围为00到11，默认值：00。\n        - Res (bit): 保留字段，取值范围为0或1，默认值：0。\n        - Dir (bit): 方向字段，取值范围为0或1，默认值：0。\n        - Pointer (bit): 指针字段，取值范围为0或1，默认值：0。\n        - DstVif (int): 目标VIF字段，取值范围为0到1，默认值：14。\n        - SrcVif (int): 源VIF字段，取值范围为0到1，默认值：12。\n        - Looped (bit): 循环标志字段，取值范围为0或1，默认值：0。\n        - Protocol (hex): 协议字段，表示下层协议类型，默认值：FFFF，支持的协议如下：\n\n            - 0800: IPv4\n            - 0806: ARP\n            - 8100: VLAN\n            - 8864: PPPoE\n            - 8863: PPPoE Discovery\n            - 86DD: IPv6\n            - 8808: Pause\n            - 8847: MPLS\n            - 88B8: Goose\n            - 8926: VNTag\n\n返回值:\n    dict or False: 返回一个字典，表示成功修改的字段名与实际修改的属性名之间的映射关系（例如 {'Ver': 'ver'}）。\n                   如果没有字段被成功修改，则返回False。\n\n示例:\n    robotframework:\n\n    .. code:: robotframework\n\n        | &{Attribute} | Edit Header Vntag | Stream=${Stream} | Level=0 | Ver=11 |\n        | Edit Modifier | Stream=${Stream} | Level=1 | Attribute=${Attribute}[Ver] | Type=Increment | Count=10 | Step=2 |\n\n注意事项:\n    - 此函数会直接修改流模板中对应VNTag头部的属性。\n    - 若未缓存头部信息，可能触发调用`get_stream_header`以获取并构建头部结构。",
  "TesterLibrary.Stream.Header.L2.common.edit_header_fibre_channel": "修改测试仪表流量模板中Fibre Channel报文头部的指定字段内容\n\n该函数用于对给定流量模板中的Fibre Channel（FC）报文头部进行部分或全部字段的修改。用户可以通过参数指定需要更新的字段及其值，未指定的字段将保持不变。\n\nArgs:\n\n    Stream (:obj:`StreamTemplate` 或 list of :obj:`StreamTemplate`): 测试仪表流量对象，类型为StreamTemplate，或者包含一个StreamTemplate对象的列表。\n        如果传入的是列表，则只使用第一个元素。该对象必须具有`handle`属性用于内部标识。\n\n    Level (int): 指定要修改的Fibre Channel头部在流量模板中所有Fibre Channel头部中的索引位置，默认值为0，表示第一个FC头部。\n        取值范围：0-65535\n\nKeyword Args (可选):\n\n    Rctl (hex): R_CTL字段值，十六进制格式，默认值：22，取值范围：00-FF\n\n    DestAddr (hex): 目的地址（Destination ID），长度为3字节的十六进制数，默认值：000000\n\n    Csctl (hex): 类特定控制字段（CS_CTL），默认值：00，取值范围：00-FF\n\n    SourceAddr (hex): 源地址（Source ID），长度为3字节的十六进制数，默认值：000000\n\n    Type (hex): 报文类型（Type），默认值：<AUTO>01，有效值仅限：01\n\n    FrameControl (hex): 帧控制字段（Frame Control），长度为3字节的十六进制数，默认值：380000\n\n    SeqID (hex): 序列标识符（Sequence ID），默认值：00，取值范围：00-FF\n\n    DataField (hex): 数据字段控制（Data Field Control），默认值：00，取值范围：00-FF\n\n    SeqCount (hex): 序列计数器（Sequence Count），默认值：0000，取值范围：0000-FFFF\n\n    OriginatorExchangeID (hex): 发起方交换ID（Originator Exchanger ID），默认值：0000，取值范围：0000-FFFF\n\n    ResponseExchangeID (hex): 响应方交换ID（Response Exchanger ID），默认值：0000，取值范围：0000-FFFF\n\n    ParaRelativeOffset (hex): 参数/相对偏移量字段（Parameters/Relative Offset），默认值：00000000，长度为4字节的十六进制数\n\nReturns:\n\n    dict or False: 返回一个字典，表示成功更新的字段名称与对应报文头部属性名之间的映射关系。例如：\n\n    {\n        'Rctl': 'rctl',\n        'DestAddr': 'destAddr',\n        'Csctl': 'csctl',\n        'SourceAddr': 'sourceAddr',\n        'Type': 'type',\n        'FrameControl': 'frameControl',\n        'SeqID': 'seqID',\n        'DataField': 'dataField',\n        'SeqCount': 'seqCount',\n        'OriginatorExchangeID': 'originatorExchangeID',\n        'ResponseExchangeID': 'responseExchangeID',\n        'ParaRelativeOffset': 'paraRelativeOffset'\n    }\n\n    如果没有任何字段被更新（即所有关键字参数都为None），则返回False。\n\nSide Effects:\n\n    - 会修改流量对象关联的Fibre Channel头部属性\n    - 内部调用`get_stream_header`方法，可能会查询并缓存该流量的头部对象\n\nExamples:\n    robotframework 示例：\n\n.. code:: robotframework\n\n    | &{Attribute} | Edit Header Fibre Channel | Stream=${Stream} | Level=0 | Rctl=FF |\n    | Edit Modifier | Stream=${Stream} | Level=1 | Attribute=${Attribute}[Rctl] | Type=Increment | Count=10 | Step=2 |",
  "TesterLibrary.Stream.Header.L2.control_word.edit_header_control_word": "Modifies specific fields of a Control Word (CW) header in a given stream at the specified level.\n\nThe function retrieves the CW headers associated with the provided stream and selects the one\nat the given level. If any of the optional parameters (Reserved, Flags, Fragment, Length, Sn)\nare provided, their corresponding field in the selected header is updated.\n\nParameters:\n    Stream (object): A stream object for which the Control Word headers need to be edited.\n                     It must have a 'handle' attribute that uniquely identifies the stream.\n                     If a list of streams is passed, only the first one will be used.\n    Level (int, optional): The index specifying which CW header to modify in case there are multiple\n                           CW headers in the stream. Defaults to 0. Range: 0-65535.\n    Reserved (bit, optional): Value to set for the reserved field ('rsvd') in the CW header.\n                              Default value: '0000'. Valid range: '0000'-'1111'.\n                              If None, this field remains unchanged.\n    Flags (bit, optional): Value to set for the flags field ('flags') in the CW header.\n                           Default value: '00'. Valid range: '00'-'11'.\n                           If None, this field remains unchanged.\n    Fragment (bit, optional): Value to set for the fragment identifier field ('frg') in the CW header.\n                              Default value: '00'. Valid range: '00'-'11'.\n                              If None, this field remains unchanged.\n    Length (int, optional): Value to set for the length field ('length') in the CW header.\n                            Default value: 0. Valid range: 0-63.\n                            If None, this field remains unchanged.\n    Sn (int, optional): Value to set for the sequence number field ('sn') in the CW header.\n                        Default value: 0. Valid range: 0-65535.\n                        If None, this field remains unchanged.\n\nReturns:\n    dict: A dictionary mapping the modified field names (as strings) to their respective attribute names\n          in the header object (e.g., {'Flags': 'flags'}). This indicates which fields were successfully updated.\n          If no fields were modified, returns False.\n\nSide Effects:\n    - Retrieves and caches the headers of the given stream if not already cached.\n    - Modifies the internal state of the selected CW header by updating its attributes based on the provided values.\n\nExamples:\n    .. code:: RobotFramework\n\n        | Edit Header Control Word | Stream=${Stream} | Level=0 | Flags=11 |",
  "TesterLibrary.Stream.Header.L2.fcoe.edit_header_els_flogi": "修改测试仪表流量模板中ELS FLOGI报文头部内容。\n\n该函数用于修改指定流量模板中的'elsflogi'类型报文头部的多个字段属性。在流量模板中可能存在多个ELS FLOGI头部，通过Level参数来选择要修改的具体头部。仅当提供了新的字段值（非None）时，才会进行修改操作。修改成功后返回包含所有被修改字段及其对应属性键的字典；如果未提供任何修改参数，则返回False。\n\n参数:\n\n    Stream (object): 包含ELS FLOGI头部的流量模板对象。该对象应具有唯一标识流的'handle'属性。若传入的是列表，则使用其中第一个元素。\n\n    Level (int, optional): 指定要修改的ELS FLOGI头部索引，默认为0（即第一个头部），取值范围：0-65535。\n\n    **kwargs: 可选的关键字参数，每个关键字对应ELS FLOGI头部的一个字段：\n\n        CommandCode (any): ELS命令码字段的新值。\n        \n        FcPhVersion (any): FC-PH版本字段的新值（已废弃）。\n        \n        BtobCredit (any): Buffer-to-buffer信用值的新值。\n        \n        CommonFeatures (any): 公共特性字段的新值。\n        \n        Bbscn (any): BB_SC_N字段的新值。\n        \n        BtobDataFieldSize (any): 接收数据字段大小的新值。\n        \n        Reserved (any): 保留字段的新值。\n        \n        PortName (any): 端口名称字段的新值。\n        \n        NodeName (any): 节点或交换机名称字段的新值。\n        \n        Class1serviceOptions (any): 类别1服务选项字段的新值。\n        \n        Class1InitatorControl (any): 类别1发起方控制字段的新值。\n        \n        Class1recipientControl (any): 类别1接收方控制字段的新值。\n        \n        Class1reserved1 (any): 类别1保留字段1的新值。\n        \n        Class1totalConcurrentSeq (any): 类别1并发序列总数的新值。\n        \n        Class1Nx_Porte2eCredit (any): 类别1 Nx_Port端到端信用值的新值。\n        \n        Class1reserved2 (any): 类别1保留字段2的新值。\n        \n        Class1openSeqPerExchange (any): 类别1每次交换打开的序列数的新值。\n        \n        Class1reserved3 (any): 类别1保留字段3的新值。\n        \n        Class2serviceOptions (any): 类别2服务选项字段的新值。\n        \n        Class2InitatorControl (any): 类别2发起方控制字段的新值。\n        \n        Class2recipientControl (any): 类别2接收方控制字段的新值。\n        \n        Class2reserved1 (any): 类别2保留字段1的新值。\n        \n        Class2totalConcurrentSeq (any): 类别2并发序列总数的新值。\n        \n        Class2Nx_Porte2eCredit (any): 类别2 Nx_Port端到端信用值的新值。\n        \n        Class2reserved2 (any): 类别2保留字段2的新值。\n        \n        Class2openSeqPerExchange (any): 类别2每次交换打开的序列数的新值。\n        \n        Class2reserved3 (any): 类别2保留字段3的新值。\n        \n        Class3serviceOptions (any): 类别3服务选项字段的新值。\n        \n        Class3InitatorControl (any): 类别3发起方控制字段的新值。\n        \n        Class3recipientControl (any): 类别3接收方控制字段的新值。\n        \n        Class3reserved1 (any): 类别3保留字段1的新值。\n        \n        Class3totalConcurrentSeq (any): 类别3并发序列总数的新值。\n        \n        Class3Nx_Porte2eCredit (any): 类别3 Nx_Port端到端信用值的新值。\n        \n        Class3reserved2 (any): 类别3保留字段2的新值。\n        \n        Class3openSeqPerExchange (any): 类别3每次交换打开的序列数的新值。\n        \n        Class3reserved3 (any): 类别3保留字段3的新值。\n        \n        Obsolete (any): 已废弃字段的新值。\n        \n        VendorVersionLevel (any): 厂商版本级别的新值。\n\n返回值:\n\n    dict or False: 如果有字段被修改，则返回一个字典，包含字段名与其在头部结构中的属性键的映射；如果没有字段被修改（所有参数均为None），则返回False。\n\n副作用:\n\n    - 修改与提供的流量对象关联的'elsflogi'头部属性。\n    - 若尚未缓存头部对象，则内部调用get_stream_header函数以获取并缓存头部对象。",
  "TesterLibrary.Stream.Header.L2.hdlc.edit_header_hdlc": "修改测试仪表流量模板中HDLC（高级数据链路控制）报文头部的指定字段内容。\n\n该函数用于编辑指定流量流中的某个HDLC头部的字段内容。流量中可能包含多个HDLC头部，通过Level参数选择要编辑的HDLC头部索引。支持编辑的字段包括Address、Value和Protocol。若未提供任何字段进行修改（即所有可选参数为None），则返回False。\n\n参数:\n    Stream (:obj:`StreamTemplate`): 测试仪表流量模板对象，必须包含一个'handle'属性，用于唯一标识该流量流。若传入列表，则使用第一个元素。\n\n    Level (int, optional): 要编辑的HDLC头部在该流量中所有HDLC头部中的索引位置，用于存在多个HDLC头部时选择特定头部进行修改，默认值为0。\n\n    **kwargs (可选): 支持以下关键字参数：\n\n        Address (hex, optional): 设置HDLC头部的地址字段，十六进制格式，取值范围00-FF，默认值为0F。\n\n        Value (hex, optional): 设置HDLC头部的值字段，十六进制格式，取值范围00-FF，默认值为00。\n\n        Protocol (hex, optional): 设置HDLC头部的协议字段，十六进制格式，取值如下：\n\n            - 0800: IP协议\n            - 0281: MPLS协议\n            - 0: 自定义协议\n\n返回值:\n    dict or bool: 若成功修改至少一个字段，则返回字典，表示修改的字段名与对应对象属性名称之间的映射关系（如 {'Address': 'address', 'Protocol': 'protocol'}）。若未修改任何字段（即没有提供任何有效参数），则返回False。\n\n示例:\n    .. code:: RobotFramework\n\n        | Edit Header Hdlc | Stream=${Stream} | Level=0 | Address=FF |",
  "TesterLibrary.Stream.Header.L2.hsr.edit_header_hsr_tag": "修改测试仪表流量模板中指定层级的HSR Tag报文头部字段内容。\n\n该函数用于编辑给定流量模板中类型为'hsrtag'的报文头部的特定字段。首先会从提供的Stream对象中获取所有报文头部，并过滤出所有'hsrtag'类型的头部。然后根据Level参数选择要修改的头部索引，如果提供了PathId、LsduSize、SeqNum或Protocol参数，则更新对应的字段值。\n\nParameters:\n    Stream (:obj:`StreamTemplate`): 测试仪表流量模板对象，必须具有唯一标识流的'handle'属性。若传入列表，则使用第一个元素。\n    Level (int, optional): 要修改的'hsrtag'类型头部在过滤后的列表中的索引位置，默认值为0。\n    PathId (bit, optional): PathId字段的新值，默认值为'0001'，取值范围：0000-1111。\n    LsduSize (int, optional): LSDU大小字段的新值，默认值为0，取值范围：0-4095。\n    SeqNum (int, optional): 序列号字段的新值，默认值为0，取值范围：0-65535。\n    Protocol (hex, optional): 协议字段的新值，默认值为'0800'，支持以下协议类型：\n\n        0800: IPv4\n\n        0806: ARP\n\n        8100: VLAN\n\n        8864: PPPoE\n\n        8863: PPPoE Discovery\n\n        86DD: IPv6\n\n        8808: Pause\n\n        8847: MPLS\n\n        88B8: Goose\n\n        8926: VNTag\n\n        F1C1: RTag\n\n        892F: HSRTag\n\n        88FB: PRPTag\n\nReturns:\n    dict or bool: 如果成功修改了字段，返回一个字典表示修改的字段名与对应属性名之间的映射（如{'PathId': 'pathid'}）。如果没有提供任何修改参数，则返回False。\n\nRaises:\n    ContinuableFailure: 如果底层调用失败则抛出此异常，表明函数执行未成功。\n\nSide Effects:\n    - 修改内存中选定'hsrtag'类型报文头部对象的一个或多个属性值。\n\nExamples:\n    .. code:: RobotFramework\n\n        | Edit Header Hsr Tag | Stream=${Stream} | Level=0 | SeqNum=10 |",
  "TesterLibrary.Stream.Header.L2.isis.edit_header_isis_csnp": "修改测试仪表流量模板中IS-IS L1/L2 CSNP报文头部内容\n\n该函数用于编辑指定流量模板中的IS-IS Level 1或Level 2 CSNP（Complete Sequence Number PDU）报文头部字段。支持对多个CSNP头部中的某一个进行编辑，通过`Level`参数选择。\n\nArgs:\n\n    Stream (:obj:`StreamTemplate`):: 测试仪表流量对象，类型为StreamTemplate对象，代表需要编辑的流量模板。\n\n    Level (int): 要编辑的CSNP头部在流量模板中所有IS-IS CSNP头部中的索引位置，默认值为0。取值范围：0-65535。\n\nKeyword Args:\n\n    InterRoutingProtocolDiscriminator (int): 域内路由协议标识符，默认值：<AUTO>83\n\n    LengthIndicator (int): 长度指示器，默认值：<AUTO>33\n\n    VersionIdExtend (int): 版本/协议ID扩展，默认值：<AUTO>1\n\n    IdLength (int): ID长度，默认值：<AUTO>6\n\n    Reserved1 (int): 保留字段1，默认值：3，取值范围：0-7\n\n    PDUType (int): PDU类型，默认值：<AUTO>24，取值范围：0-31\n\n    Version (int): 版本号，默认值：1，取值范围：0-255\n\n    Reserved2 (int): 保留字段2，默认值：3，取值范围：0-255\n\n    MaxAreaAddress (int): 最大面积地址数，默认值：3，取值范围：0-3\n\n    PDULength (int): PDU长度，默认值：<AUTO>33\n\n    LspId (hex): LSP ID，默认值：00000000000000，格式为7字节十六进制数\n\n    StartLspId (hex int): 起始LSP ID，默认值：0000000000000000，格式为8字节十六进制数\n\n    EndLspId (hex int): 结束LSP ID，默认值：0000000000000000，格式为8字节十六进制数\n\n    CsnpDataTlvOptionHeader (list): 可选TLV字段，可插入以下选项：\n\n        IsIsLspEntries\n\n        AuthentionInfo\n\nReturns:\n\n    dict: 返回被修改字段及其在报文头部结构中的路径，例如::\n\n        {\n            'InterRoutingProtocolDiscriminator': 'l1csnpCommonHeader.InterRoutingProtocolDiscriminator',\n            'LengthIndicator': 'l1csnpCommonHeader.lengthIndicator',\n            ...\n        }\n\n    若未修改任何字段，则返回空字典。\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${Stream} | add_stream | Port=${Port} |\n        | ${HeaderTypes} | Create List | l1csnpHeader |\n        | Create Stream Header | Stream=${Stream} | HeaderTypes=${HeaderTypes} |\n        | Edit Header Isis csnp | Stream=${Stream} | Level=0 | version=10 | maxAreaAddress=3 |",
  "TesterLibrary.Stream.Header.L2.isis.edit_header_isis_tlv_header": "修改测试仪表流量模板中ISIS协议报文的TLV（Type-Length-Value）字段内容。\n\n该函数用于编辑指定流对象中ISIS协议头部中的特定TLV字段。支持多种ISIS报文类型，包括L1/L2层级的CSNP、PSNP、Hello、LSP等，以及P2P Hello报文。通过`Option`参数可以指定要编辑的TLV字段类型，而`Level`和`Index`则用于定位具体要修改的头部和TLV条目。\n\n参数：\n    Stream (:obj:`StreamTemplate` 或 list): 测试仪表流对象或包含一个流对象的列表，必须具有`handle`属性以唯一标识该流。\n    Option (str): 要编辑的TLV字段名称，不同报文类型支持不同的选项：\n        - ISIS L1/L2 CSNP 支持：`IsIsLspEntries`, `AuthentionInfo`\n        - ISIS L1/L2 Hello 支持：`IsIsAreaAddress`, `Padding`, `AuthentionInfo`, `ProtocolSupport`, `IpInterfaceAddress`, `Neighbor`, `RestartSignal`, `Ipv6InterfaceAddress`\n        - ISIS L1/L2 LSP 支持：`IsIsAreaAddress`, `IsIsReachability`, `ExtendedReachability`, `IsIsIpInterReachability`, `IsIsProtocolsSupported`, `IsIsIPExternalReachability`, `IpInterfaceAddress`, `Ipv6InterfaceAddress`, `IsIsIpv6Reachability`\n        - ISIS P2P Hello 支持：`Padding`, `AreaAddress`, `AuthentionInfo`, `ProtocolSupport`, `IpInterfaceAddress`, `Ipv6InterfaceAddress`, `RestartSignal`, `P2pAdjacencyState`\n    Level (int, optional): 指定在所有匹配的ISIS头部中选择第几个头部进行操作，默认为0，取值范围：0-65535。\n    Index (int, optional): 指定在所选头部中操作哪一个TLV条目，默认为0，取值范围：0-65535。\n    **kwargs: 依赖于`Option`的具体参数，常见参数包括：\n        - TlvCode (int): TLV类型代码，默认由系统自动分配。\n        - Length / TlvLength (int): TLV长度字段。\n        - 各种协议相关的字段如认证信息、地址列表、邻居信息、度量值等。\n\n返回值：\n    dict: 包含操作结果的字典，例如包含更新后的TLV字段路径等信息。\n\n示例：\n    .. code:: RobotFramework\n\n        | ${Stream} | add_stream | Port=${Port} |\n        | ${HeaderTypes} | Create List | l1csnpHeader |\n        | Create Stream Header | Stream=${Stream} | HeaderTypes=${HeaderTypes} |\n        | Edit Header Isis L1csnp | Stream=${Stream} | Level=0 | version=10 | maxAreaAddress=3 |\n        | Edit Header Isis Tlv Header | Stream=${Stream} | Option=IsIsLspEntries | Index=0 | lspEntries=1 |\n\n说明：\n    该函数会查找与给定流关联的所有ISIS相关头部（如Hello、LSP、CSNP等），并根据`Level`参数选择对应位置的头部，然后调用其`editTlvHeader`方法来修改具体的TLV字段。关键字参数`**kwargs`将直接传递给底层头部对象的`editTlvHeader`方法，因此具体可用的关键字参数取决于所选的`Option`。",
  "TesterLibrary.Stream.Header.L2.isis.edit_header_isis_lsp_entry": "修改测试仪表流量模板中ISIS L1/L2 CSNP/PSNP报文中指定TLV和LSP条目的内容。\n\n该函数用于编辑流模板中ISIS协议的L1/L2 CSNP或PSNP头部内的LSP（链路状态协议）条目。通过指定流对象、头部层级、TLV索引以及LSP条目索引，可以定位到具体的LSP条目并对其进行修改。\n\n参数:\n    Stream (object 或 list): 流模板对象，或包含单个流模板对象的列表。如果传入列表，则仅使用第一个元素。\n                             该对象需具备 'handle' 属性，作为其在系统中的唯一标识。\n    Level (int, optional): 指定要修改的 ISIS L1/L2 CSNP/PSNP 头部在其同类头部列表中的索引，默认为 0。\n                           合法范围：0-65535。\n    TlvIndex (int, optional): 要修改的 TLV 在头部内 TLV 列表中的索引，默认为 0。\n                              合法范围：0-65535。\n    LspIndex (int, optional): 要修改的 LSP 条目在其所属 TLV 内的索引，默认为 0。\n                              合法范围：0-65535。\n\n关键字参数（可选字段）:\n    RemainTime (int): LSP 条目剩余生存时间，单位为秒，默认值为 1，合法范围：0-65535。\n    LspId (hex): LSP 标识符，默认值为 0000000000000001，合法范围：0000000000000001 - FFFFFFFFFFFFFFFF。\n    LspSeqcenceNum (hex): LSP 序列号，默认值为 00000001，合法范围：00000001 - FFFFFFFF。\n    Checksum (hex): 校验和，默认值为 <AUTO>0000，表示由系统自动计算。\n\n返回值:\n    dict: 包含编辑结果的字典，键为字段名，值为字段对应的路径表达式，例如：\n        {\n            'RemainTime': 'CsnpDataHeader.CsnpDataTlvOptionHeader.csnpisIsTlvs_0.isIsLspEntries.lspEntries.LSPEntry_1.remainTime'\n        }\n    如果操作失败，返回 False 并抛出 ContinuableFailure 异常。\n\n副作用:\n    - 调用 get_stream_header 函数可能会查询并缓存当前流的头部对象。\n    - 修改指定 LSP 条目的内部状态，通过调用对应头部的 editLspEntry 方法实现。\n\n示例:\n    .. code:: RobotFramework\n\n        | ${Stream} | add_stream | Port=${Port} |\n        | ${HeaderTypes} | Create List | l1csnpHeader |\n        | Create Stream Header | Stream=${Stream} | HeaderTypes=${HeaderTypes} |\n        | Edit Header Isis L1csnp | Stream=${Stream} | Level=0 | version=10 | maxAreaAddress=3 |\n        | Edit Header Isis Tlv Header | Stream=${Stream} | Option=${Option} | Index=0 | lspEntries=1 |\n        | Edit Header IsisLsp Entry | Stream=${Stream} | TlvIndex=0 | LspIndex=0 | remainTime=10",
  "TesterLibrary.Stream.Header.L2.isis.edit_header_isis_l1l2_hello": "修改测试仪表流量模板中IS-IS L1/L2 Hello报文头部内容。\n\n该函数用于修改指定流量模板中的IS-IS协议L1或L2层级的Hello报文头部字段。可通过参数指定要修改的各个协议字段，包括常规头部字段和TLV扩展字段。\n\nArgs:\n\n    Stream (:obj:`StreamTemplate`): 测试仪表流量模板对象，必须包含有效的handle标识符；若传入多个流，仅第一个会被处理\n\n    Level (int): 要编辑的IS-IS Hello头部在当前流量模板中所有IS-IS头部列表中的索引位置，默认值：0，取值范围：0-65535\n\nKeyword Args:\n\n    InterRoutingProtocolDiscriminator (int): 域内路由协议标识符，默认值：<AUTO>83\n\n    LengthIndicator (int): 长度指示器，默认值：<AUTO>33\n\n    VersionIdExtend (int): 协议版本/ID扩展，默认值：<AUTO>1\n\n    IdLength (int): 系统ID长度，默认值：<AUTO>6\n\n    CommonReserved1 (int): 公共保留位1，默认值：3，取值范围：0-7\n\n    PDUType (int): 协议数据单元类型，默认值：<AUTO>24，取值范围：0-31\n\n    Version (int): 协议版本号，默认值：1，取值范围：0-255\n\n    CommonReserved2 (int): 公共保留位2，默认值：3，取值范围：0-255\n\n    MaxAreaAddress (int): 最大区域地址数，默认值：3，取值范围：0-3\n\n    FixedReserve1 (int): 固定保留位1，默认值：0，取值范围：0-63\n\n    CircuitType (int): 电路类型，默认值：1，取值范围：1-3\n\n    SenderSystemID (hex): 发送方系统ID（6字节），默认值：000000000001\n\n    HolderTimer (int|hex): 保持定时器，L1默认值：51（十进制）；L2默认值：0033（十六进制，2字节）\n\n    PDULength (int): PDU总长度，默认值：<AUTO>27，取值范围：0-65535\n\n    FixedReserve2 (int): 固定保留位2，默认值：0，取值范围：0-1\n\n    Priority (int): 路由优先级，默认值：0，取值范围：0-127\n\n    DesignatedSystemID (hex): 指定系统ID（LAN ID，7字节），默认值：00000000010001\n\n    IsIsTlv (list): TLV可选字段列表，可选项包括：\n\n        - IS-IS Area Address (L1) / Area Address (L2)\n        - Padding\n        - Authentication Info\n        - Protocol Support\n        - IP Interface Address\n        - Neighbor\n        - Restart Signal\n        - IPv6 Interface Address\n\nReturns:\n\n    dict: 返回一个字典，键为被修改的字段名，值为其在内部结构中的路径表示。例如::\n\n        {\n            'InterRoutingProtocolDiscriminator': 'InterRoutingProtocolDiscriminator',\n            'LengthIndicator': 'lengthIndicator',\n            'VersionIdExtend': 'versionIdExtend',\n            ...\n        }\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${Stream} | add_stream | Port=${Port} |\n        | ${HeaderTypes} | Create List | l1helloHeader |\n        | Create Stream Header | Stream=${Stream} | HeaderTypes=${HeaderTypes} |\n        | Edit Header Isis hello | Stream=${Stream} | Level=0 | version=10 | maxAreaAddress=3 |",
  "TesterLibrary.Stream.Header.L2.isis.edit_header_isis_area_address_entry": "修改测试仪表流量模板中ISIS L1/L2/P2p Hello/Lsp报文中TLV头部的Area Address Entry内容。\n\n该函数用于在指定的流模板中的ISIS L1/L2/P2p Hello/Lsp报文头部，编辑特定TLV字段内的Area Address Entry节点。根据Level参数定位到具体的头部，再通过TlvIndex和EntryIndex找到对应的Area Address Entry节点，并使用提供的关键字参数进行修改。\n\n参数:\n    Stream (:obj:`StreamTemplate` 或 list): 流量模板对象或包含单个流量模板对象的列表。如果传入列表，则仅使用第一个元素。\n                                          流量模板对象必须具有唯一标识其的 'handle' 属性。\n    Level (int, optional): 指定要修改的头部在其所属类型头部列表中的索引，默认值为0，取值范围：0-65535。\n    TlvIndex (int, optional): 要修改的TLV字段在其所属头部中的索引，默认值为0，取值范围：0-65535。\n    EntryIndex (int, optional): 要修改的Area Address Entry节点在对应TLV字段中的索引，默认值为0，取值范围：0-65535。\n    **kwargs: 任意数量的关键字参数，用于传递额外的配置信息，如：\n        - TlvLength (hex): Area Address Entry的长度，默认值为1，取值范围：1-255。\n        - AreaAddress (hex): Area Address的具体值，默认值为'00'，最大长度为255字节。\n\n返回值:\n    dict or bool: 如果编辑成功，返回一个包含操作结果的字典；如果失败，返回False。\n\n示例:\n    .. code:: RobotFramework\n\n        | ${Stream} | add_stream | Port=${Port} |\n        | ${HeaderTypes} | Create List | l1csnpHeader |\n        | Create Stream Header | Stream=${Stream} | HeaderTypes=${HeaderTypes} |\n        | Edit Header Isis L1hello | Stream=${Stream} | Level=0 | version=10 | maxAreaAddress=3 |\n        | Edit Header Isis Tlv Header | Stream=${Stream} | Option=${Option} | Index=0 | lspEntries=1 |\n        | Edit Header Isis Area Address Entry | Stream=${Stream} | TlvIndex=0 | EntryIndex=0 | remainTime=10 |\n\n注意事项:\n    - 该函数内部调用get_stream_header以获取并缓存与流相关的头部对象。\n    - 修改的是流模板中的头部结构，不会影响已发送的数据包，除非重新应用该模板。",
  "TesterLibrary.Stream.Header.L2.isis.edit_header_isis_nlpid_entry": "修改测试仪表流量模板中ISIS L1/L2 Hello/LSP 或 P2P Hello 报文的 TLV 头部中的 NLPID (Network Layer Protocol Identifier) Entry 内容。\n\n该函数用于编辑指定流模板中某个 ISIS 协议报文头部（如 L1/L2 Hello、LSP 或 P2P Hello）内的 NLPID Entry 字段。通过 Level 参数选择对应的 ISIS 头部层级，TlvIndex 选择具体的 TLV 结构，NlpidIndex 指定要修改的 NLPID Entry 节点位置，并支持传入字段值进行更新。\n\n参数说明：\n    Stream (:obj:`StreamTemplate` 或 list): 流模板对象或包含一个流对象的列表，表示待修改的流量模板。若为列表，则仅使用第一个元素。\n    Level (int, optional): 指定在所有 ISIS 相关头部中选择第几个头进行操作，默认为 0，取值范围：0-65535。\n    TlvIndex (int, optional): 在选定的 ISIS 头部中选择第几个 TLV 进行编辑，默认为 0，取值范围：0-65535。\n    NlpidIndex (int, optional): 在选定的 TLV 中选择第几个 NLPID Entry 节点进行修改，默认为 0，取值范围：0-65535。\n    **kwargs: 可选的关键字参数，传递给底层方法 editProtocolsSupported，例如：\n        - TlvLength (hex): TLV 长度，默认值：1，取值范围：1-255\n        - EntryId (hex): 区域地址（Area Address），默认值：0x01，长度范围：0-255 字节\n\n返回值：\n    dict: 如果编辑成功，返回包含字段映射信息的字典，例如：\n        {\n            'TlvLength': 'l1HelloMsg.isIsTlv.l1HelloisIsTlvs_3.protocolSupport.NlPIDEntriesField.nlPIDEntry_0.tlvLength'\n        }\n    如果操作失败，返回 False（此时会抛出异常 ContinuableFailure）。\n\n示例：\n    .. code:: RobotFramework\n\n        | ${Stream} | add_stream | Port=${Port} |\n        | ${HeaderTypes} | Create List | l1csnpHeader |\n        | Create Stream Header | Stream=${Stream} | HeaderTypes=${HeaderTypes} |\n        | Edit Header Isis L1hello | Stream=${Stream} | Level=0 | version=10 | maxAreaAddress=3 |\n        | Edit Header Isis Tlv Header | Stream=${Stream} | Option=${Option} | Index=0 | lspEntries=1 |\n        | Edit Header Isis Nlpid Entry | Stream=${Stream} | TlvIndex=0 | NlpidIndex=0 | remainTime=10 |\n\n副作用：\n    - 若未缓存头部名称，可能会调用 get_stream_header 获取头部信息。\n    - 修改流模板内部结构中对应 TLV 的 NLPID Entry 值。",
  "TesterLibrary.Stream.Header.L2.isis.edit_header_isis_lsp": "修改测试仪表流量模板中IS-IS L1/L2 LSP报文头部内容。\n\n该函数用于编辑指定流量流中的IS-IS协议中的L1或L2 Link State PDU (LSP)头部字段。根据传入的Level参数，选择对应的LSP头部进行修改，并支持设置多个LSP头部字段的值。\n\nArgs:\n\n    Stream (:obj:`StreamTemplate`): 测试仪表流量对象，类型为StreamTemplate或其子类对象。该对象应包含一个有效的handle属性，用于标识对应的流量模板。\n\n    Level (int, optional): 指定要修改的LSP头部在流中的索引位置（从0开始）。默认值为0，取值范围：0-65535。\n\nKeyword Args:\n\n    InterRoutingProtocolDiscriminator (int): 域内路由协议标识符，默认值：<AUTO>83，取值范围：0x00 - 0xFF\n\n    LengthIndicator (int): 长度指示器，表示整个IS-IS PDU的长度，默认值：<AUTO>27，取值范围：0-255\n\n    VersionIdExtend (int): 版本/协议ID扩展，默认值：<AUTO>1，取值范围：0-255\n\n    IdLength (int): 系统ID长度，默认值：<AUTO>6，取值范围：0-255\n\n    Reserved1 (int): 保留字段1，默认值：0，取值范围：0-7\n\n    PDUType (int): PDU类型，默认值：<AUTO>18，取值范围：0-31\n\n    Version (int): 协议版本号，默认值：1，取值范围：0-255\n\n    Reserved2 (int): 保留字段2，默认值：0，取值范围：0-255\n\n    MaxAreaAddress (int): 最大区域地址数，默认值：3，取值范围：0-3\n\n    PDULength (int): PDU长度字段（在LSP数据单元头部），默认值：0，取值范围：0-65535\n\n    RemainTime (int): 剩余生存时间，默认值：1，取值范围：1-65535\n\n    LspId (str, hex): LSP标识符，8字节十六进制字符串，默认值：\"0000000000000000\"\n\n    SeqcenceNum (str, hex): 序列号，4字节十六进制字符串，默认值：\"00000000\"\n\n    Checksum (str, hex): 校验和，2字节十六进制字符串，默认值：<AUTO>0000\n\n    PartitionRepair (int): 分区修复标志位，默认值：0，取值范围：0或1\n\n    Attchment (int): 附加标志，默认值：0，取值范围：0-15\n\n    OverloadBit (int): 过载标志位，默认值：0，取值范围：0或1\n\n    TypeOfIntermediateSystem (int): 中间系统类型，默认值：0，取值范围：0-3\n\n    LspisIsTlvOptionSet (list of str): TLV选项集合，可选值包括：\n\n        'isIsAreaAddress'\n\n        'isIsReachability'\n\n        'extendedReachability'\n\n        'isIsIpInterReachability'\n\n        'isIsProtocolsSupported'\n\n        'isIsIPExternalReachability'\n\n        'ipInterfaceAddress'\n\n        'Ipv6InterfaceAddress'\n\n        'isIsIpv6Reachability'\n\nReturns:\n\n    dict: 返回一个字典，映射每个被修改的字段名到其在头部结构中的路径。例如::\n\n        {\n            'InterRoutingProtocolDiscriminator': 'InterRoutingProtocolDiscriminator',\n            'LengthIndicator': 'lengthIndicator',\n            ...\n        }\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${Stream} | add_stream | Port=${Port} |\n        | ${HeaderTypes} | Create List | l1helloHeader |\n        | Create Stream Header | Stream=${Stream} | HeaderTypes=${HeaderTypes} |\n        | Edit Header Isis lsp | Stream=${Stream} | Level=0 | version=10 | maxAreaAddress=3 |",
  "TesterLibrary.Stream.Header.L2.isis.edit_header_isis_metric_entry": "修改测试仪表流量模板中ISIS L1/L2 LSP报文的TLV字段中的Metric Entry内容。\n\n该函数用于编辑指定流量模板中某个IS-IS Level 1或Level 2 LSP头部下的特定TLV块内的Metric Entry字段。它首先获取流量对象的所有头部，并筛选出所有IS-IS L1/L2 LSP头部，根据`Level`参数选择对应的LSP头部，然后在该头部中定位到由`TlvIndex`和`EntryIndex`指定的Metric Entry，并根据传入的关键字参数对其进行修改。\n\n### 参数说明：\n\n- **Stream** (`object` or `list`): 流量对象或包含流量对象的列表。若传入列表，则使用第一个元素。该对象必须包含一个`handle`属性，用于在系统中唯一标识该流量。\n- **Level** (`int`, optional): 指定要操作的IS-IS LSP头部索引（在所有IS-IS L1/L2 LSP头部中的位置），默认值为0。\n- **TlvIndex** (`int`, optional): 指定要操作的TLV字段在IS-IS LSP头部中的索引，默认值为0。\n- **EntryIndex** (`int`, optional): 指定要操作的Metric Entry在TLV字段内的索引，默认值为0。\n- **\\*\\*kwargs**: 其他用于修改Metric Entry的参数，支持如下字段：\n  - `Reserved` (`hex`): Distribution标志位，默认值为0，取值范围：0-1。\n  - `DefaultMetricIEbit` (`int`): Default Metric I/E Bit，默认值为0，取值范围：0-1。\n  - `DefaultMetric` (`int`): Default Metric值，默认值为0，取值范围：0-63。\n  - `DelayMetricsbit` (`int`): Delay Metric S Bit，默认值为0，取值范围：0-1。\n  - `DelayMetricSBit` (`int`): Delay Metric R Bit，默认值为0，取值范围：0-1。\n  - `DelayMetric` (`int`): Delay Metric值，默认值为0，取值范围：0-63。\n  - `ExpenseMetricsBit` (`int`): Expense Metric S Bit，默认值为0，取值范围：0-1。\n  - `ExpenseMetricIEbit` (`int`): Expense Metric R Bit，默认值为0，取值范围：0-1。\n  - `ExpenseMetric` (`int`): Expense Metric值，默认值为0，取值范围：0-63。\n  - `ErrorMetricsBit` (`int`): Error Metric S Bit，默认值为0，取值范围：0-1。\n  - `ErrorMetricIEbit` (`int`): Error Metric R Bit，默认值为0，取值范围：0-1。\n  - `ErrorMetric` (`int`): Error Metric值，默认值为0，取值范围：0-63。\n  - `IsNeighbor` (`hex`): IS Neighbor地址，默认值为`00000000000000`，长度为7字节。\n\n### 返回值：\n\n- **dict or False**: 如果编辑成功，返回一个字典表示各字段的路径映射；如果失败，返回`False`。\n\n### 异常处理：\n\n- 若函数执行失败（返回`False`），则抛出`ContinuableFailure`异常。\n\n### 示例代码：\n\n```robotframework\n| ${Stream} | add_stream | Port=${Port} |\n| ${HeaderTypes} | Create List | l1csnpHeader |\n| Create Stream Header | Stream=${Stream} | HeaderTypes=${HeaderTypes} |\n| Edit Header Isis L1lsp | Stream=${Stream} | Level=0 | version=10 | maxAreaAddress=3 |\n| Edit Header Isis Tlv Header | Stream=${Stream} | Option=${Option} | Index=0 | lspEntries=1 |\n| Edit Header Isis Metric Entry | Stream=${Stream} | TlvIndex=0 | EntryIndex=0 | errorMetricIEbit=1 |\n```\n\n### 注意事项：\n\n- 该函数依赖底层库`renix`实现具体功能调用。\n- 修改操作会影响流量模板内部状态，可能影响后续发送的数据包结构。",
  "TesterLibrary.Stream.Header.L2.isis.edit_header_isis_sub_tlv": "修改测试仪表流量模板中ISIS L1/L2 LSP报文的TLV头部中的子TLV（Sub TLV）内容。\n\n该函数用于编辑指定流中某个ISIS L1/L2 LSP头部的特定TLV下的子TLV字段。用户可以通过参数选择不同的子TLV类型，并通过关键字参数配置其具体字段值。\n\n### 参数说明\n\n- **Stream** (:obj:`StreamTemplate`):  \n  要修改的测试仪表流量对象，必须包含一个唯一标识流的 `handle` 属性。如果传入的是流列表，则使用第一个流。\n\n- **SubTlv** (str):  \n  要编辑的子TLV类型名称。支持以下类型：\n\n  - `adGroupSubtlv`\n  - `ipv4InterfaceAddressSubtlv`\n  - `ipv4NeighborAddressSubtlv`\n  - `maxLinkBandwidthSubtlv`\n  - `reservableLinkBandwidthSubtlv`\n  - `unReservedBandwidthSubtlv`\n  - `interfaceIpv6Subtlv`\n  - `neigbhorIpv6Subtlv`\n\n- **Level** (int, optional):  \n  指定在流模板中第几个ISIS L1/L2 LSP头部中进行修改，默认为0（第一个），取值范围：0~65535。\n\n- **TlvIndex** (int, optional):  \n  指定在流模板中第几个ISIS TLV头部下进行修改，默认为0（第一个），取值范围：0~65535。\n\n- **SubTlvIndex** (int, optional):  \n  指定在所选TLV下第几个子TLV节点进行修改，默认为0（第一个），取值范围：0~65535。\n\n- **\\*\\*kwargs** (dict):  \n  根据所选的 SubTlv 类型提供对应的字段及值。每个字段都有默认值和取值范围限制，例如：\n\n  - `TlvCode`: 子TLV的类型字段，默认值根据子TLV类型而定。\n  - `TlvLength`: 子TLV长度字段，默认值根据子TLV类型而定。\n  - 特定子TLV的其他字段如 `AdminGroupValue`, `Ipv4InterfaceAddressValue`, `MaxBandwidthValue` 等，详见示例和参数描述。\n\n### 返回值\n\n- 返回一个字典，表示成功修改后的子TLV字段及其路径信息。例如：\n  \n  ```python\n  {\n      'TlvCode': 'LspDataUnitHeader.LspisIsTlvOptionSet.lspisIsTlvs_2.extendedReachability.iisNeighborSubTlv.iisNeighborSubContainer_0.adGroupSubtlv.tlvCode',\n      'TlvLength': 'LspDataUnitHeader.LspisIsTlvOptionSet.lspisIsTlvs_2.extendedReachability.iisNeighborSubTlv.iisNeighborSubContainer_0.adGroupSubtlv.tlvLength',\n      'AdminGroupValue': 'LspDataUnitHeader.LspisIsTlvOptionSet.lspisIsTlvs_2.extendedReachability.iisNeighborSubTlv.iisNeighborSubContainer_0.adGroupSubtlv.adminGroupValue'\n  }\n  ```\n\n- 如果操作失败，返回 `False` 并抛出异常。\n\n### 示例\n\n```robotframework\n| ${Stream} | add_stream | Port=${Port} |\n| ${HeaderTypes} | Create List | l1csnpHeader |\n| Create Stream Header | Stream=${Stream} | HeaderTypes=${HeaderTypes} |\n| Edit Header Isis L1lsp | Stream=${Stream} | Level=0 | version=10 | maxAreaAddress=3 |\n| Edit Header Isis Tlv Header | Stream=${Stream} | Option=${Option} | Index=0 | lspEntries=1 |\n| Edit Header Isis Metric Entry | Stream=${Stream} | TlvIndex=0 | EntryIndex=0 | errorMetricIEbit=1 |\n```",
  "TesterLibrary.Stream.Header.L2.isis.edit_header_isis_internal_metric_entry": "修改测试仪表流量模板中ISIS L1/L2 LSP报文内TLV的Metric Entry内容。\n\n该函数用于编辑指定流模板中IS-IS协议报文头部内的内部度量条目（Internal Metric Entry），适用于Level 1或Level 2 LSP报文。通过指定TLV索引和Metric Entry索引，可以定位并修改特定的Metric Entry字段。\n\n参数：\n    Stream (object or list): 要操作的流量模板对象，类型为StreamTemplate；如果传入列表，则使用第一个元素。\n    Level (int, optional): IS-IS头部层级索引，0表示第一个Level 1 LSP头部，默认值：0，取值范围：0-65535。\n    TlvIndex (int, optional): TLV块在IS-IS头部中的索引，标识要修改的TLV位置，默认值：0，取值范围：0-65535。\n    EntryIndex (int, optional): Metric Entry在TLV内的索引，标识要修改的具体Metric Entry节点，默认值：0，取值范围：0-65535。\n    **kwargs: 可选的关键字参数，用于设置Metric Entry的各项字段值：\n        - Reserved (hex): Distribution标志位，取值范围：0-1，默认值：0。\n        - DefaultMetricIEbit (int): 默认度量I/E Bit，取值范围：0-1，默认值：0。\n        - DefaultMetric (int): 默认度量值，取值范围：0-63，默认值：0。\n        - DelayMetricsbit (int): 延迟度量S Bit，取值范围：0-1，默认值：0。\n        - DelayMetricSBit (int): 延迟度量R Bit，取值范围：0-1，默认值：0。\n        - DelayMetric (int): 延迟度量值，取值范围：0-63，默认值：0。\n        - ExpenseMetricsBit (int): 开销度量S Bit，取值范围：0-1，默认值：0。\n        - ExpenseMetricIEbit (int): 开销度量R Bit，取值范围：0-1，默认值：0。\n        - ExpenseMetric (int): 开销度量值，取值范围：0-63，默认值：0。\n        - ErrorMetricsBit (int): 错误度量S Bit，取值范围：0-1，默认值：0。\n        - ErrorMetricIEbit (int): 错误度量R Bit，取值范围：0-1，默认值：0。\n        - ErrorMetric (int): 错误度量值，取值范围：0-63，默认值：0。\n        - IpAddress (str): IP地址，有效IPv4格式，默认值：'192.168.0.2'。\n        - SubMask (hex): 子网掩码，长度为4字节，默认值：'00000000'。\n\n返回值：\n    dict: 如果成功修改，返回一个字典，包含每个字段对应的数据模型路径字符串。例如:\n        {\n            'Reserved': 'LspDataUnitHeader.LspisIsTlvOptionSet.lspisIsTlvs_3.isIsIpInterReachability.internalmetricEntries.internalMetricEntry_1.reserved',\n            ...\n            'SubMask': 'LspDataUnitHeader.LspisIsTlvOptionSet.lspisIsTlvs_3.isIsIpInterReachability.internalmetricEntries.internalMetricEntry_1.subMask'\n        }\n    bool: 如果操作失败或底层方法未返回结果，则返回False。\n\n副作用：\n    - 修改了流模板中IS-IS头部指定TLV下的Metric Entry内容。\n    - 若相关头部信息尚未加载，可能触发查询并缓存相关结构数据。\n\n示例：\n    .. code:: RobotFramework\n\n        | ${Stream} | add_stream | Port=${Port} |\n        | ${HeaderTypes} | Create List | l1csnpHeader |\n        | Create Stream Header | Stream=${Stream} | HeaderTypes=${HeaderTypes} |\n        | Edit Header Isis L1lsp | Stream=${Stream} | Level=0 | version=10 | maxAreaAddress=3 |\n        | Edit Header Isis Tlv Header | Stream=${Stream} | Option=${Option} | Index=0 | lspEntries=1 |\n        | Edit Header Isis Internal Metric Entry | Stream=${Stream} | TlvIndex=0 | EntryIndex=0 | errorMetricIEbit=1",
  "TesterLibrary.Stream.Header.L2.isis.edit_header_isis_external_metric_entry": "修改测试仪表流量模板中IS-IS L1/L2 LSP报文中的TLV字段下的外部度量条目（External Metric Entry）内容。\n\n该函数用于编辑指定流模板中的IS-IS协议L1或L2层级LSP报文的TLV字段内特定索引位置的外部度量条目。它通过给定的`Stream`对象选择对应的流，根据`Level`参数选择具体的L1或L2 LSP头部，然后在该头部的TLV列表中根据`TlvIndex`选取特定的TLV，并最终在该TLV内的外部度量条目中依据`EntryIndex`定位到具体条目进行修改。\n\n---\n\n### 参数说明：\n\n- **Stream** (`StreamTemplate` or list of `StreamTemplate`):  \n  测试仪表中的流模板对象，或者包含流模板对象的列表。若传入列表，则取第一个元素作为目标流。该对象必须包含一个唯一标识符属性（如`handle`），用于系统内部识别该流。\n  \n- **Level** (`int`, default: 0, range: 0–65535):  \n  指定在所有IS-IS L1/L2 LSP头部中的第几个头部进行操作，默认为第0个。例如，当流中存在多个IS-IS L1/L2 LSP头部时，可通过此参数选择要修改的具体头部。\n\n- **TlvIndex** (`int`, default: 0, range: 0–65535):  \n  指定在所选IS-IS头部中TLV字段的索引位置，默认为第0个TLV。该TLV应为支持外部度量条目的类型（如IP External Reachability TLV）。\n\n- **EntryIndex** (`int`, default: 0, range: 0–65535):  \n  在选定的TLV字段中，指定要修改的“外部度量条目”的索引，默认为第0个条目。\n\n- **Keyword Args (可选参数)**:  \n  可选参数集合，用于设置外部度量条目中各个字段的值。支持如下字段：\n\n    - **Reserved** (`hex`, default: 0x00, range: 0–1):  \n      保留位，通常用于指示路由传播方向或其他协议相关标志。\n    \n    - **DefaultMetricIEbit** (`int`, default: 0, range: 0–1):  \n      默认度量I/E比特，用于指示默认路由是否被注入。\n    \n    - **DefaultMetric** (`int`, default: 0, range: 0–63):  \n      默认度量值，表示到达某网络的默认代价。\n    \n    - **DelayMetricsbit** (`int`, default: 0, range: 0–1):  \n      延迟度量S比特，用于启用/禁用延迟度量字段。\n    \n    - **DelayMetricSBit** (`int`, default: 0, range: 0–1):  \n      延迟度量R比特，用于控制度量的可靠性。\n    \n    - **DelayMetric** (`int`, default: 0, range: 0–63):  \n      实际延迟度量值。\n    \n    - **ExpenseMetricsBit** (`int`, default: 0, range: 0–1):  \n      费用度量S比特，用于启用/禁用费用度量字段。\n    \n    - **ExpenseMetricIEbit** (`int`, default: 0, range: 0–1):  \n      费用度量R比特，用于控制费用度量的可靠性。\n    \n    - **ExpenseMetric** (`int`, default: 0, range: 0–63):  \n      费用度量值。\n    \n    - **ErrorMetricsBit** (`int`, default: 0, range: 0–1):  \n      错误度量S比特，用于启用/禁用错误度量字段。\n    \n    - **ErrorMetricIEbit** (`int`, default: 0, range: 0–1):  \n      错误度量R比特，用于控制错误度量的可靠性。\n    \n    - **ErrorMetric** (`int`, default: 0, range: 0–63):  \n      错误度量值。\n    \n    - **IpAddress** (`str`, default: \"192.168.0.2\", valid IPv4 address):  \n      外部可达性条目对应的IPv4地址。\n    \n    - **SubMask** (`hex`, default: \"00000000\", length: 4 bytes):  \n      子网掩码，以十六进制形式表示，共4字节长度。\n\n---\n\n### 返回值：\n\n- **dict**:  \n  成功时返回一个字典，包含每个被修改字段在协议栈中的路径（用于后续查询或验证）。示例结构如下：\n  ```python\n  {\n      'Reserved': 'LspDataUnitHeader.LspisIsTlvOptionSet.lspisIsTlvs_5.isIsIPExternalReachability.externalmetricEntries.externalMetricEntry_1.reserved',\n      'DefaultMetricIEbit': 'LspDataUnitHeader.LspisIsTlvOptionSet.lspisIsTlvs_5.isIsIPExternalReachability.externalmetricEntries.externalMetricEntry_1.defaultMetricIEbit',\n      ...\n  }\n  ```\n\n- **False**:  \n  如果底层调用失败或未返回结果，则返回 `False`，并抛出异常 `ContinuableFailure`。\n\n---\n\n### 示例代码（Robot Framework）：\n\n```robotframework\n| ${Stream} | add_stream | Port=${Port} |\n| ${HeaderTypes} | Create List | l1csnpHeader |\n| Create Stream Header | Stream=${Stream} | HeaderTypes=${HeaderTypes} |\n| Edit Header Isis L1lsp | Stream=${Stream} | Level=0 | version=10 | maxAreaAddress=3 |\n| Edit Header Isis Tlv Header | Stream=${Stream} | Option=${Option} | Index=0 | lspEntries=1 |\n| Edit Header Isis External Metric Entry | Stream=${Stream} | TlvIndex=0 | EntryIndex=0 | errorMetricIEbit=1 |\n```\n\n---\n\n### 注意事项：\n\n- 确保流模板中已正确创建IS-IS L1/L2 LSP头部和对应TLV字段。\n- 所有索引参数从0开始计数，超出范围可能导致错误。\n- 修改后的配置不会自动生效，需提交流模板或启动流量后才能应用更改。",
  "TesterLibrary.Stream.Header.L2.isis.edit_header_isis_psnp": "修改测试仪表流量模板中IS-IS L1/L2 PSNP（Partial Sequence Number PDU）报文头部内容。\n\n该函数用于修改指定流量模板中的IS-IS L1或L2层级的PSNP头部字段。用户可以通过参数指定要修改的具体字段及其值，未指定的字段将保持原样。该函数返回一个字典，包含所有被修改字段的名称及其对应的内部路径字符串。\n\nArgs:\n    Stream (:obj:`StreamTemplate` or list): 测试仪表流量模板对象，也可以是包含对象的列表。如果是列表，则使用第一个元素作为实际操作对象。\n    Level (int): 指定在多个IS-IS L1/L2 PSNP头部中的索引位置，默认为0，取值范围：0-65535。\n\nKeyword Args:\n    InterRoutingProtocolDiscriminator (int): Intradomain Routing Protocol Discriminator 字段值，默认值：<AUTO>83\n    LengthIndicator (int): Length Indicator 字段值，默认值：<AUTO>33\n    VersionIdExtend (int): Version/Protocol ID Extension 字段值，默认值：<AUTO>1\n    IdLength (int): ID Length 字段值，默认值：<AUTO>6，表示System ID长度\n    Reserved1 (int): 保留字段1，取值范围：0-7，默认值：3\n    PDUType (int): PDU Type 字段值，取值范围：0-31，默认值：<AUTO>24\n    Version (int): 协议版本号字段值，取值范围：0-255，默认值：1\n    Reserved2 (int): 保留字段2，取值范围：0-255，默认值：3\n    MaxAreaAddress (int): Maximum Area Addresses 字段值，取值范围：0-3，默认值：3\n    PDULength (int): PDU Length 字段值，默认值：<AUTO>33\n    SourceId (hex): Source ID 字段值，以十六进制表示，长度为6字节，默认值：000000000000\n    Reserved (hex): 数据头部中的Reserved字段，以十六进制表示，长度为1字节，默认值：00\n    CsnpDataTlvOptionHeader (list): 可选TLV字段，支持以下选项：\n\n        - isIsLspEntries\n        - authentionInfo\n\nReturns:\n    dict: 包含所有被修改字段的名称和其对应内部路径的映射关系，例如::\n\n        {\n            'InterRoutingProtocolDiscriminator': 'l1psnpCommonHeader.InterRoutingProtocolDiscriminator',\n            'LengthIndicator': 'l1psnpCommonHeader.LengthIndicator',\n            ...\n        }\n\nExamples:\n\n    .. code:: RobotFramework\n\n        | ${Stream} | add_stream | Port=${Port} |\n        | ${HeaderTypes} | Create List | l1csnpHeader |\n        | Create Stream Header | Stream=${Stream} | HeaderTypes=${HeaderTypes} |\n        | Edit Header Isis psnp | Stream=${Stream} | Level=0 | version=10 | maxAreaAddress=3 |",
  "TesterLibrary.Stream.Header.L2.isis.edit_header_isis_p2p_hello": "修改测试仪表流量模板中的IS-IS点对点Hello（P2P Hello）报文头部字段内容。\n\n该函数用于编辑指定流量模板（Stream）中第 `Level` 个 IS-IS P2P Hello 报文头部的各个字段。用户可以设置 IS-IS 头部公共字段、消息字段以及 TLV 扩展内容。仅传入的非 None 参数会被更新至头部。\n\nArgs:\n\n    Stream (:obj:`StreamTemplate`): 测试仪表流量模板对象，类型为 StreamTemplate 或其子类，必须包含一个可识别流的 handle 属性。\n\n    Level (int, optional): 指定要修改的 IS-IS P2P Hello 头部在该流中同类型头部列表中的索引位置，默认值为 0。取值范围：0-65535。\n\nKeyword Args:\n\n    InterRoutingProtocolDiscriminator (int, optional): 域内路由协议标识符，默认值：<AUTO>83\n\n    LengthIndicator (int, optional): 长度指示器，默认值：<AUTO>20\n\n    VersionIdExtend (int, optional): 版本/协议ID扩展，默认值：<AUTO>1\n\n    IdLength (int, optional): ID 字段长度，默认值：<AUTO>6\n\n    CommonReserved1 (int, optional): 公共保留字段1，默认值：0，取值范围：0-7\n\n    PDUType (int, optional): PDU 类型，默认值：<AUTO>17，取值范围：0-31\n\n    Version (int, optional): 协议版本号，默认值：1，取值范围：0-255\n\n    CommonReserved2 (int, optional): 公共保留字段2，默认值：0，取值范围：0-255\n\n    MaxAreaAddress (int, optional): 最大区域地址数，默认值：1，取值范围：0-3\n\n    FixedReserve1 (int, optional): 固定保留字段，默认值：0，取值范围：0-63\n\n    CircuitType (hex, optional): 电路类型，默认值：1，长度为1字节\n\n    SenderSystemID (hex, optional): 发送方系统ID，默认值：000000000001，长度为6字节\n\n    HolderTimer (hex, optional): 保持时间，默认值：000000000001，长度为6字节\n\n    PDULength (int, optional): PDU 总长度，默认值：<AUTO>20，取值范围：0-65535\n\n    LocalCircuitId (int, optional): 本地电路ID，默认值：1，取值范围：0-255\n\n    IsIsTlv (list, optional): 插入的TLV字段选项，可选值包括：\n\n        padding\n\n        areaAddress\n\n        authentionInfo\n\n        protocolSupport\n\n        ipInterfaceAddress\n\n        Ipv6InterfaceAddress\n\n        restartSignal\n\n        p2pAdjacencyState\n\nReturns:\n\n    dict: 返回一个字典，键为成功设置的参数名称，值为其在内部结构中对应的路径字符串，表示实际修改的位置。若无任何参数被设置，则返回空字典。\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${Stream} | add_stream | Port=${Port} |\n        | ${HeaderTypes} | Create List | p2phelloheader |\n        | Create Stream Header | Stream=${Stream} | HeaderTypes=${HeaderTypes} |\n        | Edit Header Isis P2p Hello | Stream=${Stream} | Level=0 | version=10 | maxAreaAddress=3 |",
  "TesterLibrary.Stream.Header.L2.mstp.edit_header_mstp_config": "Edits the MSTP (Multiple Spanning Tree Protocol) configuration header of a specified stream at a given level.\n\nThis function allows updating various fields of an MSTP Configuration BPDU (Bridge Protocol Data Unit) header. It retrieves the stream's headers and selects the one at the specified level with type 'cfg'. Then, it updates any provided field(s) in the header and returns a dictionary mapping each updated parameter to its corresponding attribute name in the header object.\n\nParameters:\n    Stream (:obj:`StreamTemplate` or list): A stream object or a list containing a single stream object. If a list is provided, the first element will be used. The stream object must have a 'handle' attribute for internal processing.\n    Level (int): The index level of the 'cfg' type header in the stream's header list. Default is 0. Range: 0–65535.\n    **kwargs (keyword arguments): Optional fields to update in the MSTP header. All keyword parameters are optional and include:\n\n        ProtocolIdentifier (int): Sets the protocol identifier field of the MSTP header. Default: 0, Range: 0–65535\n        ProtocolVersionIdentifier (int): Sets the version of the protocol being used. Default: 3, Range: 0–255\n        BPDUType (int): Sets the type of BPDU (e.g., Configuration, TCN, etc.). Default: 0x02, Range: 0x00–0xFF\n        TopologyChangeAck (bool): Indicates whether topology change acknowledgment flag is set. Default: False\n        Agreement (bool): Indicates agreement flag status as per MSTP protocol. Default: True\n        Forwarding (bool): Indicates whether forwarding flag is set. Default: True\n        Learning (bool): Indicates whether learning flag is set. Default: True\n        PortRole (int): Sets the role of the port sending the BPDU. Default: 3 (binary 11), Range: 0–3\n        Proposal (bool): Indicates whether proposal flag is set. Default: False\n        TopologyChange (bool): Indicates whether a topology change is occurring. Default: False\n        RootBridgePriority (int): Sets the priority value of the root bridge. Default: 8, Range: 0–15\n        RootSystemIdExtension (int): Extension part of the system ID for the root bridge. Default: 0, Range: 0–4095\n        RootBridgeSystemID (str): System ID of the root bridge. Default: \"00:00:00:12:30:10\", Must be a valid MAC address\n        RootPathCost (int): Cost to reach the root bridge. Default: 0, Range: 0–4294967295\n        BridgePriority (int): Priority value of the transmitting bridge. Default: 8, Range: 0–15\n        BridgeSystemIdExtension (int): Extension part of the system ID for the transmitting bridge. Default: 0, Range: 0–4095\n        BridgeSystemID (str): System ID of the transmitting bridge. Default: \"00:00:00:12:30:10\", Must be a valid MAC address\n        PortIdentifier (int): Identifier of the transmitting port. Default: 0x8001, Range: 0x0000–0xFFFF\n        MessageAge (int): Age of the BPDU message. Default: 0, Range: 0–65535\n        MaxAge (int): Maximum age before discarding the BPDU. Default: 5120, Range: 0–65535\n        HelloTime (int): Interval between BPDU transmissions. Default: 512, Range: 0–65535\n        ForwardDelay (int): Delay time for transitions between states. Default: 3840, Range: 0–65535\n        Version1Length (int): Length of Version 1 BPDU data. Default: 0, Range: 0–255\n        Version3Length (int): Length of Version 3 BPDU data. Default: 64, Range: 0–255\n        ConfigId (int): Configuration ID used for MST instance mapping. Default: 0, Range: 0–255\n        ConfigName (str): Name of the MST configuration. Default: \"726567696f6e31...\" (32-byte hexadecimal string)\n        ConfigRevision (int): Revision number of the MST configuration. Default: 0, Range: 0–65535\n        ConfigDigest (bytes): Digest of the MST configuration for consistency checks. Default: b'\\x90\\xfb\\xa5\\xe9wK\\tRJ\\x17\\xeb\\xb7_\\x8d\\x06Z', Must be a 16-byte binary value\n        CistRootPathCost (int): Path cost to reach the CIST (Common and Internal Spanning Tree) root. Default: 0, Range: 0–4294967295\n        CistBridgePriority (int): Priority of the CIST bridge. Default: 8, Range: 0–15\n        CistSystemIdExtension (int): Extension part of the system ID for the CIST bridge. Default: 0, Range: 0–4095\n        CistBridgeSystemID (str): System ID of the CIST bridge. Default: \"00:00:00:12:30:10\", Must be a valid MAC address\n        CistRemainingHops (int): Remaining hops allowed for the CIST BPDU. Default: 20, Range: 0–255\n        MstInstances (list): List of MST instances included in the BPDU. Default: empty list, Range: up to 64 entries\n\nReturns:\n    dict: A dictionary where keys are the names of the parameters that were provided and updated, and values are strings representing the corresponding attribute names in the MSTP header object that were modified.\n\nSide Effects:\n    - Modifies the MSTP configuration header attributes of the specified stream.",
  "TesterLibrary.Stream.Header.L2.mstp.edit_header_mstp_config_mst_instance": "修改测试仪表流量模板中MSTP配置报文下的MST实例参数。\n\n该函数用于编辑指定流量模板中MSTP（Multiple Spanning Tree Protocol）配置头部内的某个MST（Multiple Spanning Tree）实例的配置信息。通过该函数可以设置MST实例的各种标志位和属性值。\n\n参数：\n    Stream (:obj:`StreamTemplate` 或 list): 测试仪表流量对象，类型为StreamTemplate或包含一个StreamTemplate对象的列表。如果传入的是列表，则只使用第一个元素。\n    Level (int, optional): 指定MSTP配置头部在流中所有'cfg'类型头部中的索引，默认值为0，取值范围：0-65535。\n    Index (int, optional): 指定要修改的MST实例在其所属MSTP配置头部中的索引，默认值为0，取值范围：0-65535。\n    **kwargs: 可选的关键字参数，用于设置MST实例的各个配置项，包括以下参数：\n\n        - TopologyChangeAck (bit): 拓扑变更确认标志，默认值：0，取值范围：0-1\n        - Agreement (bit): 协议标志，默认值：1，取值范围：0-1\n        - Forwarding (bit): 转发状态标志，默认值：1，取值范围：0-1\n        - Learning (bit): 学习状态标志，默认值：1，取值范围：0-1\n        - PortRole (bit): 端口角色，默认值：11，取值范围：00-11\n        - Proposal (bit): 提议标志，默认值：0，取值范围：0-1\n        - TopologyChange (bit): 拓扑变更标志，默认值：0，取值范围：0-1\n        - Priority (int): 优先级，默认值：8，取值范围：0-15\n        - MstId (int): MST实例ID，默认值：1，取值范围：0-4095\n        - RegionalRoot (str): 区域根MAC地址，默认值：00:00:00:12:30:10，必须为有效MAC地址\n        - InternalRootPathCost (int): 内部根路径成本，默认值：0，取值范围：0-4294967295\n        - BridgeIdentifierPriority (int): 桥标识符优先级，默认值：8，取值范围：0-255\n        - PortIdentifierPriority (int): 端口标识符优先级，默认值：8，取值范围：0-255\n        - RemainingHops (int): 剩余跳数，默认值：20，取值范围：0-255\n\n返回值：\n    dict: 包含所编辑的MST实例各字段对应系统内部路径的字典，可用于后续查询或验证操作。若操作失败或未进行任何更改，则返回False。\n\n示例：\n    .. code:: RobotFramework\n\n        | ${Stream} | add_stream | Port=${Port} |\n        | ${HeaderTypes} | Create List | cfg |\n        | Create Stream Header | Stream=${Stream} | HeaderTypes=${HeaderTypes} |\n        | Edit Header Mstp Config | Stream=${Stream} | Level=0 | MstInstances=1 |\n        | Edit Header Mstp Config Mst Instance | Stream=${Stream} | Index=0 | TopologyChangeAck=1 |\n\n注意事项：\n    - 在调用此函数前，需要确保已正确创建并关联了MSTP配置头部。\n    - 如果传入的Stream是列表形式，仅使用第一个元素。\n    - 若操作失败，将抛出ContinuableFailure异常。",
  "TesterLibrary.Stream.Header.L2.prp.edit_header_prp_tag": "修改测试仪表流量模板中PRP Tag报文头部内容\n\n该函数用于编辑指定流模板中类型为'prptag'的报文头部的一个或多个字段。它会检索流中的所有头部并过滤出'prptag'类型的头部，然后根据提供的Level索引修改对应位置的头部字段。\n\nArgs:\n\n    Stream (:obj:`StreamTemplate`): 测试仪表流量对象，表示需要修改头部的流量模板，类型为object。\n                                    该对象应包含一个唯一标识流的'handle'属性。\n                                    如果传入的是列表，则使用第一个元素。\n\n    Level (int): 指定要修改的'prptag'头部在过滤后的头部列表中的索引，默认值为0，取值范围：0-65535。\n\nKeyword Args (可选):\n\n    SequenceNumber (int): 设置PRP Tag头部的序列号字段，取值范围：0-65535，默认值：0。\n\n    LanId (bit): 设置PRP Tag头部的LAN ID字段，取值范围为4位二进制数（0000-1111），默认值：1010。\n\n    LsduSize (int): 设置PRP Tag头部的LSDU大小字段，取值范围：0-4095，默认值：52。\n\n    PrpSuffix (hex): 设置PRP Tag头部的PRP后缀字段，取值为长度2字节的十六进制数，默认值：0x88FB。\n\nReturns:\n\n    dict: 返回一个字典，映射被修改的参数名到其在头部对象中对应的内部属性名（例如{'SequenceNumber': 'seqnum'}）。\n          如果未修改任何参数，返回False。\n\nExamples:\n    .. code:: RobotFramework\n\n        | Edit Header Prp Tag | Stream=${Stream} | Level=0 | SequenceNumber=10 |",
  "TesterLibrary.Stream.Header.L2.rtag.edit_header_r_tag": "修改测试仪表流量模板中的R Tag报文头部字段内容。该函数支持对指定流模板中的R Tag头部的Reserved、SeqNum（序列号）和Protocol字段进行单独或批量修改，仅修改传入的有效参数字段。\n\n### 参数说明:\n\n- **Stream** (:obj:`StreamTemplate`):  \n  测试仪表的流量模板对象，类型为对象（object），表示需要修改头部信息的流模板。\n\n- **Level** (int, 可选):  \n  指定要修改的R Tag头部在流模板所有R Tag头部中的索引位置，默认值为0，取值范围：0 - 65535。  \n  当流模板中存在多个R Tag头部时，可通过此参数选择具体的目标头部。\n\n- **Reserved** (hex, 可选):  \n  设置R Tag头部的保留字段（Reserved Field），默认值为 `0000`，取值范围：`0000` - `FFFF`。  \n  如果不传或为None，则不修改该字段。\n\n- **SeqNum** (int, 可选):  \n  设置R Tag头部的序列号（Sequence Number），默认值为0，取值范围：0 - 65535。  \n  如果不传或为None，则不修改该字段。\n\n- **Protocol** (hex, 可选):  \n  设置R Tag头部的协议字段（Protocol），默认值为 `0800`，有效值及其含义如下：\n\n  - `0800`: IPv4  \n  - `0806`: ARP  \n  - `8100`: VLAN  \n  - `8864`: PPPoE  \n  - `8863`: PPPoE Discovery  \n  - `86DD`: IPv6  \n  - `8808`: Pause  \n  - `8847`: MPLS  \n  - `88B8`: Goose  \n  - `8926`: VNTag  \n  - `F1C1`: RTag  \n  - `892F`: HSRTag  \n  - `88FB`: PRPTag  \n\n  如果不传或为None，则不修改该字段。\n\n### 返回值:\n\n返回一个字典，指示哪些字段被成功修改以及其对应的内部属性名。例如：\n\n```python\n{\n    'Reserved': 'reserved',\n    'SeqNum': 'seqnum',\n    'Protocol': 'protocol'\n}\n```\n\n如果没有任何字段被修改，则返回 `False`。\n\n### 异常行为:\n\n当修改失败（如底层调用返回 `False`）时，函数会抛出 `ContinuableFailure` 类型异常。\n\n### 使用示例:\n\nRobotFramework 示例代码：\n\n```robotframework\n| Edit Header R Tag | Stream=${Stream} | Level=0 | SeqNum=10 |\n```\n\n此示例将流模板 `${Stream}` 中第0个R Tag头部的 `SeqNum` 字段设置为10，其他字段保持不变。",
  "TesterLibrary.Stream.Header.L3.common.edit_header_ipv4": "修改测试仪表流量模板中IPv4报文头部内容。\n\n该函数用于编辑指定流量流（Stream）中的IPv4头部字段。可以通过设置不同的参数来修改IPv4头部的多个字段，包括版本、长度、标志位、TTL、源和目的IP地址、ToS（服务类型）、DSCP（差分服务代码点）、ECN（显式拥塞通知）等。\n\nArgs:\n\n    Stream (:obj:`StreamTemplate`): 测试仪表流量对象，表示一个流量模板，类型为object。\n\n    Level (int, optional): 指定要修改的IPv4头部在该流所有IPv4头部中的索引位置，默认值为0，取值范围：0-65535。\n\nKeyword Args:\n\n    Version (int, optional): 设置IPv4版本号（例如，4代表IPv4），默认值：4，取值范围：0-15。\n\n    HeadLen (int, optional): 设置IP头部长度（IHL），默认值：<AUTO>5，取值范围：0-15。\n\n    TotalLength (int, optional): 设置IP数据包总长度（包括头部和数据），默认值：<AUTO>20，取值范围：0-65535。\n\n    Flags (bit, optional): 设置用于分片控制的标志位，默认值：000，取值范围：000-111。\n\n    ID (int, optional): 设置用于分片与重组的标识字段，默认值：<AUTO>123，取值范围：0-65535。\n\n    Offset (int, optional): 设置分片偏移量，表示该分片在原始数据包中的位置，默认值：0，取值范围：0-8191。\n\n    TTL (int, optional): 设置生存时间（Time-To-Live）字段，限制数据包在网络中的存活时间，默认值：128，取值范围：0-255。\n\n    Protocol (int, optional): 设置上层协议类型（如TCP=6，UDP=17），默认值：235，取值范围：0-255。\n\n    Checksum (hex, optional): 设置IP头部校验和，默认值：0000，取值范围：0000-FFFF。\n\n    Source (str, optional): 设置源IP地址，默认值：192.168.0.2，必须是合法的IPv4地址。\n\n    Destination (str, optional): 设置目标IP地址，默认值：192.168.0.10，必须是合法的IPv4地址。\n\n    Padding (hex, optional): 设置IPv4头部填充字段，默认值：000000，取值范围：长度为0-3字节的十六进制字符串。\n\n    Gateway (str, optional): 设置网关IP地址，默认值：192.168.0.1，必须是合法的IPv4地址。\n\n    Tos (int, optional): 设置完整的ToS字段值，默认值：0，取值范围：0-255。\n\n    TosPrecedence (bit, optional): 设置ToS中的优先级子字段，默认值：000，取值范围：000-111。\n\n    TosDelay (bit, optional): 设置ToS中的延迟子字段，默认值：0，取值范围：0-1。\n\n    TosThroughput (bit, optional): 设置ToS中的吞吐量子字段，默认值：0，取值范围：0-1。\n\n    TosReliability (bit, optional): 设置ToS中的可靠性子字段，默认值：0，取值范围：0-1。\n\n    TosMonetaryCost (bit, optional): 设置ToS中的费用子字段，默认值：0，取值范围：0-1。\n\n    TosReserved (bit, optional): 设置ToS中的保留子字段，默认值：0，取值范围：0-1。\n\n    DiffserveCodepointPrecedence (bit, optional): 设置DSCP码点优先级，默认值：000000，取值范围：000000-111111。\n\n    DiffserveClassSelectorPrecedence (bit, optional): 设置DSCP类选择器优先级，默认值：000，取值范围：000-111。\n\n    DiffserveClassSelectorDrop (bit, optional): 设置DSCP类选择器丢弃概率，默认值：00，取值范围：00-11。\n\n    DiffserveClassSelectorUndefine (bit, optional): 设置DSCP类选择器未定义位，默认值：0，取值范围：0-1。\n\n    DiffserveEcn (bit, optional): 设置ECN（显式拥塞通知）字段，默认值：00，取值范围：00-11。\n\n    TosByte (hex, optional): 直接设置整个ToS字节值，默认值：00，取值范围：00-FF。\n\n    HeaderOption (list, optional): 插入IPv4头部选项字段，支持传入列表，可选值包括：\n\n        EndOfOption\n\n        Nop\n\n        Security\n\n        LooseSourceRoute\n\n        StrictSourceRoute\n\n        RouterAlert\n\n        RecordRoute\n\n        TimeStamp\n\n        StreamIdentifier\n\n        General\n\nReturns:\n\n    dict: 返回一个字典，映射已修改的参数名到其对应的内部属性或路径字符串，例如：\n    \n    {\n        'Version': 'version',\n        'HeadLen': 'headLen',\n        'TotalLength': 'totalLength',\n        'ID': 'id',\n        'Flags': 'flags',\n        'Offset': 'offset',\n        'TTL': 'ttl',\n        'Protocol': 'protocol',\n        'Checksum': 'checksum',\n        'Source': 'source',\n        'Destination': 'destination',\n        'Padding': 'padding',\n        'Gateway': 'gateway',\n        'Tos': 'tos',\n        'TosPrecedence': 'tos.tos.precedence',\n        'TosDelay': 'tos.tos.delay',\n        'TosThroughput': 'tos.tos.throughput',\n        'TosReliability': 'tos.tos.reliability',\n        'TosMonetaryCost': 'tos.tos.monetaryCost',\n        'TosReserved': 'tos.tos.reserved',\n        'DiffserveCodepointPrecedence': 'tos.diffServe.dscp.codePoint.precedence',\n        'DiffserveClassSelectorPrecedence': 'tos.diffServe.dscp.classSelector.precedence',\n        'DiffserveClassSelectorDrop': 'tos.diffServe.dscp.classSelector.drop',\n        'DiffserveClassSelectorUndefine': 'tos.diffServe.dscp.classSelector.undefine',\n        'DiffserveEcn': 'tos.diffServe.ecnSetting',\n        'TosByte': 'tos.tosByte.data',\n        'HeaderOption': True\n    }\n\n    如果没有字段被更新，则返回False。\n\nExamples:\n\nRobotFramework示例：\n\n.. code:: robotframework\n\n    | Init Tester |\n    | ${Locations} | Create List | //192.168.0.180/1/1 | //192.168.0.180/1/2 |\n    | ${Port} | reserve_port | Locations=${Locations} |\n    | ${HeaderTypes} | Create List | EthernetII | IPv4 |\n    | ${HeaderOption} | Create List | RouterAlert | EndOfOption | LooseSourceRoute |\n    | Create Stream Header | Stream=${Stream} | HeaderTypes=${HeaderTypes} |\n    | &{Attribute} | Edit Header IPv4 | Stream=${Stream} | Level=0 | Source=192.168.1.1 | HeaderOption=${HeaderOption} |\n    | Edit Modifier | Stream=${Stream} | Level=0 | HeaderType=IPv4 | Attribute=${Attribute}[Source] | Type=Increment | Count=10 | Step=2 |\n    | &{Attribute} | Edit Header IPv4 Option | Stream=${Stream} | Type=RouterAlert | routerAlertValue=5 |\n    | Edit Modifier | Stream=${Stream} | Level=0 | HeaderType=IPv4 | Attribute=${Attribute}[routerAlertValue] | Type=Decrement | Count=3 | Step=1 |\n\nSide Effects:\n    - 修改了指定流的IPv4头部。\n    - 根据提供的参数更新了多个头部字段。\n    - 如果提供了 `HeaderOption` 参数，则会在IPv4头部中插入相应的选项字段。",
  "TesterLibrary.Stream.Header.L3.common.edit_header_ipv4_option": "修改测试仪表流量模板中IPv4报文选项（Option）字段的内容。\n\nArgs:\n    Stream (:obj:`StreamTemplate` or list): 流量模板对象，类型为StreamTemplate或包含单个StreamTemplate的列表。\n        如果传入列表，则仅使用第一个元素。该对象必须包含一个标识其唯一性的'handle'属性。\n\n    Option (str): 要编辑的IPv4选项字段名称，支持的参数包括：\n        \n        EndOfOption: 结束选项\n\n        Nop: 无操作选项\n\n        Security: 安全选项\n\n        LooseSourceRoute: 松散源路由选项\n\n        StrictSourceRoute: 严格源路由选项\n\n        RouterAlert: 路由器告警选项\n\n        RecordRoute: 路由记录选项\n\n        TimeStamp: 时间戳选项\n\n        StreamIdentifier: 流标识符选项\n\n        General: 通用选项，用于设置任意选项字段\n\n    Level (int, optional): 指定要修改的是第几个IPv4头部，用于存在多个相同类型头部时的选择，默认值：0，取值范围：0-65535\n\n    Index (int,optional): 指定在IPv4头部中要修改的选项字段的位置索引，默认值：0，取值范围：0-65535\n\n    Header (str, optional): 指定要修改的IPv4头部类型，也可指定为以下ICMP相关头部：\n\n        ipv4: IPv4基本头部\n\n        destunreach: 目的不可达消息头部\n\n        parameterproblem: 参数问题消息头部\n\n        redirect: 重定向消息头部\n\n        sourcequench: 源抑制消息头部\n\n        timeexceeded: 超时消息头部\n\nKeyword Args:\n\n    所有关键字参数依据Option参数不同而变化，具体如下：\n\n    EndOfOption类型配置：\n\n        Optiontype (int): 选项类型，默认值：0，取值范围：0-255\n\n    Nop类型配置：\n\n        Optiontype (int): 选项类型，默认值：1，取值范围：0-255\n\n    Security类型配置：\n\n        Optiontype (int): 选项类型，默认值：130，取值范围：0-255\n\n        Length (int): 选项长度，默认值：11（AUTO表示自动计算），取值范围：0-255\n\n        Security (int): 安全级别，默认值：0，取值范围：0-65535\n\n        Compartments (int): 分隔数，默认值：0，取值范围：0-65535\n\n        HandlingRestrictions (int): 处理限制，默认值：1，取值范围：0-65535\n\n        TxControlCode (int): 传输控制码，默认值：0，取值范围：0-16777215\n\n    LooseSourceRoute类型配置：\n\n        Optiontype (int): 选项类型，默认值：131，取值范围：0-255\n\n        Length (int): 选项长度，默认值：0（AUTO表示自动计算），取值范围：0-255\n\n        Pointer (int): 指针位置，默认值：4，取值范围：0-255\n\n        AddressList (list): IPv4地址列表，默认值：[]，取值范围：有效的IPv4地址列表\n\n    StrictSourceRoute类型配置：\n\n        Optiontype (int): 选项类型，默认值：137，取值范围：0-255\n\n        Length (int): 选项长度，默认值：0（AUTO表示自动计算），取值范围：0-255\n\n        Pointer (int): 指针位置，默认值：4，取值范围：0-255\n\n        AddressList (list): IPv4地址列表，默认值：[]，取值范围：有效的IPv4地址列表\n\n    RouterAlert类型配置：\n\n        Optiontype (int): 选项类型，默认值：148，取值范围：0-255\n\n        Length (int): 选项长度，默认值：4（AUTO表示自动计算），取值范围：0-255\n\n        RouterAlertValue (int): 路由器告警值，默认值：0，取值范围：0-65535\n\n    RecordRoute类型配置：\n\n        Optiontype (int): 选项类型，默认值：7，取值范围：0-255\n\n        Length (int): 选项长度，默认值：0（AUTO表示自动计算），取值范围：0-255\n\n        Pointer (int): 指针位置，默认值：4，取值范围：0-255\n\n        AddressList (list): IPv4地址列表，默认值：[]，取值范围：有效的IPv4地址列表\n\n    TimeStamp类型配置：\n\n        Optiontype (int): 选项类型，默认值：7，取值范围：0-255\n\n        Length (int): 选项长度，默认值：0（AUTO表示自动计算），取值范围：0-255\n\n        Pointer (int): 指针位置，默认值：4，取值范围：0-255\n\n        Overflow (int): 溢出计数，默认值：0，取值范围：0-15\n\n        Flag (int): 标志位，默认值：0，取值范围：0-15\n\n        TimeStamp (hex): 时间戳，默认值：00000000，取值范围：00000000-FFFFFFFF\n\n        TimeStampSet (list): 时间戳列表，默认值：[]，每个元素取值范围：00000000-FFFFFFFF\n\n    StreamIdentifier类型配置：\n\n        Optiontype (int): 选项类型，默认值：136，取值范围：0-255\n\n        Length (int): 选项长度，默认值：4（AUTO表示自动计算），取值范围：0-255\n\n        SystemId (int): 系统ID，默认值：0，取值范围：0-65535\n\n    General类型配置：\n\n        Type (int): 选项类型，默认值：0，取值范围：0-255\n\n        Length (int): 选项长度，默认值：2（AUTO表示自动计算），取值范围：0-255\n\n        Value (hex): 选项值，默认值：\"\"，取值范围：长度为0-40字节的十六进制字符串\n\nReturns:\n    dict: 包含所编辑字段路径信息的字典，示例如下：\n\n    {\n        'Security': 'ipv4HeaderOption.ipv4HeaderOptionList_0.optionSecurity.security',\n        'Length': 'ipv4HeaderOption.ipv4HeaderOptionList_1.optionRouterAlert.length',\n        'AddressList, 1.1.1.1': 'ipv4HeaderOption.ipv4HeaderOptionList_2.optionLooseSourceRoute.addressList.ipv4AddrContainer_0.ipv4Addr',\n        'AddressList, 2.2.2.2': 'ipv4HeaderOption.ipv4HeaderOptionList_2.optionLooseSourceRoute.addressList.ipv4AddrContainer_1.ipv4Addr'\n    }\n\nExamples:\n    RobotFramework 示例代码如下：\n\n.. code:: robotframework\n\n    | Init Tester |\n    | ${Locations} | Create List | //192.168.0.180/1/1 | //192.168.0.180/1/2 |\n    | ${Port} | reserve_port | Locations=${Locations} |\n    | ${Stream} | add_stream | Port=${Port} |\n    | ${HeaderTypes} | Create List | EthernetII | IPv4 |\n    | Create Stream Header | Stream=${Stream} | HeaderTypes=${HeaderTypes} |\n    | &{Attribute} | Edit Header IPv4 | Stream=${Stream} | Level=0 | Source=192.168.1.1 | HeaderOption=RouterAlert |\n    | Edit Modifier | Stream=${Stream} | Level=0 | HeaderType=IPv4 | Attribute=${Attribute}[Source] | Type=Increment | Count=10 | Step=2 |\n    | &{Attribute} | Edit Header IPv4 Option | Stream=${Stream} | Option=RouterAlert | routerAlertValue=5 |\n    | Edit Modifier | Stream=${Stream} | Level=0 | HeaderType=IPv4 | Attribute=${Attribute}[routerAlertValue] | Type=Decrement | Count=3 | Step=1 |\n\nSide Effects:\n    - 使用get_stream_header获取并可能缓存流的头部对象列表\n    - 修改系统中指定IPv4选项字段的配置",
  "TesterLibrary.Stream.Header.L3.common.edit_header_ipv6": "修改测试仪表流量模板中的IPv6报文头部字段内容。\n\n此函数用于修改指定流模板中某一IPv6头部的多个字段，包括版本号、流量类别、流标签、有效载荷长度、下一头部协议、跳数限制、源地址、目的地址以及网关地址等。如果传入的Stream是一个列表，则只会使用第一个元素。函数会根据Level参数选择对应的IPv6头部进行修改，并返回一个字典记录成功修改的字段及其在对象中的属性名。若没有任何字段被成功修改，则返回False。\n\n参数:\n    Stream (:obj:`StreamTemplate` 或 list of :obj:`StreamTemplate`): 测试仪表流量对象或其列表，表示需要修改的流量模板。若为列表，仅处理第一个元素。\n    Level (int, optional): 指定要修改的IPv6头部在其所在流模板中的索引位置（即第几个IPv6头），默认值为0。\n    **kwargs (可选): 任意数量的关键字参数，用于指定IPv6头部字段的新值。支持以下关键字：\n        Version (int): IPv6版本号，默认值为6，取值范围：0-15。\n        TrafficClass (int): 流量类别，默认值为0，取值范围：0-255。\n        FlowLabel (int): 流标签，默认值为0，取值范围：0-1048575。\n        PayloadLength (int): 有效载荷长度，默认值为0，取值范围：0-65535。\n        NextHeader (int): 下一头部协议类型，默认值为59，取值范围：0-255。\n        HopLimit (int): 跳数限制，默认值为255，取值范围：0-255。\n        Source (str): 源IPv6地址，默认值为\"2001::2\"，必须是合法的IPv6地址格式。\n        Destination (str): 目的IPv6地址，默认值为\"2001::1:f1:11\"，必须是合法的IPv6地址格式。\n        Gateway (str): 网关IPv6地址，默认值为\"2001::1\"，必须是合法的IPv6地址格式。\n\n返回值:\n    dict or bool: 如果有字段成功被修改，返回一个字典，键为输入的参数名，值为对应字段在内部对象中的属性名称（如 {'Version': 'version'}）；如果没有字段被成功修改，返回False。\n\n示例:\n\nRobot Framework 示例：\n\n.. code:: robotframework\n\n    | Init Tester |\n    | ${Locations} | Create List | //192.168.0.180/1/1 | //192.168.0.180/1/2 |\n    | ${Port} | reserve_port | Locations=${Locations} |\n    | ${HeaderTypes} | Create List | EthernetII | IPv6 |\n    | ${HeaderOption} | Create List | RouterAlert | EndOfOption | LooseSourceRoute |\n    | Create Stream Header | Stream=${Stream} | HeaderTypes=${HeaderTypes} |\n    | &{Attribute} | Edit Header IPv6 | Stream=${Stream} | Level=0 | Source=2000::1 |\n    | Edit Modifier | Stream=${Stream} | Level=0 | HeaderType=IPv6 | Attribute=${Attribute}[Source] | Type=Increment | Count=10 | Step=2 |\n\n副作用:\n    - 修改了流模板中指定IPv6头部的内部状态。\n    - 若尚未缓存头部信息，可能会调用get_stream_header来获取头部定义。",
  "TesterLibrary.Stream.Header.L3.common.edit_header_ipv6_fragment": "修改测试仪表流量模板中IPv6 Fragment报文头部内容。\n\n该函数用于编辑指定流量流中的IPv6分片报文头部字段，支持对多个可选字段进行修改。内部通过调用底层API实现字段更新，并返回实际修改的字段映射信息。\n\nArgs:\n\n    Stream (:obj:`StreamTemplate` or list): 测试仪表流量对象或包含单个流量对象的列表。该对象必须包含一个唯一标识流的 'handle' 属性。\n    \n    Level (int, optional): 指定IPv6分片头部在流头部列表中的层级索引，默认值为 0。\n\nKeyword Args:\n\n    NextHeader (any, optional): 设置Fragment Header的Next Header字段值。\n    \n    Reserved1 (any, optional): 设置保留字段Reserved1的值。\n    \n    FragOffset (any, optional): 设置分片偏移量字段fragOffset的值，表示当前分片相对于原始数据包的偏移位置。\n    \n    Reserved2 (any, optional): 设置保留字段Reserved2的值。\n    \n    Mflag (any, optional): 设置M Flag字段值，表示是否还有后续分片（0 表示最后一个分片，1 表示还有更多分片）。\n    \n    Ident (any, optional): 设置Identification字段值，用于标识属于同一原始数据包的各个分片。\n\nReturns:\n\n    dict or False: 如果有字段被成功修改，则返回一个字典，将输入参数名称映射到其对应的内部属性名（例如 {'NextHeader': 'nextHeader'}）；\n                   如果未提供任何修改参数，则返回 False。\n\nSide Effects:\n\n    - 修改流对象中IPv6分片头部的相关属性值。\n    - 可能会使用缓存的头部信息（通过 get_stream_header 获取），或者在未缓存时查询系统获取当前头部信息。\n\nExamples:\n\n    robotframework 示例：修改IPv6 Fragment头部的NextHeader字段并设置增量修饰符\n\n.. code:: robotframework\n\n    | &{Attribute} | Edit Header IPv6 Fragment| Stream=${Stream} | Level=0 | NextHeader=10 |\n    | Edit Modifier | Stream=${Stream} | Level=0 | HeaderType=IPv6 | Attribute=${Attribute}[NextHeader] | Type=Increment | Count=10 | Step=2 |",
  "TesterLibrary.Stream.Header.L3.common.edit_header_ipv6_routing": "修改测试仪表流量模板中IPv6 Routing报文头部内容。\n\n该函数用于编辑指定流模板中某一IPv6 Routing头部的字段信息。它会查找流中的所有IPv6 Routing头部，并根据提供的Level索引选择对应的头部进行修改。支持修改的字段包括NextHeader、Length、RoutingType、SegLeft、Reserved和Nodes。\n\nArgs:\n\n    Stream (:obj:`StreamTemplate`): 测试仪表流量对象，类型为StreamTemplate或其子类。如果传入多个流（列表形式），仅处理第一个流。\n\n    Level (int): 指定要修改的IPv6 Routing头部在流中所有匹配头部列表中的索引位置，默认值为0，取值范围：0-65535。\n\nKeyword Args:\n\n    NextHeader (int, optional): 设置Next Header字段的值，默认为59，取值范围：0-255。\n\n    Length (int, optional): 设置Length字段的值，默认为0，表示该扩展头部长度，默认值为0，取值范围：0-255。\n\n    RoutingType (int, optional): 设置Routing Type字段的值，默认为0，取值范围：0-255。\n\n    SegLeft (hex or int, optional): 设置Segments Left字段的值，默认为0，表示剩余路由段数，取值范围：0-255。\n\n    Reserved (bit, optional): 设置保留字段的值，默认为0，取值范围：0-4294967295。\n\n    Nodes (list, optional): 设置节点IPv6地址列表，默认为空列表([])。每个元素应是一个包含IPv6地址的对象或可解析为IPv6地址的字符串。\n\nReturns:\n\n    dict: 包含修改成功的字段名与对应内部属性名称映射的字典，例如：\n\n        {\n            'NextHeader': 'nextHeader',\n            'Length': 'length',\n            'RoutingType': 'routingType',\n            'SegLeft': 'segLeft',\n            'Reserved': 'reserved',\n            'Nodes_2022::2': 'node.Ipv6Address_0.value'\n        }\n\n    如果没有成功修改任何字段，则返回False。\n\nRaises:\n\n    ContinuableFailure: 当底层调用失败（返回False）时抛出此异常，表示函数执行未成功，但程序可以继续运行。\n\nSide Effects:\n\n    - 若尚未缓存该流的头部信息，会调用get_stream_header()获取并缓存。\n    - 修改指定层级IPv6 Routing头部的一个或多个字段值。\n\nExamples:\n    robotframework 示例:\n\n.. code:: robotframework\n\n    | &{Attribute} | Edit Header IPv6 Routing| Stream=${Stream} | Level=0 | NextHeader=10 |\n    | Edit Modifier | Stream=${Stream} | Level=0 | HeaderType=IPv6 | Attribute=${Attribute}[NextHeader] | Type=Increment | Count=10 | Step=2 |",
  "TesterLibrary.Stream.Header.L3.common.edit_header_ipv6_authentication": "修改测试仪表流量模板中IPv6 Authentication报文头部的指定字段内容。\n\n该函数用于修改指定流量模板中的第Level个IPv6 Authentication头部字段。支持修改的字段包括NextHeader、Length、Reserved、Spi、SeqNum、AuthData和Pad。若未显式提供某个字段值，则使用默认值进行设置。成功修改一个或多个字段后，将返回包含所有更新字段及其新值的字典；若未成功修改任何字段，则返回False。\n\n参数:\n    Stream (:obj:`StreamTemplate`): 测试仪表流量对象，表示待修改的流量模板。必须具有唯一标识符'handle'属性。若传入列表类型，则仅使用第一个元素。\n    Level (int): 指定要修改的IPv6 Authentication头部在该流量模板中同类头部的索引位置，默认为0。\n    **kwargs (可选):\n        NextHeader (int): 设置Authentication Header的Next Header字段，默认值：59，取值范围：0-255\n        Length (int): 设置Authentication Header的Length字段，默认值：0，取值范围：0-255\n        Reserved (int): 设置保留字段，默认值：0，取值范围：0-65535\n        Spi (hex): 设置Security Parameter Index字段，默认值：0，取值范围：0-4294967295\n        SeqNum (int): 设置Sequence Number字段，默认值：0，取值范围：0-4294967295\n        AuthData (hex): 设置Authentication Data字段，默认值：0000\n        Pad (hex): 设置8字节对齐填充字段，默认值：<Auto>0000，取值范围：长度0-7字节的十六进制数\n\n返回值:\n    dict or bool: 包含所有成功修改字段及其新值的字典，格式如示例所示；若未成功修改任何字段则返回False。\n\n示例:\n    robotframework:\n\n.. code:: robotframework\n\n    | &{Attribute} | Edit Header IPv6 Authentication| Stream=${Stream} | Level=0 | NextHeader=10 |\n    | Edit Modifier | Stream=${Stream} | Level=0 | HeaderType=IPv6 | Attribute=${Attribute}[NextHeader] | Type=Increment | Count=10 | Step=2 |\n\n注意事项:\n    - 该函数会直接修改流量模板中对应IPv6 Authentication头部的内容。\n    - 默认值仅在未显式传递相应参数时生效。\n    - Pad字段默认值<Auto>0000表示由系统自动补全为8字节对齐的填充数据。",
  "TesterLibrary.Stream.Header.L3.common.edit_header_ipv6_destination": "修改测试仪表流量模板中IPv6 Destination报文头部内容。\n\n该函数用于修改指定流模板中的IPv6 Destination头部字段。它会查找流中所有类型为'ipv6destinationheader'的头部，并根据传入的Level索引选择要修改的具体头部。支持修改NextHeader、Length、Pad字段，并可插入OptionHeaders。\n\n参数:\n    Stream (object or list): 测试仪表流量对象或仅包含一个流对象的列表。\n        - 如果传入列表，则使用第一个元素。\n        - 该流必须具有唯一标识其的'handle'属性。\n    Level (int): 要修改的IPv6 Destination头部在该流中所有此类头部中的索引，默认值: 0，取值范围：0-65535\n\n关键字参数(可选):\n    NextHeader (int): 设置'nextHeader'字段，表示下一头部协议类型，默认值: 59，取值范围: 0-255\n    Length (int): 设置'length'字段，通常表示该头部长度（以字节为单位），默认值: 0，取值范围: 0-255\n    Pad (hex): 设置'pad'字段，用于头部对齐的8字节填充数据，默认值: <Auto>000000000000，取值范围: 长度0-7字节的十六进制数\n    OptionHeaders (list): 要插入的选项头部列表，支持以下值：\n        - pad1\n        - padN\n        - generalTLV\n        - bierv6\n\n返回值:\n    dict: 包含已修改字段及其对应映射值的字典，可能的键包括：\n        'NextHeader' -> 实际设置的nextHeader值\n        'Length' -> 实际设置的length值\n        'Pad' -> 实际设置的pad值\n        'OptionHeaders' -> 布尔值，表示是否成功插入了选项头部\n\n示例:\n    robotframework 示例：\n\n.. code:: robotframework\n\n    | &{Attribute} | Edit Header IPv6 Destination| Stream=${Stream} | Level=0 | NextHeader=10 |\n    | Edit Modifier | Stream=${Stream} | Level=0 | HeaderType=IPv6 | Attribute=${Attribute}[NextHeader] | Type=Increment | Count=10 | Step=2 |\n\n副作用:\n    - 修改流模板中IPv6 Destination头部的指定字段\n    - 若提供OptionHeaders参数，则会在该头部中插入相应的选项头部\n    - 内部使用get_stream_header进行缓存优化来获取和存储流的头部对象",
  "TesterLibrary.Stream.Header.L3.common.edit_header_ipv6_destination_option": "修改测试仪表流量模板中IPv6 Destination Options头部的特定选项内容\n\n该函数用于编辑指定流模板中的IPv6 Destination Options头部中的某个具体选项。通过Level参数可以指定要编辑的是第几个Destination Options头部，通过Index参数可以指定该头部中第几个Option被编辑。\n\n支持编辑的选项类型包括：\n- pad1: 单字节填充选项\n- padN: 多字节填充选项\n- generalTLV: 自定义TLV格式选项\n- bierv6: BIERv6相关选项\n\n每个选项类型都有对应的参数集，调用时需根据Option参数传入对应类型的配置值。\n\nArgs:\n\n    Stream (:obj:`StreamTemplate`): 测试仪表流量对象，类型为StreamTemplate或包含该对象的列表。若传入列表，则仅使用第一个元素。\n\n    Option (str): 要编辑的IPv6 Destination Option类型，有效取值为：pad1, padN, generalTLV, bierv6（大小写不敏感）\n\n    Level (int, optional): 指定要编辑的IPv6 Destination Options头部在流中的层级索引，默认为0（即第一个Destination Options头部），取值范围：0-65535\n\n    Index (int, optional): 指定要编辑的Option在该Destination Options头部中的索引位置，默认为0（即第一个Option），取值范围：0-65535\n\nKeyword Args:\n\n    pad1:\n        Type (int): Pad1 Option类型字段，默认值：0，取值范围：0-255\n\n    padN:\n        Type (int): PadN Option类型字段，默认值：0，取值范围：0-255\n        Length (int): PadN Option长度字段，默认值：1，取值范围：0-5\n        Padding (hex): 填充字段，默认值：00，取值为长度0-5字节的十六进制数据\n\n    generalTLV:\n        Type (int): TLV Option类型字段，默认值：15，取值范围：0-255\n        Length (int): TLV Option长度字段，默认值：10，取值范围：0-255\n        Data (hex): TLV数据字段，默认值：0102030405060708090A，取值为长度0-1024字节的十六进制数据\n\n    bierv6:\n        Optiontype (int): Option类型字段，默认值：122，取值范围：0-255\n        Optionlen (int): Option长度字段，默认值：0，取值范围：0-255\n        BiftId (int): BIFT-ID，默认值：1，取值范围：0-1048575\n        TrafficClass (int): 流量类别字段，默认值：0，取值范围：0-7\n        SBit (bit): sBit字段，默认值：1，取值范围：0或1\n        Ttl (int): TTL字段，默认值：64，取值范围：0-255\n        Nibble (bit): Nibble字段，默认值：0101，取值范围：0000到1111\n        BierVer (int): BIER版本号，默认值：0，取值范围：0-15\n        Bsl (int): BSL字段，默认值：4，取值范围：0-15\n        Entropy (int): Entropy字段，默认值：1，取值范围：0-1048575\n        Oam (int): OAM字段，默认值：0，取值范围：0-3\n        Rsv (int): RSV字段，默认值：0，取值范围：0-3\n        Dscp (int): DSCP字段，默认值：0，取值范围：0-63\n        Protocol (int): 协议字段，默认值：63，取值范围：0-63\n        BfirId (int): BFIR-ID，默认值：1，取值范围：0-65535\n        BierbitString (int): 要插入的BIER Bit Strings数量，默认值：0，取值范围：0-100\n\nReturns:\n\n    dict: 包含编辑结果信息的字典，具体键值取决于实际编辑的选项类型和底层实现。例如：\n\n    .. code-block:: python\n\n        {\n            'Type': 'options.ipv6DestinationOptionList_1.padN.type',\n            'Length': 'options.ipv6DestinationOptionList_1.padN.length',\n            'Padding': 'options.ipv6DestinationOptionList_1.padN.padding'\n        }\n\nRaises:\n\n    ContinuableFailure: 当底层调用返回False表示操作失败时，抛出可继续执行的异常\n\nExamples:\n\n    使用RobotFramework示例：\n\n    .. code:: RobotFramework\n\n        | Edit Header IPv6 Destination| Stream=${Stream} | Level=0 | OptionHeaders=bierv6 |\n        | Edit Header Ipv6 Destination Option | Stream=${Stream} | Option=bierv6 | BierbitString=${${1}} |",
  "TesterLibrary.Stream.Header.L3.common.edit_header_ipv6_destination_bier_bit_string": "修改测试仪表流量模板中IPv6 Destination报文头部的BIER Option中的Bit String内容。\n\n该函数用于编辑指定流模板中某个IPv6 Destination头部下的BIER（Bit Index Explicit Replication）选项中的Bit String字段。通过该函数可以设置一个或多个32位的二进制字符串，用于定义BIER转发路径中的复制行为。\n\n参数:\n    Stream (:obj:`StreamTemplate` 或 list): 流模板对象，类型为StreamTemplate；也可以传入包含该对象的列表（此时使用第一个元素）。该对象必须包含有效的handle标识。\n    Level (int, optional): 要修改的IPv6 Destination头部在流中所有IPv6 Destination头部中的索引位置，默认值为0，取值范围：0-65535。\n    BierIndex (int, optional): 要修改的BIER Option头部在该IPv6 Destination头部中所有BIER Option头部的索引位置，默认值为0，取值范围：0-65535。\n    Index (int, optional): 要修改的Bit String在当前BIER Option头部中的索引位置，默认值为0，取值范围：0-65535。\n    **kwargs: 其他关键字参数，传递给底层BIER Bit String配置接口。常用参数包括：\n        bitString (bit): 第一个Bit String字段，长度为32位的二进制数，默认值为'01010101010101010101010101010101'。\n        bitString2 (bit): 第二个Bit String字段，长度为32位的二进制数，默认值同上。\n\n返回值:\n    dict: 包含实际修改的Bit String字段的XPath路径信息，例如::\n        {\n            'BitString': 'options.ipv6DestinationOptionList_3.bierv6.bierbitString.customOption_1.bitStringsOption.bitString',\n            'bitString2': 'options.ipv6DestinationOptionList_3.bierv6.bierbitString.customOption_1.bitStringsOption.bitString2'\n        }\n    bool: 如果操作失败，则返回False，并抛出ContinuableFailure异常。\n\n注意事项:\n    - 该函数依赖于流模板中已经正确配置了IPv6 Destination头部和BIER Option头部。\n    - 如果提供的Level、BierIndex或Index超出有效范围，可能导致找不到目标头部而操作失败。\n    - 默认参数值可以根据需要覆盖，但必须确保输入的是合法的32位二进制字符串。\n    - 此函数会调用底层系统命令接口，可能会对测试设备上的流配置产生直接影响。",
  "TesterLibrary.Stream.Header.L3.common.edit_header_ipv6_encapsulation": "修改测试仪表流量模板中IPv6 Encapsulation报文头部的指定字段内容。\n\n该函数用于更新指定流中的IPv6 Encapsulation头部属性，支持修改SPI（Security Parameter Index）、序列号、载荷数据、填充数据、长度、下一头部类型、认证数据以及对齐填充等字段。函数会根据传入的Stream对象获取对应的头部列表，筛选出IPv6 Encapsulation头部，并根据Level参数选择对应索引的头部进行修改。若提供了任意可选参数（如Spi、SeqNum等），则会在该头部对象中更新相应的字段值。\n\n参数说明：\n    Stream (object or list): 测试仪表流量对象（StreamTemplate类型）或仅包含一个流对象的列表。如果传入列表，则仅使用第一个元素。该流对象必须包含唯一标识其句柄的'handle'属性。\n    Level (int, optional): 指定要修改的IPv6 Encapsulation头部在所有此类头部中的索引位置，默认为0，取值范围：0-65535。\n    Spi (int, optional): IPsec安全参数索引，用于设置头部的'spi'字段，取值范围：0-4294967295。\n    SeqNum (int, optional): IPsec序列号，用于设置头部的'seqNum'字段，取值范围：0-4294967295。\n    PayloadData (hex, optional): 载荷数据，以十六进制形式表示，长度为2-128字节，用于设置头部的'payloadData'字段。\n    PadData (hex, optional): 填充数据，以十六进制形式表示，长度为0-255字节，用于设置头部的'padData'字段。\n    Length (int, optional): 封装载荷的长度，用于设置头部的'length'字段，取值范围：0-255。\n    NextHeader (int, optional): 下一头部类型标识，用于设置头部的'nextHeader'字段，取值范围：0-255，默认值为59。\n    AuthData (hex, optional): 认证数据，以十六进制形式表示，长度为2-128字节，用于设置头部的'authData'字段。\n    Pad (hex, optional): 8字节对齐填充数据，以十六进制形式表示，长度为0-7字节，默认为空字符串，用于设置头部的'pad'字段。\n\n返回值：\n    dict: 一个字典，键为传入并成功修改的参数名（如'Spi', 'SeqNum'等），值为对应内部字段名（如'spi', 'seqNum'等），表示哪些字段被成功更新。\n\n示例：\n    使用Robot Framework调用该函数：\n\n.. code:: robotframework\n\n    | &{Attribute} | Edit Header IPv6 Encapsulation| Stream=${Stream} | Level=0 | NextHeader=10 |\n    | Edit Modifier | Stream=${Stream} | Level=0 | HeaderType=IPv6 | Attribute=${Attribute}[NextHeader] | Type=Increment | Count=10 | Step=2 |\n\n副作用：\n    - 会修改指定流中IPv6 Encapsulation头部的属性状态。",
  "TesterLibrary.Stream.Header.L3.common.edit_header_ipv6_hopbyhop": "修改测试仪表流量模板中IPv6 Hop-by-Hop报文头部内容。该函数用于对指定流中的IPv6 Hop-by-Hop头部字段进行修改，包括NextHeader、Length、Pad以及OptionHeaders等字段。\n\nArgs:\n\n    Stream (:obj:`StreamTemplate`): 测试仪表流量对象，类型为StreamTemplate或其子类实例，必须包含唯一标识流的handle属性。\n    \n    Level (int, optional): 表示在存在多个IPv6 Hop-by-Hop头部时，要修改的第几个头部（索引），默认值为0，取值范围：0-65535。\n\nKeyword Args:\n\n    NextHeader (int, optional): 设置Hop-by-Hop头部的Next Header字段，表示后续头部的类型，默认值：59（无后续头部），取值范围：0-255。\n\n    Length (int, optional): 设置Hop-by-Hop头部长度字段，通常表示包括选项在内的整个头部长度（以字节为单位），默认值：0，取值范围：0-255。\n\n    Pad (hex, optional): 8字节对齐填充字段，用于设置填充字段的值，默认值为Auto（自动计算填充），可选用户自定义十六进制值。\n\n    OptionHeaders (dict or list, optional): 插入或配置Hop-by-Hop扩展头部中的选项字段。支持的选项包括：\n\n        pad1: 单字节填充\n\n        padN: 多字节填充\n\n        routerAlert: 路由器告警选项\n\n        jumbo: 巨帧负载选项\n\n        generalTLV: 通用TLV格式选项\n\nReturns:\n\n    dict: 返回一个字典，表示成功修改的字段及其对应的内部属性名称。例如::\n\n        {\n            'NextHeader': 'nextHeader',\n            'Length': 'length',\n            'Pad': 'pad',\n            'OptionHeaders': True\n        }\n\n    如果没有字段被成功修改，则返回False。\n\nSide Effects:\n\n    - 修改流中指定位置的IPv6 Hop-by-Hop头部字段。\n    - 如果提供了OptionHeaders参数，可能会改变头部结构，插入新的选项字段。\n\nExamples:\n    robotframework 示例：\n\n.. code:: robotframework\n\n    | &{Attribute} | Edit Header IPv6 HopByHop | Stream=${Stream} | Level=0 | NextHeader=10 |\n    | Edit Modifier | Stream=${Stream} | Level=0 | HeaderType=IPv6 | Attribute=${Attribute}[NextHeader] | Type=Increment | Count=10 | Step=2 |",
  "TesterLibrary.Stream.Header.L3.common.edit_header_ipv6_hopbyhop_option": "修改测试仪表流量模板中IPv6 Hop-by-Hop选项头部的内容。\n\n该函数用于在指定的流（Stream）中编辑某个特定层级的IPv6 Hop-by-Hop Options头部中的具体Option字段。用户可以通过参数选择不同的Option类型（如pad1、padN、routerAlert等），并提供对应的配置值进行修改。\n\n参数:\n    Stream (:obj:`StreamTemplate` 或 list): 流对象或流对象列表，若传入列表则使用第一个流对象。\n                                             必须包含一个 'handle' 属性，用于唯一标识该流。\n    Option (str): 要修改的IPv6 Hop-by-Hop选项类型，可选值包括：\n                  - 'pad1': 无参数的填充选项\n                  - 'padn': 带长度和填充内容的填充选项\n                  - 'routeralert': 路由器告警选项，需提供Value\n                  - 'jumbo': 巨型载荷选项，需提供Data表示载荷大小\n                  - 'generaltlv': 自定义TLV格式选项，需提供Type、Length和Data\n    Level (int, optional): 指定要修改的IPv6 Hop-by-Hop头部在流中的层级位置，默认为0（即第一个Hop-by-Hop头部）\n    Index (int, optional): 指定要修改的Option在其所属Hop-by-Hop头部中的索引位置，默认为0（即第一个Option）\n\n关键字参数（根据所选Option不同而变化）:\n\n    pad1:\n        Type (int): Pad1选项的类型值，默认0，取值范围0-255\n\n    padN:\n        Type (int): PadN选项的类型值，默认0，取值范围0-255\n        Length (int): PadN选项的数据长度，默认1，取值范围0-5\n        Padding (hex): PadN选项的填充数据，默认'00'，为长度0-5字节的十六进制数\n\n    routerAlert:\n        Type (int): Router Alert选项的类型值，默认5，取值范围0-255\n        Length (int): Router Alert选项的数据长度，默认2，取值范围0-255\n        Value (int): Router Alert选项的具体值，默认0，取值范围0-65535\n\n    jumbo:\n        Type (int): Jumbo Payload选项的类型值，默认194，取值范围0-255\n        Length (int): Jumbo Payload选项的数据长度，默认4，取值范围0-5\n        Data (int): Jumbo Payload选项的数据值，默认0，取值范围0-4294967295\n\n    generalTLV:\n        Type (int): 自定义Option的类型值，默认15，取值范围0-255\n        Length (int): 自定义Option的数据长度，默认10，取值范围0-255\n        Data (hex): 自定义Option的数据内容，默认'0102030405060708090A'，为长度0-1024字节的十六进制数\n\n返回值:\n    dict: 编辑操作的结果信息，通常包含操作是否成功及相关的元数据。例如：\n\n        {\n            'Type': 'options.ipv6HopByHopOptionList_0.pad1.type'\n        }\n\n示例:\n    .. code:: RobotFramework\n\n    | Edit Header IPv6 HopByHop| Stream=${Stream} | Level=0 | OptionHeaders=generalTLV |\n    | Edit Header Ipv6 HopByHop Option | Stream=${Stream} | Option=generalTLV | Data=FFFFFF |",
  "TesterLibrary.Stream.Header.L3.common.edit_header_ipv6_sr": "修改测试仪表流量模板中IPv6 Segment Routing（SR）报文头部内容\n\n该函数用于编辑指定流量流中的IPv6 SR头部字段，支持对NextHeader、Length、RoutingType、SegLeft、LastEntry、SRHeaderFlag、Tag以及SRHOption等参数进行修改。\n\nArgs:\n\n    Stream (:obj:`StreamTemplate` 或 list): 测试仪表流量对象或包含单个流量对象的列表。若传入列表，则仅使用第一个元素。\n                                          该对象必须具有唯一标识流的 'handle' 属性。\n\n    Level (int, optional): 指定在所有IPv6 SR头部中的索引位置，默认值为0，有效范围：0-65535\n\nKeyword Args:\n\n    NextHeader (int, optional): 下一层协议类型，默认值：59，取值范围：0-255\n\n    Length (int, optional): SR头部长度（不包括前8字节），默认值：0，取值范围：0-255\n\n    RoutingType (int, optional): 路由类型，默认值：4，取值范围：0-255\n\n    SegLeft (int, optional): 剩余段数，默认值：0，取值范围：0-255\n\n    LastEntry (int, optional): 最后一个段索引，默认值：0，取值范围：0-255\n\n    SRHeaderFlag (int, optional): SR头部标志位，8位二进制表示，默认值：0b00000000\n\n    Tag (int, optional): 用于不同包之间段匹配的标签，默认值：0，取值范围：0-65535\n\n    SRHOption (object, optional): SR头部扩展选项，可选以下参数：\n\n        sRSegment: 段列表\n\n        sRIngressNodeTlv: 入节点TLV\n\n        sREgressNodeTlv: 出节点TLV\n\n        sROpaqueContainerTlv: 不透明容器TLV\n\n        sRHmacTlv: HMAC TLV\n\n        sRPadding1Tlv: 填充1 TLV\n\n        sRPaddingTlv: 填充 TLV\n\n        generalTLV: 通用TLV\n\nReturns:\n\n    dict: 返回修改成功的参数映射关系，键为传入的参数名，值为内部属性名，例如::\n\n        {\n            'NextHeader': 'nextHeader',\n            'Length': 'length',\n            'SegLeft': 'segLeft'\n        }\n\nRaises:\n\n    ContinuableFailure: 如果底层调用失败则抛出此异常\n\nExamples:\n\n    robotframework 示例：\n\n.. code:: robotframework\n\n    | &{Attribute} | Edit Header IPv6 Sr | Stream=${Stream} | Level=0 | NextHeader=10 |\n    | Edit Modifier | Stream=${Stream} | Level=0 | HeaderType=IPv6 | Attribute=${Attribute}[NextHeader] | Type=Increment | Count=10 | Step=2 |",
  "TesterLibrary.Stream.Header.L3.common.edit_header_ipv6_sr_option": "修改测试仪表流量模板中IPv6 Segment Routing (SRv6)头部的特定选项内容。\n\n该函数用于编辑指定流（Stream）中的SRv6头部选项。支持多种类型的SRv6选项编辑，包括Segment、Ingress Node TLV、Egress Node TLV、Opaque Container TLV、HMAC TLV、Padding1 TLV、Padding TLV以及通用TLV等。通过Level参数选择流中的SRv6头部层级，Index参数选择具体选项位置，并根据Option类型传递对应的编辑参数进行配置修改。\n\n参数:\n\n    Stream (object 或 list): 测试仪表流量对象或对象列表。如果传入的是列表，则仅使用第一个元素。该对象必须包含唯一标识符'handle'，用于识别流。\n\n    Option (str): 指定要编辑的SRv6选项类型，大小写不敏感。有效值包括：\n\n        'srsegment', 'sringressnodetlv', 'sregressnodetlv', 'sropaquecontainertlv',\n        'srhmactlv', 'srpadding1tlv', 'srpaddingtlv', 'generaltlv'\n\n    Level (int, optional): SRv6头部在流中的层级索引，默认为0，取值范围：0-65535。用于在存在多个SRv6头部时选择目标头部。\n\n    Index (int, optional): 选项在SRv6头部选项列表中的索引位置，默认为0，取值范围：0-65535。用于定位选项结构内的具体条目。\n\n    **kwargs: 可选的关键字参数，依据Option类型提供不同的参数集用于编辑操作。例如：\n\n        - srsegment: Segment (str)\n        - sringressnodetlv: Type, Length, Reserved, Flags, IngressNode\n        - sregressnodetlv: Type, Length, Reserved, Flags, EgressNode\n        - sropaquecontainertlv: Type, Length, Reserved, Flags, OpaqueContainer\n        - srhmactlv: Type, Length, Reserved, HmacKeyId, hmac\n        - srpadding1tlv: Type\n        - srpaddingtlv: Type, Length, Padding\n        - generaltlv: Type, Length, Data\n\n返回值:\n\n    dict: 编辑结果的字典形式，聚合内部调用方法的返回值。具体键值对取决于执行的编辑操作。\n\n示例:\n\n    .. code:: RobotFramework\n\n    | Edit Header IPv6 Sr| Stream=${Stream} | Level=0 | SRHOption=generalTLV |\n    | Edit Header Ipv6 Sr Option | Stream=${Stream} | Option=generalTLV | Data=FFFFFF |\n\n注意事项:\n\n    - 根据提供的Option类型，需正确传递对应的关键字参数。\n    - 函数内部调用底层SDK实现编辑功能，若失败会抛出ContinuableFailure异常。\n    - 此函数会直接影响流模板的SRv6头部配置，可能触发底层命令执行。",
  "TesterLibrary.Stream.Header.L3.icmpv4.edit_header_icmp_echo_request": "修改测试仪表流量模板中ICMPv4 Echo Request报文头部字段内容。\n\n该函数用于编辑指定流量模板中的ICMPv4 Echo Request报文头部字段。可以修改的字段包括Type、Code、Checksum、Identifier和SequenceNumber。仅传入的参数会被更新，未提供的参数对应的字段将保持不变。\n\nParameters:\n    Stream (:obj:`StreamTemplate`): 测试仪表流量对象，必须包含唯一标识该流量的handle属性。\n    \n    Level (int): ICMPv4 Echo Request头部在流量模板头部列表中的索引层级，取值范围为0-65535，默认为0。\n\nKeyword Args:\n    Type (int, optional): ICMP报文类型字段，取值范围0-255，默认值为8。\n\n    Code (int, optional): ICMP报文代码字段，取值范围0-255，默认值为0。\n\n    Checksum (str, optional): 校验和字段，可选值范围为0000-ffff或\"AUTO\"，其中ffff表示产生校验错误，AUTO表示自动计算校验和，默认值为\"0000\"。\n\n    Identifier (int, optional): 用于匹配请求与响应的标识符字段，取值范围0-65535，默认值为0。\n\n    SequenceNumber (int, optional): 序列号字段，用于检测回显请求/响应顺序，取值范围0-65535，默认值为0。\n\nReturns:\n    dict: 返回一个字典，显示被修改的字段名（字符串形式）及其对应的内部属性名称。若没有字段被修改，则返回False。\n\nRaises:\n    ContinuableFailure: 如果函数调用失败，将抛出ContinuableFailure异常。\n\nSide Effects:\n    - 会修改指定流中ICMPv4 Echo Request头部的相关字段。\n\nExample:\n    .. code:: RobotFramework\n\n        | ${Stream} | add_stream | Port=${Port} |\n        | ${HeaderTypes} | Create List | EthernetII | IPv4 | Icmpv4EchoRequest |\n        | create_stream_header | Stream=${Stream} | HeaderTypes=${HeaderTypes} |\n        | edit_header_icmp_echorequest | Stream=${Stream} | Level=0 | Identifier=100 | SequenceNumber=200 |",
  "TesterLibrary.Stream.Header.L3.icmpv4.edit_header_icmp_mask_reply": "修改测试仪表流量模板中ICMP Mask Reply报文头部内容。\n\n该函数用于编辑指定流量流中的ICMP Mask Reply头部字段。它会查找该流量流中所有ICMP Mask Reply头部，并根据提供的参数更新指定层级（Level）的头部字段。只有提供非None值的字段会被更新。\n\n参数:\n    Stream (object or list): 测试仪表流量对象，或者包含单个流量对象的列表。如果传入列表，仅使用第一个元素。\n                             流量对象必须包含一个'handle'属性，用于唯一标识该流量。\n    Level (int, optional): 要修改的ICMP Mask Reply头部在流量模板中所有ICMP Mask Reply头部的索引位置，默认为0。\n    **kwargs (optional): 支持以下关键字参数：\n        Type (int, optional): ICMP类型字段值，范围0-255，默认18\n        Code (int, optional): ICMP代码字段值，范围0-255，默认0\n        Checksum (str, optional): 校验和字段值，范围0000-ffff或\"AUTO\"，其中ffff表示产生错误，AUTO表示自动计算校验和，默认0000\n        Identifier (int, optional): 标识符字段值，范围0-65535，默认0\n        SequenceNumber (int, optional): 序列号字段值，范围0-65535，默认0\n        AddrMask (int, optional): 地址掩码字段值，范围0-4294967295，默认0\n\n返回值:\n    dict: 包含成功更新字段的字典，键为参数名称，值为对应的内部属性名称（例如{'Type': 'type', 'Code': 'code'}）。\n          如果没有任何字段被更新，则返回False。\n\n副作用:\n    - 会修改流量模板中对应的ICMP Mask Reply头部属性\n    - 内部调用`get_stream_header`函数，可能会查询并缓存该流量的头部对象\n\n示例:\n    .. code:: RobotFramework\n\n        | ${Stream} | add_stream | Port=${Port} |\n        | ${HeaderTypes} | Create List | EthernetII | IPv4 | Icmpv4MaskReply |\n        | Create Stream Header | Stream=${Stream} | HeaderTypes=${HeaderTypes} |\n        | Edit Header Icmp Mask Reply | Stream=${Stream} | Level=0 | Identifier=100 | SequenceNumber=200 |",
  "TesterLibrary.Stream.Header.L3.icmpv4.edit_header_icmp_mask_request": "修改测试仪表流量模板中ICMP Mask Request报文头部内容。\n\n该函数用于修改指定流量模板中的ICMP Mask Request头部字段。它会获取与流对象关联的所有ICMP Mask Request头部，并根据提供的Level（索引）修改对应的头部字段。如果提供了任意一个或多个字段值（非None），则更新对应字段并返回记录这些更改的字典；如果没有字段被修改，则返回False。\n\n参数:\n    Stream (object): 测试仪表流量对象，必须包含唯一标识流的'handle'属性。如果传入的是列表，则使用第一个元素作为流对象。\n    Level (int, optional): 要修改的ICMP Mask Request头部在该流所有ICMP Mask Request头部列表中的索引，默认为0。\n    **kwargs (optional): 以下任选的关键字参数用于指定要修改的字段及其值：\n        Type (int, optional): ICMP类型字段，取值范围0-255，默认值17。\n        Code (int, optional): ICMP代码字段，取值范围0-255，默认值0。\n        Checksum (str or int, optional): 校验和字段，取值范围0000-ffff、\"AUTO\"，其中\"ffff\"表示人为引入错误，\"AUTO\"表示自动计算校验和，默认值为0000。\n        Identifier (int, optional): 标识符字段，取值范围0-65535，默认值0。\n        SequenceNumber (int, optional): 序列号字段，取值范围0-65535，默认值0。\n        AddrMask (int, optional): 地址掩码字段，取值范围0-4294967295，默认值0。\n\n返回值:\n    dict or bool: 如果有一个或多个字段被成功修改，返回一个字典，键为修改的字段名，值为对应的字段值；如果未进行任何修改，返回False。\n\n副作用:\n    - 如果尚未缓存流的头部信息，则调用`get_stream_header`函数获取并缓存。\n    - 根据提供的字段更新ICMP Mask Request头部对象的属性。\n\n示例:\n    .. code:: RobotFramework\n\n        | ${Stream} | add_stream | Port=${Port} |\n        | ${HeaderTypes} | Create List | EthernetII | IPv4 | EchoRequest |\n        | Create Stream Header | Stream=${Stream} | HeaderTypes=${HeaderTypes} |\n        | Edit Header Icmp Mask Request | Stream=${Stream} | Level=0 | Identifier=100 | SequenceNumber=200 |",
  "TesterLibrary.Stream.Header.L3.icmpv4.edit_header_icmp_dest_unreach": "修改测试仪表流量模板中ICMP Destination Unreachable（目的不可达）报文头部内容，包括ICMP头部字段和嵌套的IPv4头部字段。\n\n该函数用于修改指定流量流中的某个ICMP目的不可达报文头部的字段。如果存在多个ICMP目的不可达头部，则通过Level参数选择要修改的头部索引。仅提供需要修改的字段即可，未提供的字段将保持原样。\n\nArgs:\n    Stream (object): 测试仪表流量对象，必须包含'handle'属性。若传入列表，仅使用第一个元素。\n    Level (int, optional): ICMP目的不可达头部在流中的索引位置，默认为0（即第一个匹配的头部）。\n\nKeyword Args:\n    Type (int, optional): ICMP消息类型字段，取值范围0-255，默认3。\n    Code (int, optional): ICMP消息代码字段，取值范围0-255，默认0。\n    Checksum (int or str, optional): ICMP校验和字段，支持整数或十六进制字符串表示，如\"0000\"、\"ffff\"或\"AUTO\"，其中\"AUTO\"表示自动计算，默认为\"AUTO\"。\n    Unused (int, optional): 目的不可达消息中未使用字段，取值范围0-4294967295，默认3。\n    Data (bytes or str, optional): ICMP头部携带的数据部分，以字节或十六进制字符串形式提供，默认为8字节零数据。\n    Ipv4HeaderVersion (int, optional): IPv4版本号字段，取值范围0-15，默认4（IPv4）。\n    Ipv4HeaderHeadLen (int, optional): IPv4头部长度字段，单位为32位字，取值范围0-15，默认5（即20字节）。\n    Ipv4HeaderTosPrecedence (int, optional): IPv4服务类型（TOS）中的优先级字段，取值范围0-7，默认0。\n    Ipv4HeaderTosDelay (bool, optional): TOS中的延迟标志，True表示置位，默认False。\n    Ipv4HeaderTosThroughput (bool, optional): TOS中的吞吐量标志，默认False。\n    Ipv4HeaderTosReliability (bool, optional): TOS中的可靠性标志，默认False。\n    Ipv4HeaderTosMonetaryCost (bool, optional): TOS中的费用标志，默认False。\n    Ipv4HeaderTosReserved (bool, optional): TOS中的保留位标志，默认False。\n    Ipv4HeaderDiffservDscp (int, optional): 差分服务代码点（DSCP），取值范围0-63，默认0。\n    Ipv4HeaderDiffserveCodePointPrecedence (int, optional): DSCP代码点优先级，取值范围0-63，默认0。\n    Ipv4HeaderDiffserveClassSelectorPrecedence (int, optional): 类选择器优先级，取值范围0-7，默认0。\n    Ipv4HeaderDiffservDscpDrop (int, optional): DSCP丢弃优先级，取值范围0-3，默认0。\n    Ipv4HeaderDiffservDscpUndefine (int, optional): DSCP中未定义字段，取值范围0-1，默认0。\n    Ipv4HeaderDiffservEcn (int, optional): 显式拥塞通知（ECN），取值范围0-3，默认0。\n    Ipv4HeaderTosByte (int, optional): 整个IPv4 TOS字节字段，取值范围0-255，默认0。\n    Ipv4HeaderTotalLength (int, optional): IPv4总长度字段，取值范围0-65535，默认20（仅IPv4头部）。\n    Ipv4HeaderID (int, optional): IPv4标识字段，用于分片识别，默认123。\n    Ipv4HeaderFlags (int, optional): IPv4标志字段，取值范围0-7，默认0。\n    Ipv4HeaderOffset (int, optional): 分片偏移字段，取值范围0-8191，默认0。\n    Ipv4HeaderTTL (int, optional): 生存时间（TTL）字段，取值范围0-255，默认128。\n    Ipv4HeaderProtocol (int, optional): 协议字段，取值范围0-255，默认235（自定义协议）。\n    Ipv4HeaderChecksum (int or str, optional): IPv4校验和字段，十六进制字符串表示，如\"0000\"或\"AUTO\"，默认\"AUTO\"。\n    Ipv4HeaderSource (str, optional): 源IP地址字段，合法IPv4地址格式，默认192.168.0.2。\n    Ipv4HeaderDestination (str, optional): 目的IP地址字段，合法IPv4地址格式，默认192.168.0.10。\n    Ipv4HeaderPadding (bytes or str, optional): IPv4填充字段，最多3字节，默认无填充。\n    Ipv4HeaderGateway (str, optional): 网关地址字段，合法IPv4地址格式，默认192.168.0.1。\n    Ipv4HeaderHeaderOption (list, optional): 插入IPv4选项字段，支持以下选项：\n        EndOfOption\n        Nop\n        Security\n        LooseSourceRoute\n        StrictSourceRoute\n        RouterAlert\n        RecordRoute\n        TimeStamp\n        StreamIdentifier\n        General\n\nReturns:\n    dict: 成功修改的字段名称与内部字段名的映射关系，例如：\n\n        {\n            'Type': 'type',\n            'Code': 'code',\n            'Checksum': 'icmpChecksum',\n            'Unused': 'unused',\n            'Data': 'headerData',\n            ...\n        }\n\nRaises:\n    ContinuableFailure: 如果修改失败，抛出可继续执行的异常。\n\nSide Effects:\n    - 修改的配置会直接作用于系统中的对应流。\n    - 可能调用`edit_tos`, `edit_diffserv`, 或 `edit_tosbyte`等内部函数更新嵌套字段。\n    - 所有更改都会在Renix系统中持久化，并影响后续与此流相关的数据包发送。\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${Stream} | add_stream | Port=${Port} |\n        | ${HeaderTypes} | Create List | EthernetII | IPv4 | EchoRequest |\n        | Create Stream Header | Stream=${Stream} | HeaderTypes=${HeaderTypes} |\n        | Edit Header Icmp Dest Unreach | Stream=${Stream} | Level=0 | Identifier=100 |",
  "TesterLibrary.Stream.Header.L3.icmpv4.edit_header_icmp_echo_reply": "修改测试仪表流量模板中ICMPv4 Echo Reply报文头部的指定字段内容。\n\n该函数用于编辑指定流量模板中第Level个ICMPv4 Echo Reply报文头部的各个字段，支持修改Type、Code、Checksum、Identifier和SequenceNumber等关键字段。适用于存在多层封装的情况下，通过Level参数选择要修改的具体ICMPv4 Echo Reply头。\n\n参数:\n    Stream (StreamTemplate 或 list): 流量模板对象或包含单个流量模板对象的列表。\n                                     如果传入列表，则仅使用第一个元素。\n                                     必须具有唯一标识符的'handle'属性。\n    Level (int, optional): ICMPv4 Echo Reply头部在流中的索引位置，默认值为0。\n                           用于处理多个ICMP头部的情况（如隧道嵌套）。\n\n关键字参数（可选）:\n    Type (int): ICMP消息类型字段，取值范围：0-255，默认值：0\n    Code (int): ICMP消息代码字段，取值范围：0-255，默认值：0\n    Checksum (str): 校验和字段，字符串格式，取值范围：\"0000\"-\"ffff\"、\"AUTO\"。默认值：\"0000\"；\n                    \"ffff\"表示强制产生错误校验和，\"AUTO\"表示自动计算校验和\n    Identifier (int): 标识符字段，用于匹配请求与回复，取值范围：0-65535，默认值：0\n    SequenceNumber (int): 序列号字段，用于帮助匹配请求与回复，取值范围：0-65535，默认值：0\n\n返回值:\n    dict: 包含已修改字段名称与其内部属性名映射的字典（例如{'Type': 'type'}），如果所有传入参数均为None则返回False\n\n示例:\n    .. code:: RobotFramework\n\n        | ${Stream} | add_stream | Port=${Port} |\n        | ${HeaderTypes} | Create List | EthernetII | IPv4 | Icmpv4EchoReply |\n        | Create Stream Header | Stream=${Stream} | HeaderTypes=${HeaderTypes} |\n        | Edit Header Icmp Echo Reply | Stream=${Stream} | Level=0 | Identifier=100 | SequenceNumber=200 |\n\n注意事项:\n    - 修改操作会对流对象的头部属性产生副作用，可能触发系统查询并更新头部对象缓存\n    - 建议使用\"AUTO\"模式让系统自动计算校验和以确保报文完整性",
  "TesterLibrary.Stream.Header.L3.icmpv4.edit_header_icmp_information_reply": "修改测试仪表流量模板中ICMP Information Reply报文头部内容。\n\n该函数用于编辑指定流量流中的ICMP Information Reply头部字段，包括Type、Code、Checksum、Identifier和Sequence Number。通过Level参数可选择当前流中第几个ICMP Information Reply头部进行修改。\n\n参数:\n    Stream (object): 测试仪表流量对象，必须包含handle属性，用于唯一标识该流。若传入列表，则使用第一个元素。\n    Level (int, optional): 要修改的ICMP Information Reply头部在流中所有此类头部中的索引位置，默认为0。\n\n关键字参数（均为可选）:\n\n    Type (int): ICMP消息类型字段值，默认值：16，取值范围：0-255\n    Code (int): ICMP消息代码字段值，默认值：0，取值范围：0-255\n    Checksum (str): 校验和字段值，默认值：\"0000\"。取值范围：\"0000\"-\"ffff\"或\"AUTO\"。其中\"ffff\"表示强制产生错误校验和，\"AUTO\"表示自动计算校验和。\n    Identifier (int): ICMP标识符字段值，默认值：0，取值范围：0-65535\n    SequenceNumber (int): 序列号字段值，默认值：0，取值范围：0-65535\n\n返回值:\n    dict: 包含每个被修改字段名称与其在头部对象中实际属性名映射的字典。例如：\n        {\n            'Type': 'type',\n            'Code': 'code',\n            'Checksum': 'Checksum',\n            'Identifier': 'identifier',\n            'SequenceNumber': 'sequenceNumber'\n        }\n    若没有任何字段被修改则返回False。\n\n示例:\n    .. code:: RobotFramework\n\n        | ${Stream} | add_stream | Port=${Port} |\n        | ${HeaderTypes} | Create List | EthernetII | IPv4 | EchoRequest |\n        | Create Stream Header | Stream=${Stream} | HeaderTypes=${HeaderTypes} |\n        | Edit Header Icmp Information Reply | Stream=${Stream} | Level=0 | Identifier=100 | SequenceNumber=200 |\n\n注意:\n    - 该函数会直接修改流对象中的ICMP Information Reply头部属性。\n    - 若底层调用失败，将抛出ContinuableFailure异常。",
  "TesterLibrary.Stream.Header.L3.icmpv4.edit_header_icmp_information_request": "Modifies fields of an ICMP Information Request header in a specified stream.\n\n    This function retrieves the headers associated with the given stream and filters them\n    to find ICMP Information Request headers. It selects the header at the specified level\n    (index) and updates its fields if corresponding values are provided. The modified fields\n    include type, code, checksum, identifier, and sequence number.\n\n    Parameters:\n        Stream (object): A stream object for which ICMP headers will be edited. It must have a 'handle'\n                         attribute that uniquely identifies the stream. If a list is passed,\n                         only the first element is used.\n        Level (int): The index of the ICMP Information Request header to modify within the stream.\n                     Defaults to 0.\n        Type (int, optional): The value to set for the 'type' field of the ICMP header. Default: 15, Range: 0-255.\n        Code (int, optional): The value to set for the 'code' field of the ICMP header. Default: 0, Range: 0-255.\n        Checksum (str, optional): The value to set for the 'checksum' field of the ICMP header.\n                                  Valid values: '0000' to 'ffff', 'AUTO'. Default: '0000'.\n                                  'ffff' indicates an intentional error, 'AUTO' enables automatic calculation.\n        Identifier (int, optional): The value to set for the 'identifier' field of the ICMP header.\n                                    Default: 0, Range: 0-65535.\n        SequenceNumber (int, optional): The value to set for the 'sequenceNumber' field of the ICMP header.\n                                        Default: 0, Range: 0-65535.\n\n    Returns:\n        dict: A dictionary mapping parameter names to their updated field names in the header\n              (e.g., {'Type': 'type', 'Checksum': 'checksum'}) if any changes were made.\n        bool: False if no parameters were provided or no changes were made to the header.\n\n    Side Effects:\n        - Retrieves and caches the stream's headers if not already cached by calling get_stream_header().\n        - Updates the internal state of the ICMP Information Request header in the stream.\n\n    Examples:\n        .. code:: RobotFramework\n\n            | ${Stream} | add_stream | Port=${Port} |\n            | ${HeaderTypes} | Create List | EthernetII | IPv4 | EchoRequest |\n            | Create Stream Header | Stream=${Stream} | HeaderTypes=${HeaderTypes} |\n            | Edit Header Icmp Information Request | Stream=${Stream} | Level=0 | Identifier=100 | SequenceNumber=200 |",
  "TesterLibrary.Stream.Header.L3.icmpv4.edit_header_icmp_parameter_problem": "Edits the fields of an ICMPv4 Parameter Problem header and optionally its encapsulated IPv4 header in a specified stream.\n\nThis function allows modification of various fields within an ICMPv4 Parameter Problem header and its nested IPv4 header.\nIt identifies the appropriate ICMPv4 Parameter Problem header based on the provided level index and updates any\nspecified field(s). The changes are applied directly to the header object and are not persisted unless explicitly saved\nor used in subsequent operations. Each successfully updated field is recorded in the result dictionary with the input\nparameter name as the key and the corresponding internal attribute path as the value.\n\nParameters:\n    Stream (object or list): Either a single stream object or a list containing one stream object. If a list is passed,\n                             only the first element is considered. The stream object must have a 'handle' attribute that\n                             uniquely identifies it in the system.\n    Level (int): Index specifying which ICMPv4 Parameter Problem header to modify if multiple such headers exist in the\n                 stream. Default is 0.\n    Type (any): Value to set for the 'type' field of the ICMPv4 Parameter Problem header.\n    Code (any): Value to set for the 'code' field of the ICMPv4 Parameter Problem header.\n    Checksum (any): Value to set for the 'icmpChecksum' field of the ICMPv4 Parameter Problem header.\n    Pointer (any): Value to set for the 'pointer' field of the ICMPv4 Parameter Problem header.\n    Reserve (any): Value to set for the 'reserve' field of the ICMPv4 Parameter Problem header.\n    Data (any): Value to set for the 'headerData' field of the ICMPv4 Parameter Problem header.\n    Ipv4HeaderVersion (any): Value to set for the 'version' field of the embedded IPv4 header.\n    Ipv4HeaderHeadLen (any): Value to set for the 'headLen' field of the embedded IPv4 header.\n    Ipv4HeaderTosPrecedence (any): Sets the precedence subfield of the TOS byte in the IPv4 header using the 'edit_tos'\n                                   method.\n    Ipv4HeaderTosDelay (any): Sets the delay subfield of the TOS byte in the IPv4 header using the 'edit_tos' method.\n    Ipv4HeaderTosThroughput (any): Sets the throughput subfield of the TOS byte in the IPv4 header using 'edit_tos'.\n    Ipv4HeaderTosReliability (any): Sets the reliability subfield of the TOS byte in the IPv4 header using 'edit_tos'.\n    Ipv4HeaderTosMonetaryCost (any): Sets the monetary cost subfield of the TOS byte using 'edit_tos'.\n    Ipv4HeaderTosReserved (any): Sets the reserved subfield of the TOS byte using 'edit_tos'.\n    Ipv4HeaderDiffservDscp (any): Sets the DSCP field in the differentiated services section of the TOS byte using\n                                  'edit_diffserv'.\n    Ipv4HeaderDiffserveCodePointPrecedence (any): Sets the code point precedence in the DSCP using 'edit_diffserv'.\n    Ipv4HeaderDiffserveClassSelectorPrecedence (any): Sets class selector precedence in the DSCP using 'edit_diffserv'.\n    Ipv4HeaderDiffservDscpDrop (any): Sets the drop probability in the DSCP using 'edit_diffserv'.\n    Ipv4HeaderDiffservDscpUndefine (any): Sets undefined bits in the DSCP using 'edit_diffserv'.\n    Ipv4HeaderDiffservEcn (any): Sets ECN-related bits in the TOS byte using 'edit_diffserv'.\n    Ipv4HeaderTosByte (any): Directly sets the full TOS byte via 'edit_tosbyte'.\n    Ipv4HeaderTotalLength (any): Value to set for the 'totalLength' field of the IPv4 header.\n    Ipv4HeaderID (any): Value to set for the 'id' (identification) field of the IPv4 header.\n    Ipv4HeaderFlags (any): Value to set for the 'flags' field of the IPv4 header.\n    Ipv4HeaderOffset (any): Value to set for the fragment offset ('offset') field of the IPv4 header.\n    Ipv4HeaderTTL (any): Value to set for the 'ttl' (time to live) field of the IPv4 header.\n    Ipv4HeaderProtocol (any): Value to set for the 'protocol' field of the IPv4 header.\n    Ipv4HeaderChecksum (any): Value to set for the 'checksum' field of the IPv4 header.\n    Ipv4HeaderSource (any): Value to set for the 'source' IP address field of the IPv4 header.\n    Ipv4HeaderDestination (any): Value to set for the 'destination' IP address field of the IPv4 header.\n    Ipv4HeaderHeaderOption (any): Inserts or modifies options in the IPv4 header using 'insert_header_option'.\n    Ipv4HeaderPadding (any): Value to set for the 'padding' field of the IPv4 header.\n    Ipv4HeaderGateway (any): Value to set for the 'gateway' field of the IPv4 header.\n\nReturns:\n    dict or bool: A dictionary mapping each modified parameter to its corresponding internal attribute path if at least\n                  one field was successfully updated. Returns False if no modifications were made.\n\nSide Effects:\n    - Modifies the attributes of the ICMPv4 Parameter Problem header and potentially its encapsulated IPv4 header.\n    - Uses 'get_stream_header' internally to retrieve and cache header objects associated with the stream.\n    - Invokes methods like 'edit_tos', 'edit_diffserv', and 'insert_header_option' on the header object, which may alter\n      related fields or structures.",
  "TesterLibrary.Stream.Header.L3.icmpv4.edit_header_icmp_redirect": "修改测试仪表流量模板中的ICMPv4 Redirect报文头部及其嵌入的IPv4头部字段。\n\n该函数用于编辑指定流量流中的ICMPv4 Redirect报文头部内容。通过`Level`参数选择对应的ICMP Redirect头部（当存在多个时）。如果提供了字段参数（非None），则更新对应字段。所有更改将反映在底层报文对象中，并返回一个字典，表示每个成功修改的字段与其内部属性名之间的映射。\n\nParameters:\n    Stream (object): 表示测试仪表流量对象，必须包含唯一标识流的`handle`属性。若传入列表，则仅使用第一个元素。\n    Level (int, optional): 指定要修改的ICMP Redirect头部索引，默认为0（即第一个头部）。\n    Type (int, optional): ICMP消息类型，默认值：3，取值范围：0-255。\n    Code (int, optional): ICMP消息代码，默认值：0，取值范围：0-255。\n    Checksum (str, optional): ICMP校验和值，支持十六进制字符串格式，如\"0000\"、\"ffff\"或\"AUTO\"，其中\"AUTO\"表示自动计算，默认值：\"0000\"。\n    GatewayAddress (str, optional): ICMP Redirect消息中的网关地址，默认值：\"10.0.0.1\"，必须为合法IPv4地址。\n    Data (hex, optional): 报文头部数据字段，长度为8字节的十六进制数，默认值：\"0000000000000000\"。\n    Ipv4HeaderVersion (int, optional): IPv4头部版本号，默认值：4，取值范围：0-15。\n    Ipv4HeaderHeadLen (int, optional): IPv4头部长度，默认值：<AUTO>5，取值范围：0-15。\n    Ipv4HeaderTosPrecedence (int, optional): ToS优先级字段，默认值：0，取值范围：000-111。\n    Ipv4HeaderTosDelay (int, optional): ToS延迟字段，默认值：0，取值范围：0-1。\n    Ipv4HeaderTosThroughput (int, optional): ToS吞吐量字段，默认值：0，取值范围：0-1。\n    Ipv4HeaderTosReliability (int, optional): ToS可靠性字段，默认值：0，取值范围：0-1。\n    Ipv4HeaderTosMonetaryCost (int, optional): ToS成本字段，默认值：0，取值范围：0-1。\n    Ipv4HeaderTosReserved (int, optional): ToS保留字段，默认值：0，取值范围：0-1。\n    Ipv4HeaderDiffservDscp (int, optional): DSCP字段值，默认值：000000，取值范围：000000-111111。\n    Ipv4HeaderDiffserveCodePointPrecedence (int, optional): DSCP代码点优先级，默认值：000，取值范围：000-111。\n    Ipv4HeaderDiffserveClassSelectorPrecedence (int, optional): DSCP类选择器优先级，默认值：000，取值范围：000-111。\n    Ipv4HeaderDiffservDscpDrop (int, optional): DSCP丢弃优先级，默认值：00，取值范围：00-11。\n    Ipv4HeaderDiffservDscpUndefine (int, optional): DSCP未定义位，默认值：0，取值范围：0-1。\n    Ipv4HeaderDiffservEcn (int, optional): ECN拥塞通知字段，默认值：00，取值范围：00-11。\n    Ipv4HeaderTosByte (hex, optional): 直接设置整个ToS字节，默认值：\"00\"，取值范围：\"00\"-\"FF\"。\n    Ipv4HeaderTotalLength (int, optional): IPv4总长度字段，默认值：<AUTO>20，取值范围：0-65535。\n    Ipv4HeaderID (int, optional): 标识字段，默认值：<AUTO>123，取值范围：0-65535。\n    Ipv4HeaderFlags (int, optional): 标志字段，默认值：000，取值范围：000-111。\n    Ipv4HeaderOffset (int, optional): 片段偏移量，默认值：0，取值范围：0-8191。\n    Ipv4HeaderTTL (int, optional): 生存时间(TTL)字段，默认值：128，取值范围：0-255。\n    Ipv4HeaderProtocol (int, optional): 协议字段，默认值：235，取值范围：0-255。\n    Ipv4HeaderChecksum (hex, optional): IPv4头部校验和，默认值：\"0000\"，支持\"AUTO\"自动计算。\n    Ipv4HeaderSource (str, optional): IPv4源地址，默认值：\"192.168.0.2\"，必须为有效IPv4地址。\n    Ipv4HeaderDestination (str, optional): IPv4目的地址，默认值：\"192.168.0.10\"，必须为有效IPv4地址。\n    Ipv4HeaderPadding (hex, optional): 填充字段，默认值：\"000000\"，长度为0-3字节的十六进制字符串。\n    Ipv4HeaderGateway (str, optional): IPv4头部网关地址，默认值：\"192.168.0.1\"，必须为有效IPv4地址。\n    Ipv4HeaderHeaderOption (list or dict, optional): 插入IPv4选项字段，支持的选项包括：\n        EndOfOption\n        Nop\n        Security\n        LooseSourceRoute\n        StrictSourceRoute\n        RouterAlert\n        RecordRoute\n        TimeStamp\n        StreamIdentifier\n        General\n\nReturns:\n    dict: 包含已修改字段及其对应内部属性名称的字典。例如：\n        {\n            'Type': 'type',\n            'Code': 'code',\n            'Checksum': 'icmpChecksum',\n            ...\n        }\n    如果没有字段被修改，则返回False。\n\nRaises:\n    ContinuableFailure: 如果操作失败，则抛出此异常。\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${Stream} | add_stream | Port=${Port} |\n        | ${HeaderTypes} | Create List | EthernetII | IPv4 | EchoRequest |\n        | Create Stream Header | Stream=${Stream} | HeaderTypes=${HeaderTypes} |\n        | Edit Header Icmp Redirect | Stream=${Stream} | Level=0 | Identifier=100 |",
  "TesterLibrary.Stream.Header.L3.icmpv4.edit_header_icmp_source_quench": "Edits the fields of an ICMP Source Quench header in a given stream at a specified level.\n\n    This function retrieves the list of headers for the provided stream and filters only those\n    of type 'sourcequench'. It then modifies any of the header fields based on the parameters\n    provided. If no changes are made (i.e., all parameters are None), it returns False.\n    \n    Parameters:\n        Stream (object): A stream object that contains the header to be edited. The stream must have\n                         a 'handle' attribute that uniquely identifies it in the system.\n        Level (int): Index into the list of 'sourcequench' headers associated with the stream. Default is 0.\n        Type (int, optional): Sets the ICMP message type field. Default is None.\n        Code (int, optional): Sets the ICMP message code field. Default is None.\n        Checksum (int or str, optional): Sets the ICMP checksum value. Accepts integer values or hex strings.\n                                        Default is None. Special values: 'AUTO' for automatic calculation,\n                                        'ffff' to simulate an error.\n        Reserve (int, optional): Sets the reserved field in the ICMP Source Quench message. Default is None.\n        Data (bytes or str, optional): Sets the data field in the ICMP header. Default is None.\n        Ipv4HeaderVersion (int, optional): Sets the IP version field in the IPv4 header encapsulated within\n                                          the ICMP message. Default is None.\n        Ipv4HeaderHeadLen (int, optional): Sets the IP header length field in the IPv4 header. Default is None.\n        Ipv4HeaderTosPrecedence (int, optional): Sets the ToS precedence bits in the IPv4 header. Default is None.\n        Ipv4HeaderTosDelay (int, optional): Sets the ToS delay bit in the IPv4 header. Default is None.\n        Ipv4HeaderTosThroughput (int, optional): Sets the ToS throughput bit in the IPv4 header. Default is None.\n        Ipv4HeaderTosReliability (int, optional): Sets the ToS reliability bit in the IPv4 header. Default is None.\n        Ipv4HeaderTosMonetaryCost (int, optional): Sets the ToS monetary cost bit in the IPv4 header. Default is None.\n        Ipv4HeaderTosReserved (int, optional): Sets the reserved ToS bit in the IPv4 header. Default is None.\n        Ipv4HeaderDiffservDscp (str or int, optional): Sets the DiffServ DSCP field in the IPv4 header. Default is None.\n        Ipv4HeaderDiffserveCodePointPrecedence (int, optional): Sets the DSCP code point precedence bits. Default is None.\n        Ipv4HeaderDiffserveClassSelectorPrecedence (int, optional): Sets the class selector precedence bits. Default is None.\n        Ipv4HeaderDiffservDscpDrop (int, optional): Sets the drop precedence for DSCP in DiffServ. Default is None.\n        Ipv4HeaderDiffservDscpUndefine (int, optional): Sets undefined bits in DSCP. Default is None.\n        Ipv4HeaderDiffservEcn (int, optional): Sets ECN (Explicit Congestion Notification) bits. Default is None.\n        Ipv4HeaderTosByte (int, optional): Sets the full ToS byte directly in the IPv4 header. Default is None.\n        Ipv4HeaderTotalLength (int, optional): Sets the total length of the IP packet. Default is None.\n        Ipv4HeaderID (int, optional): Sets the identification field in the IPv4 header. Default is None.\n        Ipv4HeaderFlags (int, optional): Sets the flags in the IPv4 header. Default is None.\n        Ipv4HeaderOffset (int, optional): Sets the fragment offset in the IPv4 header. Default is None.\n        Ipv4HeaderTTL (int, optional): Sets the Time-to-Live (TTL) value in the IPv4 header. Default is None.\n        Ipv4HeaderProtocol (int, optional): Sets the protocol field in the IPv4 header. Default is None.\n        Ipv4HeaderChecksum (int or str, optional): Sets the checksum of the IPv4 header. Accepts integer values\n                                                or hex strings. Default is None.\n        Ipv4HeaderSource (str, optional): Sets the source IP address in the IPv4 header. Default is None.\n        Ipv4HeaderDestination (str, optional): Sets the destination IP address in the IPv4 header. Default is None.\n        Ipv4HeaderHeaderOption (list or dict, optional): Inserts options into the IPv4 header. Default is None.\n        Ipv4HeaderPadding (bytes or str, optional): Sets padding bytes in the IPv4 header. Default is None.\n        Ipv4HeaderGateway (str, optional): Sets the gateway address in the IPv4 header. Default is None.\n\n    Returns:\n        dict: A dictionary mapping parameter names to the corresponding internal field names that were modified.\n              Returns False if no parameters were provided (no modifications were made).\n\n    Side Effects:\n        - Modifies the specified ICMP Source Quench header fields of the stream.\n        - Calls `get_stream_header` internally to retrieve and filter the appropriate headers.\n        - Uses internal methods like `edit_tos`, `edit_diffserv`, and `edit_tosbyte` to update complex fields.",
  "TesterLibrary.Stream.Header.L3.icmpv4.edit_header_icmp_time_exceeded": "修改测试仪表流量模板中ICMP Time Exceeded报文头部内容，包括ICMP头部字段及其封装的IPv4头部字段。\n\nArgs:\n    Stream (object): 测试仪表流量对象，必须包含唯一标识流的 'handle' 属性。如果传入列表，则使用第一个元素。\n    Level (int): ICMP Time Exceeded头部在流量模板中同类型头部的索引位置，用于区分多个相同类型的头部。\n\nKeyword Args:\n    Type (int, optional): ICMP消息类型字段，默认值：3，范围：0-255\n    Code (int, optional): ICMP消息代码字段，默认值：0，范围：0-255\n    Checksum (int or str, optional): ICMP校验和字段，默认值：0000，范围：0000-ffff、AUTO（自动计算），ffff表示错误值\n    Reserve (int, optional): ICMP头部中保留字段，默认值：0，范围：0-4294967295\n    Data (bytes or str, optional): ICMP消息附加数据，默认值：0000000000000000，长度为8字节的十六进制数\n\n    Ipv4HeaderVersion (int, optional): IPv4头部版本号，默认值：4，范围：0-15\n    Ipv4HeaderHeadLen (int, optional): IPv4头部长度，默认值：<AUTO>5，范围：0-15\n    Ipv4HeaderTosPrecedence (int, optional): ToS优先级字段，默认值：0，范围：0-7 (000-111)\n    Ipv4HeaderTosDelay (int, optional): ToS延迟位，默认值：0，范围：0-1\n    Ipv4HeaderTosThroughput (int, optional): ToS吞吐量位，默认值：0，范围：0-1\n    Ipv4HeaderTosReliability (int, optional): ToS可靠性位，默认值：0，范围：0-1\n    Ipv4HeaderTosMonetaryCost (int, optional): ToS货币成本位，默认值：0，范围：0-1\n    Ipv4HeaderTosReserved (int, optional): ToS保留位，默认值：0，范围：0-1\n    Ipv4HeaderDiffservDscp (int, optional): DiffServ DSCP值，默认值：0，范围：0-63 (000000-111111)\n    Ipv4HeaderDiffserveCodePointPrecedence (int, optional): DSCP代码点优先级，默认值：0，范围：0-63 (000000-111111)\n    Ipv4HeaderDiffserveClassSelectorPrecedence (int, optional): 类选择器优先级，默认值：0，范围：0-7 (000-111)\n    Ipv4HeaderDiffservDscpDrop (int, optional): DSCP丢弃优先级，默认值：0，范围：0-3 (00-11)\n    Ipv4HeaderDiffservDscpUndefine (int, optional): DSCP未定义位，默认值：0，范围：0-1\n    Ipv4HeaderDiffservEcn (int, optional): ECN设置，默认值：0，范围：0-3 (00-11)\n    Ipv4HeaderTosByte (int, optional): 直接设置完整的ToS字节，默认值：00，范围：0x00-0xFF\n    Ipv4HeaderTotalLength (int, optional): IPv4总长度，默认值：<AUTO>20，范围：0-65535\n    Ipv4HeaderID (int, optional): 标识字段，默认值：<AUTO>123，范围：0-65535\n    Ipv4HeaderFlags (int, optional): 标志字段，默认值：0，范围：0-7 (000-111)\n    Ipv4HeaderOffset (int, optional): 分片偏移量，默认值：0，范围：0-8191\n    Ipv4HeaderTTL (int, optional): 生存时间字段，默认值：128，范围：0-255\n    Ipv4HeaderProtocol (int, optional): 协议字段，默认值：235，范围：0-255\n    Ipv4HeaderChecksum (int or str, optional): IPv4校验和，默认值：0000，范围：0000-FFFF\n    Ipv4HeaderSource (str, optional): 源IP地址，默认值：192.168.0.2，有效IPv4地址\n    Ipv4HeaderDestination (str, optional): 目的IP地址，默认值：192.168.0.10，有效IPv4地址\n    Ipv4HeaderPadding (bytes or str, optional): IPv4填充字段，默认值：000000，长度为0-3字节的十六进制数\n    Ipv4HeaderGateway (str, optional): 网关地址，默认值：192.168.0.1，有效IPv4地址\n    Ipv4HeaderHeaderOption (list or dict, optional): 插入IPv4选项字段，支持：\n        EndOfOption, Nop, Security, LooseSourceRoute, StrictSourceRoute,\n        RouterAlert, RecordRoute, TimeStamp, StreamIdentifier, General\n\nReturns:\n    dict: 参数名到对应字段名称的映射，表示哪些字段被成功修改。例如 {'Type': 'type'} 表示Type参数修改了'type'字段。\n    bool: 如果没有提供任何参数则返回False，表示未进行任何修改。\n\nDescription:\n    该函数通过get_stream_header获取指定流中的ICMP Time Exceeded头部，并根据Level参数选择正确的头部层级，然后修改提供的字段。\n    每个字段的修改都会更新头部对象并添加相应的条目到结果字典中。\n    支持修改ICMP头部字段以及嵌套的IPv4头部字段。",
  "TesterLibrary.Stream.Header.L3.icmpv4.edit_header_icmp_time_stamp_reply": "修改测试仪表流量模板中ICMP时间戳回复（Timestamp Reply）报文头部内容。\n\n该函数用于编辑指定流量模板中的 ICMP Timestamp Reply 报文头部字段。支持对 ICMP 头部的多个字段进行修改，包括 Type、Code、Checksum、Identifier、SequenceNumber 以及时间戳相关的 OriginateTimestamp、ReceiveTimestamp 和 TransmitTimestamp。若未显式提供参数，则使用默认值。\n\nParameters:\n    Stream (object): 测试仪表流量对象，代表需要修改头部的流量模板。如果传入的是列表，则使用第一个元素。\n\n    Level (int, optional): 指定 ICMP Timestamp Reply 头部在流中该类型头部列表中的索引位置，默认为 0。\n\nKeyword Args:\n    Type (int, optional): ICMP 消息类型字段，默认值：14，范围：0-255。\n\n    Code (int, optional): ICMP 消息代码字段，默认值：0，范围：0-255。\n\n    Checksum (str, optional): 校验和字段，默认值：\"0000\"。取值范围：\"0000\"-\"ffff\"、\"AUTO\"，其中 \"ffff\" 表示人为制造错误，\"AUTO\" 表示自动计算校验和。\n\n    Identifier (int, optional): 用于匹配请求与响应的标识符字段，默认值：0，范围：0-65535。\n\n    SequenceNumber (int, optional): 用于匹配请求与响应的序列号字段，默认值：0，范围：0-65535。\n\n    OriginateTimestamp (int, optional): 请求最初发送的时间戳，默认值：0，范围：0-4294967295。\n\n    ReceiveTimestamp (int, optional): 请求被接收方收到的时间戳，默认值：0，范围：0-4294967295。\n\n    TransmitTimestamp (int, optional): 回复发送的时间戳，默认值：0，范围：0-4294967295。\n\nReturns:\n    dict or bool: 若成功修改字段，返回一个字典，表示每个修改字段名与其在头部对象中实际属性名的映射（例如 {'Type': 'type'}）。如果没有字段被修改，返回 False。\n\nRaises:\n    ContinuableFailure: 如果编辑失败（即 backend 返回 False），抛出可继续执行类型的异常，并包含失败信息。\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${Stream} | add_stream | Port=${Port} |\n        | ${HeaderTypes} | Create List | EthernetII | IPv4 | EchoRequest |\n        | Create Stream Header | Stream=${Stream} | HeaderTypes=${HeaderTypes} |\n        | Edit Header Icmp Time Stamp Reply | Stream=${Stream} | Level=0 | Identifier=100 | SequenceNumber=200 |",
  "TesterLibrary.Stream.Header.L3.icmpv4.edit_header_icmp_time_stamp_request": "修改测试仪表流量模板中Icmp Time Stamp Request报文头部内容\n\n该函数用于编辑指定流量流中的ICMP时间戳请求（Timestamp Request）头部字段。可以更新一个或多个字段，包括Type、Code、Checksum、Identifier、SequenceNumber、OriginateTimestamp、ReceiveTimestamp和TransmitTimestamp。\n\n参数:\n\n    Stream (object): 测试仪表流量对象，表示要编辑的流量流。必须具有唯一标识流量流的'handle'属性。如果传入的是列表，则使用第一个元素。\n    \n    Level (int, optional): 指定要编辑的ICMP Timestamp Request头部在该流量中所有此类头部中的索引位置，默认为0（即第一个符合条件的头部）。\n\n关键字参数（可选）:\n\n    Type (int): 设置ICMP消息类型，默认值13，取值范围0-255\n    \n    Code (int): 设置ICMP消息代码，默认值0，取值范围0-255\n    \n    Checksum (str): 设置校验和字段，默认值\"0000\"，支持范围：\"0000\"-\"ffff\"、\"AUTO\"，其中\"ffff\"表示人为引入错误，\"AUTO\"表示自动计算校验和\n    \n    Identifier (int): 设置标识符字段，默认值0，用于匹配请求与响应，取值范围0-65535\n    \n    SequenceNumber (int): 设置序列号字段，默认值0，用于帮助匹配请求与响应，取值范围0-65535\n    \n    OriginateTimestamp (int): 设置发起时间戳字段，默认值0，表示请求生成的时间，取值范围0-4294967295\n    \n    ReceiveTimestamp (int): 设置接收时间戳字段，默认值0，表示请求被接收的时间，取值范围0-4294967295\n    \n    TransmitTimestamp (int): 设置发送时间戳字段，默认值0，表示请求被发送的时间，取值范围0-4294967295\n\n返回值:\n\n    dict: 包含已修改字段的字典，键为参数名，值为实际修改的属性名（如{'Type': 'type', 'Checksum': 'checksum'}）\n    \n    bool: 如果没有字段被成功修改，则返回False\n\n示例:\n    .. code:: RobotFramework\n\n        | ${Stream} | add_stream | Port=${Port} |\n        | ${HeaderTypes} | Create List | EthernetII | IPv4 | EchoRequest |\n        | Create Stream Header | Stream=${Stream} | HeaderTypes=${HeaderTypes} |\n        | Edit Header Icmp Time Stamp Request | Stream=${Stream} | Level=0 | Identifier=100 | SequenceNumber=200 |\n\n副作用:\n\n    - 会直接修改流量流中指定层级的ICMP Timestamp Request头部属性\n    - 可能通过调用get_stream_header间接触发命令执行和缓存更新",
  "TesterLibrary.Stream.Header.L3.icmpv6.edit_header_icmpv6_destination_unreachable": "修改测试仪表流量模板中ICMPv6 Destination Unreachable报文头部内容。\n\n该函数用于编辑指定流量模板中的ICMPv6 Destination Unreachable头部字段。它会获取流量对象中的所有头部，并筛选出类型为'DestinationUnreachable'的头部，然后根据提供的Level参数选择特定的头部进行编辑。支持修改ICMPv6头部字段以及嵌入的IPv6头部字段。\n\nArgs:\n    Stream (object): 测试仪表流量对象，表示需要编辑的流量模板。该对象应包含一个唯一标识流的'handle'属性。也可以是列表类型，此时使用第一个元素。\n    Level (int): 指定要编辑的DestinationUnreachable头部在该流量中所有DestinationUnreachable头部中的索引位置。默认值为0。\n\nKeyword Args:\n    Type (int, optional): ICMPv6消息类型字段，取值范围：0-255，默认值：1\n    Code (int, optional): ICMPv6消息代码字段，取值范围：0-255，默认值：0\n    Checksum (int, optional): 校验和字段，十六进制表示，取值范围：0000-FFFF，默认值：0000\n    Reserve (int, optional): 保留字段，取值范围：0-4294967295，默认值：0\n    HeaderData (bytes or str, optional): 嵌入的IPv6数据包内容，长度为8字节的十六进制数，默认值：0000000000000000\n    Version (int, optional): IPv6版本号字段，取值范围：0-15，默认值：6\n    TrafficClass (int, optional): IPv6流量类别字段，取值范围：0-255，默认值：0\n    FlowLabel (int, optional): IPv6流标签字段，取值范围：0-1048575，默认值：0\n    PayloadLength (int, optional): IPv6有效载荷长度字段，取值范围：0-65535，默认值：0\n    NextHeader (int, optional): IPv6下一头部字段，取值范围：0-255，默认值：59\n    HopLimit (int, optional): IPv6跳数限制字段，取值范围：0-255，默认值：255\n    Source (str, optional): IPv6源地址，默认值：2001::2\n    Destination (str, optional): IPv6目的地址，默认值：2001::1:f1:11\n    Gateway (str, optional): IPv6网关地址，默认值：2001::1\n\nReturns:\n    dict: 包含每个成功修改字段及其对应属性路径的字典。例如：\n        {\n            'Type': 'type',\n            'Code': 'code',\n            'Checksum': 'checksum',\n            'Reserve': 'reserve'\n            'HeaderData': 'headerData.data',\n            'Version': 'headerData.ipv6Header.version',\n            'TrafficClass': 'headerData.ipv6Header.trafficClass',\n            'FlowLabel': 'headerData.ipv6Header.FlowLabel',\n            'PayloadLength': 'headerData.ipv6Header.payloadLength',\n            'NextHeader': 'headerData.ipv6Header.nextHeader',\n            'HopLimit': 'headerData.ipv6Header.hopLimit',\n            'Source': 'headerData.ipv6Header.source',\n            'Destination': 'headerData.ipv6Header.destination',\n            'Gateway': 'headerData.ipv6Header.gateway'\n        }\n    如果没有修改任何字段，则返回False。\n\nRaises:\n    ContinuableFailure: 如果底层调用失败则抛出此异常。\n\nSide Effects:\n    - 修改指定DestinationUnreachable头部对象的属性\n    - 可能更新与流头部相关的内部状态或缓存结构\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${Stream} | add_stream | Port=${Port} |\n        | ${HeaderTypes} | Create List | EthernetII | IPv6 | DestinationUnreachable |\n        | Create Stream Header | Stream=${Stream} | HeaderTypes=${HeaderTypes} |\n        | Edit Header Icmpv6 Destination Unreachable | Stream=${Stream} | Level=0 | Identifier=100 |",
  "TesterLibrary.Stream.Header.L3.icmpv6.edit_header_icmpv6_echo_reply": "修改测试仪表流量模板中ICMPv6 Echo Reply报文头部字段的函数。\n\n该函数用于编辑指定流量流中的第`Level`个ICMPv6 Echo Reply头部字段。可以根据提供的参数修改Type、Code、Checksum、Identifier和SequenceNumber等字段。所有参数均为可选，只有提供值的字段才会被修改。\n\nArgs:\n\n    Stream (object): 测试仪表流量对象，类型为object。该对象必须包含一个`handle`属性以唯一标识该流量流。如果传入的是列表，则使用第一个元素作为Stream对象。\n\n    Level (int, optional): 要编辑的ICMPv6 Echo Reply头部在流中的索引（即第几个ICMPv6 Echo Reply头），默认为0。\n\nKeyword Args:\n\n    Type (int, optional): ICMPv6报文类型字段，表示Echo Reply消息的类型，默认值：129，取值范围：0-255\n\n    Code (int, optional): 代码字段，用于进一步区分ICMPv6消息子类型，默认值：1，取值范围：0-255\n\n    Checksum (int, optional): 校验和字段，用于验证ICMPv6报文完整性，默认值：0x0000，取值范围：0x0000-0xFFFF\n\n    Identifier (int, optional): 标识符字段，通常用于匹配Echo Request和Echo Reply，默认值：0，取值范围：0-65535\n\n    SequenceNumber (int, optional): 序列号字段，用于匹配Echo Request和Echo Reply，默认值：0，取值范围：0-65535\n\nReturns:\n\n    dict or bool: 如果有字段被修改，返回一个字典，将输入的参数名映射到对应的内部字段名称（例如{'Type': 'type'}）。如果没有字段被修改（即所有输入参数都为None），则返回False。\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${Stream} | add_stream | Port=${Port} |\n        | ${HeaderTypes} | Create List | EthernetII | IPv6 | Icmpv6EchoReply |\n        | Create Stream Header | Stream=${Stream} | HeaderTypes=${HeaderTypes} |\n        | Edit Header Icmpv6 Echo Reply | Stream=${Stream} | Level=0 | Identifier=100 |",
  "TesterLibrary.Stream.Header.L3.icmpv6.edit_header_icmpv6_echo_request": "修改测试仪表流量模板中ICMPv6 Echo Request报文头部的指定字段内容。\n\n该函数用于编辑指定流量模板中的ICMPv6 Echo Request头部的一个或多个字段（Type、Code、Checksum、Identifier、Sequence Number），可通过Level参数选择在头部链中的哪一个ICMPv6 Echo Request头进行修改。仅提供并修改的字段会被更新，未提供的字段保持原值。\n\n参数:\n    Stream (object): 测试仪表流量对象，必须包含'handle'属性用于唯一标识流，若传入列表则使用第一个元素。\n    Level (int, optional): 要修改的ICMPv6 Echo Request头部在头部链中的索引位置，默认为0（即第一个）。\n\n关键字参数（可选，仅修改提供的字段）:\n    Type (int): ICMPv6 Echo Request头部的Type字段值，默认128，取值范围0-255。\n    Code (int): ICMPv6 Echo Request头部的Code字段值，默认1，取值范围0-255。\n    Checksum (int): ICMPv6 Echo Request头部的Checksum字段值，默认0x0000，取值范围0x0000-0xFFFF。\n    Identifier (int): 用于匹配Echo Request与Reply的Identifier字段，默认0，取值范围0-65535。\n    SequenceNumber (int): 用于匹配Echo Request与Reply的Sequence Number字段，默认0，取值范围0-65535。\n\n返回值:\n    dict: 返回一个字典，映射被修改的参数名称到其在头部对象中对应的属性名（例如{'Type': 'type', 'Checksum': 'checksum'}），仅当有字段被修改时返回。\n    bool: 若未提供任何修改参数，则返回False。\n\n副作用:\n    - 修改Stream对象中对应ICMPv6 Echo Request头部的字段值。\n\n示例:\n    .. code:: RobotFramework\n\n        | ${Stream} | add_stream | Port=${Port} |\n        | ${HeaderTypes} | Create List | EthernetII | IPv6 | Icmpv6EchoRequest |\n        | Create Stream Header | Stream=${Stream} | HeaderTypes=${HeaderTypes} |\n        | Edit Header Icmpv6 Echo Request | Stream=${Stream} | Level=0 | Identifier=100 |",
  "TesterLibrary.Stream.Header.L3.icmpv6.edit_header_icmpv6_mldv1_done": "修改测试仪表流量模板中ICMPv6 MLDv1 Done报文头部内容\n\nArgs:\n\n    Stream: 测试仪表流量对象object, 类型为：object。该对象必须包含一个唯一标识流的'handle'属性，如果传入的是列表，则使用第一个元素。\n\n    Level: 要修改的MLDv1 Done头部在流模板中所有MLDv1 Done头部的索引号，默认值为0。\n\nKeyword Args:\n\n    Type (int): ICMPv6头部的Type字段值，默认值：132，取值范围：0-255\n\n    Code (int): ICMPv6头部的Code字段值，默认值：0，取值范围：0-255\n\n    Checksum (int): ICMPv6头部的Checksum字段值，默认值：0，取值范围：0-65535（即0x0000-0xFFFF）\n\n    MaxRespDelay (int): Maximum Response Delay字段值，默认值：0，取值范围：0-65535\n\n    Reserved (int): Reserved字段值，默认值：0，取值范围：0-65535\n\n    MulticastAddress (str): Multicast Address字段值，默认值：FF1E::1，取值范围：有效的IPv6地址字符串\n\nReturns:\n\n    dict or bool: 一个字典，将每个成功更新的参数名映射到对应头部属性名（例如 {'Type': 'type'}），如果没有任何字段被更新则返回False。\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${Stream} | add_stream | Port=${Port} |\n        | ${HeaderTypes} | Create List | EthernetII | IPv6 | Mldv1Done |\n        | Create Stream Header | Stream=${Stream} | HeaderTypes=${HeaderTypes} |\n        | Edit Header Icmpv6 Mldv1 Done | Stream=${Stream} | Level=0 | Code=1 |",
  "TesterLibrary.Stream.Header.L3.icmpv6.edit_header_icmpv6_mldv1_query": "修改测试仪表流量模板中ICMPv6 MLDv1 Query报文头部的指定字段内容。\n\n该函数用于修改指定流量模板中的ICMPv6 MLDv1 Query头部字段。用户可以通过参数指定要修改的字段及其新值，未提供的字段将保持不变。该函数支持在存在多个MLDv1 Query头部的情况下通过索引（Level）选择特定头部进行修改。\n\n参数:\n    Stream (object or list): 测试仪表流量对象，类型为object；也可以传入包含该对象的列表，函数将使用列表第一个元素。\n    Level (int, optional): 指定要修改的MLDv1 Query头部在其所属流量模板头部链中的索引位置，默认为0。\n    **kwargs (可选字段): 支持以下可选关键字参数，仅修改提供的字段：\n        Type (int): ICMPv6报文类型字段，表示MLDv1 Query消息的类型，默认值：130，取值范围：0-255。\n        Code (int): ICMPv6代码字段，默认值：0，取值范围：0-255。\n        Checksum (int): 校验和字段，以整数形式表示，默认值：0（即0x0000），取值范围：0-65535（即0x0000-0xFFFF）。\n        MaxRespDelay (int): 最大响应延迟字段，表示主机应在发送报告前等待的最大时间（单位可能为毫秒或十分之一秒），默认值：0，取值范围：0-65535。\n        Reserved (int): 保留字段，默认值：0，取值范围：0-65535。\n        MulticastAddress (str): 多播地址字段，表示查询的目标IPv6多播地址，默认值：\"::\"，必须为有效的IPv6地址格式。\n\n返回值:\n    dict: 如果一个或多个字段被成功修改，则返回一个字典，映射传入的参数名称到对应的内部字段名（例如{'Type': 'type'}）。\n    bool: 如果没有任何字段被提供修改（所有可选参数均为None），则返回False。\n\n副作用:\n    - 修改流中对应MLDv1 Query头部对象的属性。\n    - 若尚未缓存流的头部对象，则会调用get_stream_header()进行缓存。\n\n示例:\n    .. code:: RobotFramework\n\n        | ${Stream} | add_stream | Port=${Port} |\n        | ${HeaderTypes} | Create List | EthernetII | IPv6 | Mldv1Query |\n        | Create Stream Header | Stream=${Stream} | HeaderTypes=${HeaderTypes} |\n        | Edit Header Icmpv6 Mldv1 Query | Stream=${Stream} | Level=0 | Code=1 |",
  "TesterLibrary.Stream.Header.L3.icmpv6.edit_header_icmpv6_mldv1_report": "修改测试仪表流量模板中ICMPv6 MLDv1 Report报文头部的字段内容。\n\n该函数用于编辑指定流量流中的ICMPv6 MLDv1 Report协议头部的一个或多个字段。它会检索流中所有的头部，并筛选出类型为MLDv1Report的头部，然后根据提供的Level参数（索引）来编辑对应的头部字段。如果提供了任意字段值（非None），则更新该字段，并在返回字典中记录更改；若未进行任何更改，则返回False。\n\nArgs:\n    Stream (object): 测试仪表流量对象，必须包含一个'handle'属性，用于系统内唯一标识该流。如果传入的是列表，则使用第一个元素。\n    Level (int, optional): 要编辑的MLDv1Report头部在其头部链中的索引位置，默认为0。\n\nKeyword Args:\n    Type (int, optional): 设置MLDv1 Report头部的Type字段值，默认：131，取值范围：0-255\n    Code (int, optional): 设置MLDv1 Report头部的Code字段值，默认：0，取值范围：0-255\n    Checksum (hex, optional): 设置MLDv1 Report头部的Checksum字段值，默认：0000，取值范围：0000-FFFF\n    MaxRespDelay (int, optional): 设置MLDv1 Report头部的Maximum Response Delay字段值，默认：0，取值范围：0-65535\n    Reserved (int, optional): 设置MLDv1 Report头部的Reserved字段值，默认：0，取值范围：0-65535\n    MulticastAddress (str, optional): 设置MLDv1 Report头部的Multicast Address字段值，默认：FF1E::1，取值范围：有效的IPv6地址\n\nReturns:\n    dict or bool: 如果有字段被成功修改，则返回一个映射字段名到其内部属性名的字典，例如：\n        {\n            'Type': 'type',\n            'Code': 'code',\n            'Checksum': 'checksum',\n            'MaxRespDelay': 'maxRespDelay',\n            'Reserved': 'reserved',\n            'MulticastAddress': 'multicastAddress'\n        }\n    如果没有字段被修改，则返回False。\n\nRaises:\n    ContinuableFailure: 如果操作失败，抛出此异常，错误信息为函数名+“ Failure”。\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${Stream} | add_stream | Port=${Port} |\n        | ${HeaderTypes} | Create List | EthernetII | IPv6 | Mldv1Report |\n        | Create Stream Header | Stream=${Stream} | HeaderTypes=${HeaderTypes} |\n        | Edit Header Icmpv6 Mldv1 Report | Stream=${Stream} | Level=0 | Code=1 |\n\nSide Effects:\n    - 修改流对象中对应MLDv1 Report头部的指定字段值\n    - 会调用get_stream_header()函数获取头部信息，如果头部信息未缓存，则可能会查询设备并缓存",
  "TesterLibrary.Stream.Header.L3.icmpv6.edit_header_icmpv6_mldv2_query": "修改测试仪表流量模板中ICMPv6 MLDv2 Query报文头部内容。\n\n该函数用于编辑指定流模板中的MLDv2 Query协议头部的字段值。通过提供关键字参数，可以更新头部的特定字段；未提供的字段将保持不变。该函数调用底层接口获取并修改对应层级的头部对象。\n\n### 参数\n\n- **Stream** (`object`):  \n  测试仪表中的流对象，必须包含唯一标识该流的 `handle` 属性。若传入列表，则使用第一个元素。\n\n- **Level** (`int`, 默认: `0`):  \n  在流的报文头链中，'mldv2query' 报文头的索引层级。用于在存在多个MLDv2 Query头部时选择正确的头部。\n\n- **Type** (`int`, 可选, 默认: `130`, 范围: `0-255`):  \n  设置报文类型字段（Type）。\n\n- **Code** (`int`, 可选, 默认: `0`, 范围: `0-255`):  \n  设置代码字段（Code）。\n\n- **Checksum** (`int`, 可选, 默认: `0x0000`, 范围: `0x0000-0xFFFF`):  \n  设置校验和字段（Checksum）。以十六进制形式传递。\n\n- **MaxRespCode** (`int`, 可选, 默认: `0`, 范围: `0-65535`):  \n  设置最大响应时间代码字段（Max Response Code），表示查询的最大响应延迟。\n\n- **Reserved** (`int`, 可选, 默认: `0`, 范围: `0-65535`):  \n  设置保留字段（Reserved），通常应为0，除非标准另有规定。\n\n- **GroupAddress** (`str`, 可选, 默认: `\"FF1E::1\"`, 合法IPv6地址):  \n  设置多播组地址字段（Multicast Address）。\n\n- **Resv** (`int`, 可选, 默认: `0`, 范围: `0-15`):  \n  设置保留字段（Resv），占4位。\n\n- **Sflag** (`int`, 可选, 默认: `1`, 范围: `0-1`):  \n  设置抑制路由器处理标志（Suppress Flag）。\n\n- **Qrv** (`int`, 可选, 默认: `0`, 范围: `0-7` (二进制表示为000-111)):  \n  设置查询者的健壮性变量（QRV）。\n\n- **Qqic** (`int`, 可选, 默认: `0`, 范围: `0-255`):  \n  设置查询间隔代码（QQIC），表示查询间隔时间。\n\n- **NumberOfSources** (`int`, 可选, 默认: `0`, 范围: `0-65535`):  \n  设置源地址数量字段（Number of Sources）。\n\n- **SourceAddressList** (`list[str]`, 可选, 默认: `[\"2000::1\"]`, 列表长度范围: `0-1000`, 每个元素为合法IPv6地址):  \n  设置源地址列表，包含一组IPv6源地址。\n\n### 返回值\n\n- **dict**:  \n  返回一个字典，映射每个被修改的参数名到其对应的属性名。例如：  \n  ```python\n  {\n      'Type': 'type',\n      'Code': 'code',\n      'Checksum': 'checksum',\n      'MaxRespDelay': 'maxRespDelay',\n      'Reserved': 'reserved',\n      'GroupAddress': 'groupAddress',\n      'Resv': 'resv',\n      'Sflag': 'sFlag',\n      'Qrv': 'qrv',\n      'Qqic': 'qqic',\n      'NumberOfSources': 'numberOfSources',\n      'SourceAddressList': 'sourceAddressList'\n  }\n  ```\n  对于 `SourceAddressList` 中的每一个地址，键的形式为 `'SourceAddressList: <addr>'`，值为类似 `'sourceAddressList.ipv6AddrContainer_<i>.ipv6Addr'` 的路径。\n\n- **bool**:  \n  如果没有提供任何参数（即无修改操作），返回 `False`。\n\n### 副作用\n\n- 修改内存中头部对象的属性。\n- 若当前未缓存相关头部对象，会从系统中查询并缓存。\n\n### 示例\n\n```robotframework\n| ${Stream} | add_stream | Port=${Port} |\n| ${HeaderTypes} | Create List | EthernetII | IPv6 | Mldv2Query |\n| Create Stream Header | Stream=${Stream} | HeaderTypes=${HeaderTypes} |\n| Edit Header Icmpv6 Mldv2 Query | Stream=${Stream} | Level=0 | Code=1 |\n```",
  "TesterLibrary.Stream.Header.L3.icmpv6.edit_header_icmpv6_mldv2_report": "修改测试仪表流量模板中的 ICMPv6 MLDv2 Report 报文头部字段内容。\n\n该函数用于编辑指定流中某个 ICMPv6 MLDv2 Report 头部的特定字段。可以修改的字段包括 Type、Unused、Checksum、Reserved 和 NumberOfGroupRecords。若未提供某字段的值，则该字段不会被修改。此函数支持对多个嵌套或连续的 MLDv2 Report 头部进行精确编辑，通过 Level 参数选择要修改的头部层级。\n\nParameters:\n    Stream (object or list): 测试仪表流量对象或其列表，必须包含唯一标识流的 'handle' 属性。\n    Level (int, optional): 指定要修改的 MLDv2 Report 头部在流中的索引位置，默认为 0（即第一个）。\n    Type (int, optional): 设置 ICMPv6 MLDv2 Report 头部的 Type 字段值，默认：143，取值范围：0-255。\n    Unused (int, optional): 设置 ICMPv6 MLDv2 Report 头部的 Unused 字段值，默认：0，取值范围：0-255。\n    Checksum (hex, optional): 设置 ICMPv6 MLDv2 Report 头部的 Checksum 字段值，默认：0000，取值范围：0000-FFFF。\n    Reserved (int, optional): 设置 ICMPv6 MLDv2 Report 头部的 Reserved 字段值（内部映射为 reserved2），默认：0，取值范围：0-65535。\n    NumberOfGroupRecords (int, optional): 设置 ICMPv6 MLDv2 Report 头部的 Number of Group Records 字段值，默认：0，取值范围：0-65535。\n\nReturns:\n    dict or bool: 返回一个字典，表示成功更新的字段及其对应的内部属性名；如果没有字段被更改，则返回 False。\n\nRaises:\n    ContinuableFailure: 如果函数调用失败（返回 False），则抛出可继续执行的异常，并附带失败信息。\n\nExample:\n    .. code:: RobotFramework\n\n        | ${Stream} | add_stream | Port=${Port} |\n        | ${HeaderTypes} | Create List | EthernetII | IPv6 | Mldv2Report |\n        | Create Stream Header | Stream=${Stream} | HeaderTypes=${HeaderTypes} |\n        | Edit Header Icmpv6 Mldv2 Report | Stream=${Stream} | Level=0 | Type=1 |",
  "TesterLibrary.Stream.Header.L3.icmpv6.edit_header_icmpv6_group_records": "修改测试仪表流量模板中ICMPv6 MLDv2 Report报文头部的Group Records内容。\n\n**Purpose**  \n该函数用于编辑指定流模板中特定ICMPv6 MLDv2 Report头部下的Group Record字段。主要针对MLDv2协议中的接收者报告结构进行配置，用于网络设备对组播成员报告的处理测试。\n\n**Parameters**\n\n- `Stream` (object or list):  \n  测试仪表的流对象或流对象列表。若为列表，则仅处理第一个流。该对象需包含唯一标识符`handle`，用于系统内部识别该流。\n  \n- `Level` (int, optional, default=0):  \n  指定在流中所有同类型（如`mldv2report`）头部中的第几个实例进行操作。用于支持同一类型多个嵌套头的情况下选择目标头。\n\n- `Index` (int, optional, default=0):  \n  指定Group Records列表中要修改的具体记录索引，用于多条Group Record共存时的选择。\n\n- `Header` (str, optional, default='mldv2report'):  \n  要编辑的头部类型，当前仅支持`mldv2report`，用于过滤出对应类型的头部对象。\n\n- `**kwargs`:  \n  支持以下关键字参数来定义Group Record字段：\n\n    - `RecordType` (int, default=1, range: 0–255):  \n      Group Record的记录类型，表示加入/离开/变更等操作类型。\n\n    - `AuxDataLen` (int, default=0, range: 0–255):  \n      辅助数据长度，通常用于扩展信息，一般设为0。\n\n    - `NumberOfSources` (int, default=0, range: 0–65535):  \n      组播地址对应的源数目，控制SourceAddressList中的有效条目数。\n\n    - `MulticastAddress` (str, default='FF1E::1', valid IPv6 address):  \n      组播地址字段，指定被监听的IPv6组播地址。\n\n    - `SourceAddressList` (list of str, default=['2000::1'], list length: 0–1000):  \n      源地址列表，每个元素为有效的IPv6地址，数量应与`NumberOfSources`一致。\n\n**Returns**  \n返回一个字典，描述本次修改所影响的各个字段及其在底层模型中的路径；若未发生任何修改或操作失败，则返回`False`。\n\n**Return Example**\n```python\n{\n    'RecordType': 'groupRecords.groupRecord_0.recordType',\n    'AuxDataLen': 'groupRecords.groupRecord_0.auxDataLen',\n    'NumberOfSources': 'groupRecords.groupRecord_0.numberOfSources',\n    'MulticastAddress': 'groupRecords.groupRecord_0.multicastAddress',\n    'SourceAddressList: 2002::1': 'groupRecords.groupRecord_0.sourceAddressList.ipv6AddrContainer_0.ipv6Addr',\n    'SourceAddressList: 2003::1': 'groupRecords.groupRecord_0.sourceAddressList.ipv6AddrContainer_1.ipv6Addr'\n}\n```\n\n**Side Effects**  \n- 若尚未缓存头部信息，将执行命令获取流的头部结构（通过`get_stream_header`）。\n- 修改后的内容将直接影响流对象在测试仪表系统中的配置状态。\n\n**Usage Example (RobotFramework)**\n```robotframework\n| ${Stream} | add_stream | Port=${Port} |\n| ${HeaderTypes} | Create List | EthernetII | IPv6 | Mldv2Report |\n| Create Stream Header | Stream=${Stream} | HeaderTypes=${HeaderTypes} |\n| Edit Header Icmpv6 Mldv2 Report | Stream=${Stream} | Level=0 | Type=1 |\n| Edit Header Icmpv6 Group Records | Stream=${Stream} | recordType=10 |\n```",
  "TesterLibrary.Stream.Header.L3.icmpv6.edit_header_icmpv6_packet_too_big": "修改测试仪表流量模板中ICMPv6 'Packet Too Big'报文头部内容，并可同时修改其封装的IPv6头部字段。\n\n该函数用于修改指定流量模板中的ICMPv6 'Packet Too Big'报文头部及其嵌入式IPv6头部的各个字段。通过提供流对象和层级索引，可以选择特定的'Packet Too Big'头部进行修改。支持设置ICMPv6头部字段（如Type、Code、Checksum等）以及IPv6头部字段（如Version、Traffic Class、Source Address等）。\n\n参数:\n    Stream (object): 测试仪表流量对象，必须包含唯一标识流的'handle'属性。若传入列表，则使用第一个元素。\n    Level (int, optional): 要修改的'Packet Too Big'头部在流中同类型头部链中的索引位置，默认为0。\n    **kwargs (optional): 以下关键字参数可选，未指定时保留默认值：\n        Type (int): ICMPv6消息类型，默认值：1，取值范围：0-255\n        Code (int): ICMPv6消息代码，默认值：0，取值范围：0-255\n        Checksum (int or hex str): 校验和字段，默认值：0x0000，取值范围：0x0000-0xFFFF\n        Mtu (int): 指示路径最大传输单元，默认值：0，取值范围：0-4294967295\n        HeaderData (bytes or hex str): 原始头部数据（用于复杂或自定义头部），默认为8字节零数据\n        Version (int): IPv6版本号，默认值：6，取值范围：0-15\n        TrafficClass (int): IPv6流量类别，默认值：0，取值范围：0-255\n        FlowLabel (int): IPv6流标签，默认值：0，取值范围：0-1048575\n        PayloadLength (int): IPv6有效载荷长度，默认值：0，取值范围：0-65535\n        NextHeader (int): IPv6下一个头部协议，默认值：59（表示ICMPv6），取值范围：0-255\n        HopLimit (int): IPv6跳数限制，默认值：255，取值范围：0-255\n        Source (str): IPv6源地址，默认值：2001::2\n        Destination (str): IPv6目的地址，默认值：2001::1:f1:11\n        Gateway (str): IPv6网关地址，默认值：2001::1\n\n返回值:\n    dict: 包含所有成功修改字段的映射关系，键为传入的参数名，值为内部属性名称。例如：\n        {\n            'Type': 'type',\n            'Code': 'code',\n            ...\n        }\n    若没有任何字段被修改，则返回False。\n\n副作用:\n    - 修改指定流中的ICMPv6 'Packet Too Big'头部结构\n    - 内部调用`get_stream_header`函数，可能执行命令并更新缓存\n\n示例:\n    .. code:: RobotFramework\n\n        | ${Stream} | add_stream | Port=${Port} |\n        | ${HeaderTypes} | Create List | EthernetII | IPv6 | PacketTooBig |\n        | Create Stream Header | Stream=${Stream} | HeaderTypes=${HeaderTypes} |\n        | Edit Header Icmpv6 Packet Too Big | Stream=${Stream} | Level=0 | Code=1 | HopLimit=64",
  "TesterLibrary.Stream.Header.L3.icmpv6.edit_header_icmpv6_parameter_problem": "修改测试仪表流量模板中ICMPv6 Parameter Problem报文头部内容，包括ICMPv6头部字段和嵌入的IPv6头部字段。\n\nArgs:\n\n    Stream (object or list): 测试仪表流量对象或包含该对象的列表。若传入列表，则使用第一个元素。该对象必须具有'handle'属性以供系统唯一标识。\n\n    Level (int): 指定要修改的ICMPv6 Parameter Problem头部在流量模板中该类型头部列表中的索引位置，默认为0。\n\nKeyword Args:\n\n    Type (int, optional): ICMPv6消息类型字段，默认值：4，取值范围：0-255\n\n    Code (int, optional): ICMPv6消息代码字段，默认值：0，取值范围：0-255\n\n    Checksum (int, optional): 校验和字段值，默认由系统自动计算\n\n    Pointer (int or hex str, optional): 指针字段，指示原始数据包中错误的偏移量，默认值：0（十六进制表示为00000000）\n\n    HeaderData (bytes or str, optional): 原始头部数据，通常用于封装IPv6头部信息，默认值：0000000000000000（8字节十六进制数）\n\n    Version (int, optional): IPv6版本号字段，默认值：6，取值范围：0-15\n\n    TrafficClass (int, optional): IPv6流量类别字段，默认值：0，取值范围：0-255\n\n    FlowLabel (int, optional): IPv6流标签字段，默认值：0，取值范围：0-1048575\n\n    PayloadLength (int, optional): IPv6有效载荷长度字段，默认值：0，取值范围：0-65535\n\n    NextHeader (int, optional): IPv6下一头部字段，默认值：59（表示无下一头部），取值范围：0-255\n\n    HopLimit (int, optional): IPv6跳数限制字段，默认值：255，取值范围：0-255\n\n    Source (str, optional): IPv6源地址字段，默认值：2001::2，取值范围：有效的IPv6地址格式\n\n    Destination (str, optional): IPv6目的地址字段，默认值：2001::1:f1:11，取值范围：有效的IPv6地址格式\n\n    Gateway (str, optional): IPv6网关地址字段，默认值：2001::1，取值范围：有效的IPv6地址格式\n\nReturns:\n\n    dict: 一个字典，将每个成功更新的参数名称映射到其对应的内部属性路径，例如：\n        {\n            'Type': 'type',\n            'Code': 'code',\n            'Checksum': 'checksum',\n            'Pointer': 'pointer',\n            'HeaderData': 'headerData.data',\n            'Version': 'headerData.ipv6Header.version',\n            'TrafficClass': 'headerData.ipv6Header.trafficClass',\n            'FlowLabel': 'headerData.ipv6Header.FlowLabel',\n            'PayloadLength': 'headerData.ipv6Header.payloadLength',\n            'NextHeader': 'headerData.ipv6Header.nextHeader',\n            'HopLimit': 'headerData.ipv6Header.hopLimit',\n            'Source': 'headerData.ipv6Header.source',\n            'Destination': 'headerData.ipv6Header.destination',\n            'Gateway': 'headerData.ipv6Header.gateway'\n        }\n    若没有任何字段被成功更新则返回False。\n\nRaises:\n\n    ContinuableFailure: 如果编辑操作失败，抛出可继续执行的异常。\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${Stream} | add_stream | Port=${Port} |\n        | ${HeaderTypes} | Create List | EthernetII | IPv6 | Icmpv6ParameterProblem |\n        | Create Stream Header | Stream=${Stream} | HeaderTypes=${HeaderTypes} |\n        | Edit Header Icmpv6 Parameter Problem | Stream=${Stream} | Level=0 | Code=1 | HopLimit=128 | Source=2001::AABB:CCDD:EEFF:FFAA |",
  "TesterLibrary.Stream.Header.L3.icmpv6.edit_header_icmpv6_time_exceed": "修改测试仪表流量模板中ICMPv6 Time Exceeded报文头部的字段内容。\n\n该函数用于编辑指定流量流中的ICMPv6 Time Exceeded头部的特定字段，包括Type、Code、Checksum和Reserve（保留字段）。函数首先判断传入的Stream是否为列表，若是则取第一个元素。然后通过get_stream_header()获取流中所有类型为'icmpv6-time-exceed'的头部，并根据Level参数选择要修改的头部索引。如果提供了任意可选参数（Type、Code、Checksum、Reserve），则将这些值写入对应的头部属性中。\n\n参数：\n    Stream (object 或 list)：测试仪表流量对象，或包含一个流量对象的列表。该对象必须具有'handle'属性，用于系统内部识别该流量。\n    Level (int, 可选)：表示在该流中所有ICMPv6 Time Exceeded头部中的索引位置，默认值为0。\n    Type (int, 可选)：设置ICMPv6头部的Type字段值，默认值为3，有效范围为0-255。\n    Code (int, 可选)：设置ICMPv6头部的Code字段值，默认值为0，有效范围为0-255。\n    Checksum (int, 可选)：设置校验和字段的值，默认值为0，有效范围为0x0000-0xFFFF。注意：输入应为十六进制整数。\n    Reserve (int, 可选)：设置保留字段（Unused）的值，默认为0，有效范围为0-4294967295。\n\n返回值：\n    dict：返回一个字典，其中每个键为被修改的参数名（如'Type', 'Code'等），对应的值为实际在头部对象中更新的属性名（如'type', 'code'等）。仅包含有提供修改的参数项。\n    bool：若未提供任何修改参数，则返回False。\n\n副作用：\n    - 会直接修改与给定流关联的ICMPv6 Time Exceeded头部对象的属性。\n    - 如果尚未缓存相关头部信息，可能会触发get_stream_header()进行头部检索和构建操作。\n\n示例：\n    .. code:: RobotFramework\n\n        | ${Stream} | add_stream | Port=${Port} |\n        | ${HeaderTypes} | Create List | EthernetII | IPv6 | TimeExceed |\n        | Create Stream Header | Stream=${Stream} | HeaderTypes=${HeaderTypes} |\n        | Edit Header Icmpv6 Time Exceed | Stream=${Stream} | Level=0 | Code=1 |",
  "TesterLibrary.Stream.Header.L3.icmpv6.edit_header_icmpv6_router_solicitation": "修改测试仪表流量模板中ICMPv6 Router Solicitation报文头部的字段内容。\n\n该函数用于编辑指定流量流中的ICMPv6 Router Solicitation头部字段。它可以从提供的参数中选择性地修改Type、Code、Checksum、Reserve等字段，也可以插入HeaderOption扩展选项。该函数适用于在测试流量中构造特定的ICMPv6 Router Solicitation报文以进行网络协议测试。\n\n参数:\n    Stream (object or list): 测试仪表流量对象，或者包含该对象的列表。若传入列表，则使用第一个元素。该对象必须具有'handle'属性。\n    Level (int, optional): 要修改的ICMPv6 Router Solicitation头部在流中所有此类头部中的索引位置，默认为0（即第一个匹配的头部）。\n    Type (int, optional): ICMPv6消息类型值，默认133，取值范围：0-255。\n    Code (int, optional): ICMPv6消息代码值，默认0，取值范围：0-255。\n    Checksum (int, optional): 校验和字段值，默认0x0000，取值范围：0x0000-0xFFFF。\n    Reserve (int, optional): 保留字段值，默认0，取值范围：0-4294967295。\n    HeaderOption (object, optional): 要插入的扩展选项头对象。如果提供，将调用header.insertHeaderOption方法将其添加到当前头部。\n\n返回值:\n    dict: 包含已修改字段名称及其对应内部属性名的字典。例如：\n        {'Type': 'type', 'Code': 'code', 'Checksum': 'checksum', 'Reserve': 'reserve'}\n\n副作用:\n    - 修改指定流量流中的ICMPv6 Router Solicitation头部字段。\n    - 如果提供了HeaderOption参数，会改变报文结构，插入新的选项头。\n\n示例:\n    .. code:: RobotFramework\n\n        | ${Stream} | add_stream | Port=${Port} |\n        | ${HeaderTypes} | Create List | EthernetII | IPv6 | routersolicit |\n        | Create Stream Header | Stream=${Stream} | HeaderTypes=${HeaderTypes} |\n        | Edit Header Icmpv6 Router Solicitation | Stream=${Stream} | Level=0 | Code=1 |",
  "TesterLibrary.Stream.Header.L3.icmpv6.edit_header_icmpv6_header_option": "修改测试仪表流量模板中ICMPv6报文头部的Header Option内容。\n\n该函数用于编辑指定流中的特定ICMPv6头部选项。它根据给定的层级索引从流中检索相应的ICMPv6头部，并根据提供的参数和关键字参数修改其选项内容。支持的ICMPv6头部类型包括路由器请求、路由器通告、ICMPv6重定向、邻居请求、邻居通告等。\n\n参数:\n    Stream (object or list): 测试仪表流量对象，或者包含一个流对象的列表。如果传入列表，则仅处理第一个元素。\n    Option (str): 要编辑的ICMPv6头部选项名称，必须是以下类型之一：\n        - OptionSourceLinkLayerAddress\n        - OptionTargetLinkLayerAddress\n        - OptionPrefixInformation\n        - OptionMTU\n        - GeneralTLV\n    Level (int, optional): ICMPv6头部在流量模板中所有IGMPv3头部的序列号，默认为0（即顶层ICMPv6头部）。\n    Index (int, optional): ICMPv6 Header Option头部在流量模板中所有ICMPv6 Header Option的序列号，默认为0。\n    Header (str, optional): 要修改的ICMPv6头部类型，默认值为'routersolicit'，其他支持类型包括：\n        - routersolicit\n        - routeradvertise\n        - icmpv6redirect\n        - neighborsolicit\n        - neighboradvertise\n    **kwargs: 任意关键字参数，表示要更新的字段及其值。不同Option类型支持的字段如下：\n\n        OptionSourceLinkLayerAddress 支持字段:\n            Type (int): Option Type，默认值：1，取值范围：0-255\n            Length (int): Option Length，默认值：<AUTO>1，取值范围：0-255\n            Address (str): Link-Layer Address，默认值：00:00:00:12:30:10，取值范围：有效的MAC地址\n\n        OptionTargetLinkLayerAddress 支持字段:\n            Type (int): Option Type，默认值：2，取值范围：0-255\n            Length (int): Option Length，默认值：<AUTO>1，取值范围：0-255\n            Address (str): Link-Layer Address，默认值：00:00:00:12:30:10，取值范围：有效的MAC地址\n\n        OptionPrefixInformation 支持字段:\n            Type (int): Option Type，默认值：3，取值范围：0-255\n            Length (int): Option Length，默认值：<AUTO>1，取值范围：0-255\n            PrefixLength (int): Prefix Length，默认值：64，取值范围：0-255\n            OnLinkFlag (bit): On-Link Flag，默认值：1，取值范围：0-1\n            AutonomousFlag (bit): Autonomous Flag，默认值：1，取值范围：0-1\n            Reserved (bit): Reserved，默认值：000000，取值范围：000000-111111\n            ValidLifetime (int): Valid Lifetime，默认值：1，取值范围：0-4294967295\n            PreferredLifetime (int): Valid Lifetime，默认值：1，取值范围：0-4294967295\n            Reserved2 (int): Reserved，默认值：1，取值范围：0-4294967295\n            PrefixAddress (str): Prefix，默认值：2001::0，取值范围：有效的IPv6地址\n\n        OptionMTU 支持字段:\n            Type (int): Option Type，默认值：5，取值范围：0-255\n            Length (int): Option Length，默认值：<AUTO>1，取值范围：0-255\n            Reserved3 (int): Reserved，默认值：1，取值范围：0-65535\n            Mtu (int): MTU，默认值：1000，取值范围：0-4294967295\n\n        GeneralTLV 支持字段:\n            Type (int): Option Type，默认值：0，取值范围：0-255\n            Length (int): Option Length，默认值：<AUTO>2，取值范围：0-255\n            Value (hex): Option Value，默认值：\"\"，取值范围：长度0-40字节的十六进制数\n\n返回值:\n    dict: 包含修改结果的字典，通常包括状态信息或更新后的字段值。若操作失败或无返回结果，则返回False。\n\n示例:\n    .. code:: RobotFramework\n\n        | ${Stream} | add_stream | Port=${Port} |\n        | ${HeaderTypes} | Create List | EthernetII | IPv6 | Mldv2Report |\n        | Create Stream Header | Stream=${Stream} | HeaderTypes=${HeaderTypes} |\n        | Edit Header Icmpv6 Mldv2 Report | Stream=${Stream} | Level=0 | Type=1 |\n        | Edit Header Icmpv6 Group Records | Stream=${Stream} | recordType=10",
  "TesterLibrary.Stream.Header.L3.icmpv6.edit_header_icmpv6_router_advertise": "修改测试仪表流量模板中的ICMPv6 Router Advertisement报文头部字段内容。\n\n该函数用于修改指定流模板中某个ICMPv6 Router Advertisement头部的字段值。如果存在多个Router Advertisement头部，可以通过`Level`参数选择具体的头部进行修改。所有字段均为可选参数，仅当提供具体值时才会更新对应字段。\n\n参数:\n    Stream (object or list): 测试仪表中的流对象或包含流对象的列表。若传入列表，则使用第一个元素作为流对象。该对象需具有唯一标识符`handle`属性。\n    Level (int, optional): 指定要修改的Router Advertisement头部在该流中所有Router Advertisement头部中的索引位置。默认为0，即第一个Router Advertisement头部。\n\n关键字参数（Keyword Args）:\n    Type (int, optional): ICMPv6消息类型字段，默认值：134，取值范围：0-255\n    Code (int, optional): ICMPv6消息代码字段，默认值：0，取值范围：0-255\n    Checksum (int, optional): 校验和字段，默认值：0x0000，取值范围：0x0000-0xFFFF\n    CurHopLimit (int, optional): 当前跳数限制字段，默认值：0，取值范围：0-255\n    ManagedAddrFlag (bool, optional): 管理地址标志位，默认值：False，取值范围：0或1\n    OtherConfigFlag (bool, optional): 其他配置标志位，默认值：False，取值范围：0或1\n    Reserved (int, optional): 保留字段，默认值：0，通常应为0，除非有扩展定义，取值范围：0-63（6位）\n    RouterLifetime (int, optional): 路由器生命周期（秒），默认值：0，取值范围：0-65535\n    ReachableTime (int, optional): 可达时间（毫秒），默认值：0，取值范围：0-4294967295\n    RetransTime (int, optional): 重传时间（毫秒），默认值：0，取值范围：0-4294967295\n    HeaderOption (object, optional): 一个Header Option对象，表示需要插入到当前Router Advertisement头部的选项字段，如链路层地址、前缀信息、MTU等。\n\n返回值:\n    dict: 返回一个字典，映射每个被修改的参数名称到其在内部结构中的实际属性名。例如：\n        {\n            'Type': 'type',\n            'Code': 'code',\n            'Checksum': 'checksum',\n            'CurHopLimit': 'curHopLimit',\n            'ManagedAddrFlag': 'managedAddrFlag',\n            'OtherConfigFlag': 'otherConfigFlag',\n            'Reserved': 'reserved',\n            'RouterLifetime': 'routerLifetime',\n            'ReachableTime': 'reachableTime',\n            'RetransTime': 'retransTime',\n        }\n\n示例:\n    .. code:: RobotFramework\n\n        | ${Stream} | add_stream | Port=${Port} |\n        | ${HeaderTypes} | Create List | EthernetII | IPv6 | routeradvertise |\n        | Create Stream Header | Stream=${Stream} | HeaderTypes=${HeaderTypes} |\n        | Edit Header Icmpv6 Router Advertise | Stream=${Stream} | Level=0 | Code=1 |\n\n说明:\n    - 函数会获取流对象中的所有头部，并筛选出类型为'routeradvertise'的头部，然后根据`Level`参数定位具体的头部对象进行修改。\n    - 若提供了`HeaderOption`，则将其插入到该Router Advertisement头部中，可能会影响头部结构或行为。\n    - 所有字段修改后将反映在流模板中，后续发送的数据包将携带这些修改后的字段值。",
  "TesterLibrary.Stream.Header.L3.icmpv6.edit_header_icmpv6_redirect": "修改测试仪表流量模板中Icmpv6 Redirect报文头部内容。\n\n该函数用于编辑指定流量模板中的 ICMPv6 Redirect 报文头部字段。根据提供的参数，函数将更新对应字段，并返回包含已修改字段的字典。\n\nArgs:\n\n    Stream (object): 测试仪表流量对象，表示一个流量模板。该对象需包含唯一标识流的 'handle' 属性。\n                     如果传入的是列表，则只使用第一个元素。\n\n    Level (int): ICMPv6 Redirect 头部在该流量模板所有 ICMPv6 Redirect 头部中的索引（序列号），默认值为 0。\n\nKeyword Args:\n\n    Type (int, optional): 设置 ICMPv6 Redirect 头部的类型字段（Type），默认值：137，取值范围：0-255\n\n    Code (int, optional): 设置 ICMPv6 Redirect 头部的代码字段（Code），默认值：0，取值范围：0-255\n\n    Checksum (int, optional): 设置 ICMPv6 Redirect 头部的校验和字段（Checksum），默认值：0，取值范围：0-65535\n\n    Reserve (int, optional): 设置 ICMPv6 Redirect 头部的保留字段（Reserved），默认值：0，取值范围：0-4294967295\n\n    TargetAddress (str, optional): 设置 ICMPv6 Redirect 头部的目标地址字段（Target Address），\n                                   默认值：\"2001::1:f1:11\"，取值范围：有效的 IPv6 地址\n\n    DestAddress (str, optional): 设置 ICMPv6 Redirect 头部的目的地址字段（Destination Address），\n                                 默认值：\"2001::1:f1:11\"，取值范围：有效的 IPv6 地址\n\n    HeaderOption (object, optional): 要插入到 ICMPv6 Redirect 头部的链路层选项（Link-Layer Option），\n                                     使用 insertLinkLayerOption 方法添加。支持以下选项：\n\n                                         - OptionSourceLinkLayerAddress\n                                         - OptionTargetLinkLayerAddress\n                                         - OptionPrefixInformation\n                                         - OptionMTU\n                                         - GeneralTLV\n\n    RedirectedHdrOption (object, optional): 要插入到 ICMPv6 Redirect 头部的重定向器选项（Redirector Option），\n                                            使用 insertRedirectorOption 方法添加。\n\nReturns:\n\n    dict: 包含已修改字段的字典，键为字段名，值为对应的内部属性名称。例如：\n\n        {\n            'Type': 'type',\n            'Code': 'code',\n            'Checksum': 'checksum',\n            'Reserved': 'reserved',\n            'TargetAddress': 'targetAddress',\n            'DestAddress': 'destAddress'\n        }\n\n    如果未修改任何字段，则返回空字典。\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${Stream} | add_stream | Port=${Port} |\n        | ${HeaderTypes} | Create List | EthernetII | IPv6 | Icmpv6Redirect |\n        | Create Stream Header | Stream=${Stream} | HeaderTypes=${HeaderTypes} |\n        | Edit Header Icmpv6 Redirect | Stream=${Stream} | Level=0 | Code=1 |",
  "TesterLibrary.Stream.Header.L3.icmpv6.edit_header_icmpv6_redirected_header": "修改测试仪表流量模板中ICMPv6 Redirected报文头部的指定选项内容。\n\n该函数用于编辑指定流量模板中的 ICMPv6 Redirected Header 的某个具体选项（option）。它通过层级和索引定位目标头部及其内部字段，并支持对多个字段的自定义修改。\n\nArgs:\n\n    Stream (object): 测试仪表流量对象，必须包含一个 `handle` 属性以唯一标识该流量。若传入列表，则使用第一个元素。\n\n    Level (int, optional): 在所有 ICMPv6 Redirected Headers 中选择目标头部的索引，用于处理存在多个相同类型头部的情况，默认为 0。\n\n    Index (int, optional): 在选定的 ICMPv6 Redirected Header 内部，指定要修改的选项的索引，默认为 0。\n\n    Header (str, optional): 指定要操作的头部类型，默认为 'icmpv6redirect'，表示 ICMPv6 Redirected Header 类型。\n\n    **kwargs: 要修改的具体字段及其值，可选字段包括：\n\n        Type (int): Option Type，默认值：4，取值范围如下：\n\n            Source Link-Layer Address: 1\n\n            Target Link-Layer Address: 2\n\n            Prefix Information: 3\n\n            Redirected Header: 4\n\n            MTU: 5\n\n        Length (int): Option Length，默认值：4，取值范围：0-255\n\n        Reserved1 (int): Reserved1，默认值：0，取值范围：0-65535\n\n        Reserved2 (int): Reserved2，默认值：0，取值范围：0-4294967295\n\n        Data (hex): Data，默认值：0000000000000000，取值范围：长度为8字节的十六进制字符串\n\n        Version (int): IPv6 Version，默认值：6，取值范围：0-15\n\n        TrafficClass (int): Traffic Class，默认值：0，取值范围：0-255\n\n        FlowLabel (int): Flow Label，默认值：0，取值范围：0-1048575\n\n        PayloadLength (int): Payload Length，默认值：0，取值范围：0-65535\n\n        NextHeader (int): Next Header，默认值：59，取值范围：0-255\n\n        HopLimit (int): Hop Limit，默认值：255，取值范围：0-255\n\n        Source (str): Source Address，默认值：2001::2，取值范围：有效的IPv6地址\n\n        Destination (str): Destination Address，默认值：2001::1:f1:11，取值范围：有效的IPv6地址\n\n        Gateway (str): Gateway Address，默认值：2001::1，取值范围：有效的IPv6地址\n\nReturns:\n\n    dict: 若成功返回以下格式的字典信息，否则返回 False：\n\n        {\n            'Type': 'type',\n            'Code': 'code',\n            'Checksum': 'checksum',\n            'Reserve': 'reserve',\n            'HeaderData': 'headerData.data',\n            'Version': 'headerData.ipv6Header.version',\n            'TrafficClass': 'headerData.ipv6Header.trafficClass',\n            'FlowLabel': 'headerData.ipv6Header.FlowLabel',\n            'PayloadLength': 'headerData.ipv6Header.payloadLength',\n            'NextHeader': 'headerData.ipv6Header.nextHeader',\n            'HopLimit': 'headerData.ipv6Header.hopLimit',\n            'Source': 'headerData.ipv6Header.source',\n            'Destination': 'headerData.ipv6Header.destination',\n            'Gateway': 'headerData.ipv6Header.gateway'\n        }\n\nRaises:\n\n    ContinuableFailure: 如果操作失败，将抛出可继续执行的异常，并附带函数名作为错误信息的一部分。\n\nSide Effects:\n\n    - 修改指定流中 ICMPv6 Redirected Header 的配置。\n    - 如未缓存流的头部信息，可能会查询并缓存相关信息。",
  "TesterLibrary.Stream.Header.L3.icmpv6.edit_header_icmpv6_neighbor_advertise": "修改测试仪表流量模板中Icmpv6 Neighbor Advertise报文头部内容\n\n该函数用于编辑指定流量流中ICMPv6 Neighbor Advertisement报文头部的字段。可以修改的字段包括Type、Code、Checksum、Rflag、Sflag、Oflag、Reserve和TargetAddress等。如果提供了新的HeaderOption，它将被插入到报文头部中。\n\nArgs:\n\n    Stream (object or list): 测试仪表流量对象或包含流量对象的列表。如果是列表，仅使用第一个元素。\n                             该对象必须具有一个'handle'属性，用于唯一标识该流量流。\n\n    Level (int, optional): 要编辑的NeighborAdvertise头部在流中所有NeighborAdvertise头部中的索引位置（层级）。默认为0。\n\nKeyword Args:\n\n    Type (int, optional): ICMPv6消息类型，默认值：136，取值范围：0-255\n\n    Code (int, optional): ICMPv6消息代码，默认值：0，取值范围：0-255\n\n    Checksum (int, optional): 校验和字段值，默认值：0，取值范围：0x0000-0xFFFF\n\n    Rflag (bool or int, optional): Router Flag（路由标志），默认值：False/0，取值范围：0或1\n\n    Sflag (bool or int, optional): Solicited Flag（请求标志），默认值：False/0，取值范围：0或1\n\n    Oflag (bool or int, optional): Override Flag（覆盖标志），默认值：False/0，取值范围：0或1\n\n    Reserve (int, optional): 保留字段，默认值：0，取值范围：0-536870911\n\n    TargetAddress (str, optional): 目标IPv6地址，默认值：\"2001::1\"，格式为有效的IPv6地址字符串\n\n    HeaderOption (object, optional): 要插入的头部选项对象，默认值：None，可选的选项类型包括：\n\n        OptionSourceLinkLayerAddress\n\n        OptionTargetLinkLayerAddress\n\n        OptionPrefixInformation\n\n        OptionMTU\n\n        GeneralTLV\n\nReturns:\n\n    dict: 返回一个字典，表示输入参数名称与实际修改的头部属性名称之间的映射关系。例如::\n\n        {\n            'Type': 'type',\n            'Code': 'code',\n            'Checksum': 'checksum',\n            'Rflag': 'rFlag',\n            'Sflag': 'sFlag',\n            'Oflag': 'oFlag',\n            'Reserve': 'reserve',\n            'TargetAddress': 'targetAddress'\n        }\n\nRaises:\n\n    ContinuableFailure: 如果调用底层API失败，则抛出ContinuableFailure异常，表示操作未成功完成。\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${Stream} | add_stream | Port=${Port} |\n        | ${HeaderTypes} | Create List | EthernetII | IPv6 | NeighborAdvertise |\n        | Create Stream Header | Stream=${Stream} | HeaderTypes=${HeaderTypes} |\n        | Edit Header Icmpv6 Neighbor Advertise | Stream=${Stream} | Level=0 | Code=1 |",
  "TesterLibrary.Stream.Header.L3.icmpv6.edit_header_icmpv6_neighbor_solicitation": "修改测试仪表流量模板中ICMPv6 Neighbor Solicitation报文头部的字段内容。\n\n该函数用于编辑指定流量模板中的 ICMPv6 Neighbor Solicitation（邻居请求）报文头部。如果流中存在多个 ICMPv6 Neighbor Solicitation 头部，可以通过 Level 参数选择要编辑的头部。支持修改 Type、Code、Checksum、Reserve、TargetAddress 字段，并可通过 HeaderOption 插入选项字段。\n\n参数:\n    Stream (object or list): 测试仪表流量对象或包含该对象的列表。若传入列表，则使用第一个元素。该对象必须具有 'handle' 属性以供识别。\n    Level (int, optional): 当流中存在多个 ICMPv6 Neighbor Solicitation 头部时，用于选择索引位置，默认为 0。\n    **kwargs (optional): 支持修改的字段包括：\n        Type (int): ICMPv6 消息类型字段值，默认 135，取值范围 0-255。\n        Code (int): ICMPv6 消息代码字段值，默认 0，取值范围 0-255。\n        Checksum (int): 校验和字段值，默认 0x0000，取值范围 0x0000-0xFFFF。\n        Reserve (int): 保留字段值，默认 0，取值范围 0-4294967295。\n        TargetAddress (str): 被查询的目标 IPv6 地址，默认 \"2001::1\"，需为有效 IPv6 地址。\n        HeaderOption (object): 表示 ICMPv6 报文选项的对象，可插入如源/目标链路层地址、前缀信息、MTU 等选项。\n\n返回值:\n    dict: 返回一个字典，表示被修改字段的名称与其内部属性名的映射关系。例如：{'Type': 'type'}。\n\n副作用:\n    - 直接在系统或缓存对象上修改 ICMPv6 Neighbor Solicitation 报文头部字段。\n    - 若提供 HeaderOption，将调用 insertHeaderOption 方法，可能改变报文结构。\n\n注意事项:\n    - 只有传递非 None 的字段才会被更新。\n    - 内部通过过滤流中的头部，查找类型为 'neighborsolicit' 的头部进行操作。\n\n示例:\n    .. code:: RobotFramework\n\n        | ${Stream} | add_stream | Port=${Port} |\n        | ${HeaderTypes} | Create List | EthernetII | IPv6 | NeighborSolicitation |\n        | Create Stream Header | Stream=${Stream} | HeaderTypes=${HeaderTypes} |\n        | Edit Header Icmpv6 Neighbor Solicitation | Stream=${Stream} | Level=0 | Code=1 |",
  "TesterLibrary.Stream.Header.L3.igmp.edit_header_igmpv1_report": "修改测试仪表流量模板中IGMPv1 Report报文头部的指定字段。\n\n该函数用于修改指定流对象中某级IGMPv1 Report头部中的特定字段。仅当提供非None值时，对应的字段才会被更新。\n\n参数:\n    Stream (object 或 list): 流对象或包含单个流对象的列表。若传入列表，则使用第一个元素进行处理。该流对象必须包含一个 'handle' 属性，用于在系统中唯一标识该流。\n    Level (int, optional): IGMPv1 Report头部在流对象头部层级中的索引位置，默认为0。该参数在存在多个同类型头部时非常有用。\n    **kwargs (可选关键字参数): 可以指定以下任意一个或多个字段：\n        Type (hex): 设置IGMPv1头部的Type字段，范围：00-FF，默认值：12。\n        Unused (int): 设置Unused字段，范围：0-255，默认值：0。\n        Checksum (hex): 设置Checksum字段，范围：0000-ffff 或 AUTO，其中ffff表示人为引入错误，AUTO表示自动计算校验和。\n        GroupAddress (str): 设置Group Address字段，必须为合法IPv4地址，默认值：225.0.0.1。\n\n返回值:\n    dict: 一个字典，显示哪些字段被修改及其对应的头部属性名称。例如：\n        {'Type': 'type', 'GroupAddress': 'groupAddress'}\n    如果所有传入参数均为None（即没有字段被修改），则返回False。\n\n副作用:\n    - 如果尚未获取过流对象的头部信息，则会调用 self.get_stream_header() 进行获取并缓存。\n    - 修改流对象内部状态中指定Level的IGMPv1 Report头部对象的相应字段。\n\n示例:\n    .. code:: RobotFramework\n\n        | ${Stream} | add_stream | Port=${Port} |\n        | ${HeaderTypes} | Create List | EthernetII | IPv4 | IGMPv1 |\n        | create_stream_header | Stream=${Stream} | HeaderTypes=${HeaderTypes} |\n        | edit_header_igmpv1_report | Stream=${Stream} | Level=0 | GroupAddress=225.0.1.1 |",
  "TesterLibrary.Stream.Header.L3.igmp.edit_header_igmpv1_query": "修改测试仪表流量模板中指定层级的IGMPv1 Query报文头部的一个或多个字段内容。\n\n参数:\n    Stream (:obj:`StreamTemplate` 或其子类): 测试仪表流量对象，必须包含一个唯一标识流的 'handle' 属性。若传入流对象列表，则仅处理第一个。\n    Level (int, optional): 指定要修改的IGMPv1 Query头部在流中所有IGMPv1 Query类型头部中的索引位置，默认为0（即第一个匹配的IGMPv1 Query头部）。\n\n关键字参数（可选，不提供则不修改对应字段）:\n    Type (hex): 设置IGMPv1 Query头部的Type字段值，十六进制格式，范围：00-FF，默认值：11。\n    Unused (int): 设置Unused字段值，整数格式，范围：0-255，默认值：0。\n    Checksum (hex): 设置Checksum字段值，十六进制格式，范围：0000-ffff 或 AUTO。其中ffff表示生成错误校验和，AUTO表示自动计算校验和，默认为AUTO。\n    GroupAddress (str): 设置Group Address字段值，字符串格式，IPv4地址，默认值：225.0.0.1。\n\n返回值:\n    dict: 若成功更新至少一个字段，则返回一个字典，将每个被修改的字段名映射为其内部属性名，例如::\n        \n        {\n            'Type': 'type',\n            'Unused': 'unused',\n            'Checksum': 'checksum',\n            'GroupAddress': 'groupAddress'\n        }\n    \n    bool: 若未修改任何字段（即所有提供的字段值均为None），则返回False。\n\n副作用:\n    - 会直接修改流对象中指定层级的IGMPv1 Query头部的相应字段内容。\n\n示例:\n    .. code:: RobotFramework\n\n        | ${Stream} | add_stream | Port=${Port} |\n        | ${HeaderTypes} | Create List | EthernetII | IPv4 | IGMPv1Query |\n        | create_stream_header | Stream=${Stream} | HeaderTypes=${HeaderTypes} |\n        | edit_header_igmpv1_query | Stream=${Stream} | Level=0 | GroupAddress=225.0.1.1 |",
  "TesterLibrary.Stream.Header.L3.igmp.edit_header_igmpv2_report": "修改测试仪表流量模板中IGMPv2 Report报文头部的指定字段内容。\n\n该函数用于编辑指定流量模板中某一IGMPv2 Report头部的若干字段。用户可以指定要修改的字段（如Type、MaxResponseTime、Checksum、GroupAddress等），未提供的字段将保持原样。仅当至少一个字段被成功修改时，返回包含更新字段及其新值的字典；若没有任何字段被修改，则返回False。\n\nParameters:\n    Stream (:obj:`StreamTemplate`): 测试仪表流量对象，必须包含一个唯一标识符（handle属性）以供内部识别。\n                                    如果传入的是列表，则使用第一个元素作为Stream对象。\n    Level (int, optional): 指定要编辑的IGMPv2 Report头部在该流量中所有IGMPv2 Report头中的索引位置，默认为0。\n\nKeyword Args:\n    Type (str or hex, optional): IGMPv2 Report类型字段的新值，十六进制表示，范围：00-FF，默认值：16。\n    MaxResponseTime (str or int, optional): 最大响应时间字段的新值，单位为秒，范围：0-255，默认值：100。\n    Checksum (str or hex, optional): 头部校验和字段的新值，十六进制表示，范围：0000-ffff，其中ffff表示人为错误；\n                                     若设为'AUTO'，则由系统自动计算校验和，默认为'AUTO'。\n    GroupAddress (str, optional): 组播组地址字段的新值，字符串形式的IPv4地址，默认值：225.0.0.1。\n\nReturns:\n    dict or bool: 包含成功修改字段及其新值的字典（例如 {'Type': '16', 'MaxResponseTime': '15'}），\n                  如果没有任何字段被修改，则返回False。\n\nRaises:\n    ContinuableFailure: 如果调用底层接口失败，将抛出此异常并提示相应错误信息。\n\nSide Effects:\n    - 会修改流模板内部对应IGMPv2 Report头部对象的状态。\n    - 若尚未缓存该流的头部信息，可能触发get_stream_header函数来获取并缓存头部数据。\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${Stream} | add_stream | Port=${Port} |\n        | ${HeaderTypes} | Create List | EthernetII | IPv4 | IGMPv2 |\n        | create_stream_header | Stream=${Stream} | HeaderTypes=${HeaderTypes} |\n        | edit_header_igmpv2_report | Stream=${Stream} | Level=0 | MaxResponseTime=15 | GroupAddress=225.0.1.1 |",
  "TesterLibrary.Stream.Header.L3.igmp.edit_header_igmpv2_query": "修改测试仪表流量模板中指定层级的IGMPv2 Query报文头部字段内容。\n\n该函数用于编辑指定流对象中某一IGMPv2 Query头部的特定字段。内部会根据流对象获取所有头部，并筛选出类型为IGMPv2Query的头部，然后根据Level参数选择要修改的具体头部层级。支持编辑的字段包括Type、MaxResponseTime、Checksum和GroupAddress。\n\nParameters:\n    Stream (:obj:`StreamTemplate`): 测试仪表流量模板对象，必须包含一个handle属性用于唯一标识该流。若传入列表则使用第一个元素。\n    Level (int, optional): 要修改的IGMPv2 Query头部在该流所有IGMPv2 Query头部中的索引位置，默认为0。\n    **kwargs (可选): 支持以下关键字参数：\n        Type (hex): IGMP消息类型值，十六进制表示，范围：00-FF，默认：12。\n        MaxResponseTime (int): 最大响应时间，单位为十分之一秒，范围：0-255，默认：0。\n        Checksum (hex): 头部校验和，十六进制表示，范围：0000-ffff，其中ffff表示错误值；也可以设为AUTO表示自动计算，默认为AUTO。\n        GroupAddress (str): 组播组地址，字符串形式IPv4地址，例如：\"224.0.0.1\"，默认：225.0.0.1。\n\nReturns:\n    dict: 一个字典，将每个成功修改的参数名称映射到其内部属性名（如{'Type': 'type', 'GroupAddress': 'groupAddress'}）。\n    若没有提供任何参数进行更新，则返回False。\n\nRaises:\n    ContinuableFailure: 如果调用失败，抛出可继续执行的异常。\n\nSide Effects:\n    - 直接修改流对象中对应层级的IGMPv2 Query头部属性。\n    - 内部通过缓存机制调用get_stream_header来获取流的头部信息。\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${Stream} | add_stream | Port=${Port} |\n        | ${HeaderTypes} | Create List | EthernetII | IPv4 | IGMPv2Query |\n        | create_stream_header | Stream=${Stream} | HeaderTypes=${HeaderTypes} |\n        | edit_header_igmpv2_query | Stream=${Stream} | Level=0 | MaxResponseTime=15 | GroupAddress=225.0.1.1 |",
  "TesterLibrary.Stream.Header.L3.igmp.edit_header_igmpv3_report": "修改测试仪表流量模板中IGMPv3 Report报文头部内容\n\n该函数用于编辑指定流模板中的IGMPv3 Report头部字段。可以对多个IGMPv3 Report头部中的某一个（由Level参数指定）进行字段修改，包括Type、Reserved1、Checksum、Reserved2、NumGroupRecords等字段。若未提供任何字段进行修改，则函数返回False。\n\nArgs:\n\n    Stream (:obj:`StreamTemplate` 或 list): 测试仪表流量对象，类型为StreamTemplate或包含该对象的列表。\n                                           若为列表，则使用第一个元素。该对象必须包含一个'handle'\n                                           属性，用于在系统中唯一标识该流。\n    Level (int, optional): 指定要修改的IGMPv3 Report头部在其所属流中的索引级别（即该流中存在多个\n                           IGMPv3 Report头部时选择第几个）。默认值为0。\n\nKeyword Args:\n\n    Type (hex, optional): Type字段的值，十六进制表示，范围：00-FF，默认值：22。\n    Reserved1 (hex, optional): Reserved1字段的值，十六进制表示，范围：00-FF，默认值：00。\n    Checksum (hex, optional): Header Checksum字段的值，十六进制表示，范围：0000-FFFF 或 AUTO，\n                              其中FFFF表示强制生成错误校验和，AUTO表示自动计算校验和。\n    Reserved2 (hex, optional): Reserved2字段的值，十六进制表示，范围：0000-FFFF，默认值：0000。\n    NumGroupRecords (int or str, optional): Num Group Records字段的值，整数表示，范围：0-65535 或 AUTO，\n                                            AUTO表示自动计算该字段。\n\nReturns:\n\n    dict or bool: 包含已修改字段及其内部属性名称映射的字典，例如：\n    \n        {\n            'Type': 'type',\n            'Reserved1': 'reserved1',\n            'Checksum': 'Checksum',\n            'Reserved2': 'reserved2',\n            'NumGroupRecords': 'numGroupRecords'\n        }\n\n    若没有任何字段被成功修改，则返回False。\n\nRaises:\n\n    ContinuableFailure: 如果底层调用失败（即返回False），将抛出ContinuableFailure异常。\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${Stream} | add_stream | Port=${Port} |\n        | ${HeaderTypes} | Create List | EthernetII | IPv4 | IGMPv3 |\n        | create_stream_header | Stream=${Stream} | HeaderTypes=${HeaderTypes} |\n        | edit_header_igmpv3_report | Stream=${Stream} | Level=0 | NumGroupRecords=15 |\n\nSide Effects:\n\n    - 修改了流模板中指定IGMPv3 Report头部对象的相应字段。\n    - 内部调用了get_stream_header()函数，可能会查询并缓存与该流相关的头部对象。",
  "TesterLibrary.Stream.Header.L3.igmp.edit_header_igmpv3_query": "修改测试仪表流量模板中IGMPv3 Query报文头部内容\n\n该函数用于编辑指定流量模板中第Level个IGMPv3 Query头部的字段内容。\n\nArgs:\n    Stream (:obj:`StreamTemplate` 或 list): 测试仪表流量对象，类型为StreamTemplate。如果传入list，则使用第一个元素作为StreamTemplate对象。\n    Level (int, optional): 要修改的IGMPv3 Query头部在流量模板中的索引位置，默认为0，表示第一个IGMPv3 Query头部。\n\nKeyword Args:\n    Type (hex, optional): IGMPv3 Query消息类型值，范围：00-FF，默认值: 11\n    MaxResponseTime (int, optional): 最大响应时间（单位：秒），范围: 0-255，默认值: 100\n    Checksum (int or str, optional): 校验和字段值。可选值包括：\n        - 十六进制数值范围: 0000-ffff\n        - 字符串\"AUTO\"表示自动计算校验和\n        默认值: AUTO\n    GroupAddress (str, optional): 组播组地址，IPv4格式字符串。范围: IPv4地址，例如'225.0.0.1'，默认值: '225.0.0.1'\n    Reserved (int, optional): 保留字段，范围: 0-15，默认值: 0\n    SuppressFlag (bit, optional): 抑制标志位，取值范围: 0 或 1，默认值: 1\n    Qrv (int, optional): 查询器健在次数（QRV），范围: 000-111（三位二进制数），默认值: 000\n    Qqic (int, optional): 查询间隔代码（QQIC），范围: 0-255，默认值: 0\n    NumberOfSources (int, optional): 源地址数量，范围: 0-65535，默认不设置，仅当SourceAddressList存在时自动填充\n    SourceAddressList (list of str, optional): 包含IPv4源地址的列表，最大长度63，默认值为空列表([])。若提供，将依次插入并编辑对应的IPv4地址容器。\n\nReturns:\n    dict: 包含所有被修改字段及其最终值的字典。示例::\n\n        {\n            'Type': 'type',\n            'MaxResponseTime': 'maxResponseTime',\n            'Checksum': 'Checksum',\n            'GroupAddress': 'groupAddress',\n            'Reserved': 'reserved',\n            'SuppressFlag': 'suppressFlag',\n            'Qrv': 'qrv',\n            'Qqic': 'qqic',\n            'NumberOfSources': 'numberOfSources'\n        }\n\n    如果没有字段被成功修改，则返回False。\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${Stream} | add_stream | Port=${Port} |\n        | ${HeaderTypes} | Create List | EthernetII | IPv4 | IGMPv3Query |\n        | create_stream_header | Stream=${Stream} | HeaderTypes=${HeaderTypes} |\n        | edit_header_igmpv3_query | Stream=${Stream} | Level=0 | MaxResponseTime=15 | GroupAddress=225.0.1.1 |\n\nSide Effects:\n    - 修改流模板中IGMPv3 Query头部的相关字段。\n    - 如果提供了SourceAddressList参数，会向头部中插入对应的IPv4地址容器。\n    - 内部调用get_stream_header获取并可能缓存流模板的头部信息。",
  "TesterLibrary.Stream.Header.L3.igmp.edit_header_igmpv3_group_records": "修改测试仪表流量模板中IGMPv3 Report报文头部的Group Records内容，包括更新组记录字段以及插入IPv4源地址或辅助数据容器。\n\n参数:\n    Stream (:obj:`StreamTemplate` 或包含它的列表): 要修改的测试仪表流量对象，必须包含'handle'属性。\n    Level (int, optional): 指定IGMPv3头部在其所有相同类型头部中的索引位置，默认为0。\n    Index (int, optional): 指定Group Records在该IGMPv3头部中所有Group Records中的索引位置，默认为0。\n    Header (str, optional): 要编辑的头部类型，当前仅支持'igmpv3report'，默认值为'igmpv3report'。\n    SourceAddressList (list of str, optional): 包含一个或多个IPv4地址的列表，这些地址将作为单独的IPv4地址容器插入到指定的Group Record中，默认为空列表。\n    ExceedauxDataList (list of str, optional): 包含一个或多个4字节长度的十六进制数的辅助数据列表，每个数据将作为单独的辅助数据容器插入到指定的Group Record中，默认为空列表。\n    **kwargs (keyword args): 用于修改Group Record主字段的键值对，可选字段包括：\n\n        RecordType (int): 组记录类型，默认值：1，取值范围：0-255。\n        AuxDataLen (int): 辅助数据长度，默认值：0，取值范围：0-255。\n        NumberOfSources (int): 源地址数量，默认值：0，取值范围：0-65535。\n        MulticastAddress (str): 组播地址，默认值：225.0.0.1，取值范围：合法的IPv4地址。\n\n返回值:\n    dict: 表示操作结果的字典，键为被修改或添加的内容（如'MulticastAddress'、'SourceAddressList: <address>'、'ExceedauxDataList: <data>'等），值为操作结果对应的路径或状态信息。若无有效操作或操作失败，返回False。\n\n副作用:\n    - 修改指定的IGMPv3 Group Record字段内容。\n    - 如果提供了SourceAddressList，则会向该Group Record中插入一个或多个IPv4地址容器。\n    - 如果提供了ExceedauxDataList，则会向该Group Record中插入一个或多个辅助数据容器。\n    - 内部调用函数如`editGroupRecords`、`insertIpv4AddressContainer`、`editIpv4AddressContainer`、`insertAuxDataContainer`和`editAuxDataContainer`来完成具体的操作。\n\n示例:\n    .. code:: RobotFramework\n\n        | ${Stream} | add_stream | Port=${Port} |\n        | ${HeaderTypes} | Create List | EthernetII | IPv4 | IGMPv3 |\n        | create_stream_header | Stream=${Stream} | HeaderTypes=${HeaderTypes} |\n        | edit_header_igmpv3_report | Stream=${Stream} | Level=0 | NumGroupRecords=15 |\n        | Edit Header IPv4 Option | Stream=${Stream} | recordType=10",
  "TesterLibrary.Stream.Header.L4.common.edit_header_tcp": "修改测试仪表流量模板中TCP报文头部内容。\n\n该函数用于编辑指定流对象中某个TCP头部的多个字段。通过传入Stream对象和Level索引，可以选择要修改的具体TCP头部（适用于存在多个TCP头部的情况）。支持对TCP头部各个字段进行选择性更新，仅当字段值非None时才会实际修改。所有关键字参数均为可选，默认不修改对应字段。\n\nArgs:\n    Stream (:obj:`StreamTemplate`): 测试仪表流量模板对象，必须包含一个有效的handle属性用于唯一标识该流。\n    Level (int, optional): 要修改的TCP头部在流中的索引位置，默认为0（第一个TCP头部），取值范围0-65535。\n\nKeyword Args:\n    SourcePort (int, optional): 源端口号，取值范围0-65535，默认不修改（保留原值）。\n    DestPort (int, optional): 目的端口号，取值范围0-65535，默认不修改（保留原值）。\n    SeqNum (int, optional): 序列号字段，取值范围0-4294967295，默认不修改（保留原值）。\n    AckNum (int, optional): 确认号字段，取值范围0-4294967295，默认不修改（保留原值）。\n    DataOffset (int, optional): 数据偏移量（即首部长度），取值范围0-15，默认不修改（保留原值）。\n    Reserved (bit, optional): 保留位，6位二进制字符串（如'000000'），取值范围'000000'-'111111'，默认不修改。\n    Flags (bit, optional): 标志位字段，6位二进制字符串（如'010000'），取值范围'000000'-'111111'，默认不修改。\n    WindowSize (int, optional): 窗口大小字段，取值范围0-65535，默认不修改（保留原值）。\n    Checksum (hex, optional): TCP校验和字段，十六进制字符串（如'0000'），取值范围'0000'-'FFFF'，默认不修改。\n    UrgentPointer (hex, optional): 紧急指针字段，十六进制字符串，取值范围'0000'-'FFFF'，默认不修改。\n    Option (hex, optional): TCP选项字段，十六进制字符串，最大长度40字节，默认为空字符串（不设置选项）。\n\nReturns:\n    dict or bool: 如果至少有一个字段被修改，则返回一个映射关系字典，表示传入的关键字参数与TCP头部属性之间的对应关系；如果没有字段被修改（即未提供任何有效参数），则返回False。\n\nExamples:\n    .. code:: RobotFramework\n\n        | Edit Header Tcp | Stream=${Stream} | Level=0 | SourcePort=2048 | DestPort=80 |",
  "TesterLibrary.Stream.Header.L4.common.edit_header_udp": "修改测试仪表流量模板中指定层级的UDP报文头部的一个或多个字段内容。\n\n该函数用于修改给定流量模板（Stream）中第 `Level` 个UDP头部的若干字段，包括源端口、目的端口、长度和校验和。若未指定具体字段，则不会进行任何修改。函数返回一个字典，表示成功修改的参数名与其在对象内部属性名的映射；若未修改任何字段，返回 False。\n\nArgs:\n    Stream (:obj:`StreamTemplate`): 测试仪表流量模板对象，必须包含一个唯一标识流的 `handle` 属性。\n                                  如果传入的是列表，则使用第一个元素。\n\n    Level (int, optional): 指定要修改的UDP头部在其所属流中所有UDP头部列表中的索引位置，默认为0。\n                           用于处理流中存在多个UDP头部的情况。\n\nKeyword Args:\n    SourcePort (int, optional): 新的源端口号，范围：0-65535，默认值：1024。\n                                若提供此参数且不为 None，则更新 UDP 头部的 'sourcePort' 字段。\n\n    DestPort (int, optional): 新的目的端口号，范围：0-65535，默认值：1024。\n                              若提供此参数且不为 None，则更新 UDP 头部的 'destPort' 字段。\n\n    Length (int, optional): 新的 UDP 数据报长度，范围：0-65535，默认值：<AUTO>0。\n                            若提供此参数且不为 None，则更新 UDP 头部的 'length' 字段。\n\n    Checksum (int or str, optional): 新的校验和值，十六进制格式，范围：0000-FFFF，默认值：0000。\n                                     若提供此参数且不为 None，则更新 UDP 头部的 'checksum' 字段。\n\nReturns:\n    dict or bool: 若至少修改了一个字段，则返回一个字典，形如：\n                  {\n                      'SourcePort': 'sourcePort',\n                      'DestPort': 'destPort',\n                      'Length': 'length',\n                      'Checksum': 'checksum'\n                  }\n                  表示外部参数名与内部属性名的对应关系；\n                  如果没有任何字段被修改，则返回 False。\n\nRaises:\n    ContinuableFailure: 当底层调用失败时抛出可继续执行的异常。\n\nExamples:\n    .. code:: RobotFramework\n\n        | Edit Header Udp | Stream=${Stream} | Level=0 | SourcePort=2048 | DestPort=53 |\n        \nSide Effects:\n    - 会修改流对象中对应 UDP 头部的属性值。\n    - 可能调用内部函数 get_stream_header 来获取头部信息，如果相关信息未被缓存的话。",
  "TesterLibrary.Stream.Header.L4.gtpv1.edit_header_gtpv1": "Modifies specified fields of a GTPv1 (GPRS Tunneling Protocol version 1) header associated with a given stream.\n\nThis function retrieves the GTPv1 headers from the provided stream and allows editing of individual header fields such as Version, PT (Payload Type), Reserved bits, Next Header type, Sequence Number, PDU Number presence flag, Message Type, Length, and Tunnel Endpoint Identifier (TEID). The modification is performed on a specific level within the list of GTPv1 headers, defaulting to level 0 if not specified. Only the fields that are explicitly passed as non-None values are updated.\n\nParameters:\n    Stream (:obj:`StreamTemplate` or list): A stream object or a list containing a single stream object. If a list is provided, only the first element is used. This stream must have an internal handle attribute that uniquely identifies it in the system.\n    Level (int, optional): Index specifying which GTPv1 header to modify in the list of headers for this stream. Defaults to 0. Acceptable range: 0 - 65535.\n    Version (int, optional): Sets the version number field of the GTPv1 header. Default value: 1. Valid range: 0 - 7.\n    Pt (int, optional): Sets the Payload Type (PT) flag indicating whether the payload is a G-PDU, signaling packet, etc. Default value: 1. Valid range: 0 - 1.\n    Reserved (int, optional): Sets the reserved bits in the GTPv1 header (typically reserved for future use or extensions). Default value: 0. Valid range: 0 - 1.\n    Nexthead (int, optional): Specifies whether an extension header follows this GTPv1 header. Default value: 0. Valid range: 0 - 1.\n    SequenceNumber (int, optional): Indicates whether the sequence number field is present in the GTPv1 header. Default value: 0. Valid range: 0 - 1.\n    PduNumberPresent (int, optional): Indicates whether the N-PDU number field is present in the GTPv1 header. Default value: 0. Valid range: 0 - 1.\n    MessageType (int, optional): Sets the message type identifying the kind of GTP message being transmitted. Default value: FF (hexadecimal). Valid range: 00 - FF (hex).\n    Length (int, optional): Sets the length of the payload in bytes (excluding the GTP header). Default value: 8. Valid range: 0 - 65535.\n    Teid (int, optional): Sets the Tunnel Endpoint Identifier, which identifies the tunnel endpoint between the GSNs (GPRS Support Nodes). Default value: 0. Valid range: 0 - 4294967295.\n\nReturns:\n    dict or False: A dictionary mapping each modified parameter name to its corresponding internal attribute name (indicating successful updates) if one or more fields were changed. Returns False if no fields were modified (i.e., all provided parameters were None).\n\nExamples:\n    .. code:: RobotFramework\n\n        | Edit Header Gtpv1 | Stream=${Stream} | Level=0 | Teid=1024 |\n\nSide Effects:\n    - Updates the internal state of the GTPv1 header objects in memory.\n    - Changes may affect packet construction or behavior in subsequent operations involving the stream.",
  "TesterLibrary.Stream.Header.L4.gtpv1.edit_header_gtpv1_optional": "修改测试仪表流量模板中GTPv1 Optional头部的可选字段内容。\n\n该函数用于修改指定流量模板中的GTPv1 Optional（GPRS隧道协议版本1可选）报文头部的可选字段。它会从流量对象中查找所有类型为GTPv1 Optional的头部，并根据提供的Level参数选择对应的头部进行修改。只有传入的字段才会被更新，未提供的字段将保持不变。\n\n参数:\n    Stream (object or list): 测试仪表流量对象，或包含流量对象的列表。如果传入的是列表，则使用第一个元素。该对象应包含一个唯一标识该流的'handle'属性。\n    Level (int, optional): 要修改的GTPv1 Optional头部在其所属流量模板中的索引位置，默认值为0。取值范围：0-65535。\n\n关键字参数（可选）:\n    Sequence (int, optional): 设置Sequence Number字段的值，默认为0，取值范围：0-65535。\n    NPDUNumber (int, optional): 设置N-PDU Number字段的值，默认为0，取值范围：0-255。\n    NextHeaderType (int, optional): 设置Next Extension Header Type字段的值，默认为0，取值范围：0-255。\n\n返回值:\n    dict: 一个字典，表示成功修改的字段及其对应内部属性名称。例如：\n        {\n            'Sequence': 'sequence',\n            'NPDUNumber': 'nPDUNumber',\n            'NextHeaderType': 'nextHeaderType'\n        }\n    如果没有任何字段被修改，则返回False。\n\n异常:\n    如果修改失败，将抛出ContinuableFailure异常。\n\n示例:\n    .. code:: RobotFramework\n\n        | Edit Header Gtpv1 Optional | Stream=${Stream} | Level=0 | NextHeaderType=255 |\n\n注意事项:\n    - 所有字段均为可选参数，仅提供需要修改的字段即可。\n    - 修改操作是原地进行的，即直接作用于传入的Stream对象中的头部结构。",
  "TesterLibrary.Stream.Header.L4.gtpv1.edit_header_gtpv1_extension": "修改测试仪表流量模板中指定层级的GTPv1扩展头部字段内容\n\n该函数用于更新流量模板中特定层级的GTPv1扩展头部（GTPv1 Extension Header）的若干属性。通过提供流对象和层级索引，可以选择并修改对应的GTPv1扩展头部字段。\n\nArgs:\n\n    Stream (:obj:`StreamTemplate`): 测试仪表流量模板对象，表示待修改的流量配置。\n    \n    Level (int, optional): 表示要修改的GTPv1扩展头部在该流中的索引位置，默认为0，取值范围：0-65535。\n\nKeyword Args:\n\n    Length (int, optional): 指定GTPv1扩展头部的长度（Length），默认值：1，取值范围：0-65535。\n    \n    BytePattern (str or bytes, optional): 以十六进制形式表示的字节模式（Byte Pattern），长度应在2到1500字节之间，默认值：'0000'。\n    \n    NextHeaderType (int, optional): 指定下一个扩展头部类型（Next Extension Header Type），默认值：0，取值范围：0-255。\n\nReturns:\n\n    dict: 包含被修改字段名称及其对应内部属性名的字典，例如::\n        \n        {\n            'Length': 'length',\n            'BytePattern': 'bytePattern',\n            'NextHeaderType': 'nextHeaderType'\n        }\n\n    bool: 如果未提供任何可选参数（即未进行任何修改），则返回 False。\n\nRaises:\n\n    ContinuableFailure: 如果操作失败，抛出异常，并提示当前调用函数失败的信息。\n\nExamples:\n\n    .. code:: RobotFramework\n\n        | Edit Header Gtpv1 Extension | Stream=${Stream} | Level=0 | NextHeaderType=255 |",
  "TesterLibrary.Stream.Header.L4.gtpv1.edit_header_gtpv1_optional_extension": "修改测试仪表流量模板中GTPv1 Optional Extension头部的字段内容。\n\n该函数用于修改指定流量模板中的某个GTPv1 Optional Extension扩展头部的字段值。函数会筛选出所有类型为'gtpv1ext'的头部，并根据提供的`Level`参数选择对应索引的头部进行修改。仅提供需要修改的字段即可，未提供的字段不会被更改。\n\nParameters:\n    Stream (object or list): 表示测试仪表流量模板的对象，或包含该对象的列表。若传入列表，则使用第一个元素。\n    Level (int, optional): 指定要修改的GTPv1 Optional Extension头部在该流量中的索引位置，默认值为0，取值范围：0-65535。\n\nKeyword Args:\n    Sequence (int, optional): 设置Sequence Number字段值，默认为0，取值范围：0-65535。\n    NPDUNumber (int, optional): 设置N-PDU Number字段值，默认为0，取值范围：0-255。\n    NextHeaderType1 (int, optional): 设置Next Extension Header Type字段值，默认为0，取值范围：0-255。\n    Length (int, optional): 设置Length字段值，默认为1，取值范围：0-65535。\n    BytePattern (str, hex, optional): 设置Byte Pattern字段值，默认为\"0000\"，格式为十六进制字符串，长度范围：2-1500字节。\n    NextHeaderType2 (int, optional): 设置Next Extension Header Type字段值，默认为0，取值范围：0-255。\n\nReturns:\n    dict: 如果有字段被成功修改，则返回一个映射用户输入参数名到内部字段名称的字典，例如 {'Sequence': 'sequence'}。\n    bool: 如果没有提供任何有效的修改参数（即全部为None），则返回False。\n\nSide Effects:\n    - 会直接在内存中修改指定流模板中对应GTPv1 Optional Extension头部的属性值。\n\nExample:\n    .. code:: RobotFramework\n\n        | Edit Header Gtpv1 Optional Extension | Stream=${Stream} | Level=0 | NextHeaderType2=255 |",
  "TesterLibrary.Stream.Header.L4.sctp.edit_header_sctp": "Modifies specific fields of an SCTP (Stream Control Transmission Protocol) header in a given stream.\n\nThis function allows for selective modification of SCTP header fields within a specified stream template. It retrieves the SCTP headers from the provided stream object and updates the desired fields at the specified level index. If a field value is provided (not None), it will be assigned to the corresponding attribute of the SCTP header object. Only modified fields are included in the returned dictionary.\n\nParameters:\n    Stream (:obj:`StreamTemplate` or list): A stream template object or a list containing a single stream object.\n                                            If a list is passed, only the first element is used.\n                                            The stream must have a 'handle' attribute that uniquely identifies it.\n    Level (int): Index specifying which SCTP header to modify when multiple SCTP headers exist in the stream.\n                 Default: 0\n                 Range: 0-65535\n\nKeyword Arguments:\n    SourcePort (int): New source port number to set in the SCTP header.\n                    Default: 3001\n                    Range: 0-65535\n    DestPort (int): New destination port number to set in the SCTP header.\n                  Default: 3002\n                  Range: 0-65535\n    VerTag (int): New verification tag to set in the SCTP header.\n                Default: 1\n                Range: 0-4294967295\n    Checksum (str): New checksum value to set in the SCTP header, as a 4-byte hexadecimal string.\n                  Default: '00000000'\n    ChunkList (list or int): Collection of chunks to associate with the SCTP header.\n                           If an integer N is provided (0-250), creates N default chunks.\n                           Default: 0 (no chunks)\n\nReturns:\n    dict: A dictionary mapping the names of modified fields to their corresponding attribute paths\n          in the header object (e.g., {'SourcePort': 'header.sourcePort'}). Fields not modified are not included.\n\nRaises:\n    ContinuableFailure: If the underlying backend operation fails.\n\nSide Effects:\n    - Modifies the internal state of the SCTP header object associated with the given stream.\n    - Uses `get_stream_header` internally to retrieve and cache the header objects for the stream.\n\nExample:\n    .. code:: RobotFramework\n\n        | Edit Header Sctp | Stream=${Stream} | Level=0 | SourcePort=5000 | VerTag=12345678 |",
  "TesterLibrary.Stream.Header.L4.sctp.edit_header_sctp_chunk": "修改测试仪表流量模板中SCTP Chunk头部内容。该函数用于编辑指定流模板中的SCTP协议头部内的特定Chunk类型（如DataChunk、InitChunk、SAckChunk等），支持多种SCTP Chunk类型的修改或插入。\n\nArgs:\n    Stream (:obj:`StreamTemplate`): 测试仪表流量对象，表示需要编辑的流量模板，类型为object，必须包含唯一标识该流的handle属性。\n    \n    ChunkType (str): 要编辑或插入的SCTP Chunk类型，取值包括：\n        DataChunk, InitChunk, InitAckChunk, SAckChunk, HeartbeatChunk,\n        HeartbeatAckChunk, AbortChunk, ShutdownChunk, ShutdownAckChunk,\n        ErrorChunk, CookieEchoChunk, CookieAckChunk, ShutdownCompleteChunk\n\n    Level (int, optional): 指定在流量模板中第几个SCTP头部进行修改（按SCTP头部在模板中的顺序索引），默认值：0，取值范围：0-65535\n\n    ChunkIndex (int, optional): 指定在SCTP头部内对第几个Chunk进行修改（按Chunk在头部中的顺序索引），默认值：0，取值范围：0-65535\n\n    **kwargs (dict): 与具体ChunkType相关的字段参数，用于定义要修改的具体字段及其值。不同ChunkType支持的字段详见Keyword Args说明。\n\nKeyword Args:\n    根据ChunkType的不同，支持以下参数：\n\n    DataChunk:\n        Type (int): Chunk Type字段值，默认：0，取值范围：0-255\n        Reserved (int): 保留位，默认：0，取值范围：0-255\n        Ubit (bit): U bit标志位，默认：0，取值范围：0或1\n        Bbit (bit): B bit标志位，默认：1，取值范围：0或1\n        Ebit (bit): E bit标志位，默认：1，取值范围：0或1\n        Length (int): Chunk总长度，默认：<AUTO>0（自动计算）\n        Tsn (int): Transmission Sequence Number，默认：0，取值范围：0-4294967295\n        Sid (int): Stream Identifier，默认：0，取值范围：0-65535\n        Ssn (int): Stream Sequence Number，默认：0，取值范围：0-65535\n        Pid (int): Payload Protocol Identifier，默认：0，取值范围：0-4294967295\n        Data (hex): 用户数据，十六进制字符串，默认：空字符串，长度范围：0-65535字节\n        Padding (hex): 填充字段（4字节对齐），十六进制字符串，默认：0，长度范围：0-3字节\n\n    InitChunk / InitAckChunk / SAckChunk 等其他ChunkType: 各自支持的字段请参见原始文档。\n\nReturns:\n    dict: 包含修改结果的字典，通常包括状态信息或更新后的字段值。具体结构取决于底层调用的edit_*方法实现。\n\nRaises:\n    ContinuableFailure: 当操作失败时抛出异常，提示函数执行失败。\n\nExamples:\n    .. code:: RobotFramework\n\n        | Edit Header Sctp Chunk | Stream=${Stream} | Level=0 | ChunkType=ShutdownCompleteChunk | Padding=1020 |",
  "TesterLibrary.Stream.Header.L4.sctp.edit_header_sctp_init_optional_parameters_tlv": "修改测试仪表流量模板中SCTP INIT/INIT_ACK Chunk的可选参数TLV（Type-Length-Value）头部内容。\n\n该函数用于编辑指定流模板中SCTP INIT或INIT_ACK块内的可选参数TLV字段。用户可以通过指定流对象、SCTP头部层级、Chunk类型与索引、以及TLV索引，进一步通过关键字参数修改特定字段值。\n\n参数说明：\n\n    Stream (:obj:`StreamTemplate` 或 list): 流模板对象，或包含流模板对象的列表（仅使用第一个元素）。该对象必须具有唯一标识其句柄的 'handle' 属性。\n    \n    Level (int, 可选): SCTP头部在流模板中的层级位置，默认为0，取值范围：0-65535。\n    \n    ChunkType (str): 要编辑的Chunk类型，支持：\n        \n        - InitChunk: 编辑INIT块的可选参数\n        - InitAckChunk: 编辑INIT_ACK块的可选参数\n\n    ChunkIndex (int, 可选): 在SCTP INIT消息中要编辑的Chunk索引，默认为0，取值范围：0-249。\n    \n    TlvIndex (int, 可选): 在可选参数TLV列表中要编辑的条目索引，默认为0，取值范围：0-1023。\n\n关键字参数（Keyword Args）：\n\n    InitOptionalParamType (int, 仅当ChunkType为InitChunk时有效): 初始化可选参数类型，默认值为5，取值范围：0-65535。\n    \n    InitAckOptionalParamType (int, 仅当ChunkType为InitAckChunk时有效): 初始化确认可选参数类型，默认值为5，取值范围：0-65535。\n    \n    Length (int): 参数长度，默认值为0，取值范围：0-65535。\n    \n    Value (hex): 用户数据，十六进制格式，长度范围为0-65535字节，默认值为0。\n    \n    Padding (hex): 4字节对齐填充字段，十六进制格式，长度范围为0-3字节，默认值为0。\n\n返回值：\n\n    dict: 包含被修改字段路径信息的字典，例如::\n\n        {\n            'InitOptionalParamType': 'chunks.sctpChunk_0.chunkType.sctpChunkChoice_0.initChunk.initOptionalParams.InitOptionalParameters_1.InitOptionalParamType',\n            'Length': 'chunks.sctpChunk_0.chunkType.sctpChunkChoice_0.initChunk.initOptionalParams.InitOptionalParameters_1.length',\n            'Value': 'chunks.sctpChunk_0.chunkType.sctpChunkChoice_0.initChunk.initOptionalParams.InitOptionalParameters_1.value',\n            'Padding': 'chunks.sctpChunk_0.chunkType.sctpChunkChoice_0.initChunk.initOptionalParams.InitOptionalParameters_1.padding'\n        }\n\n    如果操作失败，返回False并抛出ContinuableFailure异常。\n\n副作用：\n\n    - 修改指定流模板中SCTP INIT/INIT_ACK块内可选参数TLV的内部状态。\n    - 可能会触发get_stream_header调用以查询或更新缓存的头部信息。\n\n示例：\n\n    .. code:: RobotFramework\n\n        | Edit Header Sctp Init Optional Parameters Tlv | Stream=${Stream} | ChunkType=InitChunk | Value=10 |",
  "TesterLibrary.Stream.Header.L4.sctp.edit_header_sctp_sack_chunk_gap_ack_block": "修改测试仪表流量模板中SCTP SACK（Selective Acknowledgment）Chunk内的特定Gap Ack Block字段内容。\n\n**功能说明：**\n该函数用于编辑指定流中SCTP协议的SACK Chunk中的Gap Ack Block字段。通过传入流对象、SCTP头部层级、SACK Chunk索引以及Gap Ack Block索引，可以定位到具体的Gap Ack Block，并通过关键字参数修改其内部字段（如起始和结束偏移量）。\n\n**参数说明：**\n\n- `Stream` (:obj:`StreamTemplate` 或 list): 测试仪表流量对象，类型为StreamTemplate或包含单个StreamTemplate的列表。如果传入列表，则使用第一个元素。必须具有`handle`属性以唯一标识该流。\n- `Level` (int, 可选): 指定在流中选择第几个SCTP头部（当存在多个SCTP头部时）。默认值为0，取值范围：0-65535。\n- `ChunkIndex` (int, 可选): 指定在SCTP头部中选择第几个SACK Chunk（当存在多个SACK Chunk时）。默认值为0，取值范围：0-249。\n- `BlockIndex` (int, 可选): 指定在SACK Chunk中选择第几个Gap Ack Block（当存在多个Gap Ack Block时）。默认值为0，取值范围：0-1023。\n- `**kwargs`: 任意关键字参数，表示要修改的Gap Ack Block字段及其对应的值。例如：`Gabs=10`, `Gabe=20`。\n\n**返回值：**\n- 返回一个字典，包含操作结果信息，通常包括字段路径等信息，如：\n  ```python\n  {\n      'Gabs': 'chunks.sctpChunk_0.chunkType.sctpChunkChoice_0.sackChunk.gapackBlocks.GapAckBlock_1.gabs',\n      'Gabe': 'chunks.sctpChunk_0.chunkType.sctpChunkChoice_0.sackChunk.gapackBlocks.GapAckBlock_1.gabe'\n  }\n  ```\n- 如果操作失败，返回 `False` 并抛出异常。\n\n**副作用：**\n- 修改了流中指定SCTP头部下的SACK Chunk中的Gap Ack Block字段。\n- 若未缓存相关头部信息，可能触发对流头部信息的查询与缓存（通过 `get_stream_header` 方法）。\n\n**示例：**\n```robotframework\n| Edit Header Sctp Sack Chunk Gap Ack Block | Stream=${Stream} | Gabs=10 | Gabe=20 |\n```",
  "TesterLibrary.Stream.Header.L4.sctp.edit_header_sctp_sack_chunk_duplicate_tsn": "修改测试仪表流量模板中SCTP SACK（Selective Acknowledgment）块内的指定TSN（Transmission Sequence Number）的重复值，用于模拟重复确认等测试或仿真场景。\n\n参数:\n    Stream (object 或 list): 需要编辑SCTP头部的流量流对象，或者包含单个流对象的列表。该对象应具有唯一标识流的 'handle' 属性。如果传入列表，则仅使用第一个元素。\n    Level (int, 可选): 指定在流中多个SCTP头部存在的情况下，要编辑的SCTP头部的索引，默认为0，取值范围：0-65535。\n    ChunkIndex (int, 可选): 在SCTP头部中，指定要修改的SACK块的索引，默认为0，取值范围：0-249。\n    TsnIndex (int, 可选): 在SACK块中，指定要修改的Duplicate TSN的索引，默认为0，取值范围：0-1023。\n    **kwargs: 任意数量的关键字参数，传递给底层 `edit_sack_chunk_duplicate_tsn` 方法，例如：\n        Dtsn (int): 要设置的TSN值，默认为0，取值范围：0-4294967295。\n\n返回值:\n    dict 或 bool: 如果操作成功，返回一个包含操作结果的字典（如字段路径信息）；如果操作失败或底层方法未返回结果，则返回 False。\n\n示例:\n    .. code:: RobotFramework\n\n        | Edit Header Sctp Sack Chunk Duplicate Tsn | Stream=${Stream} | Dtsn=10 |\n\n副作用:\n    - 可能会修改SCTP头部内部状态，在指定SACK块中添加或更新一个重复的TSN。\n    - 内部调用 `get_stream_header` 方法，可能会查询并缓存该流的头部对象。",
  "TesterLibrary.Stream.Header.L4.sctp.edit_header_sctp_chunk_error_cause": "修改测试仪表流量模板中SCTP Abort Chunk或Error Chunk的Error Cause字段内容。\n\n该函数用于编辑指定流模板中的SCTP头部中特定Chunk的错误原因（Error Cause）信息。适用于模拟SCTP协议中因错误导致的中断场景，如Abort或Error Chunk的注入测试。\n\n参数说明：\n\n- **Stream** (`StreamTemplate`): 流量模板对象，表示需要修改的SCTP流。\n- **Level** (int, optional): SCTP头部在流中的层级索引，默认为0，取值范围：0-65535。\n- **ChunkType** (str): 要修改的Chunk类型，支持：\n  - `AbortChunk`\n  - `ErrorChunk`\n- **CauseType** (str): Error Cause的具体类型，可选值包括：\n  - `InvalidStreamIdentifier`\n  - `MissingMandatoryParameter`\n  - `StaleCookieError`\n  - `OutOfResource`\n  - `UnresolvableAddress`\n  - `UnrecognizedChunk`\n  - `InvalidMandatoryParameter`\n  - `UnrecognizedParameters`\n  - `NoUserData`\n  - `CookieReceivedWhileShuttingDown`\n  - `RestartOfAnAssociationWithNewAddresses`\n  - `UserInitiatedAbort`\n  - `ProtocolViolation`\n- **ChunkIndex** (int, optional): Chunk在SCTP头部中的索引位置，默认为0，取值范围：0-249。\n- **CauseIndex** (int, optional): Error Cause在Chunk中的索引位置，默认为0，取值范围：0-1023。\n- **kwargs** (dict): 根据选择的`CauseType`传入对应的参数值，具体如下：\n  - **InvalidStreamIdentifier**: `CauseCode`, `CauseLength`, `StreamIdentifier`, `Padding`\n  - **MissingMandatoryParameter**: `CauseCode`, `CauseLength`, `NumberOfMissingParams`, `MissingParamTypes`, `Padding`\n  - **StaleCookieError**: `CauseCode`, `CauseLength`, `MeasureOfStaleness`\n  - **OutOfResource**: `CauseCode`, `CauseLength`\n  - **UnresolvableAddress**: `CauseCode`, `CauseLength`, `NewAddressTlvs`, `Padding`\n  - **UnrecognizedChunk**: `CauseCode`, `CauseLength`, `UnrecognizedChunkType`, `UnrecognizedChunkFlagReserved`, `UnrecognizedChunkFlagUbit`, `UnrecognizedChunkFlagEbit`, `UnrecognizedChunkLength`, `Padding`\n  - **InvalidMandatoryParameter**: `CauseCode`, `CauseLength`\n  - **UnrecognizedParameters**: `CauseCode`, `CauseLength`, `UnrecognizedParameters`, `Padding`\n  - **NoUserData**: `CauseCode`, `CauseLength`, `TsnValue`\n  - **CookieReceivedWhileShuttingDown**: `CauseCode`, `CauseLength`\n  - **RestartOfAnAssociationWithNewAddresses**: `CauseCode`, `CauseLength`, `NewAddressTlvs`, `Padding`\n  - **UserInitiatedAbort**: `CauseCode`, `CauseLength`, `AdditionalInformation`, `Padding`\n  - **ProtocolViolation**: `CauseCode`, `CauseLength`, `AdditionalInformation`, `Padding`\n\n返回值：\n\n- 返回一个字典 (`dict`)，包含所设置的Error Cause字段在底层模型中的路径引用，例如：\n```python\n{\n    'CauseCode': 'chunks.sctpChunk_0.chunkType.sctpChunkChoice_0.abortChunk.errorCauses.ErrorCausesTLV_0.invalidStreamIdentifier.causeCode',\n    'CauseLength': 'chunks.sctpChunk_0.chunkType.sctpChunkChoice_0.abortChunk.errorCauses.ErrorCausesTLV_0.invalidStreamIdentifier.causeLength',\n    ...\n}\n```\n\n示例：\n\n```robotframework\n| Edit Header Sctp Chunk Error Cause | Stream=${Stream} | ChunkType=AbortChunk | CauseType=ProtocolViolation | AdditionalInformation=FF |\n```",
  "TesterLibrary.Stream.Header.L4.sctp.edit_header_sctp_chunk_error_cause_missing_parameter_type": "修改测试仪表流量模板中SCTP Abort Chunk或Error Chunk的Error Cause字段中的Missing Mandatory Parameter Type值。\n\n参数:\n    Stream (object or list): 测试仪表流量对象，类型为StreamTemplate。也可以传入包含单个流对象的列表，此时仅使用第一个元素。该对象必须包含唯一标识它的handle属性。\n    Level (int, optional): SCTP头部在流量模板中的层级索引，用于区分多个SCTP头，默认为0，取值范围：0-65535。\n    ChunkType (str or int): 要修改的SCTP块类型，可选AbortChunk或ErrorChunk，也可以使用对应的整数值。\n    ChunkIndex (int, optional): 在SCTP头部中要修改的特定Chunk的索引，默认为0，取值范围：0-249。\n    CauseIndex (int, optional): 在Chunk中要修改的Error Cause的索引，默认为0，取值范围：0-1023。\n    TypeIndex (int, optional): 在Error Cause中要修改的Missing Mandatory Parameter Type的索引，默认为0，取值范围：0-1023。\n    **kwargs: 可选的关键字参数，用于传递具体的配置参数，如：\n        MissingParamTypeValue (int): 要设置的Missing Mandatory Parameter Type值，默认为0，取值范围：0-4294967295。\n\n返回值:\n    dict: 包含操作结果信息的字典，通常包括所修改字段的路径或状态信息，例如：\n        {\n            'MissingParamTypeValue': 'chunks.sctpChunk_0.chunkType.sctpChunkChoice_0.abortChunk.errorCauses.ErrorCausesTLV_1.missingMandatoryParameter.missingParamTypes.MissingParamType_1.missingParamTypeValue'\n        }\n\n异常:\n    如果内部调用失败，抛出ContinuableFailure异常。\n\n副作用:\n    - 若未缓存头部名称，则可能执行命令获取头部名称。\n    - 会修改内存中的报文头部属性，可能影响系统中数据包的构造和传输。\n\n示例:\n    .. code:: RobotFramework\n\n        | Edit Header Sctp Chunk Error Cause Missing Parameter Type | Stream=${Stream} | ChunkType=AbortChunk | MissingParamTypeValue=10 |",
  "TesterLibrary.Stream.Header.L4.sctp.edit_header_sctp_chunk_error_cause_unrecognized_parameter_tlv": "修改测试仪表流量模板中SCTP Abort或Error Chunk的Unrecognized Parameter Error Cause中的TLV字段内容。\n\n参数:\n    Stream (:obj:`StreamTemplate` 或 list): 测试仪表流量对象，类型为StreamTemplate或包含单个StreamTemplate对象的列表。\n                                        如果提供列表，则使用第一个元素。该对象必须具有一个'handle'属性，\n                                        用于在系统中唯一标识该流。\n\n    Level (int, optional): 指定要修改的SCTP头部在流中的层级索引，默认值为0（即第一个SCTP头部）。\n                           取值范围：0-65535\n\n    ChunkType (str): SCTP Chunk类型，取值为：\n                        'AbortChunk' 或 'ErrorChunk'\n\n    ChunkIndex (int, optional): 要修改的SCTP Chunk在该SCTP头部中的索引，默认值为0。\n                                取值范围：0-249\n\n    CauseIndex (int, optional): 要修改的Error Cause在该Chunk中的索引，默认值为0。\n                                取值范围：0-1023\n\n    TlvIndex (int, optional): 要修改的Unrecognized Parameter TLV在该Error Cause中的索引，默认值为0。\n                              取值范围：0-1023\n\n    **kwargs (任意关键字参数):\n        Type (int, optional): TLV字段的Type值，默认为0。取值范围：0-65535\n        Length (int, optional): Parameter Length，默认为0（自动计算）。取值范围：0-65535\n        Value (Hex, optional): TLV字段的Value部分，默认为空字符串。取值为长度0-65535字节的十六进制数\n        Padding (hex, optional): 4字节对齐填充字段，默认为0。取值为长度0-3字节的十六进制数\n\n返回值:\n    dict: 包含编辑后的TLV字段路径信息的字典，示例如下：\n        {\n            'Type': 'chunks.sctpChunk_0.chunkType.sctpChunkChoice_0.abortChunk.errorCauses.ErrorCausesTLV_7.unrecognizedParameters.unrecognizedParameters.UnrecognizedParameterLTV_1.type',\n            'Length': 'chunks.sctpChunk_0.chunkType.sctpChunkChoice_0.abortChunk.errorCauses.ErrorCausesTLV_7.unrecognizedParameters.unrecognizedParameters.UnrecognizedParameterLTV_1.length',\n            'Value': 'chunks.sctpChunk_0.chunkType.sctpChunkChoice_0.abortChunk.errorCauses.ErrorCausesTLV_7.unrecognizedParameters.unrecognizedParameters.UnrecognizedParameterLTV_1.value',\n            'Padding': 'chunks.sctpChunk_0.chunkType.sctpChunkChoice_0.abortChunk.errorCauses.ErrorCausesTLV_7.unrecognizedParameters.unrecognizedParameters.UnrecognizedParameterLTV_1.padding'\n        }\n\n异常:\n    ContinuableFailure: 当底层调用失败时抛出此异常，表示操作未成功完成。\n\n示例:\n    .. code:: RobotFramework\n\n        | Edit Header Sctp Chunk Error Cause Unrecognized Parameter Tlv | Stream=${Stream} | ChunkType=AbortChunk | Value=10 |",
  "TesterLibrary.Stream.Header.L4.sctp.edit_header_sctp_chunk_error_cause_new_address_tlv": "修改测试仪表流量模板中SCTP Abort/Error Chunk的Error Cause报文头部New Address TLVs内容。\n\n该函数用于编辑指定流模板中SCTP头部下的某个Abort或Error Chunk中的Error Cause字段内的New Address TLV信息。通过层级参数定位到具体的SCTP头部、Chunk、Error Cause及对应的TLV字段，并根据传入的参数对其进行修改。\n\n参数说明：\n    Stream (:obj:`StreamTemplate` 或 list[:obj:`StreamTemplate`]): 测试仪表流量对象，类型为StreamTemplate；若传入列表，则仅使用第一个元素。\n    Level (int, optional): 指定SCTP头部在流量模板中的层级位置，默认值：0，取值范围：0-65535。\n    ChunkType (str or int): SCTP Chunk类型，可选值为\"AbortChunk\"或\"ErrorChunk\"，也可以是其对应的数值表示。\n    ChunkIndex (int, optional): 要修改的Chunk在其所属SCTP头部中的索引位置，默认值：0，取值范围：0-249。\n    CauseType (str or int): Error Cause类型，可选值为\"UnresolvableAddress\"或\"RestartOfAnAssociationWithNewAddresses\"，也可以是其对应的数值表示。\n    CauseIndex (int, optional): 要修改的Error Cause在其所属Chunk中的索引位置，默认值：0，取值范围：0-1023。\n    TlvIndex (int, optional): 要修改的New Address TLV在其所属Error Cause中的索引位置，默认值：0，取值范围：0-1023。\n    **kwargs: 任意关键字参数，用于传递以下可配置项：\n\n        Type (int): TLV字段的Type值，默认值：0，取值范围：0-65535。\n        Length (int): TLV字段的Length值，默认值：0（自动计算），取值范围：0-65535。\n        Value (Hex): TLV字段的Value值，默认值为空字符串，取值范围：长度0-65535字节的十六进制数。\n        Padding (hex): 4字节对齐填充字段，默认值：0，取值范围：长度为0-3字节的十六进制数。\n\n返回值：\n    dict: 包含操作结果的字典对象，包含如下键值对：\n\n        'Type': 表示当前修改的TLV字段Type的路径；\n        'Length': 表示当前修改的TLV字段Length的路径；\n        'Value': 表示当前修改的TLV字段Value的路径；\n        'Padding': 表示当前修改的TLV字段Padding的路径。\n\n副作用：\n    - 修改系统中指定SCTP头部下对应Chunk和Error Cause中的New Address TLV字段内容；\n    - 若未缓存相关头部信息，可能触发内部方法get_stream_header进行查询并缓存。\n\n示例：\n    .. code:: RobotFramework\n\n        | Edit Header Sctp Chunk Error Cause New Address Tlv | Stream=${Stream} | ChunkType=AbortChunk | CauseType=UnresolvableAddress | Value=10 |",
  "TesterLibrary.Stream.Header.L4.vxlan.edit_header_vxlan": "修改测试仪表流量模板中的VXLAN报文头部字段内容。\n\n该函数用于修改指定流模板中某个VXLAN头部的特定字段。通过参数`Level`指定在流中第几个VXLAN头部（按类型'vxlan'排序后的列表索引）进行修改。若提供了任意可选参数（Flags、Reserved1、Vni、Reserved2），则相应地更新该头部字段的值。\n\nParameters:\n    Stream (:obj:`StreamTemplate` 或 list): 流模板对象或包含流模板对象的列表。如果传入的是列表，则仅使用第一个元素。\n    Level (int): 指定要修改的VXLAN头部在该流所有VXLAN头部中的索引，默认为0，取值范围：0-65535。\n    Flags (bit, optional): 新的VXLAN头部标志位，长度为8的二进制数，默认值：00001000。如果不提供此参数，则不会修改原字段。\n    Reserved1 (int, optional): VXLAN头部保留字段1的新值，默认值：0，取值范围：0-16777215。如果不提供此参数，则不会修改原字段。\n    Vni (int, optional): VXLAN网络标识符（VXLAN Network Identifier）的新值，默认值：0，取值范围：0-16777215。如果不提供此参数，则不会修改原字段。\n    Reserved2 (int, optional): VXLAN头部保留字段2的新值，默认值：0，取值范围：0-255。如果不提供此参数，则不会修改原字段。\n\nReturns:\n    dict: 返回一个字典，指示哪些参数成功更新到了头部字段，例如::\n\n        {\n            'Flags': 'flags',\n            'Reserved1': 'reserved1',\n            'Vni': 'VNI',\n            'Reserved2': 'reserved2',\n        }\n\n    如果未提供任何有效的可选参数（即没有字段被修改），则返回False。\n\nRaises:\n    ContinuableFailure: 如果内部调用失败（如参数无效或找不到对应的VXLAN头部），将抛出ContinuableFailure异常。\n\nExamples:\n    .. code:: RobotFramework\n\n        | Edit Header Vxlan | Stream=${Stream} | Level=0 | Vni=1000 |\n\nSide Effects:\n    - 修改了流模板内部VXLAN头部的状态。\n    - 调用了底层API `renix.edit_header_vxlan`，可能引起缓存更新或执行相关命令。",
  "TesterLibrary.Stream.Header.LldpTlv.lldp.edit_header_lldp_chassis_id_tlv": "修改测试仪表流量模板中LLDP协议的Chassis ID TLV（Type-Length-Value）头部字段。该函数允许用户编辑指定流中某一层级的LLDP Chassis ID TLV头部的多个字段，例如类型、长度、Chassis ID子类型、IANA地址族和Chassis ID值。\n\n参数:\n    Stream (object 或 list): 流模板对象或包含单个流对象的列表。若为列表，则仅使用第一个元素。\n                             流对象必须具有一个'handle'属性，用于在系统中唯一标识该流。\n    Level (int, 可选): 要编辑的Chassis ID TLV头部在其所属流中的索引位置，默认为0，\n                       表示在所有Chassis ID TLV头中选择第0个进行编辑。\n    **kwargs (可选): 任意数量的关键字参数，用于指定要更新的字段及其新值。支持以下字段：\n        Type (int, optional): 设置TLV头部的类型字段，取值范围：0-127。\n        Length (int, optional): 设置TLV值字段的长度，取值范围：0-511。\n        ChassisIdSubType (int, optional): 设置Chassis ID的子类型，取值范围取决于具体协议实现，\n                                          默认为0x05（表示IPv4网络地址）。\n        IanaAddressFamily (int, optional): 设置IANA地址族编号，取值范围：0-255，默认为1（表示IPv4）。\n        ChassisId (str 或 bytes, optional): 设置实际的Chassis ID值，可以是字符串形式或字节形式的ID，\n                                            默认为\"192.168.0.1\"（有效IPv4地址）。\n\n返回值:\n    dict: 包含每个成功更新字段的映射关系，键为传入的参数名，值为内部字段名称。例如：\n        {'Type': 'type', 'ChassisId': 'chassisId.networkAddress4.chassisId'}\n    False: 如果未提供任何更新参数，则返回False，表示没有发生更改。\n\n副作用:\n    - 修改内存中Chassis ID TLV头部的相关属性。\n    - 在后续操作（如流发送或应用配置）中，更新后的头部将影响流的实际行为。\n\n示例:\n    .. code:: RobotFramework\n\n        | Edit Header Lldp Chassis Id Tlv | Stream=${Stream} | Level=0 | Type=127 |",
  "TesterLibrary.Stream.Header.LldpTlv.lldp.edit_header_lldp_port_id_tlv": "修改测试仪表流量模板中LLDP协议的Port ID TLV头部字段内容。\n\n该函数用于修改指定流量模板中LLDP报文层级结构下特定位置的'portidtlv'头部字段。可选字段包括Type、Length、PortIdSubType和PortId，仅提供需要修改的字段即可，未提供的字段将保持不变。\n\n参数:\n    Stream (object or list): 测试仪表流量对象或包含单个流量对象的列表。若传入列表，则使用第一个元素。\n                             该对象应具有唯一标识其的'handle'属性。\n    Level (int, optional): 要修改的'portidtlv'头部在LLDP层级结构中的索引位置，默认值为0。\n\n关键字参数 (可选):\n    Type (any): 设置头部的'type'属性值。默认值：2，取值范围：0-127\n    Length (any): 设置头部的'length'属性值。默认值：0，取值范围：0-511\n    PortIdSubType (any): 设置'portId.macAddr.portIdSubType'字段值。默认值：3，表示MAC地址类型\n    PortId (any): 设置'portId.macAddr.portId'字段值。默认值：\"00:00:00:00:00:00\"，需为有效MAC地址格式\n\n返回值:\n    dict or bool: 包含已修改字段及其对应属性路径映射的字典。例如::\n        {\n            'Type': 'type',\n            'Length': 'length',\n            'PortIdSubType': 'portId.macAddr.portIdSubType',\n            'PortId': 'portId.macAddr.portId'\n        }\n    如果没有修改任何字段（即所有参数为None），则返回False。\n\n副作用:\n    - 通过`get_stream_header`获取并可能缓存给定流的头部对象\n    - 直接修改所选'portidtlv'头部对象的属性值\n\n示例:\n    .. code:: RobotFramework\n\n        | Edit Header Lldp Port Id Tlv | Stream=${Stream} | Level=0 | Type=127 |",
  "TesterLibrary.Stream.Header.LldpTlv.lldp.edit_header_lldp_ttl_tlv": "修改测试仪表流量模板中LLDP TTL TLV报文头部的指定字段内容。\n\n该函数用于修改流量模板中LLDP TTL TLV头部的一个或多个字段（Type、Length、Ttl）的值。它会从给定的流对象中获取所有类型为'ttltlv'的头部，然后选择索引为Level的头部进行修改。可以单独修改任意一个或多个字段。\n\n参数:\n    Stream (:obj:`StreamTemplate`): 测试仪表流量对象，代表需要修改的流。必须包含一个唯一标识符（handle属性）。如果传入的是列表，则使用第一个元素。\n    Level (int): 要修改的LLDP TTL TLV头部在所有'ttltlv'类型头部中的索引位置，默认值为0，取值范围：0-65535\n\n关键字参数（可选）:\n    Type (int): 设置TLV的类型字段，默认值：3，有效取值范围：0-127\n    Length (int): 设置TLV数据长度字段，默认值：0，有效取值范围：0-511\n    Ttl (int): 设置生存时间（Time To Live）字段，默认值：120，有效取值范围：0-65535\n\n返回值:\n    dict: 一个字典，显示被修改字段的名称（'Type', 'Length', 'Ttl'）及其新的值。例如：\n        {\n            'Type': 127,\n            'Ttl': 240\n        }\n    如果没有字段被修改，则返回False。\n\n示例:\n    .. code:: RobotFramework\n\n        | Edit Header Lldp Ttl Tlv | Stream=${Stream} | Level=0 | Type=127 | Ttl=240 |\n\n注意事项:\n    - 如果操作失败，将抛出ContinuableFailure异常。\n    - 修改是直接作用在内存中的头部对象上。\n    - 函数内部调用了底层API `renix.edit_header_lldp_ttl` 来完成实际操作。",
  "TesterLibrary.Stream.Header.LldpTlv.lldp.edit_header_lldp_end_tlv": "修改测试仪表流量模板中LLDP end-of-LLDPDU TLV报文头部字段内容。\n\n该函数用于编辑指定流模板中第Level个LLDP end-of-LLDPDU TLV头部的Type和/或Length字段。内部会先获取流的所有头部，并过滤出类型为endtlv的头部，然后根据Level索引选择要修改的头部对象，并更新其字段。\n\n参数:\n    Stream (:obj:`StreamTemplate` 或 list): 测试仪表流量模板对象，类型为StreamTemplate。也可以传入一个包含单个StreamTemplate对象的列表。必须具有handle属性。\n    Level (int, optional): 要修改的endtlv头部在所有endtlv头部中的索引位置，默认值: 0，取值范围: 0-65535\n\n关键字参数:\n    Type (int, optional): 新的TLV类型值，取值范围：0-127，默认不修改\n    Length (int, optional): 新的TLV长度值，取值范围：0-511，默认不修改\n\n返回值:\n    dict: 包含被修改字段的字典，键为'Type'、'Length'，值为其对应的新值。如果未指定任何字段修改或修改失败，返回False。\n\n示例:\n    .. code:: RobotFramework\n\n        | Edit Header Lldp End Tlv | Stream=${Stream} | Level=0 | Type=127 |\n        \n注意事项:\n    - 该函数会直接修改流模板中头部对象的内部状态\n    - 如果传入的是list，则使用其中第一个元素作为流对象\n    - 字段更新是可选的，仅当提供非None值时才会更新相应字段",
  "TesterLibrary.Stream.Header.Routing.ospfv2.edit_header_ospfv2_hello": "修改测试仪表流量模板中OSPFv2 Hello报文头部内容。\n\n该函数用于编辑指定流量流中的OSPFv2 Hello报文头部字段。可修改的字段包括版本号、报文类型、路由器ID、区域ID、校验和、认证信息、选项位、网络掩码、Hello间隔、路由优先级、Dead Interval、指定路由器和备份指定路由器地址以及邻居列表等。仅提供并修改指定的参数，其余字段保持不变。\n\nArgs:\n\n    Stream (:obj:`StreamTemplate`): 测试仪表流量对象，表示需要修改的流量模板。\n\n    Level (int): 指定要修改的OSPFv2 Hello头部在流量模板中同类头部中的索引位置，默认值为0，取值范围：0-65535。\n\nKeyword Args:\n\n    Version (int): OSPF协议版本号，默认值：2，取值范围：0-255。\n\n    Type (int): 报文类型，默认值：1（Hello），可选值：\n\n        0: Unknown\n\n        1: Hello\n\n        2: Database Description\n\n        3: Link State Request\n\n        4: Link State Update\n\n        5: Link State Acknowledgement\n\n    PacketLength (int): 报文总长度（包含头部），默认值：0，取值范围：0-65535。\n\n    RouterID (str): 发送Hello报文的路由器ID，默认值：\"1.1.1.1\"，格式为IPv4地址字符串。\n\n    AreaID (str): 所属OSPF区域ID，默认值：\"0.0.0.0\"，格式为IPv4地址字符串。\n\n    Checksum (hex): 头部校验和，默认值：\"0000\"，十六进制表示，取值范围：0000-FFFF。\n\n    AuthType (str): 认证类型，默认值：\"NoAuth\"，可选值：\n\n        SimplePassword\n\n        MD5\n\n        UserDefined\n\n        NoAuth\n\n    AuthValue1 (int): 第一阶段认证值，默认值：0，取值范围：0-4294967295。\n\n    AuthValue2 (int): 第二阶段认证值，默认值：0，取值范围：0-4294967295。\n\n    PacketOptionsReserved7 (bit): Options字段第7位保留位，默认值：0，取值范围：0或1。\n\n    PacketOptionsReserved6 (bit): Options字段第6位保留位，默认值：0，取值范围：0或1。\n\n    PacketOptionsDcBit (bit): Demand Circuit Bit，默认值：0，取值范围：0或1。\n\n    PacketOptionsEaBit (bit): External Attributes Bit，默认值：0，取值范围：0或1。\n\n    PacketOptionsNpBit (bit): NSSA（Not-So-Stubby Area）Bit，默认值：0，取值范围：0或1。\n\n    PacketOptionsMcBit (bit): Multicast支持标志位，默认值：0，取值范围：0或1。\n\n    PacketOptionsEBit (bit): E-bit，指示是否支持外部路由信息，默认值：0，取值范围：0或1。\n\n    PacketOptionsReserved0 (bit): Options字段第0位保留位，默认值：0，取值范围：0或1。\n\n    NetworkMask (str): 网络子网掩码，默认值：\"255.255.255.0\"，格式为IPv4地址字符串。\n\n    HelloInterval (int): Hello报文发送间隔（秒），默认值：10，取值范围：0-65535。\n\n    RouterPriority (int): 路由器优先级，用于DR/BDR选举，默认值：0，取值范围：0-255。\n\n    RouterDeadInterval (int): 邻居失效时间（秒），默认值：40，取值范围：0-4294967295。\n\n    DesignatedRouter (str): 指定路由器IP地址，默认值：\"1.1.1.1\"，格式为IPv4地址字符串。\n\n    BackupDesignatedRouter (str): 备份指定路由器IP地址，默认值：\"2.2.2.2\"，格式为IPv4地址字符串。\n\n    Neighbors (list): 邻居路由器ID列表，默认值：[\"1.1.1.1\"]，最大长度：1024个条目。\n\nReturns:\n\n    dict: 返回一个字典，表示每个修改成功的字段名称及其在报文头结构中的路径。例如：\n\n        {\n            'RouterID': 'ospfHeader.routerID',\n            'NetworkMask': 'networkMask',\n            'Neighbors: 1.1.1.1': 'neighbors.ospfv2Neighbor_0.neighborID',\n            'Neighbors: 2.2.2.2': 'neighbors.ospfv2Neighbor_1.neighborID'\n        }\n\nExamples:\n\n    .. code:: RobotFramework\n\n        | ${Stream} | add_stream | Port=${Port} |\n        | ${HeaderTypes} | Create List | EthernetII | IPv4 | OSPFv2Hello |\n        | ${Neighbors} | Create List | 2.2.2.2 | 3.3.3.3 | 4.4.4.4 |\n        | Create Stream Header | Stream=${Stream} | HeaderTypes=${HeaderTypes} |\n        | Edit Header Ospfv2 Hello | Stream=${Stream} | Level=0 | AuthType=2 | Neighbors=${Neighbors} |",
  "TesterLibrary.Stream.Header.Routing.ospfv2.edit_header_ospfv2_unknown": "修改测试仪表流量模板中OSPFv2 Unknown报文头部内容\n\n该函数用于修改指定流量模板中的OSPFv2 Unknown协议头部字段。适用于需要在测试中自定义OSPFv2协议未知类型数据包的场景，支持对多个可选字段进行设置或修改。\n\nArgs:\n\n    Stream (:obj:`StreamTemplate` 或 list): 测试仪表流量对象，或者包含单个流量对象的列表。如果传入的是列表，则使用第一个元素作为流对象。必须具有唯一标识符属性（如handle）。\n    \n    Level (int, optional): 指定要修改的OSPFv2 Unknown头部在流中所有此类头部中的索引位置。当存在多个OSPFv2 Unknown头部时，用于选择具体的一个，默认为0。\n\nKeyword Args:\n\n    Version (int, optional): OSPF协议版本号，默认值：2，取值范围：0-255\n    \n    Type (int, optional): 报文类型，默认值：0，取值范围：\n        \n        0: Unknown\n        \n        1: Hello\n        \n        2: Database Description\n        \n        3: Link State Request\n        \n        4: Link State Update\n        \n        5: Link State Acknowledgement\n    \n    PacketLength (int, optional): 报文总长度，默认值：0，取值范围：0-65535\n    \n    RouterID (str, optional): 路由器ID，默认值：'1.1.1.1'，格式应为IPv4地址字符串\n    \n    AreaID (str, optional): 区域ID，默认值：'0.0.0.0'，格式应为IPv4地址字符串\n    \n    Checksum (hex, optional): 校验和字段，默认值：'0000'，取值范围：0000-FFFF\n    \n    AuthType (str, optional): 认证类型，默认值：'NoAuth'，可选值包括：\n        \n        SimplePassword - 简单密码认证\n        \n        MD5 - MD5认证\n        \n        UserDefined - 用户自定义认证\n        \n        NoAuth - 无认证\n    \n    AuthValue1 (int, optional): 第一个认证值，默认值：0，取值范围：0-4294967295\n    \n    AuthValue2 (int, optional): 第二个认证值，默认值：0，取值范围：0-4294967295\n\nReturns:\n\n    dict: 返回一个字典，表示被修改的字段名及其在协议头部结构中的路径字符串。例如：\n\n        {\n            'RouterID': 'ospfHeader.routerID',\n            'AuthValue1': 'ospfHeader.authValue1'\n        }\n\n    字段路径会根据实际结构以及认证方式动态调整。\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${Stream} | add_stream | Port=${Port} |\n        | ${HeaderTypes} | Create List | EthernetII | IPv4 | OSPFv2Unknown |\n        | Create Stream Header | Stream=${Stream} | HeaderTypes=${HeaderTypes} |\n        | Edit Header Ospfv2 Unknown | Stream=${Stream} | Level=0 | AuthType=MD5 | AuthValue1=123456 |",
  "TesterLibrary.Stream.Header.Routing.ospfv2.edit_header_ospfv2_request": "修改测试仪表流量模板中OSPFv2 Link State Request报文头部内容。\n\n该函数用于修改指定流量模板中的OSPFv2 Link State Request报文头部的特定字段。通过传入关键字参数，可以更新如版本号、包类型、路由器ID等字段。如果提供了认证值，则会更新报文的认证信息；如果设置了LsaHeaderCount，则会在数据包中插入相应数量的LSA头部。\n\nArgs:\n\n    Stream (:obj:`StreamTemplate`): 测试仪表流量对象，类型为StreamTemplate或包含'handle'属性的对象。若传入列表则使用第一个元素。\n\n    Level (int): 指定要修改的OSPFv2 Link State Request头部在该流中所有此类头部中的索引位置，默认为0。取值范围：0-65535\n\nKeyword Args:\n\n    Version (int, optional): 设置OSPF协议版本号，默认为2，取值范围：0-255\n\n    Type (int, optional): 设置OSPF包类型，默认为3（Link State Request），可选值：\n\n        0: Unknown\n\n        1: Hello\n\n        2: Database Description\n\n        3: Link State Request\n\n        4: Link State Update\n\n        5: Link State Acknowledgement\n\n    PacketLength (int, optional): 设置OSPF包总长度（包括头部和数据部分），默认为0（自动计算）\n\n    RouterID (str or int, optional): 设置发送路由器的Router ID，默认为\"1.1.1.1\"，格式应为IPv4地址字符串或整数形式\n\n    AreaID (str or int, optional): 设置关联的Area ID，默认为\"0.0.0.0\"，格式应为IPv4地址字符串或整数形式\n\n    Checksum (hex, optional): 设置校验和字段，默认为0x0000，取值范围：0x0000-0xFFFF\n\n    AuthType (int or str, optional): 设置认证类型，默认为\"NoAuth\"，可选值：\n\n        0 / \"SimplePassword\"\n\n        1 / \"MD5\"\n\n        2 / \"UserDefined\"\n\n        3 / \"NoAuth\"\n\n    AuthValue1 (str or int, optional): 认证值第一部分，默认为0。根据认证类型不同，其含义也不同\n\n    AuthValue2 (str or int, optional): 认证值第二部分，默认为0。根据认证类型不同，其含义也不同\n\n    LsaHeaderCount (int, optional): 插入到报文中的LSA头部数量，默认为0，最大支持1024个LSA头部\n\nReturns:\n\n    dict: 返回一个字典，映射每个被修改的参数名到其在内部结构中的路径，例如：\n\n        {\n            'Version': 'ospfHeader.version',\n            'Checksum': 'ospfHeader.checksum'\n        }\n\n        表示这些字段已被修改，并指示其在内部对象模型中的具体位置。\n\nSide Effects:\n\n    - 直接修改指定流的报文头部属性\n    - 若设置LsaHeaderCount，可能会改变报文结构，增加LSA头部数量\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${Stream} | add_stream | Port=${Port} |\n        | ${HeaderTypes} | Create List | EthernetII | IPv4 | OSPFv2Unknown |\n        | Create Stream Header | Stream=${Stream} | HeaderTypes=${HeaderTypes} |\n        | Edit Header Ospfv2 Request | Stream=${Stream} | Level=0 | AuthType=2 | LsaHeaderCount=2 |",
  "TesterLibrary.Stream.Header.Routing.ospfv2.edit_header_ospfv2_dd": "修改测试仪表流量模板中OSPFv2 Database Description报文头部内容。\n\n该函数用于编辑指定流量流中的OSPFv2 Database Description（DD）报文头部字段。支持对OSPF通用字段、认证信息、选项位以及DD报文特有字段的修改。若指定了LSA头数量，还会在DD包中插入相应数量的LSA头。\n\nArgs:\n    Stream (:obj:`StreamTemplate` or list): 流量流对象或包含一个流量流对象的列表。每个流对象必须具有唯一标识的 'handle' 属性。\n    Level (int): 指定要编辑的OSPFv2 DD头部在流中所有此类头部中的索引位置，默认为0，取值范围：0-65535\n\nKeyword Args:\n\n    Version (int, optional): OSPF协议版本号，默认不修改，取值范围：0-255\n    Type (int, optional): 报文类型，默认不修改，取值范围：\n\n        0：Unknown\n\n        1：Hello\n\n        2：Database Description\n\n        3：Link State Request\n\n        4：Link State Update\n\n        5：Link State Acknowledgement\n\n    PacketLength (int, optional): 整个OSPF报文长度（包括头部），默认不修改，取值范围：0-65535\n    RouterID (str, optional): 发送方路由器ID，默认不修改，格式为IPv4地址字符串\n    AreaID (str, optional): 报文所属区域ID，默认不修改，格式为IPv4地址字符串\n    Checksum (hex, optional): 报文校验和，默认不修改，取值范围：0000-FFFF\n    AuthType (str, optional): 认证类型，默认不修改，可选值：\n\n        SimplePassword\n\n        MD5\n\n        UserDefined\n\n        NoAuth\n\n    AuthValue1 (int, optional): 认证值1，默认不修改，取值范围：0-4294967295\n    AuthValue2 (int, optional): 认证值2，默认不修改，取值范围：0-4294967295\n    PacketOptionsReserved7 (bit, optional): 报文选项保留位7，默认不修改，取值范围：0-1\n    PacketOptionsReserved6 (bit, optional): 报文选项保留位6，默认不修改，取值范围：0-1\n    PacketOptionsDcBit (bit, optional): Demand Circuit位，默认不修改，取值范围：0-1\n    PacketOptionsEaBit (bit, optional): External Attributes位，默认不修改，取值范围：0-1\n    PacketOptionsNpBit (bit, optional): NSSA External位，默认不修改，取值范围：0-1\n    PacketOptionsMcBit (bit, optional): Multicast位，默认不修改，取值范围：0-1\n    PacketOptionsEBit (bit, optional): Type-5/Type-7 LSA位，默认不修改，取值范围：0-1\n    PacketOptionsReserved0 (bit, optional): 报文选项保留位0，默认不修改，取值范围：0-1\n    InterfaceMtu (int, optional): 接口MTU值，默认不修改，取值范围：0-65535\n    SequenceNumber (int, optional): DD同步序列号，默认不修改，取值范围：0-4294967295\n    DdOptionsReserved7 (bit, optional): DD选项保留位7，默认不修改，取值范围：0-1\n    DdOptionsReserved6 (bit, optional): DD选项保留位6，默认不修改，取值范围：0-1\n    DdOptionsReserved5 (bit, optional): DD选项保留位5，默认不修改，取值范围：0-1\n    DdOptionsReserved4 (bit, optional): DD选项保留位4，默认不修改，取值范围：0-1\n    DdOptionsReserved3 (bit, optional): DD选项保留位3，默认不修改，取值范围：0-1\n    DdOptionsIBit (bit, optional): 初始化位，表示邻接关系开始，默认不修改，取值范围：0-1\n    DdOptionsMBit (bit, optional): More位，表示后续还有更多DD报文，默认不修改，取值范围：0-1\n    DdOptionsMsBit (bit, optional): Master/Slave协商位，默认不修改，取值范围：0-1\n    LsaHeaderCount (int, optional): 插入的LSA头数量，默认不修改，取值范围：0-1024\n\nReturns:\n    dict: 返回一个字典，将每个修改的参数名映射到其在报文结构中的路径，例如：\n\n    {\n        'Version': 'ospfHeader.version',\n        'RouterID': 'ospfHeader.routerID',\n        'AuthValue1': 'ospfHeader.authSelect.hdrAuthSelectPassword.authValue1',\n        'SequenceNumber': 'sequenceNumber',\n        'DdOptionsIBit': 'ddSpecificOptions.iBit'\n    }\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${Stream} | add_stream | Port=${Port} |\n        | ${HeaderTypes} | Create List | EthernetII | IPv4 | OSPFv2DatabaseDescription |\n        | Create Stream Header | Stream=${Stream} | HeaderTypes=${HeaderTypes} |\n        | Edit Header Ospfv2 Dd | Stream=${Stream} | Level=0 | InterfaceMtu=9000 | LsaHeaderCount=1 |\n\nSide Effects:\n    - 修改指定流中的OSPFv2 DD头部内容\n    - 若提供了LsaHeaderCount参数，则会在DD包中插入指定数量的LSA头\n    - 若未缓存流的头部信息，则会调用get_stream_header获取并更新头部数据",
  "TesterLibrary.Stream.Header.Routing.ospfv2.edit_header_ospfv2_ack": "修改测试仪表流量模板中OSPFv2 Link State Acknowledge报文头部内容。\n\n该函数用于编辑指定流量模板中的OSPFv2 Link-State Acknowledge（LSAck）报文头部字段。支持对多个层级的OSPFv2 LSAck头部进行选择性编辑，通过`Level`参数指定目标头部索引。所有字段均为可选参数，仅当传入非None值时才会更新对应字段。\n\nArgs:\n    Stream (:obj:`StreamTemplate`): 测试仪表流量对象，用于标识要修改的流量模板。必须包含有效的句柄(handle)属性，用以内部检索或构造对应的报文头部信息。\n    \n    Level (int): 指定要修改的OSPFv2 LSAck头部在当前流量模板中的索引位置，默认为0。适用于存在多个相同类型头部的情况，例如多层封装场景。取值范围：0-65535。\n\nKeyword Args:\n    Version (int): OSPF协议版本号，默认值：2，取值范围：0-255\n    \n    Type (int): 报文类型，默认值：5（Link State Acknowledgement），有效值包括：\n        0: Unknown\n        1: Hello\n        2: Database Description\n        3: Link State Request\n        4: Link State Update\n        5: Link State Acknowledgement\n\n    PacketLength (int): 整个OSPFv2报文长度（字节），默认值：0（自动计算），取值范围：0-65535\n    \n    RouterID (str): 发送路由器的Router ID，IPv4地址格式，默认值：1.1.1.1\n    \n    AreaID (str): 区域ID，IPv4地址格式，默认值：0.0.0.0\n    \n    Checksum (hex): 校验和字段，默认值：0000，十六进制字符串，取值范围：0000-FFFF\n    \n    AuthType (str): 认证类型，默认值：NoAuth，可选值包括：\n        SimplePassword\n        MD5\n        UserDefined\n        NoAuth\n\n    AuthValue1 (int): 第一部分认证值，默认值：0，取值范围：0-4294967295。根据当前认证类型决定是否更新对应字段路径。\n    \n    AuthValue2 (int): 第二部分认证值，默认值：0，取值范围：0-4294967295。根据当前认证类型决定是否更新对应字段路径。\n    \n    PacketOptionsReserved7 (any): 选项字段保留位7，若传入值非None则更新该位。\n    \n    PacketOptionsReserved6 (any): 选项字段保留位6，若传入值非None则更新该位。\n    \n    PacketOptionsDcBit (any): Demand Circuit位，控制按需链路行为，若传入值非None则更新该位。\n    \n    PacketOptionsEaBit (any): External Attributes位，用于NSSA区域，若传入值非None则更新该位。\n    \n    PacketOptionsNpBit (any): NSSA External位，若传入值非None则更新该位。\n    \n    PacketOptionsMcBit (any): Multicast位，若传入值非None则更新该位。\n    \n    PacketOptionsEBit (any): External Routing位，若传入值非None则更新该位。\n    \n    PacketOptionsReserved0 (any): 选项字段保留位0，若传入值非None则更新该位。\n    \n    LsaHeaderCount (int): 插入的LSA头部数量，默认值：0，取值范围：0-1024\n\nReturns:\n    dict: 返回一个字典，键为被修改的参数名，值为对应参数在内部结构中的路径字符串，示例：\n        {\n            'Version': 'ospfHeader.version',\n            'RouterID': 'ospfHeader.routerID',\n            'Checksum': 'ospfHeader.checksum',\n            'AuthValue1': 'ospfHeader.authSelect.hdrAuthSelectPassword.authValue1',\n            'PacketOptionsDcBit': 'ddOptions.dcBit'\n        }\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${Stream} | add_stream | Port=${Port} |\n        | ${HeaderTypes} | Create List | EthernetII | IPv4 | Ospfv2LinkStateAcknowledge |\n        | Create Stream Header | Stream=${Stream} | HeaderTypes=${HeaderTypes} |\n        | Edit Header Ospfv2 Ack | Stream=${Stream} | Level=0 | RouterID=2.2.2.2 | Checksum=ABCD | LsaHeaderCount=1 | PacketOptionsDcBit=True |\n\nSide Effects:\n    - 修改与传入流对象关联的OSPFv2 LSAck头部状态\n    - 若未缓存对应报文头部，则调用get_stream_header()获取或构造头部结构\n    - 可能更新与流头部相关的内部缓存结构",
  "TesterLibrary.Stream.Header.Routing.ospfv2.edit_header_ospfv2_lsa": "修改测试仪表流量模板中OSPFv2报文中LSA（Link State Advertisement）头部内容。\n\n该函数用于编辑指定流量流中某一特定层级和索引位置的OSPFv2 LSA头部字段。它通过调用底层API来定位并修改对应LSA头部的参数。\n\n### 参数说明：\n\n- **Stream** (`StreamTemplate`):  \n  测试仪表流量对象，类型为 `StreamTemplate` 或包含该对象的列表。若传入列表，则仅使用第一个元素。\n\n- **HeaderType** (str):  \n  要编辑的OSPFv2头部类型，支持以下类型（区分大小写）：\n  - `Ospfv2LinkStateUpdate`\n  - `Ospfv2LinkStateRequest`\n  - `Ospfv2DatabaseDescription`\n  - `Ospfv2LinkStateAcknowledge`\n\n- **Level** (int, optional):  \n  在流量模板中，要编辑的OSPFv2头部在所有同类头部中的层级索引，默认值：0，取值范围：0-65535。\n\n- **Index** (int, optional):  \n  在指定HeaderType下，要编辑的LSA头部在其内部列表中的索引，默认值：0，取值范围：0-65535。\n\n- **kwargs** (任意关键字参数):  \n  指定要修改的LSA头部字段及其对应的值，支持的字段如下：\n\n  | 字段名             | 类型   | 默认值       | 描述 |\n  |------------------|--------|--------------|------|\n  | `LsaAge`         | int    | 0            | LSA Age，单位为秒，取值范围：0-65535 |\n  | `Reserved7`      | bit    | 0            | 保留位7，取值范围：0或1 |\n  | `Reserved6`      | bit    | 0            | 保留位6，取值范围：0或1 |\n  | `DcBit`          | bit    | 0            | 按需电路位，取值范围：0或1 |\n  | `EaBit`          | bit    | 0            | 外部属性位，取值范围：0或1 |\n  | `NpBit`          | bit    | 0            | NSSA位，取值范围：0或1 |\n  | `McBit`          | bit    | 0            | 多播位，取值范围：0或1 |\n  | `EBit`           | bit    | 0            | 外部路由位，取值范围：0或1 |\n  | `Reserved0`      | bit    | 0            | 保留位0，取值范围：0或1 |\n  | `LsType`         | int    | 1            | 链路状态类型，可选值：1(Router), 2(Network), 3(Summary), 4(Summary-ASBR), 5(AS-External Type-5), 7(AS-External Type-7) |\n  | `LinkStateId`    | str    | \"1.1.1.1\"    | Link State ID，IPv4地址格式 |\n  | `AdvertisingRouter` | str | \"1.1.1.1\"    | 广告路由器IP地址，IPv4格式 |\n  | `LsSequenceNumber` | hex  | \"80000001\"   | 序列号，4字节十六进制字符串 |\n  | `LsChecksum`     | hex    | \"0000\"       | 校验和，取值范围：0000-FFFF |\n  | `LsaLength`      | int    | 0            | LSA总长度，取值范围：0-65535 |\n  | `LsTypeWide`     | int    | 1            | 扩展LS类型，与LsType一致 |\n\n### 返回值：\n\n返回一个字典，表示被修改的字段及其路径信息。例如：\n\n```python\n{\n    'LsaAge': 'lsaHeaders.ospfv2LsaHeader_0.lsaAge',\n    'Reserved7': 'lsaHeaders.ospfv2LsaHeader_0.lsaHdrOptions.reserved7'\n}\n```\n\n如果操作失败，返回 `False`，并抛出 `ContinuableFailure` 异常。\n\n### 示例：\n\n```robotframework\n| ${Stream} | add_stream | Port=${Port} |\n| ${HeaderTypes} | Create List | EthernetII | IPv4 | OSPFv2DatabaseDescription |\n| Create Stream Header | Stream=${Stream} | HeaderTypes=${HeaderTypes} |\n| Edit Header Ospfv2 Dd | Stream=${Stream} | Level=0 | InterfaceMtu=9000 | LsaHeaderCount=2 |\n| Edit Header Ospfv2 Lsa | Stream=${Stream} | Index=0 | LsaAge=10 | LinkStateId=4.4.4.4 |\n| Edit Header Ospfv2 Lsa | Stream=${Stream} | Index=1 | LsaAge=20 | LinkStateId=5.5.5.5 |\n```\n\n### 注意事项：\n\n- 实际修改由底层header对象的 `edit_lsa_header` 方法完成。\n- 若未找到匹配的header，或参数错误，可能导致函数返回False或抛出异常。",
  "TesterLibrary.Stream.Header.Routing.ospfv2.edit_header_ospfv2_update": "修改测试仪表流量模板中OSPFv2 Link State Update报文头部内容\n\n该函数用于修改指定流量模板中的OSPFv2 Link State Update协议头部字段。支持对版本号、报文类型、报文长度、路由器ID、区域ID、校验和、认证信息以及LSA（链路状态通告）相关参数的配置。\n\nArgs:\n\n    Stream (:obj:`StreamTemplate`): 测试仪表流量对象，表示待修改的流量模板\n\n    Level (int): 指定当前流量模板中第几个OSPFv2 Link State Update头部进行修改，用于处理存在多个相同类型头部的情况，默认为0\n\nKeyword Args:\n\n    Version (int): OSPF协议版本号，默认值：2，取值范围：0-255\n\n    Type (int): 报文类型，默认值：4（Link State Update），取值范围：\n\n        0：Unknown\n\n        1：Hello\n\n        2：Database Description\n\n        3：Link State Request\n\n        4：Link State Update\n\n        5：Link State Acknowledgement\n\n    PacketLength (int): 报文总长度（包含头部和数据部分），默认值：自动计算，取值范围：0-65535\n\n    RouterID (str): 发送方路由器ID，IPv4地址格式，默认值：1.1.1.1\n\n    AreaID (str): 区域ID，IPv4地址格式，默认值：0.0.0.0\n\n    Checksum (hex): 报文校验和，默认值：0000，取值范围：0000-FFFF\n\n    AuthType (str): 认证类型，默认值：NoAuth，可选值包括：\n\n        SimplePassword: 明文密码认证\n\n        MD5: MD5认证\n\n        UserDefined: 用户自定义认证\n\n        NoAuth: 不启用认证\n\n    AuthValue1 (int): 第一部分认证值，默认值：0，取值范围：0-4294967295\n\n    AuthValue2 (int): 第二部分认证值，默认值：0，取值范围：0-4294967295\n\n    NumberOfLsas (int): 当前报文中包含的LSA数量，默认值：0，最大支持1024个LSA\n\n    LsaHeaders (list of str): LSA类型列表，用于指定插入的LSA头部类型，支持以下类型：\n\n        Router: 路由器LSA\n\n        Network: 网络LSA\n\n        Summary: 汇总LSA\n\n        SummaryAsbr: 汇总ASBR LSA\n\n        AsExternal: 外部LSA\n\nReturns:\n\n    dict: 返回一个字典，映射每个成功修改的字段名到其在协议栈中的路径表示。例如：\n\n        {\n            'RouterID': 'ospfHeader.routerID',\n            'AreaID': 'ospfHeader.areaID'\n        }\n\n    如果某个字段未被设置，则不会出现在返回结果中。\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${Stream} | add_stream | Port=${Port} |\n        | ${HeaderTypes} | Create List | EthernetII | IPv4 | ospfv2linkstateupdate |\n        | ${LsaHeaders} | Create List | Router | Network | Summary | SummaryAsbr | AsExternal |\n        | Create Stream Header | Stream=${Stream} | HeaderTypes=${HeaderTypes} |\n        | Edit Header Ospfv2 Update | Stream=${Stream} | Level=0 | AreaID=2.2.2.2 | LsaHeaders=${LsaHeaders} |",
  "TesterLibrary.Stream.Header.Routing.ospfv2.edit_header_ospfv2_update_lsa": "修改测试仪表流量模板中OSPFv2 Update报文中指定类型的LSA头部内容。\n\n该函数用于编辑流模板中某个OSPFv2 Update报文内的特定LSA（Link State Advertisement）头部。通过给定的类型参数，可以定位并修改Router LSA、Network LSA、Summary LSA、Summary-ASBR LSA或AS-External LSA等不同类型的LSA头部字段。此操作在指定的Update头部层级(Level)和LSA索引(Index)上执行。\n\n参数:\n    Stream (:obj:`StreamTemplate` 或 list): 流量模板对象，或者是包含单个流量模板对象的列表。如果传入列表，则仅使用第一个元素。\n    Type (str): 要编辑的LSA类型，有效值包括：\n                - 'router': Router LSA\n                - 'network': Network LSA\n                - 'summary': Summary LSA (IP网络)\n                - 'summaryasbr': Summary LSA (ASBR)\n                - 'asexternal': AS-External LSA\n    Level (int, optional): 指定在流量模板中的OSPFv2 Update头部层级，默认为0（即第一个Update头部）。\n    Index (int, optional): 指定要修改的LSA在该Update报文LSA列表中的索引位置，默认为0（即第一个LSA）。\n    **kwargs: 任意关键字参数，表示需要更新的LSA头部字段及其对应的值。支持的关键字字段取决于Type参数指定的LSA类型，主要包括但不限于以下字段：\n\n        - 公共字段:\n            LsaAge (int): LSA Age，默认值：0，取值范围：0-65535\n            Reserved7 (bit): Reserved Bit 7，默认值：0，取值范围：0-1\n            Reserved6 (bit): Reserved Bit 6，默认值：0，取值范围：0-1\n            DcBit (bit): DC Bit，默认值：0，取值范围：0-1\n            EaBit (bit): EA Bit，默认值：0，取值范围：0-1\n            NpBit (bit): NP Bit，默认值：0，取值范围：0-1\n            McBit (bit): MC Bit，默认值：0，取值范围：0-1\n            EBit (bit): E Bit，默认值：0，取值范围：0-1\n            Reserved0 (bit): Reserved Bit 0，默认值：0，取值范围：0-1\n            LsType (int): LS Type，默认值：1，取值范围：\n                1: Router\n                2: Network\n                3: Summary\n                4: Summary-ASBR\n                5: AS-External Type-5\n                7: AS-External Type-7\n            LinkStateId (str): Link State ID，默认值：1.1.1.1，取值范围：IPv4地址\n            AdvertisingRouter (str): Advertising Router，默认值：1.1.1.1，取值范围：IPv4地址\n            LsSequenceNumber (hex): LS Sequence Number，默认值：80000001，取值范围：长度为4字节的十六进制数\n            LsChecksum (hex): LS Checksum，默认值：0000，取值范围：0000-FFFF\n            LsaLength (int): LSA Length，默认值：0，取值范围：0-65535\n\n        - Router LSA 特有字段:\n            Reserved7Router (bit): Reserved Bit 7，默认值：0，取值范围：0-1\n            Reserved6Router (bit): Reserved Bit 6，默认值：0，取值范围：0-1\n            Reserved5Router (bit): Reserved Bit 5，默认值：0，取值范围：0-1\n            Reserved4Router (bit): Reserved Bit 4，默认值：0，取值范围：0-1\n            Reserved3Router (bit): Reserved Bit 3，默认值：0，取值范围：0-1\n            VBitRouter (bit): V Bit，默认值：0，取值范围：0-1\n            EBitRouter (bit): E Bit，默认值：0，取值范围：0-1\n            BBitRouter (bit): B Bit，默认值：0，取值范围：0-1\n            RouterLsaReserved1 (int): routerLsaReserved1，默认值：0，取值范围：0-255\n            NumberOfLinks (int): Number of Router Links，默认值：0，取值范围：0-65535\n            RouterLsaLinkCount (int): 要插入的Router LSA Link数量，默认值：0，取值范围：0-1024\n\n        - Network LSA 特有字段:\n            NetworkMask (str): Network Mask，默认值：255.255.255.0，取值范围：IPv4地址\n            AttachedRoute1 (str): Attached Router1 ID，默认值：1.1.1.1，取值范围：IPv4地址\n            AttachedRouteCount (int): Attached Routers数量，默认值：0，取值范围：0-1024\n\n        - Summary LSA / Summary Asbr 特有字段:\n            NetworkMask (str): Attached Router1 ID，默认值：255.255.255.0，取值范围：IPv4地址\n            LsaReserved1 (int): Reserved，默认值：0，取值范围：0-255\n            LsaMetric (int): Metric，默认值：0，取值范围：0-16777215\n            TosMetricsCount (int): Additional Metrics数量，默认值：0，取值范围：0-1024\n\n        - External LSA 特有字段:\n            NetworkMask (str): Attached Router1 ID，默认值：255.255.255.0，取值范围：IPv4地址\n            ExternalOptionsEBit (bit): E Bit，默认值：0，取值范围：0-1\n            ExternalOptionsReserved (bit): Reserved，默认值：0，取值范围：0-15\n            ExternalRouteMetric (int): External LSA Route Metric，默认值：0，取值范围：0-16777215\n            ForwardingAddress (str): Forwarding Address，默认值：1.1.1.1，取值范围：IPv4地址\n            ExternalRouteTag (int): External Route Tag，默认值：0，取值范围：0-4294967295\n            TosMetricsCount (int): Additional Metrics数量，默认值：0，取值范围：0-1024\n\n返回值:\n    dict: 包含修改结果的字典，例如：\n        {\n            'RouterLsaReserved1': 'updatedLsas.ospfv2Lsa_0.ospfv2RouterLsa.routerLsaReserved1',\n            'LsaAge': 'updatedLsas.ospfv2Lsa_0.ospfv2RouterLsa.lsaHeader.lsaAge',\n            'Reserved7': 'updatedLsas.ospfv2Lsa_0.ospfv2RouterLsa.lsaHeader.lsaHdrOptions.reserved7',\n            'Reserved7Router': 'updatedLsas.ospfv2Lsa_0.ospfv2RouterLsa.routerLsaOptions.reserved7'\n         }\n\n示例:\n    .. code:: RobotFramework\n\n        | ${Stream} | add_stream | Port=${Port} |\n        | ${HeaderTypes} | Create List | EthernetII | IPv4 | Ospfv2LinkStateAcknowledge |\n        | ${LsaHeaders} | Create List | Router | Network | Summary | SummaryAsbr | AsExternal |\n        | Create Stream Header | Stream=${Stream} | HeaderTypes=${HeaderTypes} |\n        | Edit Header Ospfv2 Update | Stream=${Stream} | Level=0 | AreaID=2.2.2.2 | LsaHeaders=${LsaHeaders} |\n        | Edit Header Ospfv2 Update Lsa | Stream=${Stream} | Level=0 | Index=0 | Type=Router | RouterLsaReserved1=1 |\n        | Edit Header Ospfv2 Update Lsa | Stream=${Stream} | Level=0 | Index=1 | Type=Network | NetworkMask=255.255.0.0 |\n        | Edit Header Ospfv2 Update Lsa | Stream=${Stream} | Level=0 | Index=2 | Type=Summary | LsaReserved1=1 |\n        | Edit Header Ospfv2 Update Lsa | Stream=${Stream} | Level=0 | Index=3 | Type=SummaryAsbr | LsaMetric=1 |\n        | Edit Header Ospfv2 Update Lsa | Stream=${Stream} | Level=0 | Index=4 | Type=AsExternal | ExternalOptionsEBit=1 |",
  "TesterLibrary.Stream.Header.Routing.ospfv2.edit_header_ospfv2_update_route_lsa_link": "修改测试仪表流量模板中OSPFv2 Update报文中Route LSA的Link字段内容。\n\n该函数用于编辑指定流量模板中某个OSPFv2 Link-State Update头部内的Route LSA（Router LSA）中的特定Link信息。通过Level参数定位到具体的OSPFv2 Update头部，再通过LsaIndex定位到具体的LSA，最后通过Index定位到具体的Link，并根据提供的关键字参数进行修改。\n\n参数:\n    Stream (:obj:`StreamTemplate` 或 list): 流量模板对象或包含流量模板对象的列表。若传入列表，则使用第一个元素。该对象必须包含一个唯一标识该流的'handle'属性。\n\n    Level (int, optional): 在所有OSPFv2 Update头部中，要修改的目标头部的索引位置，默认为0。\n\n    LsaIndex (int, optional): 在目标Update头部中，LSA列表中要修改的目标LSA的索引位置，默认为0。\n\n    Index (int, optional): 在目标LSA中，Link列表中要修改的目标Link的索引位置，默认为0。\n\n    **kwargs: 任意关键字参数，表示需要修改的Link字段及其值。可选字段包括：\n\n        LinkId (str): Router LSA Link ID，默认值：1.1.1.1，取值范围：IPv4地址字符串\n\n        LinkData (str): Router LSA Link Data，默认值：\"0.0.0.0\"，取值范围：IPv4地址字符串\n\n        RouterLsaLinkType (int): Link Type，默认值：1，取值范围：\n\n            1: Point-to-Point\n\n            2: Transit\n\n            3: Stub\n\n            4: Virtual\n\n        NumRouterLsaTosMetrics (int): TOS Metrics数量，默认值：0，取值范围：0-255\n\n        RouterLinkMetrics (int): Router Link Metric，默认值：0，取值范围：0-65535\n\n        RouterLsaTosMetricsCount (int): Router LSA Link Metric数量，默认值：0，取值范围：0-1024\n\n返回值:\n    dict: 如果操作成功，返回一个字典，包含更新后的字段路径，例如::\n\n        {\n            'LinkId': 'updatedLsas.ospfv2Lsa_0.ospfv2RouterLsa.routerLsaLinks.ospfv2RouterLsaLink_0.linkId'\n        }\n\n    若操作失败则抛出ContinuableFailure异常。\n\n副作用:\n    - 通过get_stream_header函数获取并可能缓存与该流相关的头部对象。\n    - 修改所选头部内部状态中的对应LSA Link信息。\n\n示例:\n    .. code:: RobotFramework\n\n        | ${Stream} | add_stream | Port=${Port} |\n        | ${HeaderTypes} | Create List | EthernetII | IPv4 | Ospfv2LinkStateAcknowledge |\n        | ${LsaHeaders} | Create List | Router | Network | Summary | SummaryAsbr | AsExternal |\n        | Create Stream Header | Stream=${Stream} | HeaderTypes=${HeaderTypes} |\n        | Edit Header Ospfv2 Update | Stream=${Stream} | Level=0 | AreaID=2.2.2.2 | LsaHeaders=${LsaHeaders} |\n        | Edit Header Ospfv2 Update Lsa | Stream=${Stream} | Level=0 | Index=0 | Type=Router | RouterLsaLinkCount=2 |\n        | Edit Header Ospfv2 Update Route Lsa Link | Stream=${Stream} | Level=0 | LsaIndex=0 | Index=0 | LinkId=2.2.2.2 |",
  "TesterLibrary.Stream.Header.Routing.ospfv2.edit_header_ospfv2_update_route_link_tos_metric": "修改测试仪表流量模板中OSPFv2 Update报文的Route LSA头部中指定Link的TOS（Type of Service）度量值。\n\n**参数说明：**\n\n- **Stream** (:obj:`StreamTemplate` 或 list): 测试仪表流量对象，类型为StreamTemplate或包含该对象的列表。该对象应具有唯一标识流的 'handle' 属性。\n- **Level** (int, 可选): 在流量模板所有OSPFv2 Update头部中的索引，用于指定要编辑的OSPFv2 Update头部，默认值为0。\n- **LsaIndex** (int, 可选): 在选定Update头部内LSA（链路状态通告）条目的索引，用于定位包含目标Link的LSA，默认值为0。\n- **MetricIndex** (int, 可选): 在选定Route LSA Link中TOS Metric的索引，用于指定要修改的具体TOS Metric，默认值为0。\n- **Index** (int, 可选): 内部使用的参数，用于精确定位Header中需要修改的字段或子字段，默认值为0。\n- **\\*\\*kwargs** (关键字参数): 用于配置TOS Metric的具体字段，支持以下参数：\n  \n  - **RouterLsaLinkType** (int, 默认值: 1, 取值范围: 1~4): Link类型，表示链路类型：\n\n    - 1: Point-to-Point\n    - 2: Transit\n    - 3: Stub\n    - 4: Virtual\n\n  - **RouterLsaMetricReserved** (int, 默认值: 0, 取值范围: 0~255): 预留字段，通常用于协议扩展。\n  - **RouterTosLinkMetrics** (int, 默认值: 0, 取值范围: 0~65535): Router TOS Link Metric，表示特定TOS的链路度量值。\n\n**返回值：**\n\n- dict: 如果修改成功，返回一个字典，包含修改字段的路径信息，例如：\n\n  .. code:: python\n\n      {\n          'RouterLsaMetricReserved': 'updatedLsas.ospfv2Lsa_0.ospfv2RouterLsa.routerLsaLinks.ospfv2RouterLsaLink_0.routerLsaTosMetrics.ospfv2RouterLsaTosMetric_0.routerLsaMetricReserved'\n      }\n\n- bool: 如果未进行任何修改或操作失败，返回False。\n\n**功能描述：**\n\n该函数用于在测试自动化场景中对OSPFv2 Update报文中Route LSA的Link部分的TOS Metric进行细粒度编辑。它通过调用底层函数 `renix.edit_header_ospfv2_update_routelinktosmetric` 来完成实际的修改操作，并根据结果返回相应的信息。\n\n**副作用：**\n\n- 可能会修改系统中被测设备上的数据包流配置。\n- 修改后的内容会影响后续发送的数据包结构和网络行为模拟。\n\n**使用示例：**\n\n.. code:: RobotFramework\n\n    | ${Stream} | add_stream | Port=${Port} |\n    | ${HeaderTypes} | Create List | EthernetII | IPv4 | Ospfv2LinkStateAcknowledge |\n    | ${LsaHeaders} | Create List | Router | Network | Summary | SummaryAsbr | AsExternal |\n    | Create Stream Header | Stream=${Stream} | HeaderTypes=${HeaderTypes} |\n    | Edit Header Ospfv2 Update | Stream=${Stream} | Level=0 | AreaID=2.2.2.2 | LsaHeaders=${LsaHeaders} |\n    | Edit Header Ospfv2 Update Lsa | Stream=${Stream} | Level=0 | Index=0 | Type=Router | RouterLsaLinkCount=2 |\n    | Edit Header Ospfv2 Update Route Lsa Link | Stream=${Stream} | Level=0 | LsaIndex=0 | Index=0 | RouterLsaTosMetricsCount=2 |\n    | Edit Header Ospfv2 Update Route Link Tos Metric | Stream=${Stream} | Level=0 | LsaIndex=0 | MetricIndex=0 | Index=0 | RouterLsaMetricReserved=1 |",
  "TesterLibrary.Stream.Header.Routing.ospfv2.edit_header_ospfv2_update_network_attached_route": "修改测试仪表流量模板中OSPFv2 Link-State Update报文内的Network LSA中的Attached Router信息。\n\n该函数用于编辑指定流量流中某个OSPFv2 Link-State Update头部的Network LSA（链路状态通告）中的Attached Router条目。通过指定Level选择Link-State Update头部，通过LsaIndex选择具体的LSA条目，再通过Index选择要修改的Attached Router项。\n\n参数:\n    Stream (:obj:`StreamTemplate` 或 list): 测试仪表流量模板对象，或者包含单个流对象的列表。如果传入列表，仅使用第一个元素。\n    Level (int, optional): 指定Link-State Update头部在流中所有OSPFv2 Link-State Update头部中的索引位置，默认为0。\n    LsaIndex (int, optional): 指定要修改的Network LSA在该Link-State Update中的索引位置，默认为0。\n    Index (int, optional): 指定要修改的Attached Router在Network LSA中的索引位置，默认为0。\n    **kwargs: 支持的可选关键字参数，用于设置Attached Router的具体字段，如RouterID等。\n\n关键字参数:\n    RouterID (str, optional): 要设置的Router ID，格式为IPv4地址，默认值为'1.1.1.1'。\n\n返回:\n    dict or False: 如果操作成功，返回一个字典，包含更新后的字段信息（如RouterID对应的XPath路径）；如果失败，返回False。\n\n示例:\n    .. code:: RobotFramework\n\n        | ${Stream} | add_stream | Port=${Port} |\n        | ${HeaderTypes} | Create List | EthernetII | IPv4 | Ospfv2LinkStateAcknowledge |\n        | ${LsaHeaders} | Create List | Router | Network | Summary | SummaryAsbr | AsExternal |\n        | Create Stream Header | Stream=${Stream} | HeaderTypes=${HeaderTypes} |\n        | Edit Header Ospfv2 Update | Stream=${Stream} | Level=0 | AreaID=2.2.2.2 | LsaHeaders=${LsaHeaders} |\n        | Edit Header Ospfv2 Update Lsa | Stream=${Stream} | Level=0 | Index=1 | Type=Network | AttachedRouteCount=2 |\n        | Edit Header Ospfv2 Update Network Attached Route | Stream=${Stream} | Level=0 | LsaIndex=1 | Index=0 | RouterID=2.2.2.2 |\n\n返回示例:\n    .. code-block:: python\n\n        {\n            'RouterID': 'updatedLsas.ospfv2Lsa_1.ospfv2NetworkLsa.attachedRouters.ospfv2AttachedRouter_0.routerID'\n        }",
  "TesterLibrary.Stream.Header.Routing.ospfv2.edit_header_ospfv2_update_tos_metric": "修改测试仪表流量模板中OSPFv2 Update报文内指定LSA的TOS（Type of Service）度量值。\n\n该函数用于在指定的流量模板中的OSPFv2 Link-State Update报文中，修改特定LSA（Link-State Advertisement）的TOS Metric字段。支持修改Summary、SummaryAsbr和AsExternal类型的LSA，并允许通过索引定位具体的TOS Metric条目进行编辑。\n\nParameters:\n    Stream (:obj:`StreamTemplate` or list): 测试仪表流量对象，类型为StreamTemplate或包含单个StreamTemplate对象的列表。\n                                        如果传入列表，仅使用第一个元素。该对象必须具有唯一标识流的句柄属性。\n\n    Type (str): 要修改的LSA类型，可选值包括:\n\n        Summary: 表示网络汇总LSA\n\n        SummaryAsbr: 表示ASBR汇总LSA\n\n        AsExternal: 表示外部LSA\n\n    Level (int, optional): OSPFv2 Update头部在流量模板中的层级索引，用于导航嵌套或链式头部结构，默认为0。\n\n    LsaIndex (int, optional): 在Update头部中LSA条目的索引，用于选择要修改的LSA，默认为0。\n\n    Index (int, optional): TOS Metric在LSA内的子索引，用于指定多TOS Metric配置下的具体条目，默认为0。\n\nKeyword Args:\n    根据不同的LSA类型，支持以下参数：\n\n    Summary 或 SummaryAsbr 类型支持:\n\n        MetricReserved (int): 保留字段，默认值：0，取值范围：0-255\n\n        LinkMetrics (int): 链路开销，默认值：0，取值范围：0-16777215\n\n    AsExternal 类型支持:\n\n        EBit (bit): 外部标志位，默认值：0，取值范围：0或1\n\n        RouteTos (int): 路由服务类型，默认值：0，取值范围：0-127\n\n        RouteMetrics (int): 路由开销，默认值：0，取值范围：0-16777215\n\n        ForwardingAddress (str): 转发地址，默认值：'1.1.1.1'，格式为IPv4地址字符串\n\n        RouteTag (int): 路由标签，默认值：0，取值范围：0-4294967295\n\nReturns:\n    dict or False: 若操作成功，返回一个字典，包含更新后的字段及其路径；若底层调用未返回结果，则返回False。\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${Stream} | add_stream | Port=${Port} |\n        | ${HeaderTypes} | Create List | EthernetII | IPv4 | Ospfv2LinkStateAcknowledge |\n        | ${LsaHeaders} | Create List | Router | Network | Summary | SummaryAsbr | AsExternal |\n        | Create Stream Header | Stream=${Stream} | HeaderTypes=${HeaderTypes} |\n        | Edit Header Ospfv2 Update | Stream=${Stream} | Level=0 | AreaID=2.2.2.2 | LsaHeaders=${LsaHeaders} |\n        | Edit Header Ospfv2 Update Lsa | Stream=${Stream} | Level=0 | Index=2 | Type=Summary | TosMetricsCount=2 |\n        | Edit Header Ospfv2 Update Tos Metric | Stream=${Stream} | Type=Summary | Level=0 | LsaIndex=2 | Index=0 | MetricReserved=1 |\n        | Edit Header Ospfv2 Update Lsa | Stream=${Stream} | Level=0 | Index=3 | Type=SummaryAsbr | TosMetricsCount=2 |\n        | Edit Header Ospfv2 Update Tos Metric | Stream=${Stream} | Type=SummaryAsbr | Level=0 | LsaIndex=3 | Index=0 | MetricReserved=1 |\n        | Edit Header Ospfv2 Update Lsa | Stream=${Stream} | Level=0 | Index=4 | Type=AsExternal | TosMetricsCount=2 |\n        | Edit Header Ospfv2 Update Tos Metric | Stream=${Stream} | Type=AsExternal | Level=0 | LsaIndex=4 | Index=0 | EBit=1 |\n\nSide Effects:\n    - 如果尚未缓存，则会检索并可能缓存流的头部对象。\n\n    - 修改流头部内部状态，在指定的LSA中更新TOS Metric字段。",
  "TesterLibrary.Stream.Header.Routing.rip.edit_header_ripng": "Modifies specific fields of a RIPng (Routing Information Protocol Next Generation) header in a given stream. This function allows editing of the command, version, and reserved fields of the RIPng header at a specified level within the stream's header hierarchy.\n\nParameters:\n    Stream (object or list): A stream object (or a list containing a single stream object) for which the RIPng header is to be edited. The stream object is expected to have a 'handle' attribute that uniquely identifies it in the system.\n    Level (int, optional): The index level of the RIPng header in the stream's header list. Used when there are multiple headers of type 'ripng'. Defaults to 0.\n    Command (int, optional): The value to set for the 'command' field of the RIPng header. Default value: 1, valid range: 1-2. If not None, this will update the command field of the selected header.\n    Version (int, optional): The value to set for the 'version' field of the RIPng header. Default value: 2, valid range: 0-255. If not None, this will update the version field of the selected header.\n    Reserved (int, optional): The value to set for the 'reserved' field of the RIPng header. Default value: 0, valid range: 0-255. If not None, this will update the reserved field of the selected header.\n\nReturns:\n    dict: A dictionary mapping the updated field names ('Command', 'Version', 'Reserved') to their corresponding internal attribute names ('command', 'version', 'reserved') if any updates were successfully applied.\n    bool: Returns False if no fields were updated, i.e., all provided values (Command, Version, Reserved) were None.\n\nSide Effects:\n    - Modifies the attributes of the RIPng header object associated with the stream.\n    - Uses `get_stream_header` internally to retrieve and cache the stream's header objects.\n\nNotes:\n    - This function assumes that the stream has already been configured with a RIPng header.\n    - If multiple RIPng headers exist in the stream, the 'Level' parameter selects which one to edit.\n    - This function does not apply changes directly on the system level; modifications are made to the local header object. A separate action may be required to commit or send the updated stream.",
  "TesterLibrary.Stream.Header.Routing.rip.insert_ripng_entries": "插入RIPng（Routing Information Protocol next generation）条目到指定的流模板头部层级中。该函数用于在给定流量模板的RIPng头部中插入指定数量的条目。\n\n参数:\n    Stream (object 或 list): 流对象或包含单个流对象的列表，用于添加RIPng条目。它必须具有唯一标识系统中流的 'handle' 属性。\n    Level (int, 可选): 在与流关联的RIPng头部列表中选择特定RIPng头部的索引。用于指定插入条目的RIPng头部，默认为0。\n    Count (int, 可选): 要插入的RIPng条目数量，默认为1。\n\n返回值:\n    返回所选RIPng头部的 `insertEntries` 方法的结果。通常表示操作结果（例如成功状态、新插入条目的句柄等）。\n\n副作用:\n    - 可能通过插入新的RIPng条目来修改流结构。\n    - 调用 `get_stream_header`，如果头部尚未缓存，则可能会查询系统并更新内部缓存。\n\n示例:\n    .. code:: RobotFramework\n\n        | ${Stream} | add_stream | Port=${Port} |\n        | ${HeaderTypes} | Create List | EthernetII | IPv4 | OSPFv2Hello |\n        | ${Neighbors} | Create List | 2.2.2.2 | 3.3.3.3 | 4.4.4.4 |\n        | Create Stream Header | Stream=${Stream} | HeaderTypes=${HeaderTypes} |\n        | Edit Header Ospfv2 Hello | Stream=${Stream} | Level=0 | AuthType=2 | Neighbors=${Neighbors} |",
  "TesterLibrary.Stream.Header.Routing.rip.edit_header_ripng_entry": "修改测试仪表流量模板中指定Ripng报文头部的Entry条目内容。\n\n该函数用于编辑给定流量流中的Ripng协议头部中的特定路由条目（Entry）。它支持在具有多个Ripng头部的流中选择特定层级的头部，并进一步选择该头部内的具体路由条目进行修改。可以通过关键字参数选择性地更新IPv6地址、路由标签、前缀长度和度量值等字段。\n\nParameters:\n    Stream (:obj:`StreamTemplate` 或 list): 测试仪表流量对象，表示要修改的流量模板。也可以传入包含单个流量对象的列表，此时仅使用第一个元素。\n    Level (int, optional): 指定要修改的Ripng头部在其所属流中的层级索引，默认为0，取值范围：0-65535。\n    Index (int, optional): 指定要修改的路由条目在Ripng头部中的索引位置，默认为0，取值范围：0-65535。\n    **kwargs (dict): 可选的关键字参数，用于指定需要修改的条目字段：\n        Ipaddr (str, optional): 要设置的新IPv6地址。\n        RouteTag (int or str, optional): 要设置的新路由标签。\n        PrefixLen (int, optional): 要设置的新前缀长度。\n        Metric (int, optional): 要设置的新路由度量值。\n\nReturns:\n    dict: 包含操作结果信息的字典，例如成功修改的字段与对应路径的映射关系。\n\nRaises:\n    ContinuableFailure: 如果底层调用失败，则抛出可继续执行的异常，并附带错误信息。\n\nExample:\n    .. code:: RobotFramework\n\n        | ${Stream} | add_stream | Port=${Port} |\n        | ${HeaderTypes} | Create List | EthernetII | IPv6 | RIPng |\n        | Create Stream Header | Stream=${Stream} | HeaderTypes=${HeaderTypes} |\n        | Edit Header Ripng Entry | Stream=${Stream} | Level=0 | Index=0 | Ipaddr=2001::1 | PrefixLen=64 | Metric=2 |",
  "TesterLibrary.Stream.Header.Routing.rip.edit_header_ripv1": "修改测试仪表流量模板中RIPv1报文头部内容\n\n该函数用于编辑指定流量模板中的RIPv1报文头部字段。可以通过指定层级（Level）来选择特定的RIPv1头部进行修改，并支持对Command、Version和Reserved字段的更新。\n\nArgs:\n\n    Stream (:obj:`StreamTemplate`): 测试仪表流量对象，表示一个流量模板。该对象应包含用于标识流的'handle'属性。\n    \n    Level (int): 指定要修改的RIPv1头部在该流量模板所有RIPv1头部中的层级索引，默认为0。取值范围：0-65535。\n\nKeyword Args:\n\n    Command (int): 可选参数，用于设置RIPv1头部的命令字段（Command），默认值：1，有效取值范围：1-2。\n    \n    Version (int): 可选参数，用于设置RIPv1头部的版本字段（Version），默认值：2，有效取值范围：0-255。\n    \n    Reserved (int): 可选参数，用于设置RIPv1头部的保留字段（Reserved），默认值：0，有效取值范围：0-255。\n\nReturns:\n\n    dict: 返回一个字典，表示实际被修改的字段及其对应的内部属性名（例如 'Command' 对应 'command'）。如果没有任何字段被修改，则返回 False。\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${Stream} | add_stream | Port=${Port} |\n        | ${HeaderTypes} | Create List | EthernetII | IPv4 | RIPv1 |\n        | Create Stream Header | Stream=${Stream} | HeaderTypes=${HeaderTypes} |\n        | Edit Header RIPv1 | Stream=${Stream} | Level=0 | Command=2 | Version=1 | Reserved=0 |\n\nSide Effects:\n\n    - 会修改流量模板中指定层级的RIPv1头部的内部状态。\n    - 调用时可能会触发get_stream_header()方法，从而查询系统并缓存构造的头部信息。",
  "TesterLibrary.Stream.Header.Routing.rip.insert_ripv1_entries": "Inserts RIP version 1 (RIPv1) entries into a specified header of a given stream. This function allows for dynamically adding multiple RIPv1 entry fields at a specific level in the stream's header structure.\n\n### Purpose\nThe purpose of this function is to modify an existing RIPv1 header within a stream by inserting a specified number of entries. This is typically used in network testing scenarios where custom RIPv1 packets need to be constructed with multiple route entries.\n\n### Parameters\n- **Stream** (`object` or `list`): A stream object or a list containing a single stream object. If a list is provided, only the first element is used. The stream object must have a 'handle' attribute that uniquely identifies it within the system.\n- **Level** (`int`, optional): The index of the RIPv1 header in the list of headers of the stream where the entries will be inserted. Defaults to `0`. The valid range is `0-65535`.\n- **Count** (`int`, optional): The number of RIPv1 entries to insert into the selected header. Defaults to `1`.\n\n### Returns\n- The return value depends on the implementation of the `insertEntries` method of the underlying header object. Typically, it may return a status or result indicating whether the insertion was successful. In the case of failure, a `ContinuableFailure` exception is raised by the wrapper function.\n\n### Side Effects\n- Modifies the header structure of the stream by inserting new RIPv1 entries.\n- May trigger internal updates or reconfigurations in the underlying system as a result of modifying the header entries.\n\n### Example Usage\n```robotframework\n| ${Stream} | add_stream | Port=${Port} |\n| ${HeaderTypes} | Create List | EthernetII | IPv4 | RIPv1 |\n| Create Stream Header | Stream=${Stream} | HeaderTypes=${HeaderTypes} |\n| Insert RIPv1 Entries | Stream=${Stream} | Level=0 | Count=2 |\n```",
  "TesterLibrary.Stream.Header.Routing.rip.edit_header_ripv1_entry": "修改测试仪表流量模板中RIPv1报文头部的指定Entry内容。\n\n该函数用于编辑指定流量模板中某一RIPv1头部内的特定Entry字段。可以根据传入的参数更新Afi、Reserved、Reserved1、Reserved2、Ipaddr和Metric等字段，仅更新非None的参数值。\n\n参数:\n    Stream (:obj:`StreamTemplate` 或 list): 测试仪表流量对象，类型为StreamTemplate或包含StreamTemplate的列表。若为列表，则使用第一个元素。\n    Level (int): 指定要修改的RIPv1头部在流中的层级索引，默认为0，取值范围：0-65535。\n    Index (int): 指定要修改的RIPv1头部内Entry的索引位置，默认为0，取值范围：0-65535。\n    **kwargs (可选字段):\n        Afi (int): 要更新的地址族标识符(Address Family Identifier)。\n        Reserved (int): 要更新的保留字段(Reserved)。\n        Reserved1 (int): 要更新的第一个额外保留字段。\n        Reserved2 (int): 要更新的第二个额外保留字段。\n        Ipaddr (str): 要更新的IP地址。\n        Metric (int): 要更新的路由度量值(Metric)。\n\n返回:\n    object: 返回底层`editRipngEntries`方法的结果，通常表示操作是否成功。\n\n示例:\n    .. code:: RobotFramework\n\n        | ${Stream} | add_stream | Port=${Port} |\n        | Create Stream Header | Stream=${Stream} | HeaderTypes=EthernetII, IPv4, RIP |\n        | Edit Header Ripv1 Entry | Stream=${Stream} | Level=0 | Index=0 | Ipaddr=1.1.1.1 | Metric=2 |",
  "TesterLibrary.Stream.Header.Routing.rip.edit_header_ripv2": "修改测试仪表流量模板中RIPv2报文头部内容\n\n该函数用于编辑指定流量模板中的RIPv2协议头部字段。它会检索流量对象中的所有RIPv2头部，并根据提供的Level参数选择特定索引位置的头部进行更新。\n\nArgs:\n    Stream (:obj:`StreamTemplate`): 测试仪表流量对象，需具备唯一标识流的'handle'属性。若传入流列表，则使用第一个流。\n    Level (int): 要修改的RIPv2头部在流量模板中所有RIPv2头部列表中的索引位置，默认值为0。用于处理存在多个RIPv2头部的情况。\n\nKeyword Args:\n    Command (int): 可选参数，设置RIPv2头部的Command字段值，取值范围1-2，默认值：1\n    Version (int): 可选参数，设置RIPv2头部的Version字段值，取值范围0-255，默认值：2\n    Reserved (int): 可选参数，设置RIPv2头部的Reserved字段值，取值范围0-255，默认值：0\n\nReturns:\n    dict or bool: 如果成功修改字段，返回一个字典，将每个修改的字段名映射到其在头部对象中的对应属性名；如果没有字段被修改，返回False。\n\nSide Effects:\n    - 会修改与流量关联的RIPv2头部对象的内部状态\n    - 在执行过程中可能会通过get_stream_header从内部缓存(map_stream_header)获取或缓存流的头部列表\n\nRaises:\n    ContinuableFailure: 当底层实现返回False表示编辑失败时，会抛出此异常",
  "TesterLibrary.Stream.Header.Routing.rip.insert_ripv2_entries": "Inserts RIPv2 route entries into a specified RIPv2 header of a given stream. This function allows for dynamic modification of the RIPv2 header by adding a specified number of route entries at a specific level.\n\nThe function first checks if the provided Stream is a list and extracts the first element if so.\nIt then retrieves all RIPv2 headers from the stream using `get_stream_header`, filters them to only\ninclude those of type 'ripv2', and selects the header at the specified Level index. Finally, it calls\nthe header's `insertEntries` method with the provided Count.\n\nParameters:\n    Stream (object or list): Either a stream object or a list containing a single stream object.\n                             If a list is provided, the first item will be used. The stream object\n                             must have a 'handle' attribute that uniquely identifies it in the system.\n    Level (int, optional): The index of the RIPv2 header in the list of headers of the stream. This is\n                           used when multiple RIPv2 headers are present, typically for nested or\n                           hierarchical configurations. Defaults to 0.\n    Count (int, optional): The number of RIPv2 route entries to insert into the selected header.\n                           Defaults to 1.\n\nReturns:\n    The return value of the underlying header.insertEntries() method, which typically indicates\n    success or failure of the insertion operation.\n\nRaises:\n    ContinuableFailure: If the backend call returns False, indicating a failure in inserting the RIPv2 entries.\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${Stream} | add_stream | Port=${Port} |\n        | insert_ripv2_entries | Stream=${Stream} | Level=0 | Count=3 |",
  "TesterLibrary.Stream.Header.Routing.rip.edit_header_ripv2_entry": "修改测试仪表流量模板中RIPv2报文头部中指定Entry的内容。\n\n该函数用于编辑指定流量模板中某个RIPv2头部内的特定Entry字段内容。通过Level参数定位到具体的RIPv2头部，再通过Index参数定位到该头部中的具体Entry，并根据提供的关键字参数进行修改。仅修改明确提供的字段，其余字段保持不变。\n\nParameters:\n    Stream (:obj:`StreamTemplate` or list): 测试仪表流量对象，可以是一个StreamTemplate对象或者包含该对象的列表。该对象应具有唯一标识的 'handle' 属性。\n    Level (int, optional): 在流量模板的所有RIPv2头部中，要编辑的头部的层级索引，默认为0，取值范围：0-65535。\n    Index (int, optional): 在选定的RIPv2头部中，要修改的Entry的索引位置，默认为0，取值范围：0-65535。\n\nKeyword Args:\n    Afi (int, optional): 设置Address Family Identifier（地址族标识符）字段的值。\n    RouteTag (any, optional): 设置路由标签(Route Tag)字段的值。\n    SubnetMask (any, optional): 设置子网掩码(Subnet Mask)字段的值。\n    NextHop (str, optional): 设置下一跳IP地址(Next Hop)字段的值。\n    Ipaddr (str, optional): 设置目标IP地址(Ipaddr)字段的值。\n    Metric (int, optional): 设置Metric（路由开销）字段的值。\n\nReturns:\n    any: 返回底层API `editRipngEntries` 的执行结果，通常表示操作是否成功。\n\nRaises:\n    ContinuableFailure: 如果底层调用返回False，表示编辑失败，并抛出异常，测试可继续执行。\n\nExamples:\n    .. code:: RobotFramework\n\n        | ${Stream} | add_stream | Port=${Port} |\n        | ${HeaderTypes} | Create List | EthernetII | IPv4 | RIPv2 |\n        | Create Stream Header | Stream=${Stream} | HeaderTypes=${HeaderTypes} |\n        | Edit Header Ripv2 Entry | Stream=${Stream} | Level=0 | Index=0 | Afi=2 | Ipaddr=192.168.1.1 | Metric=1 |",
  "TesterLibrary.Wizard.benchmark.create_benchmark": "创建测试仪表基准测试套件\n\n该函数用于通过指定的基准测试类型和测试项创建网络设备性能测试套件。它封装了向导式配置流程，支持多种RFC标准及非对称流量模式的基准测试。\n\nArgs:\n    Type (str): 基准测试套件类型，默认值: rfc2544，支持的类型包括:\n\n        rfc2544 - RFC 2544吞吐量与延迟测试\n        rfc2889 - RFC 2889交换机性能测试\n        rfc3918 - RFC 3918组播性能测试\n        Asymmetric - 非对称流量测试模式\n\n    Items (list): 要包含在测试套件中的测试项列表。不同测试类型支持不同的测试项目：\n\n        rfc2544测试项:\n            throughput - 吞吐量测试\n            backtoback - 背靠背帧测试\n            frameloss - 丢包率测试\n            latency - 时延测试\n            \n        rfc2889测试项:\n            addressCachingCapacity - 地址缓存容量测试\n            addressLearningRate - 地址学习速率测试\n            broadcastLatency - 广播帧转发测试\n            broadcastForwarding - 广播帧时延测试\n            congestionControl - 拥塞控制测试\n            erroredFrameFilter - 错误帧过滤测试\n            forwarding - 转发测试\n            \n        rfc3918测试项:\n            mixedThroughput - 混合吞吐量测试\n            scaledGroupForwarding - 组转发矩阵测试\n            multicastThroughput - 聚合组播吞吐量测试\n            multicastGroupCapacity - 组播组容量测试\n            multicastLatency - 组播转发时延测试\n            multicastJoinLeaveLatency - 加入/离开时延测试\n\nReturns:\n    tuple: 返回两个元素组成的元组:\n\n        1. wizard_config object: 基准测试配置向导对象，可用于后续配置操作\n        2. list of test_config objects: 测试项配置对象列表，每个对象对应一个测试项\n\nExamples:\n    robotframework 示例:\n\n.. code:: robotframework\n\n    | ${Items} | Create List | throughput | frameloss |\n    | ${Wizard} | ${Config} | Create Benchmark | Type=rfc2544 | Items=${Items} |\n    | Relate Benchmark Ports | Config=${Wizard} | Ports=${Ports} |\n    | Create Benchmark Streams | Config=${Wizard} | Items=@{RFC2544Items} | Type=eth | SrcPoints=@{SrcPoints} | DstPoints=@{SrcPoints} | Mode=meshed | Mapping=roundrobin |\n    | Edit Benchmark Learning | Configs=${Config} | Frequency=once |\n    | Edit Benchmark Duration | Config=${Config} | Count=${L2_TestTime} |\n    | Edit Benchmark Frame | Config=${Config} | Type=custom | Custom=@{L2_FrameSize} |\n    | Edit Benchmark Search | Config=${Config} | Init=100 |\n    | Expand Benchmark | Config=${Wizard} |",
  "TesterLibrary.Wizard.benchmark.relate_benchmark_ports": "Relates the specified benchmark ports to a given configuration.\n\nThis function wraps the `relate_ports` method of the provided `Config` object, delegating the logic of associating benchmark ports with the test configuration. It is typically used in a testing framework to define which physical or logical ports should be utilized for performance benchmarking (e.g., throughput, frame loss tests).\n\nArgs:\n    Config (:obj:`wizard_config`): A configuration object representing the current benchmark setup. This object must implement a `relate_ports` method that accepts a list of port objects.\n    \n    Ports (list of :obj:`Port`): A list of port objects that should be associated with the benchmark configuration. These ports are generally pre-configured and intended for use in traffic generation and measurement.\n\nReturns:\n    bool: True if the ports were successfully related to the configuration; False otherwise.\n\nRaises:\n    ContinuableFailure: If the operation fails (i.e., returns False), an exception is raised to signal failure while allowing test execution to continue if appropriate.\n\nExample:\n    robotframework:\n\n.. code:: robotframework\n\n    | ${Items} | Create List | throughput | frameloss |\n    | ${Wizard} | ${Config} | Create Benchmark | Type=rfc2544 | Items=${Items} |\n    | Relate Benchmark Ports | Config=${Wizard} | Ports=${Ports} |\n    | Create Benchmark Streams | Config=${Wizard} | Items=@{RFC2544Items} | Type=eth | SrcPoints=@{SrcPoints} | DstPoints=@{SrcPoints} | Mode=meshed | Mapping=roundrobin |\n    | Edit Benchmark Learning | Configs=${Config} | Frequency=once |\n    | Edit Benchmark Duration | Config=${Config} | Count=${L2_TestTime} |\n    | Edit Benchmark Frame | Config=${Config} | Type=custom | Custom=@{L2_FrameSize} |\n    | Edit Benchmark Search | Config=${Config} | Init=100 |\n    | Expand Benchmark | Config=${Wizard} |",
  "TesterLibrary.Wizard.benchmark.create_benchmark_streams": "创建测试仪表基准流量流\n\nArgs:\n\n    Config (:obj:`wizard_config`): 基准测试配置对象，提供 `create_streams` 方法用于实际创建流量流\n\n    Items (int or list): 指定要创建的测试项或流的数量。可以是整数表示数量，也可以是列表指定每个流的测试项\n\n    Type (str): 流类型，定义流量的协议或类型，支持值包括：\n\n        eth\n\n        ipv4\n\n        ipv6\n\n    SrcPoints (list): 源端点对象列表，表示流量的起点（接口或端点）\n\n    DstPoints (list): 目的端点对象列表，表示流量的终点（接口或端点）\n\n    Bidirectional (bool, optional): 是否启用双向流量，默认为 False\n\n    Mode (str, optional): 定义源和目的的映射模式，默认为 '1v1'，支持以下模式：\n\n        1v1 (one-to-one)\n\n        m2m (many-to-many)\n\n        meshed\n\n        congestion\n\n    Mapping (str, optional): 端点映射策略，默认为 'roundrobin'，支持：\n\n        roundrobin (轮询映射)\n\n        manytomany (多对多映射)\n\n    Monitors (tuple, optional): 要附加的监控组件或配置，默认为空元组，用于镜像端口等用途\n\nReturns:\n\n    object: 返回 `Config.create_streams` 方法的结果，通常表示创建的流量流对象或操作状态\n\nRaises:\n\n    ContinuableFailure: 如果返回结果为 False，则抛出可继续执行的失败异常，并附带函数名作为错误信息的一部分\n\nExamples:\n    robotframework 示例:\n\n.. code:: robotframework\n\n    | ${Items} | Create List | throughput | frameloss |\n    | ${Wizard} | ${Config} | Create Benchmark | Type=rfc2544 | Items=${Items} |\n    | Relate Benchmark Ports | Config=${Wizard} | Ports=${Ports} |\n    | Create Benchmark Streams | Config=${Wizard} | Items=@{RFC2544Items} | Type=eth | SrcPoints=@{SrcPoints} | DstPoints=@{SrcPoints} | Mode=meshed | Mapping=roundrobin |\n    | Edit Benchmark Learning | Configs=${Config} | Frequency=once |\n    | Edit Benchmark Duration | Config=${Config} | Count=${L2_TestTime} |\n    | Edit Benchmark Frame | Config=${Config} | Type=custom | Custom=@{L2_FrameSize} |\n    | Edit Benchmark Search | Config=${Config} | Init=100 |\n    | Expand Benchmark | Config=${Wizard} |\n\nDescription:\n    此函数是对 `Config.create_streams` 方法的封装，用于生成具有指定特性的基准流量流。\n    支持灵活配置流量模式以进行性能测试，包括源/目的映射、双向流量、监控端口等功能。\n    函数内部调用底层 renix API 创建流量流，并在失败时抛出异常。",
  "TesterLibrary.Wizard.benchmark.benchmark_stream_use_exist": "编辑测试套件以检查配置中是否使用已存在的流量模板。\n\n该函数用于验证给定的测试配置对象中是否存在指定的流量模板。若所有指定的流量模板均存在，则返回 True；否则返回 False。\n\n参数:\n    Config (object 或 iterable [list, set, tuple]) : 测试配置对象或包含配置对象的可迭代结构。\n        若传入的是 list、set 或 tuple，仅会使用其中的第一个元素进行检查。\n        该配置对象需实现 `use_stream_exist` 方法，以便执行流的存在性检查。\n\n    Streams (str 或 list of str) : 需要检查存在的流量模板名称。可以是单个字符串，也可以是字符串列表。\n\n返回值:\n    bool : 若所有指定的流量模板在提供的配置中均存在，则返回 True；否则返回 False。\n\n异常处理:\n    - 如果 `Config` 不是一个有效的配置对象（即未实现 `use_stream_exist` 方法），可能会抛出 AttributeError。\n    - 该函数使用了 `@abnormal_check()` 装饰器，可能对异常输入进行了额外处理。\n\n注意事项:\n    - 若底层调用返回 False，该函数将抛出 ContinuableFailure 异常，表示操作失败但可继续执行后续步骤。\n\n示例(robotframework):\n\n.. code:: robotframework\n\n    | @{Items} | Create List | throughput | frameloss |\n    | @{FrameSize} | Create List | 256 | 1024 | 16383 |\n    | ${Streams} | Add Stream | Type=binding | | SrcPoints=@{SrcPoints} | DstPoints=@{SrcPoints} |\n    | ${Wizard} | ${Config} | Create Benchmark | Type=rfc2544 | Items=${Items} |\n    | Edit Benchmark Path | Configs=${Config} | Path=C:/test |\n    | Relate Benchmark Ports | Config=${Wizard} | Ports=${Ports} |\n    | Benchmark Stream Use Exist | Config=${Wizard} | Streams=${Streams} |\n    | Edit Benchmark Learning | Configs=${Config} | Frequency=once |\n    | Edit Benchmark Duration | Config=${Config} | Count=1000 |\n    | Edit Benchmark Frame | Config=${Config} | Type=custom | Custom=@{FrameSize} |\n    | Edit Benchmark Search | Config=${Config} | Init=100 |\n    | Expand Benchmark | Config=${Wizard} |",
  "TesterLibrary.Wizard.benchmark.expand_benchmark": "测试仪表扩展测试套件配置\n\n该函数用于触发并执行基准测试配置的扩展操作，通过调用传入的配置对象的 `expand_benchmark` 方法来实现。该函数封装了异常检查逻辑，确保在出现异常时能够进行适当的处理。\n\nArgs:\n\n    Config (:obj:`wizard_config`): 仪表测试配置对象，必须包含 `expand_benchmark` 方法以执行实际的扩展操作。\n\nReturns:\n\n    object: 返回 `Config.expand_benchmark()` 的执行结果，具体类型取决于配置对象的实现。\n\nRaises:\n\n    ContinuableFailure: 如果 `expand_benchmark` 返回 False，则抛出可继续执行的失败异常，并附带相应的错误信息。\n\nExamples:\n    robotframework:\n\n.. code:: robotframework\n\n    | ${Items} | Create List | throughput | frameloss |\n    | ${Wizard} | ${Config} | Create Benchmark | Type=rfc2544 | Items=${Items} |\n    | Relate Benchmark Ports | Config=${Wizard} | Ports=${Ports} |\n    | Create Benchmark Streams | Config=${Wizard} | Items=@{RFC2544Items} | Type=eth | SrcPoints=@{SrcPoints} | DstPoints=@{SrcPoints} | Mode=meshed | Mapping=roundrobin |\n    | Edit Benchmark Learning | Configs=${Config} | Frequency=once |\n    | Edit Benchmark Duration | Config=${Config} | Count=${L2_TestTime} |\n    | Edit Benchmark Frame | Config=${Config} | Type=custom | Custom=@{L2_FrameSize} |\n    | Edit Benchmark Search | Config=${Config} | Init=100 |\n    | Expand Benchmark | Config=${Wizard} |",
  "TesterLibrary.Wizard.benchmark.del_benchmark": "删除当前配置的测试仪表测试套件（基准测试配置），用于重置或清除之前定义的基准测试环境。\n\n该函数通过调用 RenixAPI 中的 `clear_smart_scripter_commands()` 方法来移除或清空当前的基准测试设置，通常用于在测试执行后清理与基准测试相关的命令或配置。\n\n返回值:\n    bool: 清除操作的结果，成功返回 True，失败返回 False。\n\n异常:\n    如果删除基准测试失败，则会抛出带有 \"Failure\" 消息的 `ContinuableFailure` 异常，并包含当前函数名作为错误信息的一部分。\n\n示例:\n    robotframework:\n\n.. code:: robotframework\n\n    | ${Items} | Create List | throughput | frameloss |\n    | ${Wizard} | ${Config} | Create Benchmark | Type=rfc2544 | Items=${Items} |\n    | Relate Benchmark Ports | Config=${Wizard} | Ports=${Ports} |\n    | Create Benchmark Streams | Config=${Wizard} | Items=@{RFC2544Items} | Type=eth | SrcPoints=@{SrcPoints} | DstPoints=@{SrcPoints} | Mode=meshed | Mapping=roundrobin |\n    | Edit Benchmark Learning | Configs=${Config} | Frequency=once |\n    | Edit Benchmark Duration | Config=${Config} | Count=${L2_TestTime} |\n    | Edit Benchmark Frame | Config=${Config} | Type=custom | Custom=@{L2_FrameSize} |\n    | Edit Benchmark Search | Config=${Config} | Init=100 |\n    | Expand Benchmark | Config=${Wizard} |\n    | Del Benchmark |",
  "TesterLibrary.Wizard.benchmark.edit_benchmark_frame": "编辑测试套件帧长度设置\n\n该函数用于配置网络性能测试中的帧长度参数，支持多种帧长类型（如固定、随机、步进、自定义和IMIX混合流量），并封装了对底层 `Config.edit_frame()` 方法的调用。它确保传入的 Config 参数是有效的配置对象，并处理不同格式的输入。\n\nArgs:\n\n    Config (:obj:`config`): 仪表测试测试套件测试项对象。如果传入的是列表、集合或元组，则使用第一个元素。\n    \n    Type (str, optional): 帧长度类型，默认值为 'custom'，支持以下类型：\n        \n        fixed: 固定帧长\n        \n        random: 随机帧长\n        \n        step: 按步长递增帧长\n        \n        custom: 自定义帧长列表\n        \n        imix: 使用 IMIX 模板生成混合帧长\n    \n    Length (int, optional): 固定帧长值，默认为 128，取值范围：58 - 16383 字节\n    \n    Min (int, optional): 最小帧长值，默认为 128，取值范围：58 - 16383 字节\n    \n    Max (int, optional): 最大帧长值，默认为 256，取值范围：58 - 16383 字节\n    \n    Start (int, optional): 帧长起始值，默认为 128，取值范围：58 - 16383 字节\n    \n    End (int, optional): 帧长结束值，默认为 256，取值范围：58 - 16383 字节\n    \n    Step (int, optional): 步长值，默认为 128，取值范围：58 - 16383 字节\n    \n    Custom (list, optional): 自定义帧长列表，默认值为 [64, 128, 256, 512, 1024, 1280, 1518]，每个值需在 58 - 16383 范围内\n    \n    ImixTemplates (list, optional): IMIX模板列表，默认为 None，表示不使用 IMIX 模式\n\nReturns:\n\n    bool: 如果配置成功返回 True，否则抛出异常 ContinuableFailure 并附带错误信息\n\nExamples:\n    robotframework 示例：\n\n.. code:: robotframework\n\n    | @{Items} | Create List | throughput | frameloss |\n    | @{FrameSize} | Create List | 256 | 1024 | 16383 |\n    | ${Wizard} | ${Config} | Create Benchmark | Type=rfc2544 | Items=${Items} |\n    | Edit Benchmark Path | Configs=${Config} | Path=C:/test |\n    | Relate Benchmark Ports | Config=${Wizard} | Ports=${Ports} |\n    | Create Benchmark Streams | Config=${Wizard} | Items=@{RFC2544Items} | Type=eth | SrcPoints=@{SrcPoints} | DstPoints=@{SrcPoints} | Mode=meshed | Mapping=roundrobin |\n    | Edit Benchmark Learning | Configs=${Config} | Frequency=once |\n    | Edit Benchmark Duration | Config=${Config} | Count=1000 |\n    | Edit Benchmark Frame | Config=${Config} | Type=custom | Custom=@{FrameSize} |\n    | Edit Benchmark Search | Config=${Config} | Init=100 |\n    | Expand Benchmark | Config=${Wizard} |",
  "TesterLibrary.Wizard.benchmark.edit_benchmark_latency": "Modifies the latency settings for one or more configuration objects in a test suite, allowing customization of delay behavior before and after traffic processing.\n\n### Purpose:\nThis function is used to configure latency-related parameters across multiple test configurations. It applies uniform settings for latency type and delays (before and after traffic processing) to ensure consistent test conditions during network performance benchmarking.\n\n### Parameters:\n\n- **Configs** (`list` of `config` objects or a single `config` object):  \n  The test configuration(s) to which latency settings will be applied. If a single config object is provided, it will be treated as a list internally.\n\n- **Type** (`str`, optional, default: `'FIFO'`):  \n  Defines the queuing or latency model to be used. Supported values typically include:\n  - `FIFO` (First In First Out)\n  - `LIFO` (Last In First Out)\n  - `LILO` (Last In Last Out)\n  - `FILO` (First In Last Out)\n\n- **DelayBefore** (`int`, optional, default: `2`, range: `1–3600`):  \n  Delay time (in seconds) to wait **before** starting traffic streams. This ensures stable system state before measurement begins.\n\n- **DelayAfter** (`int`, optional, default: `10`, range: `1–3600`):  \n  Delay time (in seconds) to wait **after** stopping traffic streams. This allows time for residual data or measurements to settle.\n\n### Returns:\n\n- **bool**:  \n  Returns `True` if the latency settings were successfully applied to all configurations.  \n  Returns `False` if any configuration failed to apply the settings (in such case, a `ContinuableFailure` exception is raised).\n\n### Behavior:\nThe function wraps the backend method `renix.edit_benchmark_latency`, applying the specified latency settings to each configuration in the list via its internal `edit_latency` method. It ensures that all configurations are updated consistently.\n\n### Example Usage (Robot Framework):\n\n```robotframework\n| @{Items} | Create List | throughput | frameloss |\n| ${Wizard} | ${Config} | Create Benchmark | Type=rfc2544 | Items=${Items} |\n| Edit Benchmark Latency | Config=${Config} | Type=LIFO | DelayBefore=5 | DelayAfter=15 |\n```\n\nThis example creates a benchmark and then modifies its latency settings to use LIFO queuing with 5 seconds delay before traffic starts and 15 seconds after traffic stops.",
  "TesterLibrary.Wizard.benchmark.edit_benchmark_learning": "编辑测试套件地址学习设置\n\n该函数用于配置一个或多个测试套件的地址学习参数。它将指定的学习设置应用到提供的每个配置对象上，通常通过调用每个对象的 `edit_address_learning` 方法来实现。\n\nArgs:\n\n    Configs (list (:obj:`config`)): 仪表测试测试套件测试项对象object列表。\n        支持传入单个配置对象或配置对象的列表。\n\n    Frequency (str): 学习频率, 默认值：once, 支持以下类型:\n        once: 每次测试开始时只学习一次\n        trial: 每次试验开始时学习\n        frame: 每帧数据包发送前学习\n        iter: 每次迭代开始时学习\n\n    EnableLearning (bool): 使能地址学习, 默认值: True\n        如果为True，则启用地址学习；如果为False，则禁用地址学习。\n\n    LearningRate (int): 地址学习速率，单位: 帧/秒, 默认值: 1000, 范围: 1-14880952\n        表示每秒发送多少帧用于地址学习。\n\n    LearningRepeat (int): 学习重复次数, 默认值: 5, 范围: 1-65536\n        表示地址学习过程重复执行的次数。\n\n    DelayBefore (int): 学习延迟时间，单位: 秒, 默认值: 2, 范围: 1-65536\n        表示在开始地址学习前等待的时间（秒）。\n\n    EnableArp (bool): 使能三层ARP学习, 默认值: False\n        如果为True，则启用ARP(地址解析协议)学习；如果为False，则禁用ARP学习。\n\n    ArpRate (int): ARP学习速率，单位: 包/秒, 默认值: 1000, 范围: 1-14880952\n        表示每秒发送多少个ARP请求用于ARP学习。\n\n    ArpRepeat (int): ARP学习重复次数, 默认值: 5, 范围: 1-65536\n        表示ARP学习过程重复执行的次数。\n\nReturns:\n\n    bool: 布尔值Bool (范围：True / False)\n        返回操作是否成功的结果。如果返回False，则会抛出ContinuableFailure异常。\n\nExamples:\n    robotframework:\n\n.. code:: robotframework\n\n    | Edit Benchmark Learning | Config=${Config} | Frequency=trial | EnableLearning=True |",
  "TesterLibrary.Wizard.benchmark.edit_benchmark_duration": "编辑测试套件的基准测试时长设置。\n\n该函数用于修改指定测试配置的基准测试持续时间。如果传入的配置为一个列表，则会使用列表中的第一个配置对象进行修改。其底层调用的是配置对象的 `edit_duration` 方法，并将试验次数（Trial）、模式（Mode）和计数值（Count）作为参数传递，以更新测试时长。\n\n参数说明：\n- Config (:obj:`config` 或 list): 测试配置对象或包含多个配置对象的列表。若为列表，仅使用第一个元素。\n- Trial (int, 可选): 试验次数，用于区分不同的测试运行实例，默认值为 1。\n- Mode (str, 可选): 持续时间单位或测量模式，默认值为 'second'，支持的值包括 'second'（秒）和 'burst'（突发帧模式）。\n- Count (int, 可选): 持续时间的具体数值，若 Mode 为 'second' 表示秒数，若为 'burst' 表示突发帧数量，默认值为 100，取值范围为 1 到 80000000。\n\n返回值：\n- bool: 如果操作成功则返回 True，否则返回 False。\n\n示例：\n    robotframework:\n\n.. code:: robotframework\n\n    | Edit Benchmark Duration | Config=${Config} | Trial=10 | Mode=burst |",
  "TesterLibrary.Wizard.benchmark.edit_benchmark_transport_layer": "编辑测试套件的传输层配置，支持设置报文头类型及源/目的端口参数。\n\nArgs:\n\n    Configs (list (:obj:`config`)): 仪表测试测试套件测试项对象object列表。可以传入单个配置对象或多个配置对象组成的列表、集合或元组。\n\n    HeaderType (str, optional): 报文头类型，默认值: none，支持: none tcp udp。表示使用的传输层协议类型。\n\n    EnableRandomPort (bool, optional): 使能随机端口，默认值: True。若为True，则在运行时使用随机端口；否则使用指定的端口配置。\n\n    SrcPortBase (int, optional): 源端口起始值，默认值: 7，范围: 0-65535。\n\n    SrcPortStep (int, optional): 源端口步长，默认值: 1，范围: 0-65535。用于生成多个源端口时的递增步长。\n\n    SrcPortCount (int, optional): 源端口数量，默认值: 0，范围: 0-65535。0 表示仅使用一个源端口（即SrcPortBase）。\n\n    DstPortBase (int, optional): 目的端口起始值，默认值: 7，范围: 0-65535。\n\n    DstPortStep (int, optional): 目的端口步长，默认值: 1，范围: 0-65535。用于生成多个目的端口时的递增步长。\n\n    DstPortCount (int, optional): 目的端口数量，默认值: 0，范围: 0-65535。0 表示仅使用一个目的端口（即DstPortBase）。\n\nReturns:\n\n    bool: 编辑成功返回True，失败抛出ContinuableFailure异常。\n\nExamples:\n    robotframework:\n\n.. code:: robotframework\n\n    | Edit Benchmark Transport Layer | Configs=${Configs} | SrcPortBase=1000 | DstPortBase=2000 |",
  "TesterLibrary.Wizard.benchmark.edit_benchmark_path": "修改一个或多个配置对象的基准测试结果路径。\n\n该函数接受单个配置对象或配置对象列表，并将每个配置的基准测试路径更新为指定的新路径。它确保所有提供的配置对象都指向新的基准路径。\n\n参数:\n    Configs (object 或 list of objects): 需要更新基准路径的配置对象或对象列表。如果提供的是单个对象，函数内部会将其转换为列表以统一处理。\n\n    Path (str): 新的文件系统路径，用于存储基准测试结果。该路径必须存在，否则会引发错误。\n\n返回值:\n    bool: 始终返回 True，表示操作成功执行。\n\n描述:\n    对于 `Configs` 中的每一个配置对象，此函数调用其 `edit_result_path` 方法，并传入新的路径 `Path`。这通常用于在测试执行或配置设置期间将基准测试输出重定向到不同的目录。\n\n示例:\n    robotframework:\n\n    .. code:: robotframework\n\n        | Edit Benchmark Path | Configs=${Configs} | Path=${Path} |",
  "TesterLibrary.Wizard.benchmark.edit_benchmark_result_file_name": "Modifies the result file name settings for a benchmark configuration.\n\nThis function wraps a call to `Config.edit_result_file_name()` and provides options\nto customize the naming of the benchmark result file. If `Config` is provided as a \nlist, set, or tuple, the first element is used for the operation.\n\nParameters:\n-----------\nConfig : object or iterable (list, set, tuple)\n    A configuration object that has the method `edit_result_file_name`. If an iterable \n    is passed, the first element of the iterable is used.\n\nEnableCustomResult : bool, optional (default: False)\n    If True, enables custom naming for the result file. If False, uses the default naming logic.\n\nResultFileName : str or None, optional (default: None)\n    The custom name to assign to the result file. If None and `EnableCustomResult` is True, \n    a default custom name may be generated depending on implementation in the underlying method.\n\nAddTimeStamp : bool, optional (default: True)\n    If True, appends a timestamp to the result file name to ensure uniqueness. \n    Only effective if `EnableCustomResult` is also True.\n\nReturns:\n--------\nbool\n    Always returns True to indicate successful execution of the file name editing process.\n\nNotes:\n------\nThis function assumes that `Config` or the first element of `Config` has the method \n`edit_result_file_name` with matching parameters. No validation is performed on the type \nor interface of `Config` beyond checking for common iterables.",
  "TesterLibrary.Wizard.benchmark.edit_benchmark_search": "编辑测试套件的基准搜索参数，用于配置或修改性能基准测试的行为，例如设置搜索模式、速率范围、步长、精度、丢包率接受阈值以及延迟相关选项。\n\n### 参数说明：\n\n- **Config** (`config` 对象):  \n  测试配置对象，必须包含 `edit_search` 方法。该对象将被直接修改以反映新的基准搜索设置。\n\n- **Mode** (`str`, 可选，默认: `'binary'`):  \n  指定搜索算法的类型，支持的模式包括：\n  - `'binary'`: 二分法查找\n  - `'step'`: 步进式查找\n  - `'combo'`: 组合策略\n\n- **Lower** (`int` 或 `float`, 可选，默认: `1`):  \n  设置搜索的下限速率（百分比），有效范围：0.001 - 100。\n\n- **Upper** (`int` 或 `float`, 可选，默认: `100`):  \n  设置搜索的上限速率（百分比），有效范围：0.001 - 100。\n\n- **Init** (`int` 或 `float`, 可选，默认: `10`):  \n  初始搜索速率（百分比），有效范围：0.001 - 100。\n\n- **Step** (`int` 或 `float`, 可选，默认: `10`):  \n  步进模式下的步长（百分比），有效范围：0.001 - 100。\n\n- **Resolution** (`int` 或 `float`, 可选，默认: `1`):  \n  搜索精度（百分比），即最小调整粒度，有效范围：0.001 - 100。\n\n- **Ratio** (`int` 或 `float`, 可选，默认: `50`):  \n  在二分法中用于确定中间点比例（百分比），有效范围：0.001 - 99.9999。\n\n- **Acceptance** (`int` 或 `float`, 可选，默认: `0`):  \n  可接受的丢包率阈值（百分比），用于判断结果是否可接受，有效范围：0 - 100。\n\n- **Ignore** (`bool`, 可选，默认: `False`):  \n  如果为 `True`，则忽略上下限检查。\n\n- **EnableLatency** (`bool`, 可选，默认: `False`):  \n  是否启用时延监控功能。\n\n- **Maxlatency** (`int` 或 `float`, 可选，默认: `30`):  \n  最大允许时延，仅在 `EnableLatency=True` 时生效。\n\n### 返回值：\n\n- `bool`:  \n  成功返回 `True`，失败返回 `False`。若返回 `False`，函数会抛出 `ContinuableFailure` 异常。\n\n### 示例（Robot Framework）：\n\n```robotframework\n| Edit Benchmark Search | Config=${Config} | Mode=step | Init=1 | Step=10 |\n```\n\n### 功能描述：\n\n此函数封装了对底层配置对象 `Config.edit_search()` 的调用，用于灵活地定义和调整性能基准测试过程中的搜索策略与参数。适用于自动化网络设备性能测试场景，如吞吐量测试、时延测试等。",
  "TesterLibrary.Wizard.benchmark.edit_benchmark_traffic_load_loop": "编辑测试套件流量负载循环设置\n\n该函数用于修改指定基准测试配置的流量负载循环参数。根据不同的负载模式（LoadMode），可以设置固定负载、随机负载、步进负载或自定义负载序列，以实现不同场景下的性能测试需求。\n\nArgs:\n    Config (:obj:`config` 或 list/set/tuple): 测试配置对象。如果传入的是列表、集合或元组，则使用第一个元素作为配置对象。\n    LoadUnit (str): 负载单位，默认值: 'percent'，支持类型包括:\n\n        percent (百分比)\n\n        fps (帧每秒)\n\n        mbps (兆比特每秒)\n\n        kbps (千比特每秒)\n\n        bps (比特每秒)\n\n        Bps (字节每秒)\n\n        ifg (帧间隔)\n\n    LoadMode (str): 负载模式，默认值: 'custom'，支持类型包括:\n\n        fixed (固定负载)\n\n        random (随机负载)\n\n        step (步进负载)\n\n        custom (自定义负载序列)\n\n    FixedLoad (int 或 float): 固定负载值，仅在 LoadMode 为 'fixed' 时生效，默认值: 10，范围: 0.001 - 100\n    LoadMin (int 或 float): 最小负载值，用于某些负载模式（如随机或范围）中的下限，默认值: 10，范围: 0.001 - 100\n    LoadMax (int 或 float): 最大负载值，用于某些负载模式（如随机或范围）中的上限，默认值: 50，范围: 0.001 - 100\n    LoadStart (int 或 float): 负载起始值，用于步进或迭代模式，默认值: 10，范围: 0.001 - 100\n    LoadEnd (int 或 float): 负载结束值，用于步进或迭代模式，默认值: 50，范围: 0.001 - 100\n    LoadStep (int 或 float): 负载步长，用于步进模式中从 LoadStart 到 LoadEnd 的递增步长，默认值: 10，范围: 0.001 - 100\n    LoadCustom (list 或 tuple): 自定义负载值列表，用于 LoadMode 为 'custom' 时的负载序列，默认值: [10, 20, 50]\n\nReturns:\n    bool: 如果操作成功返回 True，否则返回 False。若返回 False，将抛出 ContinuableFailure 异常。\n\nExamples:\n    robotframework 示例：\n\n.. code:: robotframework\n\n    | Edit Benchmark Traffic Load Loop | Config=${Config} | LoadUnit=percent | LoadMode=fixed | FixedLoad=20 |\n    | Edit Benchmark Traffic Load Loop | Config=${Config} | LoadUnit=kbps | LoadMode=step | LoadStart=10 | LoadEnd=100 | LoadStep=20 |\n    | Edit Benchmark Traffic Load Loop | Config=${Config} | LoadUnit=fps | LoadMode=custom | LoadCustom=[10, 30, 60, 90] |",
  "TesterLibrary.Wizard.benchmark.edit_benchmark_backtoback_binary_search": "编辑RFC2544测试套件背靠背测试的持续时间参数，采用二分查找方法进行调整。\n\n该函数用于配置背靠背（back-to-back）测试的时间阈值，主要作为对配置对象 `Config` 的 `edit_duration_parameters` 方法的封装调用。如果传入的是配置对象的序列（如列表、集合或元组），则仅使用第一个配置对象进行编辑。\n\nArgs:\n    Config (:obj:`object` 或 iterable of :obj:`object`): 测试配置对象，需支持 `edit_duration_parameters` 方法。\n        如果是可迭代对象，则仅使用第一个元素。\n\n    MinDuration (float): 调整测试持续时间时使用的最小时间值（单位：秒），默认值为 0.000064。\n\n    MinFrameCount (int): 测试所需的最小帧数，默认值为 1。\n\n    DurationResolution (float): 二分查找过程中调整持续时间的步长精度（单位：秒），默认值为 0.0001。\n\n    FrameCountResolution (int): 二分查找过程中调整帧数的步长精度，默认值为 100。\n\n    AcceptFrameLoss (int 或 bool): 是否允许丢包。若为非零值或 True，则允许丢包；否则不允许，默认值为 0。\n\nReturns:\n    object: 返回调用 `edit_duration_parameters` 方法后得到的结果，通常是更新了持续时间参数的配置对象。\n\nRaises:\n    ContinuableFailure: 如果底层调用返回 False，表示操作失败并抛出可继续执行的异常。\n\nExamples:\n    robotframework:\n\n    .. code:: robotframework\n\n        Edit Benchmark Backtoback Binary Search | Config=${Config} | MinDuration=1 | MinFrameCount=10",
  "TesterLibrary.Wizard.benchmark.edit_benchmark_burst_count_loop": "编辑RFC2889测试套件中的突发帧数量循环配置，用于控制广播帧转发测试、拥塞控制测试、错误帧过滤测试和转发测试中的帧突发行为。\n\n该函数根据指定的模式（步进或自定义）来设置突发帧数。如果 Config 是可迭代对象（如列表、集合、元组），则仅使用其第一个元素进行配置。\n\n参数说明：\n-----------\nConfig : object 或 iterable (list, set, tuple)\n    测试配置对象，包含突发帧数的设置信息。若传入的是可迭代对象，则仅使用第一个元素进行配置。\n\nMode : str, 可选（默认值：'step'）\n    设置突发帧数的模式，支持以下两种模式：\n    - 'step'：从 Start 开始，以 Step 为步长递增，直到达到或超过 End。\n    - 'custom'：使用 Custom 提供的自定义突发帧数值列表。\n\nStart : int, 可选（默认值：1）\n    当 Mode 为 'step' 时，表示突发帧数的起始值。范围：1-65535。\n\nEnd : int, 可选（默认值：1）\n    当 Mode 为 'step' 时，表示突发帧数的结束值。范围：1-65535。\n\nStep : int, 可选（默认值：1）\n    当 Mode 为 'step' 时，表示每次突发帧数递增的步长。范围：1-65535。\n\nCustom : list[int], 可选（默认值：[1, 2]）\n    当 Mode 为 'custom' 时，提供一个自定义的突发帧数序列。例如 [100, 200, 300]。\n\n返回值：\n--------\nbool\n    表示操作是否成功的布尔值（True / False）。如果返回 False，将抛出 ContinuableFailure 异常。\n\n示例（Robot Framework）：\n-------------------------\n.. code:: robotframework\n\n    Edit Benchmark Burst Count Loop | Config=${Config} | Mode=custom | Custom=${custom} |",
  "TesterLibrary.Wizard.benchmark.edit_benchmark_address_learning_capacity": "编辑RFC2889测试套件地址学习容量测试项参数\n\n该函数用于配置与地址学习容量相关的基准测试参数，适用于RFC2889测试套件中的地址容量测试。通过此函数，用户可以设置地址学习过程中的最小、最大和初始地址数量，同时还可以调整精度、老化时间和学习速率等关键参数。\n\n参数:\n\n    Config (:obj:`config`): 仪表测试测试套件测试项对象。如果传入的是列表、集合或元组等序列类型，则仅使用第一个元素进行配置修改。\n\n    MinAddressCount (int, optional): 学习地址的最小值，默认值为1，取值范围：1-16777216。\n\n    MaxAddressCount (int, optional): 学习地址的最大值，默认值为65536，取值范围：1-16777216。\n\n    InitAddressCount (int, optional): 地址学习的初始值，默认值为20480，取值范围：1-16777216。\n\n    Resolution (int, optional): 精度（%），表示地址调整的步长，默认值为2，取值范围：1-100。\n\n    AgingTime (int, optional): 老化时间（秒），即未使用的地址条目在老化后将被删除的时间，默认值为15秒，取值范围：1-3600。\n\n    LearningRate (int, optional): 地址学习速率（帧/秒），表示每秒可学习的新地址数，默认值为10000，取值范围：1-148809523。\n\n返回值:\n\n    bool: 表示配置是否成功更新。True 表示成功，False 表示失败。\n\n示例:\n\n    robotframework:\n\n    .. code:: robotframework\n\n        | Edit Benchmark Address Learning Capacity | Config=${Config} | LearningRate=100 |\n\n异常:\n\n    如果返回值为 False，将抛出一个 ContinuableFailure 异常，提示当前函数调用失败。",
  "TesterLibrary.Wizard.benchmark.edit_benchmark_address_learning_rate": "编辑RFC2889测试套件中的地址学习速率参数，用于配置网络设备在基准测试中地址（如MAC地址）的学习行为。\n\n该函数封装了对 Renix API 中 `Config.edit_address_learning_rate()` 的调用，并确保传入的 `Config` 是单一配置对象。如果传入的是多个配置组成的集合（如列表、集合或元组），则仅使用第一个配置对象进行操作。通过该函数可以设置地址学习的初始速率、最小速率、最大速率、调整精度、老化时间以及预期学习的地址总数，从而模拟真实网络环境中MAC表项动态变化的情况。\n\nArgs:\n    Config (:obj:`config` or collection): 仪表测试配置对象或包含配置对象的集合（如列表、集合、元组）。若为集合，仅使用第一个配置。\n    \n    MinRateCount (int, optional): 每秒学习地址的最小值，默认值: 1488，取值范围: 1-148809523\n    \n    MaxRateCount (int, optional): 每秒学习地址的最大值，默认值: 1488，取值范围: 1-148809523\n    \n    InitRateCount (int, optional): 初始学习速率（每秒地址数），默认值: 1488，取值范围: 1-148809523\n    \n    Resolution (int, optional): 调整学习速率的步长百分比，表示测试过程中速率调整的粒度，默认值: 2，取值范围: 1-100\n    \n    AgingTime (int, optional): 地址老化时间（秒），即地址多久未被使用后将被视为过期并被移除，默认值: 15，取值范围: 1-3600\n    \n    AddressCount (int, optional): 预期学习的总地址数量，用于模拟地址容量场景，默认值: 1000，取值范围: 1-4294967295\n\nReturns:\n    该函数返回底层调用 `Config.edit_address_learning_rate()` 的结果，通常是一个表示操作是否成功的状态或响应对象。\n\nExamples:\n    robotframework:\n\n.. code:: robotframework\n\n    | Edit Benchmark Address Learning Rate | Config=${Config} | AddressCount=100 |\n\nRaises:\n    ContinuableFailure: 如果返回结果为 False，则抛出可继续执行的失败异常，并附带函数名作为错误信息的一部分。",
  "TesterLibrary.Wizard.benchmark.edit_benchmark_errored_frame_filtering": "编辑基准测试中的错误帧过滤配置，用于网络性能测试中对特定类型错误帧的过滤设置。\n\n参数:\n    Config (:obj:`object` 或 list/set/tuple): 测试配置对象或包含配置对象的集合。若传入集合，则使用其中第一个元素。\n    CrcTested (bool, 可选): 是否启用CRC错误检测，默认为True。\n    CrcFrameLength (int, 可选): 进行CRC错误检测的帧长度（字节），默认为64，取值范围：64-10000。\n    UndersizedTested (bool, 可选): 是否启用超短帧检测，默认为True。\n    UndersizedFrameLength (int, 可选): 超短帧长度阈值（字节），默认为60，取值范围：58-63。\n    OversizedTested (bool, 可选): 是否启用超长帧检测，默认为True。\n    OversizedFrameLength (int, 可选): 超长帧长度阈值（字节），默认为1519，取值范围：1519-16383。\n    MaxLegalFrameLength (int, 可选): 网络中允许的最大合法帧长度（字节），默认为1518，取值范围：1-4294967295。\n    BurstSize (int, 可选): 错误帧突发大小，即连续多少个错误帧会被视为一个有效错误突发，默认为1，取值范围：1-4294967295。\n\n返回值:\n    bool: 操作成功返回True，失败则抛出ContinuableFailure异常并返回False。\n\n描述:\n    该函数用于配置网络基准测试中错误帧的过滤规则。它支持多种类型的错误帧过滤，包括CRC校验错误、超短帧、超长帧等，并可通过设定阈值和突发大小来调整过滤灵敏度。这些配置在进行RFC2889等网络性能测试时尤为重要。\n\n示例:\n    robotframework:\n\n.. code:: robotframework\n\n    | Edit Benchmark Errored Frame Filtering | Config=${Config} | BurstSize=100 |",
  "TesterLibrary.Wizard.benchmark.edit_benchmark_multicast_base_parameters": "编辑RFC3918测试套件中的组播基础参数配置，用于设置一个或多个测试配置的组播相关参数。该函数支持IPv4和IPv6组播地址配置、IGMP/MLD协议版本选择、组播组分布模式、加入/离开延迟时间、消息发送速率等关键参数。\n\nArgs:\n\n    Configs (list of :obj:`config` objects): 需要配置组播参数的仪表测试套件测试项对象列表。可传入单个或多个配置对象。\n\n    Version (str, optional): 组播协议版本，默认值为 'igmpv2'。支持的类型包括：\n\n        igmpv1\n\n        igmpv2\n\n        igmpv3\n\n        mldv1\n\n        mldv2\n\n    Ipv4GroupAddressStart (str, optional): IPv4组播组起始地址，默认值为 '225.0.0.1'。\n\n    Ipv4GroupAddressStep (str, optional): IPv4组播地址步长，用于多组播组配置时的递增步长，默认值为 '0.1.0.0'。\n\n    Ipv4PrefixLength (int, optional): IPv4地址前缀长度，默认值为 32，取值范围为 1-32。\n\n    Ipv6GroupAddressStart (str, optional): IPv6组播组起始地址，默认值为 'ff1e::1'。\n\n    Ipv6GroupAddressStep (str, optional): IPv6组播地址步长，默认值为 '0:0:0:1::'。\n\n    Ipv6PrefixLength (int, optional): IPv6地址前缀长度，默认值为 128，取值范围为 1-128。\n\n    GroupIncrement (int, optional): 每次迭代增加的组播组数量，默认值为 1，取值范围为 1-4294967295。\n\n    JoinGroupDelay (int, optional): 加入组播组前的延迟时间（秒），默认值为 15，取值范围为 0-4294967295。\n\n    LeaveGroupDelay (int, optional): 离开组播组前的延迟时间（秒），默认值为 15，取值范围为 0-4294967295。\n\n    JoinLeaveSendRate (int, optional): 组播加入/离开消息的发送速率（包/秒），默认值为 1000，取值范围为 0-1000000000。\n\n    GroupDistributeMode (str, optional): 组播组分布模式，默认值为 'even'，支持的选项包括：\n\n        even: 平均分布\n\n        weighted: 权重分布\n\nReturns:\n\n    bool: 返回布尔值表示操作是否成功，True 表示成功，False 表示失败。\n\nRaises:\n\n    ContinuableFailure: 如果返回结果为 False，则抛出带有函数名和失败信息的可继续执行异常。\n\nExamples:\n    robotframework 示例:\n\n.. code:: robotframework\n\n    | Edit Benchmark Multicast Base Parameters | Configs=${Configs} | GroupDistributeMode=weighted |",
  "TesterLibrary.Wizard.benchmark.edit_benchmark_multicast_stream_tos": "编辑RFC3918测试套件-组播流的QoS参数配置\n\n该函数用于修改一个或多个配置对象的组播流QoS（服务质量）参数，包括IPv4 TOS、IPv6 Flow Label、TTL和VLAN优先级。它封装了每个配置对象的`edit_multicast_stream_tos`方法，并将相同的参数值应用到所有提供的配置对象上。\n\n参数:\n\n    Configs (object 或 iterable of objects): 支持`edit_multicast_stream_tos`方法的配置对象，或其可迭代集合（列表、集合、元组）。若传入的是单个非迭代对象，则会被当作只包含该对象的列表处理。\n    \n    Tos (int, 可选): IPv4 Type of Service值，用于指定数据包的优先级、延迟、吞吐量和可靠性。默认值: 0\n    \n    FlowLabel (int, 可选): IPv6 Flow Label值，用于标识属于同一数据流的数据包。默认值: 0\n    \n    TTL (int, 可选): IPv4 Time To Live值，指定组播数据包在网络中可以经过的最大跳数。每经过一个路由器，该值减1，默认值: 7\n    \n    Priority (int, 可选): VLAN优先级值，影响网络设备中的调度或队列行为。默认值: 0\n\n返回值:\n\n    bool: 如果操作成功应用于所有配置对象，返回True；否则返回False。\n\n示例:\n    robotframework:\n\n.. code:: robotframework\n\n    | Edit Benchmark Multicast Stream Tos | Configs=${Configs} | Tos=7 | TTL=15 | Priority=3 |",
  "TesterLibrary.Wizard.benchmark.edit_benchmark_multicast_other": "编辑RFC3918测试套件-组播参数-其他\n\n该函数用于对一个或多个测试配置对象进行组播参数的编辑操作，主要应用于基准测试场景中的“其他”组播相关设置。它支持统一地更新多个配置对象的组播参数，并提供可选参数以灵活控制测试行为。\n\nArgs:\n\n    Configs (object or iterable of objects): 配置对象或配置对象的可迭代集合（如列表、集合或元组）。每个配置对象必须包含`edit_multicast_other`方法。\n\n    StopTestWhenFailed (bool, optional): 如果在组播流验证过程中发生失败是否立即停止测试，默认值为True。\n\n    VerifyFreq (str, optional): 指定验证频率，表示验证触发的条件，默认值为'topo_changed'，支持选项：\n\n        'none': 不进行验证\n\n        'topo_changed': 仅当拓扑发生变化时验证\n\n        'frame_size': 每次帧大小变化时验证\n\n        'iteration': 每次迭代时验证\n\n    DurationMode (str, optional): 时间持续模式，指定`TimeDurationCount`的时间单位，默认值为'second'，支持选项：\n\n        'second': 时间以秒为单位\n\n        'burst': 表示以突发模式发送帧\n\n    TimeDurationCount (int, optional): 测试持续时间，具体含义取决于`DurationMode`，默认值为1（单位由DurationMode决定）。\n\n    BurstDurationCount (int, optional): 在突发模式下使用的帧数量，表示每次突发发送多少帧，默认值为100。\n\n    TxFrameRate (int, optional): 发送帧速率，单位为帧/秒，默认值为1000。\n\nReturns:\n\n    bool: 布尔值，始终返回True表示配置成功编辑；若返回False则会抛出ContinuableFailure异常。\n\nExamples:\n\n    robotframework:\n\n    .. code:: robotframework\n\n        | Edit Benchmark Multicast Other | Configs=${Configs} | TimeDurationCount=100 |",
  "TesterLibrary.Wizard.benchmark.edit_benchmark_multicast_traffic_ratio_loop": "编辑基准测试中的组播流量比例循环设置，用于配置在基准测试期间如何调整组播流量的比例。\n\n该函数支持多种循环模式，以控制在基准测试过程中组播流量比例的应用方式。如果 `Config` 是一个序列（如 list、set 或 tuple），则会使用序列中的第一个元素进行配置修改。\n\n参数说明：\n-----------\n- **Config** : object 或 list/set/tuple  \n  要编辑的配置对象。如果传入的是列表、集合或元组，则使用其中的第一个元素。\n\n- **LoopMode** : str, 可选  \n  指定使用的循环模式。支持的值包括：\n  - `'fixed'`: 使用由 `FixedRatio` 定义的固定比例。\n  - `'minmax'`: 在 `MinRatio` 和 `MaxRatio` 之间循环。\n  - `'startend'`: 从 `StartRatio` 到 `EndRatio` 循环，每次增加 `StepRatio`。\n  - `'custom'`: 使用 `CustomRatio` 中定义的自定义比例列表。\n  默认值为 `'step'`。\n\n- **FixedRatio** : int, 可选  \n  当 `LoopMode` 为 `'fixed'` 时使用的固定组播流量比例。默认值为 10。\n\n- **MinRatio** : int, 可选  \n  当 `LoopMode` 为 `'minmax'` 时使用的最小组播流量比例。默认值为 10。\n\n- **MaxRatio** : int, 可选  \n  当 `LoopMode` 为 `'minmax'` 时使用的最大组播流量比例。默认值为 50。\n\n- **StartRatio** : int, 可选  \n  当 `LoopMode` 为 `'startend'` 时使用的起始组播流量比例。默认值为 10。\n\n- **EndRatio** : int, 可选  \n  当 `LoopMode` 为 `'startend'` 时使用的结束组播流量比例。默认值为 50。\n\n- **StepRatio** : int, 可选  \n  当 `LoopMode` 为 `'startend'` 时使用的步长。默认值为 10。\n\n- **CustomRatio** : tuple, 可选  \n  当 `LoopMode` 为 `'custom'` 时使用的一组自定义组播流量比例。默认值为 (10, 20, 100)。\n\n返回值：\n--------\n- 返回 `True` 表示操作成功；若返回 `False`，则抛出 `ContinuableFailure` 异常，表示发生可继续执行的失败。\n\n功能描述：\n------------\n此函数用于配置基准测试中组播流量比例的循环行为。它将实际配置任务委托给 `Config.edit_multicast_traffic_ratio_loop()` 方法，并在调用前对输入参数进行验证和处理。不同的循环模式允许用户灵活地定义在测试过程中组播流量比例的变化方式。",
  "TesterLibrary.Wizard.benchmark.edit_benchmark_multicast_group_count_loop": "编辑基准测试中的组播组数量循环配置。\n\n该函数用于配置在基准测试过程中如何变化组播组的数量。支持多种循环策略，包括固定值、范围步进以及自定义序列。\n\n参数:\n    Config (object or list/tuple/set): 测试配置对象。若为列表、元组或集合，则使用第一个元素。\n    LoopMode (str, optional): 循环模式，默认为 'step'，可选值包括:\n        - 'fixed': 使用固定数量的组播组。\n        - 'step': 按照指定步长从起始值递增至结束值。\n        - 'custom': 使用自定义的组播组数量序列。\n    FixedGroup (int, optional): 固定模式下的组播组数量，默认为 10。\n    MinGroup (int, optional): 范围模式下的最小组播组数量，默认为 10。\n    MaxGroup (int, optional): 范围模式下的最大组播组数量，默认为 50。\n    StartGroup (int, optional): 步进模式的起始值，默认为 10。\n    EndGroup (int, optional): 步进模式的结束值，默认为 50。\n    StepGroup (int, optional): 步进模式的步长，默认为 10。\n    CustomGroup (tuple/list, optional): 自定义模式下的组播组数量列表，默认为 (10, 20, 100)。\n\n返回值:\n    bool: 始终返回 True，表示成功更新了组播组数量的循环配置。\n\n示例:\n    robotframework:\n\n    .. code:: robotframework\n\n        | Edit Benchmark Multicast Group Count Loop | Config=${Config} | LoopMode=fixed |",
  "TesterLibrary.Wizard.benchmark.edit_benchmark_multicast_mixed_throughput_unicast_streams": "Modifies the unicast stream settings for a multicast mixed throughput benchmark configuration.\n\nThis function is used to update unicast stream configurations within a multicast mixed throughput test scenario. It accepts a configuration object (or a list of objects, from which only the first is used) and a list of stream objects. The function extracts the handles from the provided streams and passes them to the `edit_mixed_throughput_unicast_streams` method of the configuration object.\n\nParameters:\n-----------\nConfig : object or list\n    A configuration object or a list containing one or more configuration objects.\n    If a list is passed, only the first element will be used. The object should implement\n    the `edit_mixed_throughput_unicast_streams` method.\n\nStreams : list\n    A list of stream objects. Each stream object must have a `handle` attribute that uniquely\n    identifies the stream. These handles are used as the `UnicastStreamHandles` parameter\n    when calling the edit method on the Config object.\n\nReturns:\n--------\nbool\n    Returns True if the operation was successful, otherwise returns False. If the operation\n    fails (i.e., returns False), a `ContinuableFailure` exception is raised with a message\n    indicating the failure in this function.\n\nRaises:\n-------\nContinuableFailure\n    If the underlying `edit_mixed_throughput_unicast_streams` call fails (returns False),\n    this exception is raised to indicate the failure while allowing test execution to continue.\n\nDescription:\n------------\nThis function serves as a wrapper for the backend implementation of `edit_mixed_throughput_unicast_streams`.\nIt ensures robust handling of the input parameters, particularly ensuring that only one configuration object\nis used even when a list is provided. It then delegates the actual configuration changes to the backend\nimplementation and handles success/failure responses accordingly.",
  "TesterLibrary.Wizard.benchmark.edit_benchmark_multicast_join_leave_delay": "Modifies the multicast join and leave delay settings for a benchmark configuration.\n\nThis function configures the delays related to multicast group operations during a benchmark test. Specifically, it sets:\n- The time interval between the start of traffic streaming and the transmission of the multicast group join message (DelayBetweenJoinAndStartStream).\n- The time interval between sending the multicast group join message and the leave message (DelayBetweenJoinAndLeave).\n\nIf the provided `Config` parameter is a list, set, or tuple, the first element will be used for configuration editing.\n\nParameters:\n-----------\nConfig : object or iterable\n    A configuration object that supports the `edit_multicast_join_leave_delay` method.\n    If Config is a list, set, or tuple, the first element will be selected for editing.\n\nDelayBetweenJoinAndStartStream : int, optional (default=10)\n    Delay in seconds between starting traffic and sending the multicast group join message.\n    Valid range: 0 - 3600 seconds.\n\nDelayBetweenJoinAndLeave : int, optional (default=10)\n    Delay in seconds between sending the multicast group join and leave messages.\n    Valid range: 0 - 3600 seconds.\n\nReturns:\n--------\nbool\n    Always returns True to indicate successful execution of the configuration change.\n\nRaises:\n-------\nContinuableFailure\n    If the underlying implementation (`renix.edit_benchmark_multicast_join_leave_delay`) returns False,\n    this function raises a `ContinuableFailure` exception to signal the failure.\n\nExamples:\n---------\nrobotframework:\n\n.. code:: robotframework\n\n    | Edit Benchmark Multicast Join Leave Delay | Config=${Config} | DelayBetweenJoinAndStartStream=100 |",
  "TesterLibrary.Wizard.benchmark.run_benchmark": "执行测试仪表配置中的测试套件，并管理其执行生命周期。\n\n该函数用于启动并执行基于SmartScripter引擎的基准测试，支持不同的执行模式、超时控制和结果分析。它会监控测试状态、记录日志、处理超时情况，并在测试完成后收集生成的结果文件路径。默认情况下，该函数会阻塞直到测试完成或超时。\n\n参数：\n    Mode (int, optional): 智能脚本的执行模式。0 表示连续执行，1 表示单步执行。默认值：0\n    Timer (int, optional): 测试套件执行的最大等待时间（单位：秒），如果阻塞启用（Block=True）。默认值：1800 秒（30分钟）\n    Analyzer (bool, optional): 是否在测试完成后自动打开结果分析器。默认值：False\n\n返回值：\n    list of str: 返回一个字符串列表，包含所有生成的测试结果数据库（.db）文件的绝对路径。这些路径使用正斜杠('/')进行跨平台一致性格式化。\n    如果 Block=False，则在启动测试后立即返回 True，而不会等待测试完成。\n\n异常：\n    TesterException: 如果基准测试执行结果为 FAILED，将抛出TesterException异常，并附带SmartScripter实例提供的失败原因。\n\n说明：\n    - 通过 StartSmartScripterCommand 启动基准测试。\n    - 根据当前时间戳配置结果输出路径。\n    - 每隔5秒监控一次基准测试状态并记录进度。\n    - 如果测试超过Timer设定时间，会触发警告日志。\n    - 收集并返回测试目录下所有 .db 结果文件的路径。\n\n示例：\n    robotframework:\n\n.. code:: robotframework\n\n    | ${result} | Run Benchmark |\n    | ${result} | Run Benchmark | Mode==1 |\n    | ${result} | Run Benchmark | Timer==3600 |\n    | ${result} | Run Benchmark | Analyzer==True |\n    | ${result} | Run Benchmark | Mode==1 | Timer==3600 | Analyzer==True |",
  "TesterLibrary.Wizard.benchmark.get_benchmark_result": "从测试套件执行结果DB文件中获取指定测试结果数据\n\n该函数用于连接指定的SQLite数据库文件，根据提供的测试类型（Type）查询对应的基准测试结果表，并将查询结果以指定格式返回。默认情况下，结果将以字典列表形式返回；也可选择以pandas DataFrame格式返回。\n\nArgs:\n\n    DB (str): 测试结果DB文件的绝对路径, (例如：\"C:/TestSuite/Benchmark/2021_07_29_21_10_36/Asymmetric_throughput_summary2021-07-29_21-11-08/Asymmetric_throughput_summary_2021-07-29_21-11-08.db\")\n              支持传入set/list/tuple类型，此时使用第一个元素作为路径。\n\n    Type (str): 测试套件类型, (取值范围：RFC2544 / Asymmetric / RFC2889 / RFC3918)，不区分大小写。\n\n    ReturnType (str, optional): 返回数据的格式，默认为 'dict'，表示返回列表形式的字典（每行一个字典）。若设置为其他值，则返回 pandas DataFrame。\n\n    *args, **kwargs: 可选参数，用于未来扩展或自定义实现。\n\nReturns:\n\n    list of dict 或 pandas.DataFrame:\n        根据 ReturnType 参数决定返回格式：\n        - 若为 'dict'（默认），返回列表形式的字典，每个字典代表一行数据。\n        - 否则返回 pandas DataFrame。\n\nRaises:\n\n    Exception: 如果无法连接数据库，或者SQL查询执行失败（由@abnormal_check装饰器封装并抛出异常）\n\nExamples:\n\n    robotframework 示例：\n\n.. code:: robotframework\n\n    | ${DB}  == \"C:/TestSuite/Benchmark/2021_07_29_21_10_36/Asymmetric_throughput_summary2021-07-29_21-11-08/Asymmetric_throughput_summary_2021-07-29_21-11-08.db\") |\n    | ${Type} == \"Asymmetric\" |\n    | ${result} | Get Benchmark Result | ${DB} | ${Type} | Returntype=pandas |\n\nNotes:\n\n    - 函数通过 `EnumBenchmarkDbTable` 枚举确定实际要查询的表名。\n    - 假定数据库结构包含与 `EnumBenchmarkDbTable` 枚举值相对应的表。\n    - 此函数支持多种返回格式，方便后续数据分析和处理。",
  "TesterLibrary.Wizard.benchmark.format_benchmark_result": "格式化基准测试结果为表格形式\n\n该函数用于将测试套件执行后的结果数据（从DB文件中获取）格式化为二维表格形式，便于展示或日志记录。支持的输入类型包括 pandas DataFrame 或 字典列表。\n\nArgs:\n\n    Result (Union[pandas.DataFrame, List[Dict]]): 测试套件执行后返回的结果数据，可以是以下两种格式：\n        - pandas DataFrame：表示测试结果的结构化数据表\n        - 字典列表（List[Dict]）：每个字典代表一行数据，键为列名，值为对应单元格内容\n\nReturns:\n\n    Union[PrettyTable, str]: 格式化后的表格对象或字符串：\n        - 如果输入为 pandas DataFrame，则使用 tabulate 库以 'psql' 风格格式化为字符串并返回\n        - 如果输入为字典列表，则返回 PrettyTable 对象，可通过其本身的打印方法输出表格\n\nRaises:\n\n    TesterException: 当输入 `Result` 既不是 pandas DataFrame 也不是字典列表时，抛出异常，提示信息为 'Result is not list'\n\nExamples:\n    robotframework:\n\n.. code:: robotframework\n\n    | ${result} | Format Benchmark Result | ${Result} |",
  "TesterLibrary.Wizard.benchmark.export_benchmark_result": "Exports benchmark results into an Excel file, both at a default location and a specified path.\n\nThis function takes a list of benchmark result data (as dictionaries), and exports it into an Excel file. If an Excel file already exists at the default location (`C:/CMCC/Report.xlsx`), the data will be appended to it in a new worksheet or added to an existing one based on the provided sheet name. If no such file exists, a new workbook will be created. The exported file is saved both at the default location and the user-specified path.\n\nThe function ensures that the target directory for the specified path exists by creating it if necessary. It also handles worksheet creation or appending logic: if the provided sheet name exists in the workbook, it uses that sheet; otherwise, it creates a new one. Headers are derived from the keys of the first dictionary in the `Result` list, and subsequent rows are populated with corresponding values.\n\nArgs:\n    Result (list of dict): A list where each element is a dictionary representing a row of benchmark data.\n        Keys are treated as column headers, and values are the data to be written under those columns.\n\n    Path (str): The full directory path where the Excel file should be saved. This is not the full file path,\n        just the directory. The actual filename will be 'Report.xlsx'. If the directory does not exist,\n        it will be created automatically.\n\n    Sheet (str): The name of the worksheet tab within the Excel file where the benchmark data will be written.\n        If a sheet with this name already exists in the workbook, the function will append data to it;\n        otherwise, a new sheet will be created.\n\nReturns:\n    str: Returns `EnumBase.TRUE.value` (a string constant indicating success) if the export operation\n        completes successfully. If any exception occurs during execution, it raises a `ContinuableFailure`.\n\nBehavior:\n- Loads the default Excel file (`C:/CMCC/Report.xlsx`) if it exists; otherwise, creates a new workbook.\n- Uses or creates a worksheet based on the provided sheet name.\n- Writes headers from the dictionary keys of the first item in `Result`.\n- Populates the worksheet row-wise with values from each dictionary in `Result`.\n- Saves the updated workbook both to the default location and the specified path.\n- Ensures the specified directory exists by creating it if necessary.",
  "TesterLibrary.Wizard.bgp_route.create_bgp_route_wizard": "创建并返回一个配置好的 BGP 路由向导实例，用于在指定的会话中配置或操作 BGP 路由。\n\n该函数基于提供的会话和可选参数初始化一个 BGP 路由向导对象。如果传入单个会话对象，它将被自动转换为列表形式以保证处理一致性。额外的配置参数通过关键字参数传递给 BGP 路由向导构造器。\n\n参数:\n    Sessions (Session 或 list 或 set 或 tuple): 一个或多个 BGP 协议会话对象，用于创建路由向导。\n                                                如果是 set 或 tuple 类型，将被转换为 list 类型。\n    **kwargs: 任意关键字参数，直接传递给 BgpRouteWizard 构造器，用于配置路由类型、是否启用链路状态等选项。\n              常见的关键字参数包括：\n\n                BgpRouteType (str): 路由类型，默认值：NO_ROUTES，取值范围：\n\n                    IPV4_ROUTES\n\n                    IPV6_ROUTES\n\n                    IPV4_IPV6\n\n                    NO_ROUTES\n\n                EnableLinkState (bool): 是否启用链路状态路由，默认值：False\n\n返回值:\n    Wizard (:obj:`BgpRouteWizardConfig`): 创建成功的 BGP 路由向导对象，可用于进一步的 BGP 路由配置或操作。\n\n异常:\n    如果创建失败，抛出一个 ContinuableFailure 异常，包含失败的具体信息。\n\n示例:\n    .. code:: RobotFramework\n\n        | Create Bgp Route Wizard | Sessions=@{sessions} | BgpRouteType=IPV4_ROUTES | EnableLinkState=True |",
  "TesterLibrary.Wizard.bgp_route.config_bgp_route_wizard_ipv4": "配置BGP路由向导的IPv4设置\n\n该函数用于通过一个或多个向导对象配置IPv4 BGP路由参数。每个传入的向导对象必须包含`config_ipv4_route`方法，此方法将使用提供的关键字参数进行调用以完成具体的配置操作。\n\n参数:\n    Wizards (list or object): \n        可以是一个单独的向导对象，也可以是向导对象的可迭代集合（如列表、集合或元组）。\n        如果传递的是单个对象，则会被转换为列表以便统一处理。\n\n    **kwargs (dict): \n        任意关键字参数，这些参数会直接传递给每个向导对象的 `config_ipv4_route` 方法。\n        参数可能包括网络地址、前缀长度、下一跳等与 IPv4 路由相关的配置选项。\n\n返回值:\n    list or object: \n        如果传入了多个向导对象，返回值是一个列表，包含每个向导对象执行 `config_ipv4_route` 后的结果。\n        如果只传入了一个向导对象，返回该向导配置后的结果（不包装在列表中）。\n\n功能描述:\n    此函数封装了对一个或多个 BGP 路由向导的 IPv4 配置过程。支持批量配置多个向导，并确保无论输入是单个还是多个向导对象，都能得到一致的处理方式。\n\n示例:\n    .. code:: RobotFramework\n\n        | Config Bgp Route Wizard Ipv4 | Wizards=@{wizard} | TotalIpv4RouteCount=100 | PrefixLength=28 | NextHop=192.168.0.1 |",
  "TesterLibrary.Wizard.bgp_route.config_bgp_route_wizard_ipv6": "配置BGP IPv6路由向导，用于通过一个或多个向导对象设置BGP IPv6路由的相关参数。\n\n### 参数说明\n\n- **Wizards** (object 或 iterable of objects):  \n  单个向导对象或包含多个向导对象的可迭代结构（如列表、集合、元组），每个向导对象需支持 `config_ipv6_route` 方法，用于配置IPv6 BGP路由。\n\n- **kwargs** (任意关键字参数):  \n  向导对象中 `config_ipv6_route` 方法所需的配置参数，主要包括以下内容：\n\n#### 路由数量与分布\n- **TotalIpv6RouteCount** (int):  \n  配置的IPv6路由总数，默认值：1，取值范围：1 - 4294967295。\n- **DuplicateIpv6Route** (float):  \n  路由复制比例，默认值：0.0，表示无复制；取值范围：0.0 - 100.0。\n- **IPv6DistributionType** (str):  \n  前缀分布类型，默认值：\"FIXED\"，可选值包括：\n  - FIXED\n  - LINEAR\n  - INTERNET\n  - CUSTOM\n\n#### IP地址范围与前缀长度\n- **FirstIpv6Route** (str):  \n  起始IPv6路由地址，默认值：\"2000::\"，必须为有效的IPv6地址。\n- **LastIpv6Route** (str):  \n  结束IPv6路由地址，默认值：\"3ffe::\"，必须为有效的IPv6地址。\n- **Ipv6PrefixLength** (int):  \n  初始IPv6前缀长度，默认值：64，取值范围：1 - 128。\n- **EndIpv6PrefixLength** (int):  \n  结束IPv6前缀长度，默认值：64，取值范围：1 - 128。\n- **CustomPrefixLength** (list):  \n  自定义前缀长度分布，长度为128的浮点数列表，总和应为100.0。\n- **InternetPrefixLength** (list):  \n  Internet类型前缀长度分布，格式同上。\n\n#### 下一跳配置\n- **Ipv6RouteUseSessionAddressAsNextHop** (bool):  \n  是否使用BGP会话地址作为下一跳地址，默认值：True。\n- **Ipv6NextHop** (str):  \n  下一跳地址，默认值：\"2001::1\"，必须为有效的IPv6地址。\n- **Ipv6NextHopStep** (str):  \n  下一跳递增步长，默认值：\"::1\"，必须为有效的IPv6地址。\n\n#### 路径属性配置\n- **Ipv6RouteLocalPref** (int):  \n  Local Preference路径属性值，默认值：10，取值范围：1 - 4294967295。\n- **Ipv6RouteLocalPrefStep** (int):  \n  Local Pref递增步长，默认值：0。\n- **Ipv6RouteEnableMed** (bool):  \n  是否启用MULTI_EXIT_DISC路径属性，默认值：False。\n- **Ipv6RouteMultExitDisc** (int):  \n  MULTI_EXIT_DISC值，默认值：0，取值范围：1 - 4294967295。\n- **Ipv6RouteMultExitDiscStep** (int):  \n  MED递增步长，默认值：0。\n\n#### AS Path配置\n- **Ipv6AsPathDistributionType** (str):  \n  AS路径分布类型，默认值：\"FIXED\"，可选值包括：\n  - FIXED\n  - INTERNET\n  - CUSTOM\n- **CustomAsPath** (list):  \n  自定义AS路径分布，长度为128的浮点数列表，总和应为100.0。\n- **InternetAsPath** (list):  \n  Internet类型AS路径分布，格式同上。\n- **Ipv6AsPathSuffix** (str):  \n  主AS路径后缀，默认值为空字符串。\n- **Ipv6AsPathIncrement** (str):  \n  主AS路径后缀递增步长，默认值为空字符串。\n- **Ipv6SecondaryAsPathSuffix** (str):  \n  从属AS路径后缀，默认值为空字符串。\n- **Ipv6SecondaryAsPathIncrement** (str):  \n  从属AS路径后缀递增步长，默认值为空字符串。\n\n### 返回值\n- 如果传入单个向导对象，则返回该向导的配置结果（通常是 `BgpRouteWizardConfig` 对象）；\n- 如果传入多个向导对象，则返回一个包含所有配置结果的列表。\n\n### 功能描述\n此函数确保传入的 `Wizards` 是可迭代结构（如果不是则将其封装为列表）。然后遍历每个向导对象，并调用其 `config_ipv6_route` 方法，将所有关键字参数传递进去进行配置。每个向导的配置结果会被收集并返回。如果配置失败（返回 False），则抛出异常。\n\n### 示例\n```robotframework\n| Config Bgp Route Wizard Ipv6 | Wizards=@{wizard} |\n```",
  "TesterLibrary.Wizard.bgp_route.config_bgp_route_wizard_igp_topo": "Configures the IGP (Interior Gateway Protocol) topology for one or more BGP route wizards.\n\n    This function accepts a single wizard object or a collection of wizard objects and invokes\n    the `config_igp_topo` method on each. The configuration is performed with optional parameters\n    passed via `**kwargs`. The results are collected and returned appropriately based on the number\n    of wizards processed.\n\n    Parameters:\n        Wizards (object or iterable): A single wizard object or an iterable (list, set, tuple)\n                                      containing multiple wizard objects. Each wizard must have\n                                      a `config_igp_topo` method that can accept the provided kwargs.\n        **kwargs: Arbitrary keyword arguments that will be passed directly to the `config_igp_topo`\n                  method of each wizard. These may include settings related to IGP topology such as\n                  route parameters, network settings, etc., depending on the implementation of the\n                  called method.\n\n    Returns:\n        list or object: If multiple wizards are provided, returns a list of results from calling\n                        `config_igp_topo` on each. If only one wizard is provided, returns the single\n                        result directly (instead of a list).\n\n    Description:\n        This function serves as a wrapper to uniformly configure IGP topologies across multiple BGP\n        route wizards. It ensures consistent application of configuration parameters by iterating\n        through all provided wizards and invoking their respective `config_igp_topo` methods with\n        the given arguments. It abstracts away the handling of both single and multiple wizard\n        inputs, simplifying usage for the caller.",
  "TesterLibrary.Wizard.bgp_route.config_bgp_route_wizard_igp": "Configures the IGP (Interior Gateway Protocol) settings for one or more BGP route wizards.\n\nThis function allows the configuration of IGP parameters on BGP route wizard objects. It accepts a single wizard object or a list of wizard objects, and applies the provided IGP configuration settings to each of them. The supported IGP settings include IPv4 prefixes, system IDs, router IDs, segment routing options, traffic engineering parameters, and more. Each configuration is performed by invoking the `config_igp` method on the respective wizard object with the provided keyword arguments.\n\nArgs:\n    Wizards (list or object): A single BGP route wizard object or a list of such objects. Each object must have a `config_igp` method that supports the provided keyword arguments.\n\nKeyword Args:\n    Ipv4Prefix (str): Starting IPv4 prefix for route generation. Default: \"1.0.0.0\", valid values: valid IPv4 address.\n    EndIpv4Prefix (str): Ending IPv4 prefix for route generation. Default: \"223.225.255.255\", valid values: valid IPv4 address.\n    Ipv4PrefixLength (int): Length of the IPv4 prefix. Default: 24, valid range: 1-32.\n    StartSystemId (str): Starting System ID (MAC address format). Default: \"10:00:00:00:00:01\", valid values: valid MAC address.\n    SystemIdStep (str): Step increment for System ID. Default: \"00:00:00:00:00:01\", valid values: valid MAC address.\n    EnableAdvLoopback (bool): Whether to advertise loopback address as Router ID. Default: False.\n    RouterId (str): Base Router ID to use. Default: \"1.0.0.1\", valid values: valid IPv4 address.\n    RouterIdStep (str): Step increment for Router ID. Default: \"0.0.0.1\", valid values: valid IPv4 address.\n    EnableIGPmetric (bool): Enable use of IGP metric. Default: False.\n    IgpMetricTypeIsis (str): Metric type for ISIS. Options: ISIS_SMALL, ISIS_WIDE. Default: ISIS_SMALL.\n    IgpMetricTypeOspf (str): Metric type for OSPF. Only option: OSPF_LINK. Default: OSPF_LINK.\n    EnableSegmentRouting (bool): Enable Segment Routing features. Default: False.\n    Algorithm (str): Segment Routing algorithm identifier. Default: \"0\".\n    SidLabelType (str): Type of SID/Label. Options: BIT20_LABEL, BIT32_SID. Default: BIT20_LABEL.\n    SidLabelBase (int): Base value for SID/Label allocation. Default: 100, valid range: 0-4294967295.\n    SidLabelRange (int): Range size for SID/Label allocation. Default: 100, valid range: 1-16777215.\n    LinkAdjSidLabel (int): Link Adjacency SID/Label value. Default: 9001, valid range: 0-4294967295.\n    PrefixAdjSidLabel (int): Prefix Adjacency SID/Label value. Default: 0, valid range: 0-4294967295.\n    SidLabelStep (int): Increment step for SID/Label allocation. Default: 1, valid range: 0-4294967295.\n    EnableTeOptions (bool): Enable Traffic Engineering options. Default: False.\n    EnableVaryheaderendMetric (bool): Vary header end metrics. Default: True.\n    HeaderendMetricEnableIGPMetric (bool): Use IGP metric in header end. Default: False.\n    HeaderendMetricEnableSegmentRoutingWeight (bool): Use Segment Routing weight in header end. Default: False.\n    HeaderendMetricEnablePrefixMetric (bool): Use prefix metric in header end. Default: True.\n    EnableReservableStep (bool): Enable reservable bandwidth stepping. Default: False.\n    ReservableStep (int): Bandwidth reservation step value. Default: 10000, valid range: 1-4294967295.\n    EnableUnreserved (bool): Enable unreserved bandwidth settings per priority level. Default: False.\n    UnreservedBandwidth0 (int): Unreserved bandwidth for priority 0. Default: 100000, valid range: 1-4294967295.\n    UnreservedBandwidth1 (int): Unreserved bandwidth for priority 1. Default: 100000, valid range: 1-4294967295.\n    UnreservedBandwidth2 (int): Unreserved bandwidth for priority 2. Default: 100000, valid range: 1-4294967295.\n    UnreservedBandwidth3 (int): Unreserved bandwidth for priority 3. Default: 100000, valid range: 1-4294967295.\n    UnreservedBandwidth4 (int): Unreserved bandwidth for priority 4. Default: 100000, valid range: 1-4294967295.\n    UnreservedBandwidth5 (int): Unreserved bandwidth for priority 5. Default: 100000, valid range: 1-4294967295.\n    UnreservedBandwidth6 (int): Unreserved bandwidth for priority 6. Default: 100000, valid range: 1-4294967295.\n    UnreservedBandwidth7 (int): Unreserved bandwidth for priority 7. Default: 100000, valid range: 1-4294967295.\n\nReturns:\n    list or object: If multiple wizards are passed, returns a list of results from each wizard's `config_igp` call. If only one wizard is passed, returns the result directly.\n\nRaises:\n    ContinuableFailure: If the operation fails, an exception is raised with a message indicating failure.\n\nExamples:\n    .. code:: RobotFramework\n\n        | Config Bgp Route Wizard Igp | Wizards=@{wizard} |",
  "TesterLibrary.Wizard.bgp_route.config_bgp_route_wizard_igp_te_option": "Configures the IGP TE (Interior Gateway Protocol Traffic Engineering) options for one or more BGP route wizards.\n\nThis function accepts a single wizard object or a collection of wizard objects, and applies the IGP TE configuration to each by calling their respective `config_link_state_route_te` method with the provided keyword arguments. The configuration settings are collected into a list, which is either returned as-is (if multiple configurations) or as a single element (if only one configuration was generated).\n\nParameters:\n    Wizards (object or iterable): A single wizard object or an iterable (list, set, tuple) of wizard objects. Each wizard must have a `config_link_state_route_te` method that accepts keyword arguments for configuring IGP TE options.\n    **kwargs: Arbitrary keyword arguments that define the specific IGP TE configuration parameters. These are passed directly to the `config_link_state_route_te` method of each wizard.\n\nKeyword Args:\n    EnableInterfaceIp (bool): Enables the local IPv4 address. Type: bool, Valid values: True or False, Default: False\n    InterfaceIp (str): Local IPv4 address. Type: valid IPv4 address, Default: 0.0.0.0\n    EnableNeighborIp (bool): Enables the remote IPv4 address. Type: bool, Valid values: True or False, Default: False\n    NeighborIp (str): Remote IPv4 address. Type: valid IPv4 address, Default: 0.0.0.0\n    EnableInterfaceIpv6 (bool): Enables the local IPv6 address. Type: bool, Valid values: True or False, Default: False\n    InterfaceIpv6 (str): Local IPv6 address. Type: valid IPv6 address, Default: 2000::1\n    EnableNeighborIpv6 (bool): Enables the remote IPv6 address. Type: bool, Valid values: True or False, Default: False\n    NeighborIpv6 (str): Remote IPv6 address. Type: valid IPv6 address, Default: 2000::1\n    EnableGroup (bool): Enables the group setting. Type: bool, Valid values: True or False, Default: False\n    Group (int): Group identifier. Type: number, Range: 1-4294967295, Default: 1\n    EnableUniLinkLoss (bool): Enables unidirectional link loss. Type: bool, Valid values: True or False, Default: False\n    LinkLoss (int): Link loss percentage. Type: number, Range: 1-100, Default: 3\n    LinkLossAflag (bool): A-flag for link loss. Type: bool, Valid values: True or False, Default: False\n    EnableUniDelay (bool): Enables unidirectional delay. Type: bool, Valid values: True or False, Default: False\n    UniDelay (int): Unidirectional delay in nanoseconds. Type: number, Range: 1-4294967295, Default: 100000\n    UniAflag (bool): A-flag for unidirectional delay. Type: bool, Valid values: True or False, Default: False\n    EnableUniMinMaxDelay (bool): Enables min/max unidirectional delay. Type: bool, Valid values: True or False, Default: False\n    UniMinMaxAflag (bool): A-flag for min/max unidirectional delay. Type: bool, Valid values: True or False, Default: False\n    UniMinDelay (int): Minimum unidirectional delay in nanoseconds. Type: number, Range: 1-4294967295, Default: 100000\n    UniMaxDelay (int): Maximum unidirectional delay in nanoseconds. Type: number, Range: 1-4294967295, Default: 100000\n    EnableUniDelayVariation (bool): Enables unidirectional delay variation. Type: bool, Valid values: True or False, Default: False\n    UniVarDelay (int): Unidirectional delay variation in nanoseconds. Type: number, Range: 1-4294967295, Default: 100000\n    EnableUniResidual (bool): Enables residual unidirectional bandwidth. Type: bool, Valid values: True or False, Default: False\n    UniResBandwidth (int): Residual unidirectional bandwidth in bytes per second. Type: number, Range: 1-4294967295, Default: 100000\n    EnableUniAva (bool): Enables available unidirectional bandwidth. Type: bool, Valid values: True or False, Default: False\n    UniAvaBandwidth (int): Available unidirectional bandwidth in bytes per second. Type: number, Range: 1-4294967295, Default: 100000\n    EnableUniUtilized (bool): Enables utilized unidirectional bandwidth. Type: bool, Valid values: True or False, Default: False\n    UniUtilized (int): Utilized unidirectional bandwidth in bytes per second. Type: number, Range: 1-4294967295, Default: 100000\n    EnableMaximum (bool): Enables maximum bandwidth (bytes/second). Type: bool, Valid values: True or False, Default: False\n    Maximum (int): Maximum bandwidth in bytes per second. Type: number, Range: 1-4294967295, Default: 100000\n    EnableReservable (bool): Enables reservable bandwidth (bytes/second). Type: bool, Valid values: True or False, Default: False\n    Reservable (int): Reservable bandwidth in bytes per second. Type: number, Range: 1-4294967295, Default: 100000\n    EnableUnreserved (bool): Enables unreserved bandwidth priority (bytes/second). Type: bool, Valid values: True or False, Default: False\n    UnreservedBandwidth0 (int): Unreserved bandwidth priority 0 in bytes per second. Type: number, Range: 1-4294967295, Default: 100000\n    UnreservedBandwidth1 (int): Unreserved bandwidth priority 1 in bytes per second. Type: number, Range: 1-4294967295, Default: 100000\n    UnreservedBandwidth2 (int): Unreserved bandwidth priority 2 in bytes per second. Type: number, Range: 1-4294967295, Default: 100000\n    UnreservedBandwidth3 (int): Unreserved bandwidth priority 3 in bytes per second. Type: number, Range: 1-4294967295, Default: 100000\n    UnreservedBandwidth4 (int): Unreserved bandwidth priority 4 in bytes per second. Type: number, Range: 1-4294967295, Default: 100000\n    UnreservedBandwidth5 (int): Unreserved bandwidth priority 5 in bytes per second. Type: number, Range: 1-4294967295, Default: 100000\n    UnreservedBandwidth6 (int): Unreserved bandwidth priority 6 in bytes per second. Type: number, Range: 1-4294967295, Default: 100000\n    UnreservedBandwidth7 (int): Unreserved bandwidth priority 7 in bytes per second. Type: number, Range: 1-4294967295, Default: 100000\n    EnableTeDefaultMetric (bool): Enables TE default metric. Type: bool, Valid values: True or False, Default: False\n    TeDefaultValue (int): TE default metric value. Type: number, Range: 1-4294967295, Default: 0\n\nReturns:\n    list or object: If multiple wizards are provided, returns a list of configuration objects/results from each call to `config_link_state_route_te`. If only one wizard is provided, returns the single configuration object/result directly.\n\nDescription:\n    This method acts as a wrapper to apply consistent IGP TE configuration across one or more BGP route wizards. It ensures uniform handling of configuration inputs and provides a clean interface for batch or single operations.",
  "TesterLibrary.Wizard.bgp_route.expand_bgp_route_wizard": "Expands the BGP route wizard(s) provided.\n\nThis function accepts a single wizard or a collection of wizards (list, set, or tuple).  \nIf a single wizard is provided, it is converted into a list for uniform processing.  \nEach wizard in the collection is then expanded by calling its `expand()` method.\n\nParameters:\n-----------\nWizards : object or iterable\n    A single wizard object or an iterable (list, set, tuple) containing multiple wizard objects.  \n    Each wizard is expected to have an `expand()` method.\n\nReturns:\n--------\nbool\n    Always returns True to indicate successful expansion of all provided wizards.\n\nRaises:\n-------\nContinuableFailure\n    If the underlying implementation (`renix.expand_bgp_route_wizard`) returns False,  \n    indicating a failure in expanding the wizard(s), this function raises a `ContinuableFailure` exception.  \n\nExamples:\n---------\n.. code:: RobotFramework\n\n    | Expand Bgp Route Wizard | Wizards=@{Wizards} |",
  "TesterLibrary.Wizard.isis_lsp.create_isis_lsp_wizard": "测试仪表创建Isis Lsp向导对象\n\n该函数用于创建并返回一个 ``IsisLspWizard`` 实例，用于配置和管理ISIS LSP（Link State Protocol）会话。该实例可以用于后续的ISIS LSP配置和控制操作。\n\nArgs:\n\n    Sessions (list, set, tuple or obj): 一个或多个所属的ISIS协议会话对象。如果传入的是单个会话对象，将自动将其转换为列表形式。\n\nKeyword Args:\n\n    CreateLspLevel (str): 创建LSP的级别，默认值：CREATE_L2_LSP，可选值包括：\n\n        CREATE_L1_LSP: 仅创建Level-1 LSP\n\n        CREATE_L2_LSP: 仅创建Level-2 LSP（默认）\n\n        CREATE_L1_L2_LSP: 同时创建Level-1 和 Level-2 LSP\n\n    其他可选参数（**kwargs）可用于进一步配置 ``IsisLspWizard`` 实例，如定时器、认证方式或其他协议相关选项。\n\nReturns:\n\n    Wizard (:obj:`IsisLspWizardConfig`): 返回一个初始化后的Isis Lsp向导对象，可用于进行后续的LSP配置与管理操作。\n\nExamples:\n    .. code:: RobotFramework\n\n        | Create Isis Lsp Wizard | Sessions=@{sessions} | CreateLspLevel=CREATE_L1_LSP |",
  "TesterLibrary.Wizard.isis_lsp.config_isis_lsp_wizard_network_topo": "Configure the network topology for one or more IS-IS LSP (Link State Packet) wizards with specified topology type and parameters.\n\n### Purpose\nThis function is used to configure different types of network topologies (such as TREE, GRID, FULL_MESH, RING, HUB_SPOKE, etc.) for IS-IS LSP wizards. It wraps the internal `config_network_topo` method of each wizard object and applies the same configuration across all provided wizards.\n\n### Parameters\n\n- **Wizards** (`list`):  \n  A list of IS-IS LSP wizard objects to be configured. Each wizard must support the `config_network_topo` method.\n\n- **Type** (`str`):  \n  The type of network topology to configure. Default: `TREE`.  \n  Valid values:\n  - `NONE`\n  - `TREE`\n  - `GRID`\n  - `FULL_MESH`\n  - `RING`\n  - `HUB_SPOKE`\n\n- **kwargs** (`dict`):  \n  Additional keyword arguments specifying topology-specific configuration options. These should match the expected parameters based on the selected topology type.\n\n#### Topology-Specific Parameters\n\n##### Tree (TREE)\n- `TreeSimulatedRoutersCount` (`int`, default: 10, range: 1–10000): Number of simulated routers in the tree.\n- `TreeInterfaceType` (`str`, default: `BROADCAST`, valid: `BROADCAST`, `P2P`): Interface type.\n- `TreeMaxInterfacesPerRouter` (`int`, default: 4, range: 2–100): Max interfaces per router.\n- `TreeMaxRoutersPerTransitNetwork` (`int`, default: 5, range: 2–10000): Max routers per transit network.\n\n##### Grid (GRID)\n- `GridSimulatedRoutersCount` (`int`, default: 16, range: 0–10000): Total number of simulated routers.\n- `GridSimulatedRoutersPerEmulatedRouter` (`int`, default: 16, range: 0–10000): Simulated routers per emulated router.\n- `GridNumberOfRows` (`int`, default: 4, range: 1–10000): Number of rows in grid layout.\n- `GridNumberOfColumns` (`int`, default: 4, range: 1–10000): Number of columns in grid layout.\n- `GridEmulatedRouterPosition` (`str`, default: `ATTACHED`, valid: `ATTACHED`, `MEMBER`): Position of emulated router.\n- `GridEmulatedRouterRowIndex` (`int`, default: 1, range: 1–10000): Row index of emulated router.\n- `GridEmulatedRouterColumnIndex` (`int`, default: 1, range: 1–10000): Column index of emulated router.\n\n##### Full Mesh (FULL_MESH)\n- `MeshSimulatedRoutersCount` (`int`, default: 10, range: 0–10000): Total number of simulated routers.\n- `MeshSimulatedRoutersPerEmulatedRouter` (`int`, default: 10, range: 0–10000): Simulated routers per emulated router.\n- `MeshNumberOfRouters` (`int`, default: 10, range: 1–100): Number of routers in the mesh.\n- `MeshEmulatedRouterPosition` (`str`, default: `ATTACHED`, valid: `ATTACHED`, `MEMBER`): Emulated router position.\n\n##### Ring (RING)\n- `RingSimulatedRoutersCount` (`int`, default: 10, range: 0–10000): Total number of simulated routers.\n- `RingSimulatedRoutersPerEmulatedRouter` (`int`, default: 10, range: 0–10000): Simulated routers per emulated router.\n- `RingNumberOfRouters` (`int`, default: 10, range: 1–10000): Number of routers in the ring.\n- `RingEmulatedRouterPosition` (`str`, default: `ATTACHED`, valid: `ATTACHED`, `MEMBER`): Emulated router position.\n\n##### Hub-and-Spoke (HUB_SPOKE)\n- `HubSimulatedRoutersCount` (`int`, default: 10, range: 0–10000): Total number of simulated routers.\n- `HubSimulatedRoutersPerEmulatedRouter` (`int`, default: 10, range: 0–10000): Simulated routers per emulated router.\n- `HubNumberOfRouters` (`int`, default: 10, range: 1–100): Number of routers in the hub-spoke topology.\n- `HubEmulatedRouterPosition` (`str`, default: `ATTACHED_TO_HUB`, valid:  \n  `ATTACHED_TO_HUB`, `ATTACHED_TO_SPOKE`, `MEMBERAS_HUB`, `MEMBERAS_SPOKE`): Emulated router position.\n\n### Returns\n\n- `bool`:  \n  Returns `True` if the configuration was successful for all wizards; otherwise, returns `False`.\n\n### Raises\n\n- `ContinuableFailure`:  \n  If any configuration fails, a `ContinuableFailure` exception is raised with an appropriate error message.\n\n### Example Usage\n\n```robotframework\n| Config Isis Lsp Wizard Network Topo | Wizards=@{wizard} | Type=TREE |\n```\n\nThis example configures a tree topology with default settings for all simulated routers and interface configurations.",
  "TesterLibrary.Wizard.isis_lsp.config_isis_lsp_wizard_isis": "配置ISIS LSP（链路状态PDU）设置，使用单个向导或一组向导进行配置。\n\n该函数接受单个向导对象或多个向导的可迭代对象（如列表、集合或元组），并对每个向导调用其 `config_isis` 方法，传入指定的配置参数。此函数用于统一配置多个向导的ISIS LSP相关设置，简化批量操作。\n\n参数：\n    Wizards (object 或 iterable of objects):\n        一个向导对象或包含多个向导对象的可迭代结构。每个向导必须具有 `config_isis` 方法，\n        该方法根据提供的 ISIS LSP 设置执行实际配置。\n    **kwargs:\n        任意关键字参数，将直接传递给每个向导的 `config_isis` 方法。\n        常见参数包括但不限于以下内容：\n\n        - InterfaceStartIpv4Prefix (str): 接口起始IPv4前缀，默认值为 '1.0.0.0'，取值范围：有效的IPv4地址\n        - InterfaceEndIpv4Prefix (str): 接口结束IPv4前缀，默认值为 '223.255.255.255'，取值范围：有效的IPv4地址\n        - InterfaceStartIpv6Prefix (str): 接口起始IPv6前缀，默认值为 '2000::'，取值范围：有效的IPv6地址\n        - InterfaceEndIpv6Prefix (str): 接口结束IPv6前缀，默认值为 '3ffe::'，取值范围：有效的IPv6地址\n        - AdvertiseLoopbackAddress (bool): 是否广播环回地址，默认值为 False\n        - EnableTrafficEngine (bool): 是否启用流量工程(TE)配置，默认值为 False\n        - EnableSegmentRouting (bool): 是否启用段路由(SR)配置，默认值为 False\n        - EnableSegmentRoutingIPv6 (bool): 是否启用SRv6配置，默认值为 False\n        - EnableFlexAlgo (bool): 是否启用Flex Algorithm配置，默认值为 False\n        - StartSystemId (str): 起始系统ID，默认值为 '10:00:00:00:00:01'，取值范围：有效的MAC地址\n        - SystemIdStep (str): 系统ID步长，默认值为 '00:00:00:00:00:01'，取值范围：有效的MAC地址\n        - StartRouterId (str): 起始路由器ID，默认值为 '1.0.0.1'，取值范围：有效的IPv4地址\n        - RouterIdStep (str): 路由器ID步长，默认值为 '0.0.0.1'，取值范围：有效的IPv4地址\n        - StartIPv6RouterId (str): IPv6起始路由器ID，默认值为 '2000::2'，取值范围：有效的IPv6地址\n        - RouterIdIPv6Step (int): IPv6路由器ID步长，默认值为 1\n\n返回值：\n    list 或 object:\n        如果处理了多个向导，则返回由每个向导的 `config_isis` 方法返回结果组成的列表；\n        如果仅处理了一个向导，则直接返回该向导配置的结果对象。\n\n说明：\n    此函数简化了对多个向导实例进行统一ISIS LSP配置的过程，并确保所有向导应用相同的配置参数。\n    它抽象了处理单一和多个向导输入的复杂性，为调用者提供一致的接口。\n\n示例：\n    .. code:: RobotFramework\n\n        | Config Isis Lsp Wizard Isis | Wizards=@{wizard} | EnableSegmentRouting=True | StartSystemId=10:00:00:00:00:02",
  "TesterLibrary.Wizard.isis_lsp.config_isis_lsp_wizard_isis_te": "配置一个或多个IS-IS LSP向导中的IS-IS流量工程（TE）参数。\n\n参数：\n    Wizards (object 或 iterable of objects): \n        单个向导对象或包含多个向导对象的可迭代对象（如列表、集合或元组），每个向导对象必须包含`config_isis_te`方法。\n    \n    **kwargs:\n        任意关键字参数，直接传递给每个向导对象的`config_isis_te`方法。这些参数用于配置IS-IS TE的具体属性，包括但不限于以下选项：\n\n        - EnableInterfaceIp (bool): 是否启用本地IPv4地址，默认值：False\n        - InterfaceIp (str): 本地IPv4地址，取值范围为有效IPv4地址，默认值：'0.0.0.0'\n        - EnableNeighborIp (bool): 是否启用邻居IPv4地址，默认值：False\n        - NeighborIp (str): 邻居IPv4地址，取值范围为有效IPv4地址，默认值：'10.0.0.1'（原文档中类型错误，应为str）\n        - EnableInterfaceIpv6 (bool): 是否启用本地IPv6地址，默认值：False\n        - InterfaceIpv6 (str): 本地IPv6地址，取值范围为有效IPv6地址，默认值：'2000::1'\n        - EnableNeighborIpv6 (bool): 是否启用邻居IPv6地址，默认值：False\n        - NeighborIpv6 (str): 邻居IPv6地址，取值范围为有效IPv6地址，默认值：'2000::1'\n        - EnableTeGroup (bool): 是否启用TE组标识，默认值：False\n        - TeGroup (int): TE组编号，取值范围：0-4294967295，默认值：1\n        - EnableMaxBandwidth (bool): 是否启用最大链路带宽配置，默认值：False\n        - MaximunLink (int): 最大链路带宽（字节/秒），取值范围：0-4294967295，默认值：1000\n        - EnableResBandwidth (bool): 是否启用最大可预留带宽配置，默认值：False\n        - MaximumReservableLink (int): 最大可预留带宽（字节/秒），默认值：1000\n        - EnableUnresBandwidth (bool): 是否启用未预留带宽优先级配置，默认值：False\n        - UnreservedBandwidth0 ~ UnreservedBandwidth7 (int): 优先级0~7的未预留带宽值（字节/秒），默认值：0\n\n返回值：\n    list or object:\n        如果传入多个向导对象，则返回每个向导调用`config_isis_te`后的结果组成的列表；如果只传入一个向导对象，则直接返回该向导的配置结果。\n\n描述：\n    本函数用于统一配置IS-IS LSP向导中的流量工程相关参数。它确保即使输入的是单个向导对象，也会被当作可迭代对象处理，并依次对每个向导调用其内部的`config_isis_te`方法以完成配置。若配置失败，则抛出异常；若成功，则根据向导数量决定返回格式。\n\n示例：\n    .. code:: RobotFramework\n\n        | Config Isis Lsp Wizard Isis Te | Wizards=@{wizard} | EnableTeGroup=True | TeGroup=5 | EnableMaxBandwidth=True | MaximunLink=1000000 |",
  "TesterLibrary.Wizard.isis_lsp.config_isis_lsp_wizard_isis_sr": "Configures ISIS SR (Segment Routing) settings for one or more ISIS LSP (Link State Packet) wizards.\n\nThis function accepts a single wizard or a collection of wizards (list, set, or tuple),\nand invokes the `config_isis_sr` method on each of them with the provided keyword arguments.\nIt ensures uniform configuration of ISIS SR parameters across multiple LSP wizards.\n\nParameters:\n    Wizards (object or iterable): A single wizard object or an iterable (list, set, tuple)\n                                  containing multiple wizard objects. Each wizard must have\n                                  a `config_isis_sr` method that accepts arbitrary keyword arguments.\n\n    **kwargs: Arbitrary keyword arguments that define the ISIS SR configuration parameters.\n              These are passed directly to the `config_isis_sr` method of each wizard and include:\n\n        SR Capability Sub-TLV Configuration:\n\n            ValueType (str): Value type, default: BIT20. Options: BIT20, BIT32.\n\n            CapabilityFlags (list): Flags, default: ['IPv4_CAPABLE']. Options: IPv4_CAPABLE, IPv6_CAPABLE.\n\n            SidLabelBase (list): SID/Label Bases, default: [800000].\n\n            SidLabelRange (list): SID/Label Ranges, default: [80000].\n\n        SID Configuration:\n\n            EnableMappingServer (bool): Enable Mapping Server, default: False.\n\n            NodeSidStart (int): SID/Index start value, default: 101.\n\n            NodeSidStep (int): SID/Index step value, default: 1.\n\n            NodeSidAlgorithm (int): Algorithm, default: 0.\n\n            NodeSidFlags (list): Flags, default: ['NODESID', 'NOPHP']. Options: NOSHOW, ADVERTISEMENT,\n                                 NODESID, NOPHP, EXPLICIT, VALUE, LOCAL.\n\n            EnablePrefixSid (bool): Enable Prefix SID, default: False.\n\n            PrefixSidStart (int): SID/Index start value, default: 11000.\n\n            PrefixSidStep (int): SID/Index step value, default: 1.\n\n            EnableNeighborSid (bool): Enable Neighbor SID, default: False.\n\n            NeighborSidStart (int): SID/Index start value, default: 9001.\n\n            NeighborSidStep (int): SID/Index step value, default: 1.\n\n            NeighborSidWeight (int): Weight, default: 100.\n\n            NeighborSidFlags (list): Flags, default: ['VALUE', 'LOCAL']. Options: NOSHOW, ADDRESS,\n                                     BACKUP, VALUE, LOCAL, SET, PERSISTENT.\n\n        Anycast Configuration:\n\n            EnableAnycastSid (bool): Enable Anycast SID, default: False.\n\n            AnycastRangeSize (int): Range size, default: 80000.\n\n            AnycastBaseSid (int): Base SID, default: 800000.\n\n            AnycastSidStart (int): SID/Index start value, default: 100.\n\n            AnycastSidFlags (list): Flags, default: ['NODESID', 'NOPHP']. Options: NOSHOW, ADVERTISEMENT,\n                                    NODESID, NOPHP, EXPLICIT, VALUE, LOCAL.\n\n            AnycastIpv4Address (str): IPv4 address, default: 192.0.0.1. Must be a valid IPv4 address.\n\n            AnycastIpv6Address (str): IPv6 address, default: 2000::1. Must be a valid IPv6 address.\n\nReturns:\n    list or object: If multiple wizards are provided, returns a list of configuration results\n                    from each wizard's `config_isis_sr` method. If only one wizard is provided,\n                    returns the result of its `config_isis_sr` method directly.\n\nDescription:\n    The function first checks if the input 'Wizards' is an iterable; if not, it wraps it into a list.\n    Then, for each wizard in the collection, it calls the `config_isis_sr` method with the provided\n    configuration parameters. Finally, it returns the results either as a list or a single value,\n    depending on the number of wizards processed.",
  "TesterLibrary.Wizard.isis_lsp.config_isis_lsp_wizard_isis_srv6": "Configure ISIS SRv6 settings on one or more ISIS LSP wizards.\n\n    This function applies the ISIS SRv6 configuration to each provided wizard object by invoking\n    the `config_isis_srv6` method of the wizard with the given keyword arguments. If a single wizard\n    is provided, it is handled as a list internally to maintain consistency in processing.\n\n    Parameters:\n        Wizards (object or iterable): A single wizard object or an iterable (list, set, tuple) of wizard objects.\n                                      Each wizard must have a `config_isis_srv6` method that accepts arbitrary\n                                      keyword arguments for SRv6 configuration parameters.\n\n        **kwargs: Arbitrary keyword arguments representing SRv6 configuration options to be passed\n                  to each wizard's `config_isis_srv6` method. These may include parameters such as:\n\n                  MtId (int): Multi-topology ID. Default: 2\n\n                  Metric (int): Metric value for the route. Default: 10\n\n                  Flags (list): List of flag values affecting behavior. Default: ['UNKNOWN'], valid values include:\n\n                      UNKNOWN, D_BIT, A_BIT, UNUSED2, UNUSED3, UNUSED4, UNUSED5, UNUSED6, UNUSED7\n\n                  Algorithm (int): Algorithm type for path calculation. Default: 0\n\n                  NumLocator (int): Number of Locators to configure. Default: 1\n\n                  LocatorSize (int): Size of the Locator in bits. Default: 64\n\n                  Locator (str): IPv6 prefix used as the Locator. Default: 'aaaa:1:1:1::'\n\n                  LocatorStep (int): Step increment for generating subsequent Locators. Default: 1\n\n                  EndFlags (list): Additional endpoint flags. Default: ['UNKNOWN'], valid values include:\n\n                      UNKNOWN, UNUSED0, UNUSED1, UNUSED2, UNUSED3, UNUSED4, UNUSED5, UNUSED6, UNUSED7\n\n                  EndpointFunc (str): Endpoint function behavior. Default: 'END_NO', valid values include:\n\n                      END_NO, END_PSP, END_USP, END_PSP_USP, END_X_NO, END_X_PSP, END_X_USP, END_X_PSP_USP,\n                      END_T_NO, END_T_PSP, END_T_USP, END_T_PSPS_USP, END_B6, END_B6_ENCAPS, END_BM, END_DX6,\n                      END_DX4, EDN_DT6, END_DT4, END_DT46, END_DX2, END_DX2V, END_DX2U, END_DX2M, END_S,\n                      END_B6_RED, END_B6_ENCAPS_RED, END_WITH_USD, END_PSP_USD, END_USP_USD, END_PSP_USP_USD,\n                      END_X_USD, END_X_PSP_USD, END_X_USP_USD, END_X_PSP_USP_USD, END_T_USD, END_T_PSP_USD,\n                      END_T_USP_USD, END_T_PSP_USP_USD\n\n                  EnableCustom (bool): Whether to enable custom endpoint behavior. Default: False\n\n                  CustomFunc (int): Identifier for custom function if enabled. Default: 0\n\n                  NumOfSid (int): Number of SIDs to configure. Default: 1\n\n                  SID (str): Segment Identifier (SID) value. Default: '::1'\n\n                  SIDStep (str): Step increment for generating subsequent SIDs. Default: '::1'\n\n    Returns:\n        list or object: If multiple wizards are provided, returns a list containing the result of\n                        SRv6 configuration from each wizard. If only one wizard is processed,\n                        returns the result of its configuration directly (not wrapped in a list).\n\n    Description:\n        The function ensures uniform handling of both single and multiple wizard inputs, then iteratively\n        configures each wizard using the provided SRv6 configuration parameters. It collects and returns\n        the results accordingly, preserving the input cardinality (returns a single value if one wizard is\n        given, or a list if multiple are provided).",
  "TesterLibrary.Wizard.isis_lsp.config_isis_lsp_wizard_isis_flex_algo": "Configures the ISIS Flex Algorithm settings for one or more LSP (Label Switched Path) wizards.\n\nThis function accepts a single wizard object or a collection of wizard objects, and applies\nthe `config_isis_flex_algorithm` method to each one with the provided configuration arguments.\nIt ensures uniform configuration across multiple LSP wizards for ISIS Flex Algorithm parameters.\n\nParameters:\n    Wizards (object or iterable of objects): \n        A single LSP wizard object or an iterable (list, set, tuple) of LSP wizard objects \n        for which the ISIS Flex Algorithm configuration will be applied.\n    **kwargs:\n        Arbitrary keyword arguments representing configuration parameters passed directly \n        to the `config_isis_flex_algorithm` method of each wizard. These should match the \n        expected parameters of that method, including:\n\n        FlexAlgo (int): Flex Algorithm value, default: 128, range: 128-255\n\n        Count (int): Number of FAD sub-TLVs to configure, default: 1\n\n        AlgorithmStep (int): Flex Algorithm Step, default: 1\n\n        MetricType (str): Metric type to use, default: IGP_METRIC, options: \n\n            IGP_METRIC\n\n            MIN_LINK_DELAY\n\n            TE_METRIC\n\n        CalType (int): Calculation type, default: 0\n\n        Priority (int): Priority level, default: 0\n\n        EnableExcludeAdmin (bool): Enable Exclude Admin Group flag, default: False\n\n        ExcludeAdmin (list): List of Exclude Admin Groups, default: [0]\n\n        EnableIncludeAnyAdmin (bool): Enable Include-Any Admin Group flag, default: False\n\n        IncludeAnyAdmin (list): List of Include-Any Admin Groups, default: [0]\n\n        EnableIncludeAllAdmin (bool): Enable Include-All Admin Group flag, default: False\n\n        IncludeAllAdmin (list): List of Include-All Admin Groups, default: [0]\n\n        EnableDefinitionFlags (bool): Enable Definition Flags, default: False\n\n        DefinitionFlags (list): List of Definition Flags, default: [80]\n\n        EnableExcludeSRLG (bool): Enable Exclude SRLG flag, default: False\n\n        ExcludeSRLG (list): List of Exclude SRLGs, default: [0]\n\nReturns:\n    list or object:\n        If multiple wizard objects are provided, returns a list of results from calling \n        `config_isis_flex_algorithm` on each wizard.\n        If only one wizard is provided, returns the result of calling \n        `config_isis_flex_algorithm` on that single wizard (i.e., not wrapped in a list).\n\nDescription:\n    The function first checks if the input 'Wizards' is not an iterable type (list, set, tuple),\n    and wraps it into a list if necessary. Then, it iterates through all wizard objects,\n    calls the `config_isis_flex_algorithm` method with the provided keyword arguments,\n    and collects the results. The return format depends on the number of wizards: a single \n    result is returned directly, while multiple results are returned as a list.\n\nExample:\n    .. code:: RobotFramework\n\n        | Config Isis Lsp Wizard Isis Flex Algo | Wizards=@{wizard} | FlexAlgo=130 | MetricType=TE_METRIC |",
  "TesterLibrary.Wizard.isis_lsp.config_isis_lsp_wizard_ipv4_internal_route": "Configures IPv4 internal route settings for one or more ISIS LSP (Link State PDU) wizards.\n\n    Parameters:\n        Wizards (object or iterable of objects): \n            A single wizard object or an iterable (list, set, or tuple) of wizard objects.\n            Each wizard must have a `config_ipv4_internal_route` method that accepts the provided `**kwargs`.\n        \n        **kwargs (dict): \n            Arbitrary keyword arguments to be passed directly to the `config_ipv4_internal_route` method\n            of each wizard. These are used to configure the IPv4 internal route parameters specific to the ISIS LSP.\n\n    Returns:\n        list or object: \n            If multiple wizard configurations are processed, returns a list of configuration results.\n            If only one wizard is processed, returns the result of its configuration directly.\n\n    Description:\n        This method simplifies the configuration of IPv4 internal routes across one or more ISIS LSP wizards.\n        It ensures uniform application of configuration parameters and handles both single wizard and bulk configuration\n        scenarios seamlessly. The return type adapts based on the number of input wizards—returning either a list\n        of results or a single result for convenience in different usage contexts.",
  "TesterLibrary.Wizard.isis_lsp.config_isis_lsp_wizard_ipv4_external_route": "Configure IPv4 external route settings on one or more ISIS LSP (Link State PDU) wizards.\n\nThis function allows for configuring IPv4 external routes on one or more ISIS LSP wizard instances.\nIt wraps the internal `config_ipv4_external_route` method of each wizard object and enables batch\nconfiguration across multiple wizards. The configuration parameters are passed as keyword arguments.\n\nParameters:\n    Wizards (object or iterable of objects):\n        A single wizard object or an iterable (list, set, or tuple) of wizard objects representing\n        ISIS LSP configurations. Each wizard must have a `config_ipv4_external_route` method.\n\nKeyword Args:\n    Ipv4ExternalAdvEmulatedRouters (bool):\n        Whether to advertise emulated routers as external routes. Default: False.\n        True means ALL, False means NONE.\n\n    Ipv4ExternalAdvSimulatedRouter (str):\n        Specifies which simulated routers to advertise as external routes. Default: 'ALL'.\n        Valid values: 'NONE', 'ALL', 'EDGE'.\n\n    Ipv4ExternalTotalNumberOfRoutes (int):\n        Total number of IPv4 external routes to create. Default: 0.\n        Range: 0 to 10,000,000.\n\n    Ipv4ExternalRoutesOverride (bool):\n        Enable overriding the default IPv4 prefix range. Default: False.\n\n    Ipv4ExternalStartRoutesPrefix (str):\n        Starting IP prefix for the external routes. Default: '3.0.0.0'.\n        Must be a valid IPv4 address.\n\n    Ipv4ExternalEndRoutesPrefix (str):\n        Ending IP prefix for the external routes. Default: '255.255.255.255'.\n        Must be a valid IPv4 address.\n\n    Ipv4ExternalRoutesNoneSeq (bool):\n        Enable preventing route aggregation. Default: False.\n\n    Ipv4ExternalRoutesPrefixLenType (str):\n        Distribution type for prefix lengths. Default: 'FIXED'.\n        Valid values: 'FIXED', 'LINEAR', 'INTERNET', 'CUSTOM'.\n\n    Ipv4ExternalRoutesPrefixLenStart (int):\n        Starting prefix length for route distribution. Default: 16.\n        Range: 1 to 32.\n\n    Ipv4ExternalRoutesPrefixLenEnd (int):\n        Ending prefix length for route distribution. Default: 16.\n        Range: 1 to 32.\n\n    Ipv4ExternalRoutesPrefixLenInternet (list):\n        Prefix length distribution for 'INTERNET' type. Must be a list of 32 values,\n        summing up to 100.0.\n\n    Ipv4ExternalRoutesPrefixLenCustom (list):\n        Prefix length distribution for 'CUSTOM' type. Must be a list of 32 values,\n        summing up to 100.0.\n\n    Ipv4ExternalNarrowMetric (int):\n        Narrow metric value for IS-IS external routes. Default: 10.\n        Range: 0 to 63.\n\n    Ipv4ExternalWideMetric (int):\n        Wide metric value for IS-IS external routes. Default: 10.\n        Range: 0 to 16,777,214.\n\nReturns:\n    bool: True if the configuration was successful. If any configuration fails, it raises a ContinuableFailure exception.\n\nDescription:\n    This function configures IPv4 external route settings on the provided ISIS LSP wizard(s).\n    It applies the same configuration to all wizards in the input collection. If any wizard\n    returns False during configuration, this function raises a ContinuableFailure exception.\n    Otherwise, it returns True upon successful configuration.\n\nNote:\n    This function uses the `@abnormal_check()` decorator internally, which may perform additional checks or exception handling.",
  "TesterLibrary.Wizard.isis_lsp.config_isis_lsp_wizard_ipv6_internal_route": "Configures IPv6 internal route settings for one or more ISIS LSP (Link State PDU) wizards.\n\nPurpose:\n    This function provides a centralized way to configure IPv6 internal routing information in ISIS LSP wizards. It allows both single and multiple wizard objects to be configured uniformly with a set of shared configuration parameters.\n\nParameters:\n    Wizards (object or iterable of objects): A single wizard object or an iterable (list, set, tuple)\n                                           containing multiple wizard objects. Each wizard must implement\n                                           the `config_ipv6_internal_route` method to accept the provided\n                                           configuration.\n\n    **kwargs (dict): Arbitrary keyword arguments representing specific IPv6 internal route configuration\n                     options. These are directly passed to the `config_ipv6_internal_route` method of each\n                     wizard. Available options include:\n\n        Ipv6InternalAdvEmulatedRouters (bool): Whether to advertise emulated routers.\n            - Default: False\n            - Values: True (ALL), False (None)\n\n        Ipv4InternalAdvSimulatedRouter (str): Simulated router advertisement setting.\n            - Default: 'ALL'\n            - Values: 'NONE', 'ALL', 'EDGE'\n\n        Ipv6InternalTotalNumberOfRoutes (int): Number of routes to create.\n            - Default: 0\n            - Range: 0–10,000,000\n\n        Ipv6InternalRoutesOverride (bool): Enable override of default IPv6 prefix range.\n            - Default: False\n\n        Ipv6InternalStartRoutesPrefix (str): Starting IPv6 prefix.\n            - Default: '3000::'\n            - Must be a valid IPv6 address.\n\n        Ipv6InternalEndRoutesPrefix (str): Ending IPv6 prefix.\n            - Default: '3ffe::'\n            - Must be a valid IPv6 address.\n\n        Ipv6InternalRoutesNoneSeq (bool): Enable prevention of route aggregation.\n            - Default: False\n\n        Ipv6InternalRoutesPrefixLenType (str): Prefix length distribution type.\n            - Default: 'FIXED'\n            - Values: 'FIXED', 'LINEAR', 'INTERNET', 'CUSTOM'\n\n        Ipv6InternalRoutesPrefixLenStart (int): Starting prefix length.\n            - Default: 64\n            - Range: 1–128\n\n        Ipv6InternalRoutesPrefixLenEnd (int): Ending prefix length.\n            - Default: 64\n            - Range: 1–128\n\n        Ipv6InternalRoutesPrefixLenInternet (list): Distribution for 'INTERNET' type; list of 128 values summing to 100.0.\n\n        Ipv6InternalRoutesPrefixLenCustom (list): Distribution for 'CUSTOM' type; list of 128 values summing to 100.0.\n\n        Ipv6InternalWideMetric (int): Extended IS-IS metric value.\n            - Default: 10\n            - Range: 0–16,777,214\n\nReturns:\n    bool: True if the configuration was successfully applied to all wizards.\n    If any configuration fails, returns False and raises a `ContinuableFailure` exception.\n\nDescription:\n    This function wraps the backend call to `renix.config_isis_lsp_wizard_ipv6_internal_route`. It ensures consistent configuration across all provided wizards by converting single wizard inputs into lists internally for uniform processing. The actual configuration logic is delegated to each wizard's `config_ipv6_internal_route` method, which receives the provided keyword arguments.\n\nExample:\n    .. code:: RobotFramework\n\n        | Config Isis Lsp Wizard Ipv6 Internal Route | Wizards=@{wizard} | Ipv6InternalTotalNumberOfRoutes=100 | Ipv6InternalWideMetric=20 |",
  "TesterLibrary.Wizard.isis_lsp.config_isis_lsp_wizard_ipv6_external_route": "Configures IPv6 external route settings for one or more ISIS LSP (Link State PDU) wizards.\n\n    Purpose:\n        This function is used to configure IPv6 external route parameters on one or more ISIS LSP wizard instances.\n        It allows setting various properties such as route advertisement options, prefix ranges, metric values,\n        and prefix length distributions for simulating realistic routing scenarios.\n\n    Parameters:\n        Wizards (object or iterable of objects): A single wizard object or an iterable (list, set, tuple)\n                                                 of wizard objects that support the `config_ipv6_external_route` method.\n                                                 Each wizard typically represents a configuration context for building\n                                                 or modifying ISIS LSPs with IPv6 external route capabilities.\n\n        **kwargs: Arbitrary keyword arguments that are passed directly to the `config_ipv6_external_route`\n                  method of each wizard. Supported keyword arguments include:\n\n            Ipv6ExternalAdvEmulatedRouters (bool): Whether to advertise routes to emulated routers.\n                                                   Default: False (None), Range: True (ALL), False (None)\n\n            Ipv6ExternalAdvSimulatedRouter (str): Which simulated routers to advertise routes to.\n                                                  Default: 'ALL', Range: 'NONE', 'ALL', 'EDGE'\n\n            Ipv6ExternalTotalNumberOfRoutes (int): Number of IPv6 external routes to generate.\n                                                   Default: 0, Range: 0–10,000,000\n\n            Ipv6ExternalRoutesOverride (bool): Enable custom IPv6 prefix range instead of default.\n                                               Default: False\n\n            Ipv6ExternalStartRoutesPrefix (str): Starting IPv6 prefix for generated routes.\n                                                 Default: '3001::', Range: Valid IPv6 address\n\n            Ipv6ExternalEndRoutesPrefix (str): Ending IPv6 prefix for generated routes.\n                                               Default: '3ffe::', Range: Valid IPv6 address\n\n            Ipv6ExternalRoutesNoneSeq (bool): Prevent route aggregation by disabling sequential prefixes.\n                                           Default: False\n\n            Ipv6ExternalRoutesPrefixLenType (str): Distribution type for prefix lengths.\n                                                Default: 'FIXED', Range: 'FIXED', 'LINEAR', 'INTERNET', 'CUSTOM'\n\n            Ipv6ExternalRoutesPrefixLenStart (int): Starting prefix length for route distribution.\n                                                    Default: 64, Range: 1–128\n\n            Ipv6ExternalRoutesPrefixLenEnd (int): Ending prefix length for route distribution.\n                                                  Default: 64, Range: 1–128\n\n            Ipv6ExternalRoutesPrefixLenInternet (list): Prefix length distribution weights for 'INTERNET' type.\n                                                        Expected: List of 128 float values summing to 100.0\n\n            Ipv6ExternalRoutesPrefixLenCustom (list): Prefix length distribution weights for 'CUSTOM' type.\n                                                      Expected: List of 128 float values summing to 100.0\n\n            Ipv6ExternalWideMetric (int): Extended IS-IS metric value for external routes.\n                                          Default: 10, Range: 0–16,777,214\n\n    Returns:\n        list or bool: If multiple wizard objects are provided, returns a list of boolean results from each\n                      `config_ipv6_external_route` call. If only one wizard is processed, returns a single\n                      boolean result indicating success (True) or failure (False).\n\n    Raises:\n        ContinuableFailure: If any wizard fails to apply the configuration, an exception is raised with a\n                            descriptive message, but execution may continue depending on test framework behavior.\n\n    Description:\n        This function ensures uniform configuration of IPv6 external routes across one or more wizard instances.\n        If a single wizard is provided, it is converted into a list internally to simplify iteration.\n        Then, for each wizard in the iterable, the `config_ipv6_external_route` method is called with the provided\n        keyword arguments. The results of these calls are collected and returned.\n\n    Example Usage:\n        .. code:: RobotFramework\n\n            | Config Isis Lsp Wizard Ipv6 External Route | Wizards=@{wizard} |\n            | Config Isis Lsp Wizard Ipv6 External Route | Wizards=${single_wizard} | Ipv6ExternalTotalNumberOfRoutes=1000 | Ipv6ExternalWideMetric=20 |",
  "TesterLibrary.Wizard.isis_lsp.expand_isis_lsp_wizard": "Expands the IS-IS LSP (Link State Protocol) wizard(s) provided.\n\nThis function is used to trigger the expansion of one or more IS-IS LSP configuration wizards via the Renix API. It can accept either a single wizard object or an iterable (such as a list, set, or tuple) of wizard objects. Each wizard must implement the `expand()` method, which will be called sequentially to perform the necessary configuration or setup actions, such as preparing or applying IS-IS protocol settings in a network testing context.\n\nIf a single wizard object is passed, it is internally converted into a list for uniform processing. The function returns True upon successful expansion of all wizards and raises an exception if any issues occur during execution.\n\nParameters:\n-----------\nWizards : object or iterable\n    A single wizard object or an iterable (list, set, tuple) containing one or more wizard objects.\n    Each wizard must have an `expand()` method that will be invoked during processing.\n\nReturns:\n--------\nbool\n    Always returns True to indicate successful execution of the operation.\n\nRaises:\n-------\nContinuableFailure\n    If the underlying Renix API call fails (i.e., returns False), this exception is raised to signal failure,\n    but the test or script may continue execution depending on error handling logic.\n\nTypeError\n    If any of the elements in `Wizards` does not have an `expand()` method.\n    (Note: This error would typically be raised at runtime when attempting to invoke `.expand()`.)\n\nDescription:\n------------\nThis function is typically used in network testing scenarios where IS-IS LSP configurations are managed through a graphical or programmatic interface. By expanding the wizard(s), the system prepares the configuration for further steps such as application or validation.\n\nExample:\n--------\n.. code:: RobotFramework\n\n    | Expand Isis Lsp Wizard | Wizards=@{Wizards} |",
  "TesterLibrary.Wizard.mpls.create_mpls_wizard": "测试仪表创建MPLS向导\n\n该函数用于根据指定的MPLS向导类型创建相应的MPLS配置向导对象。它封装了底层RenixAPI的调用，提供了对多种MPLS配置的支持，包括MPLS IP VPN、MPLS 6VPE、BGP VPLS、LDP VPLS 和 PWE。根据传入的类型参数实例化对应的配置类，并支持额外的配置选项通过关键字参数传入。\n\nArgs:\n\n    Type (str): 指定要创建的MPLS向导类型，支持以下值（大小写不敏感）：\n\n        mpls_ip_vpn\n\n        mpls_6vpe\n\n        bgp_vpls\n\n        ldp_vpls\n\n        pwe\n\nKeyword Args:\n\n    enable_vpls_scalability (bool): 是否启用VPLS可扩展性功能，默认为False。该参数仅在创建与VPLS相关的向导时有意义。\n\nReturns:\n\n    Wizard (obj: `WizardConfig` 或其子类): 返回一个具体的MPLS配置向导对象，具体类型取决于输入的Type参数。可能的返回类型包括:\n\n        MplsIpVpn: 当Type为'mpls_ip_vpn'时\n\n        Mpls6VPe: 当Type为'mpls_6vpe'时\n\n        BgpVpls: 当Type为'bgp_vpls'时\n\n        LdpVpls: 当Type为'ldp_vpls'时\n\n        Pwe: 当Type为'pwe'时\n\n    如果提供的Type不匹配任何已知类型，函数将返回False并抛出ContinuableFailure异常。\n\nRaises:\n\n    ContinuableFailure: 当无法识别MPLS向导类型时抛出此异常，表示操作失败但可以继续执行后续步骤。\n\nExamples:\n    .. code:: RobotFramework\n\n        | Create Mpls Wizard | Type=mpls_ip_vpn |\n        \n    .. code:: RobotFramework\n\n        | Create Mpls Wizard | Type=bgp_vpls | enable_vpls_scalability=True |",
  "TesterLibrary.Wizard.mpls.expand_mpls_wizard": "生成测试仪表MPLS向导配置\n\n该函数用于展开MPLS配置向导，其内部调用了传入的Wizard对象的`expand`方法以执行实际的扩展逻辑。通常在需要触发MPLS向导展开操作的场景中使用，并可结合装饰器（如@abnormal_check）进行异常检查或其他处理。\n\n参数：\n    Wizard (:obj:`WizardConfig`) -- 一个包含`expand`方法的向导对象，用于控制MPLS向导的展开行为。\n\n返回值：\n    bool -- 表示展开操作是否成功。若返回False，则会抛出ContinuableFailure异常并附带失败信息；若返回True，则表示操作成功。\n\n示例：\n    | Expand Mpls Wizard | Wizard=${Wizard} |",
  "TesterLibrary.Wizard.mpls.edit_mpls_provider_port": "配置MPLS向导提供商侧端口\n\n该函数用于通过指定的向导对象（Wizard）和端口信息来编辑MPLS提供商侧端口的配置。它是一个封装了 `renix.edit_mpls_provider_port` 方法的接口，并在调用失败时抛出异常。\n\nArgs:\n\n    Wizard (:obj:`WizardConfig`): 向导配置对象，必须包含有效的向导上下文以支持MPLS配置操作。\n\n    Port (list(:obj:`Port`)): 测试仪表端口对象列表，表示要配置的MPLS提供商侧物理端口。\n\nKeyword Args:\n\n    PortIndex (int): 端口索引，默认值: 0\n\n    EnableSubInterface (bool): 是否启用子接口，默认值: False\n\n    SubInterfaceCount (int): 子接口数量，默认值: 1\n\n    DutIpv4Address (str): DUT IPv4地址，默认值: '192.85.1.1'\n\n    DutIpv4AddressStep (str): 每次增加的IPv4地址步长，默认值: '0.0.1.0'\n\n    Ipv4PrefixLength (int): IPv4地址前缀长度，默认值: 24\n\n    VlanId (int): VLAN ID，默认值: 1\n\n    VlanIdStep (int): VLAN ID步长，默认值: 1\n\nReturns:\n\n    bool: 如果操作成功返回True，否则返回False并抛出ContinuableFailure异常。\n\nExamples:\n    .. code:: RobotFramework\n\n        | Edit Mpls Provider Port | Wizard=${Wizard} | Port=${Port} | EnableSubInterface=True |",
  "TesterLibrary.Wizard.mpls.edit_mpls_customer_port": "配置MPLS向导客户侧端口\n\n该函数用于通过提供的向导配置对象和端口信息来编辑MPLS客户侧端口的配置。它是一个封装函数，将实际的编辑任务委托给`Wizard`对象的`edit_customer_port`方法。此函数支持通过关键字参数传递任意的配置参数，从而实现灵活的配置选项。\n\nArgs:\n\n    Wizard (:obj:`WizardConfig`): 向导配置对象，必须具备`edit_customer_port`方法用于执行端口编辑操作。\n\n    Port (list(:obj:`Port`)): 测试仪表的客户侧端口对象列表，表示需要配置的一个或多个测试端口。\n\nKeyword Args:\n\n    PortIndex (int): 端口索引，默认值: 0，用于指定当前操作的端口在列表中的位置。\n\n    EnableSubInterface (bool): 是否启用子接口，默认值: False。\n\n    SubInterfaceCount (int): 子接口数量，仅在启用子接口时有效，默认值: 1。\n\n    DutIpv4Address (str): DUT的IPv4地址，默认值: '192.85.1.1'。\n\n    DutIpv4AddressStep (str): IPv4地址步长，用于批量配置递增，默认值: '0.0.1.0'。\n\n    Ipv4PrefixLength (int): IPv4地址前缀长度，默认值: 24。\n\n    DutIpv6Address (str): DUT的IPv6地址，默认值: '::'。\n\n    DutIpv6AddressStep (str): IPv6地址步长，默认值: '0:0:0:1::'。\n\n    Ipv6PrefixLength (int): IPv6地址前缀长度，默认值: 64。\n\n    VlanId (int): VLAN ID，默认值: 1。\n\n    VlanIdStep (int): VLAN ID步长，默认值: 1。\n\nReturns:\n\n    bool: 操作是否成功，返回True表示成功，False表示失败。\n\nRaises:\n\n    ContinuableFailure: 如果底层调用返回False，则抛出可继续执行的失败异常，便于Robot Framework等自动化框架处理。\n\nExamples:\n    .. code:: RobotFramework\n\n        | Edit Mpls Customer Port | Wizard=${Wizard} | Port=${Port} | EnableSubInterface=True | VlanId=100 |\n\nDescription:\n------------\n此函数简化了MPLS客户侧端口的配置过程，通过封装对`Wizard.edit_customer_port(Port, **kwargs)`的调用，提供了结构化的参数设置方式，并支持默认值与自定义覆盖。适用于各种MPLS客户侧端口配置场景，如VLAN、IP地址、子接口等设置。",
  "TesterLibrary.Wizard.mpls.edit_mpls_provider_router_basic_parameters": "配置MPLS提供商侧路由的基本参数\n\n该函数用于通过提供的Wizard对象及关键字参数，编辑MPLS提供商侧路由的基本配置参数。它作为封装函数，将实际的编辑操作委托给Wizard对象的`edit_provider_router_basic_parameters`方法。\n\nArgs:\n\n    Wizard (:obj:`WizardConfig`): 用于执行MPLS提供商路由器基本参数编辑的向导配置对象。\n\nKeyword Args:\n\n    DutRouterId (str): DUT的路由ID，默认值：'10.0.0.1'，取值范围为有效的IPv4地址。\n\n    DutAsNumber (int): DUT的自治系统编号，默认值：1。\n\n    Enable4ByteDutAs (bool): 是否启用4字节的DUT自治系统编号，默认值：False。\n\n    FourByteDutAsNumber (int): 4字节DUT自治系统编号，默认值：1（部分设备可能使用格式如'1:1'）。\n\n    IgpProtocol (str): 使用的IGP协议类型，默认值：OSPF，可选值包括：\n\n        - OSPF\n\n        - ISIS\n\n        - RIP\n\n    MplsProtocol (str): 使用的MPLS协议类型，默认值：LDP，可选值包括：\n\n        - LDP\n\n        - OSPF_SR\n\n        - ISIS_SR\n\n    EnablePRouter (bool): 是否启用P路由器，默认值：True。\n\n    PRoutersPerInterface (int): 每个端口或子接口中P路由器的数量，默认值：1。\n\n    TopologyType (str): 拓扑结构类型，默认值：Tree，可选值包括：\n\n        - Tree\n\n        - Grid\n\n    PRouterStartIp (str): P路由器接口IP起始地址，默认值：'1.0.0.1'，必须是合法的IPv4地址。\n\n    PRouterPrefixLength (int): P路由器接口IP地址的子网掩码前缀长度，默认值：24。\n\n    PRouterIdStart (str): P路由器的Router ID起始地址，默认值：'192.0.1.1'。\n\n    PRouterIdStep (str): P路由器ID步长，每次递增的IP偏移量，默认值：'0.0.1.0'。\n\n    PeRoutersPerInterface (int): 每个端口或子接口中PE路由器的数量，默认值：1。\n\n    PeRouterIdStart (str): PE路由器ID起始地址，默认值：'10.0.0.2'。\n\n    PeRouterIdStep (str): PE路由器ID步长，默认值：'0.0.0.1'。\n\n    EnableRouteReflectors (bool): 是否启用路由反射器，默认值：False。\n\n    Enable6Vpe (bool): 是否启用6VPE功能，默认值：False。\n\nReturns:\n\n    bool: 如果配置成功返回True，否则抛出ContinuableFailure异常并返回False。\n\nExamples:\n    .. code:: RobotFramework\n\n        | Edit Mpls Provider Router Basic Parameters | Wizard=${Wizard} | Port=${Port} | EnableSubInterface=True |",
  "TesterLibrary.Wizard.mpls.edit_mpls_provider_router_ldp": "配置MPLS提供商侧路由路由器LDP协议\n\n该函数用于配置MPLS（多协议标签交换）网络中提供商侧路由器的LDP（标签分发协议）相关参数。它通过传入的Wizard对象调用底层实现方法，并支持通过关键字参数灵活设置LDP配置选项。\n\nArgs:\n\n    Wizard (:obj:`WizardConfig`): 用于执行实际配置操作的向导配置对象，必须包含 `edit_provider_router_mpls_ldp` 方法\n\nKeyword Args:\n\n    HelloType (str): LDP会话的Hello类型，默认值：DIRECT，取值范围:\n\n        DIRECT: 直接发现模式\n\n        TARGETED: 目标发现模式\n\n        DIRECT_TARGETED: 同时使用直接和目标发现模式\n\n    TransportAddressTlvMode (str): Transport地址TLV模式，默认值：TESTER_IP，取值范围:\n\n        TESTER_IP: 使用测试仪IP作为Transport地址\n\n        ROUTER_ID: 使用路由器ID作为Transport地址\n\n        NONE: 不发送Transport地址TLV\n\n    LabelAdvertisementMode (str): 标签通告方式，默认值：DU (下游自主)，取值范围:\n\n        DU: 下游自主模式，主动发送标签映射消息\n\n        DOD: 下游按需模式，只有收到请求才发送标签映射消息\n\n    EgressLabelMode (str): 出方向标签分配模式，默认值：NEXT_AVAILABLE，取值范围:\n\n        NEXT_AVAILABLE: 自动选择下一个可用标签\n\n        IMPLICIT: 隐式空标签\n\n        EXPLICIT: 显式空标签\n\n    MinLabel (int): 最小可用标签值，默认值：16（MPLS标签保留值下限）\n\n    AuthenticationMode (str): 会话认证模式，默认值：NONE，取值范围:\n\n        NONE: 不启用认证\n\n        MD5: 启用MD5认证\n\n    Password (str): 认证使用的密码，默认值：xinertel\n\nReturns:\n\n    bool: 返回布尔值表示配置是否成功，True表示成功，False表示失败\n\nExamples:\n    .. code:: RobotFramework\n\n        | Edit Mpls Provider Router Ldp | Wizard=${Wizard} | HelloType=DIRECT |\n        | Edit Mpls Provider Router Ldp | Wizard=${Wizard} | HelloType=TARGETED | TransportAddressTlvMode=ROUTER_ID | LabelAdvertisementMode=DOD |\n\nDescription:\n    该函数封装了对 `renix.edit_mpls_provider_router_ldp` 的调用，并在返回False时抛出一个可继续执行的异常（ContinuableFailure），以支持自动化测试框架中的错误处理机制。若操作成功，则返回True；否则根据情况可能抛出异常或返回False。",
  "TesterLibrary.Wizard.mpls.edit_mpls_provider_router_ospf": "配置MPLS提供商侧路由器的OSPF协议。\n\n该函数用于在MPLS（多协议标签交换）环境中，通过提供的向导对象（Wizard）配置提供商路由器的OSPF（开放式最短路径优先）协议。它作为封装函数，调用底层 `Wizard.edit_provider_router_igp_ospf` 方法来完成实际的配置编辑工作，通常用于测试自动化或网络配置场景中对MPLS路由相关的OSPF参数进行修改。\n\n**参数说明：**\n\n- **Wizard** (:obj:`WizardConfig`)  \n  配置向导对象，封装了与网络设备交互并执行配置所需的方法和上下文信息。\n\n- **kwargs (任意关键字参数)**  \n  表示需要配置的OSPF相关参数，支持以下可选字段：\n\n  - **AreaId** (str)  \n    区域ID，默认值：`0.0.0.0`，取值范围：合法的IPv4地址格式字符串。\n  \n  - **NetworkType** (str)  \n    网络类型，默认值：`BROADCAST`，可选值包括：\n      - `BROADCAST`\n      - `P2P`\n\n  - **RouterPriority** (int)  \n    路由器优先级，默认值：`0`。\n\n  - **AuthenticationType** (str)  \n    认证类型，默认值：`NONE`，可选值包括：\n      - `NONE`\n      - `SIMPLE`\n      - `MD5`\n\n  - **Password** (str)  \n    简单认证密码，默认值：`Xinertel`。\n\n  - **Md5Key** (int)  \n    MD5认证密钥ID，默认值：`1`。\n\n  - **Options** (list of str)  \n    OSPF选项标志位列表，默认值：`['EBIT']`，可选值包括：\n      - `NONTBIT`\n      - `TOSBIT`\n      - `EBIT`\n      - `MCBIT`\n      - `NPBIT`\n      - `EABIT`\n      - `DCBIT`\n      - `OBIT`\n      - `DNBIT`\n\n  - **EnableGracefulRestart** (bool)  \n    是否启用平滑重启功能，默认值：`False`。\n\n  - **GracefulRestartReason** (str)  \n    平滑重启原因，默认值：`UNKNOWN`，可选值包括：\n      - `UNKNOWN`\n      - `SOFTWARE`\n      - `RELOADORUPGRADE`\n      - `SWITCH`\n\n  - **EnableBfd** (bool)  \n    是否启用BFD（双向转发检测）功能，默认值：`False`。\n\n  - **Algorithm** (int)  \n    SR（Segment Routing）算法编号，默认值：`0`。\n\n  - **SidLabelBase** (int)  \n    SR SID/Label起始基数，默认值：`100`。\n\n  - **SidLabelRange** (int)  \n    SR SID/Label分配范围长度，默认值：`100`。\n\n  - **NodeSidIndex** (int)  \n    SR节点SID索引，默认值：`0`。\n\n  - **NodeSidIndexStep** (int)  \n    SR节点SID索引步长，默认值：`1`。\n\n**返回值：**\n\n返回一个布尔值，表示配置是否成功：\n- `True`：配置成功。\n- `False`：配置失败。\n\n**异常行为：**\n若返回结果为 `False`，将抛出 `ContinuableFailure` 异常，包含当前函数名的失败信息，但不会中断整体执行流程（表示这是一个可继续执行的失败）。\n\n**使用示例：**\n\n.. code:: RobotFramework\n\n    | Edit Mpls Provider Router Ospf | Wizard=${Wizard} | AreaId=1.1.1.1 | NetworkType=P2P | AuthenticationType=MD5 | Md5Key=10 | EnableBfd=True |",
  "TesterLibrary.Wizard.mpls.edit_mpls_provider_router_isis": "配置MPLS提供商侧路由器的ISIS协议，通过提供的Wizard对象调用底层方法进行设置。\n\n该函数用于配置MPLS网络中提供商侧（PE）路由器上的ISIS路由协议。它将所有关键字参数转发给Wizard对象的`edit_provider_router_igp_isis`方法，以完成实际的协议配置。常用于测试自动化或网络配置场景中修改ISIS相关参数。\n\nArgs:\n\n    Wizard (:obj:`WizardConfig`): 一个提供`edit_provider_router_igp_isis`方法的向导配置对象，用于执行底层配置操作。\n\nKeyword Args:\n\n    UseSrcMacAsSystemId (bool): 是否使用源MAC地址作为系统ID，默认值：True\n\n    SystemId (str): ISIS系统ID，默认值：00:00:00:00:00:01\n\n    SystemIdStep (str): 系统ID步长，用于批量配置时递增，默认值：00:00:00:00:00:01\n\n    Level (str): ISIS层级类型，默认值：L2，可选值包括：\n\n        L1 - 区域内路由\n\n        L2 - 区域间路由\n\n        L1L2 - 同时支持L1和L2\n\n    NetworkType (str): 接口网络类型，默认值：BROADCAST，可选值：\n\n        BROADCAST - 广播型网络\n\n        P2P - 点对点网络\n\n    RouterPriority (int): 路由器优先级，用于DIS选举，默认值：0\n\n    MetricMode (str): 度量值模式，默认值：NARROWWIDE，可选：\n\n        NARROW - 使用传统度量值\n\n        WIDE - 使用扩展度量值\n\n        NARROWWIDE - 同时支持两种度量值\n\n    AuthenticationMode (str): 认证模式，默认值：NONE，可选：\n\n        NONE - 不启用认证\n\n        SIMPLE - 明文密码认证\n\n        MD5 - MD5哈希认证\n\n    Password (str): ISIS认证密码，默认值：Xinertel\n\n    AreaId (int): ISIS区域ID，默认值：10\n\n    EnableGracefulRestart (bool): 是否启用平滑重启功能，默认值：False\n\n    MultiTopologyId (list): 多拓扑ID列表，用于支持IPv4/IPv6多拓扑，默认值：None，可选值包括：\n\n        NOSHOW - 不显示\n\n        IPV4 - IPv4拓扑\n\n        IPV6 - IPv6拓扑\n\n    EnableBfd (bool): 是否启用BFD快速故障检测，默认值：False\n\n    HelloPadding (bool): 是否在Hello报文中填充，默认值：True\n\n    Algorithm (int): Segment Routing使用的算法索引，默认值：0\n\n    SidLabelBase (int): SR SID/标签的起始值，默认值：100\n\n    SidLabelRange (int): SR SID/标签分配的范围大小，默认值：100\n\n    NodeSidIndex (int): 节点SID索引，默认值：0\n\n    NodeSidIdnexStep (int): 节点SID索引步长，默认值：1\n\nReturns:\n\n    bool: 配置是否成功。True表示成功，False表示失败。\n\nRaises:\n\n    ContinuableFailure: 如果配置失败且返回False，则抛出此异常，包含失败信息。\n\nExamples:\n    .. code:: RobotFramework\n\n        | Edit Mpls Provider Router Isis | Wizard=${Wizard} | Level=L2 | MetricMode=WIDE | AuthenticationMode=MD5 | Password=secure123 |",
  "TesterLibrary.Wizard.mpls.edit_mpls_provider_router_rip": "配置MPLS提供商侧路由路由器的RIP协议。\n\n该函数用于通过提供的向导对象（Wizard）配置MPLS提供商路由器上的RIP（Routing Information Protocol）协议。它是一个封装函数，实际调用向导对象的 `edit_provider_router_igp_rip` 方法来完成底层配置。\n\n参数:\n    Wizard (:obj:`WizardConfig`): 向导配置对象，包含用于编辑RIP配置的方法。\n\n关键字参数 (**kwargs):\n    RipVersion (str): RIP协议版本，默认值：RIPV2。可选值包括：\n\n        - RIPV1\n        - RIPV2\n        - RIPNG\n\n    UpdateType (str): 路由更新类型，默认值：MULTICAST。可选值包括：\n\n        - BROADCAST\n        - MULTICAST\n        - UNICAST\n\n    UpdateInterval (int): 更新间隔（单位：秒），默认值：30。\n    UpdateJitter (int): 更新抖动时间（单位：秒），默认值：0，取值范围为 0 到 5。\n    MaxRouteNumPerUpdate (int): 每次更新的最大路由数，默认值：25。\n    AuthenticationMode (str): 认证方式，默认值：NONE。可选值包括：\n\n        - NONE\n        - SIMPLE\n        - MD5\n\n    Password (str): 认证密码，默认值：Xinertel。\n    Md5KeyId (int): MD5密钥标识符，默认值：1。\n    SplitHorizon (bool): 是否启用水平分割功能，默认值：False。\n\n返回值:\n    bool: 配置是否成功。True 表示成功，False 表示失败。\n\n异常:\n    如果配置失败，将抛出 `ContinuableFailure` 异常并附带相关错误信息。\n\n示例:\n    .. code:: RobotFramework\n\n        | Edit Mpls Provider Router Rip | Wizard=${Wizard} | RipVersion=RIPNG |",
  "TesterLibrary.Wizard.mpls.edit_mpls_provider_route_reflector": "配置MPLS提供商侧路由反射器\n\n该函数用于配置MPLS网络中提供商侧的路由反射器（Route Reflector）功能。它通过提供的Wizard对象调用底层API来设置相关参数，包括路由反射器的来源、BGP会话数量、RR路由器ID、簇ID等。\n\nArgs:\n\n    Wizard (:obj:`WizardConfig`): 向导配置对象，用于管理MPLS提供商路由反射器的配置，并实际执行配置修改操作。\n\nKeyword Args:\n\n    RouteReflectorSource (str): 指定路由反射器的来源，默认值：'RenixAsRouteReflector'，可选值：\n\n        'RenixAsRouteReflector' - 由测试工具（Renix）模拟作为路由反射器\n\n        'DutAsRouteReflector' - 被测设备（DUT）作为路由反射器\n\n    TotalBgpSessions (int): 所有BGP会话的总数，默认值：1\n\n    RrRouterIds (list): 预定义的路由反射器路由器ID列表，默认值：空列表[]\n\n    RrsPerPortOrSubInterface (int): 每个端口或子接口中路由反射器的数量，默认值：1\n\n    RrsPerPe (int): 每个PE（Provider Edge）设备中路由反射器的数量，默认值：1\n\n    RrRouterIdStart (str): RR路由器ID起始值，默认值：'7.7.7.7'\n\n    RrRouterIdStep (str): RR路由器ID递增步长，默认值：'0.0.0.1'\n\n    ClusterIdStart (str): BGP路由反射器簇ID起始值，默认值：'0.0.0.0'\n\n    ClusterIdStep (str): 簇ID递增步长，默认值：'0.0.0.1'\n\nReturns:\n\n    bool: 如果配置成功返回True，失败则返回False\n\nRaises:\n\n    ContinuableFailure: 当配置失败时抛出此异常，包含错误信息\n\nExamples:\n    .. code:: RobotFramework\n\n        | Edit Mpls Provider Router Reflectior | Wizard=${Wizard} | RouteReflectorSource=DutAsRouteReflector | TotalBgpSessions=5 | RrRouterIdStart=8.8.8.8 |",
  "TesterLibrary.Wizard.mpls.edit_traffic_parameters": "配置MPLS流量参数\n\nArgs:\n\n    Wizard (:obj:`WizardConfig`): 向导配置对象，用于承载和修改流量参数的上下文\n\nKeyword Args:\n\n    TrafficFlow (str, optional): 流量类型，定义流量在MPLS网络中的流向，默认值：FullyMeshedInVpn。可选值包括:\n\n        None: 无特定流量模式\n\n        FullyMeshedInVpn: VPN内全网状流量\n\n        FullyMeshedInVpls: VPLS内全网状流量\n\n        Customer2Provider: 客户到提供商方向流量\n\n        Provider2Customer: 提供商到客户方向流量\n\n        CustomerProviderBoth: 双向客户与提供商之间流量\n\n    StreamBlockGrouping (str, optional): 流块分组方式，默认值：Aggregate。可选值包括:\n\n        Aggregate: 所有流聚合为一个组\n\n        VPNAggregate: 每个VPN内的流聚合为一个组\n\n        NotAggregate: 不进行流聚合，每个流单独处理\n\n    UseSingleStreamNumber (bool, optional): 是否每对端口使用单一流号，防止流号重复，默认值：False\n\n    TrafficLoadPercentProvider (int, optional): 提供商侧端口的流量负载百分比，默认值：10\n\n    TrafficLoadPercentCustomer (int, optional): 客户侧端口的流量负载百分比，默认值：10\n\nReturns:\n\n    bool: 表示操作是否成功的布尔值。True表示成功，False表示失败。\n\nRaises:\n\n    ContinuableFailure: 如果底层调用返回False，则抛出可继续执行的异常，包含错误信息\n\nDescription:\n\n    该函数是对底层 `renix.edit_traffic_parameters` 方法的封装，用于通过提供的向导配置对象来编辑MPLS流量参数。它接受关键字参数以灵活配置各种流量特性，并在操作失败时抛出带有当前方法名的异常信息，便于调试和日志记录。\n\nExamples:\n    .. code:: RobotFramework\n\n        | Edit Traffic Parameters | Wizard=${Wizard} | TrafficFlow=FullyMeshedInVpls |",
  "TesterLibrary.Wizard.mpls.edit_lsp_ping": "配置MPLS流量LSP Ping参数\n\n该函数用于配置或修改MPLS网络中LSP（Label Switched Path）Ping操作的参数。通过传入一个`WizardConfig`对象和一组可选的关键字参数，可以动态地设置LSP Ping的行为。\n\nArgs:\n    Wizard (:obj:`WizardConfig`): 用于调用底层配置逻辑的Wizard对象，必须提供`edit_lsp_ping`方法\n\nKeyword Args:\n    EnableLspPing (bool): 是否启用LSP Ping功能，默认值：False\n\n    DestinationIpv4Address (str): LSP Ping的目的IPv4地址，默认值：'127.0.0.1'\n\n    PingInterval (int): 发送测试报文的时间间隔（单位：秒），默认值：4\n\n    PingTimeout (int): 单次探测的超时时间（单位：秒），默认值：2\n\n    TimeToLive (int): 报文的生存时间（TTL值），默认值：255\n\n    LspExpValue (int): LSP报文的EXP优先级值，用于QoS标记，默认值：0\n\n    ValidateFecStack (bool): 是否校验FEC（Forwarding Equivalence Class）栈信息，默认值：False\n\n    PadMode (str): 填充模式，指定是否以及如何处理PAD TLV字段，默认值：TransmitWithoutPadTlv，可选值包括:\n\n        TransmitWithoutPadTlv: 不发送PAD TLV\n\n        RequestPeerToDropPadTlv: 要求对端丢弃PAD TLV\n\n        RequestPeerToCopyPadTlv: 要求对端复制PAD TLV\n\n    PadData (list): 自定义填充数据，用于测试目的，默认值：空列表[]\n\nReturns:\n    bool: 如果配置成功返回True，否则返回False，并抛出ContinuableFailure异常\n\nExamples:\n    .. code:: RobotFramework\n\n        | Edit Lsp Ping | Wizard=${Wizard} | EnableLspPing=True | DestinationIpv4Address=192.168.1.1 | PingInterval=5 |",
  "TesterLibrary.Wizard.mpls.edit_mpls_vpn_parameters": "配置MPLS VPN基本参数\n\n    该函数用于通过提供的向导对象（Wizard）来编辑和配置MPLS VPN的基本参数。它是一个封装了`edit_vpn_parameters`方法的接口，允许通过关键字参数灵活地设置MPLS VPN相关配置。\n\n    参数：\n    -----------\n    Wizard : WizardConfig object\n        向导配置对象，必须具有`edit_vpn_parameters`方法，该方法负责实际执行MPLS VPN参数的修改操作。\n\n    **kwargs : dict\n        可变长度的关键字参数，表示要编辑的MPLS VPN参数及其值。支持的参数包括：\n\n        NumberOfVpns (int): 要配置的VPN实例数量，默认为1。\n\n        RdAssignment (str): RD（Route Distinguisher）分配方式，默认为'UseRT'，可选值包括：\n            'UseRT' — 使用RT（Route Target）值自动生成RD；\n            'Manual' — 手动配置RD。\n\n        RouteTargetStart (str): RT（Route Target）起始值，默认为'1:0'，格式应为“X:Y”。\n\n        RouteTargetStep (str): RT步长值，默认为'1:0'，表示每次递增的幅度。\n\n    返回值：\n    --------\n    bool\n        表示操作是否成功的布尔值。True表示成功，False表示失败。\n        \n    异常：\n    ------\n    如果底层调用返回False，则会抛出ContinuableFailure异常，表示操作失败但可以继续执行后续步骤。\n\n    示例：\n    .. code:: RobotFramework\n\n        | Edit Mpls Vpn Parameters | Wizard=${Wizard} | NumberOfVpns=10 | RdAssignment=Manual | RouteTargetStart=2:0 | RouteTargetStep=0:1 |\n\n    描述：\n    ------------\n    此函数提供了一种灵活的方式来配置MPLS VPN参数，通过封装底层实现并与Robot Framework集成，简化了测试脚本中对MPLS VPN配置的操作。所有参数均通过关键字传递，便于理解和使用。",
  "TesterLibrary.Wizard.mpls.edit_mpls_vpn_customer_parameters": "配置MPLS VPN客户侧参数\n\n该函数用于配置MPLS VPN客户侧的相关参数，通过传入的Wizard对象调用底层方法进行参数设置。所有可配置的关键字参数均可自定义，未指定时使用默认值。\n\nArgs:\n\n    Wizard (:obj:`WizardConfig`): 向导配置对象，包含编辑MPLS VPN客户参数的方法。\n\nKeyword Args:\n\n    VpnAssignment (int): 指定VPN分配方式，默认为RoundRobin。可选值包括：\n\n        RoundRobin（轮询）\n\n        Sequential（顺序）\n\n    CeProtocol (str): CE设备使用的路由协议，默认为BGP。可选值包括：\n\n        BGP\n\n        RIP\n\n        ISIS\n\n        OSPF\n\n        Static（静态路由）\n\n        Mixed（混合模式）\n\n    CeProAssignment (str): CE协议分配策略，默认为'BGP=100%'，表示所有CE均使用BGP协议。\n\n    CustomerRdStart (str): 客户RD（Route Distinguisher）起始值，默认为'1:0'。\n\n    CustomerRdStepPerVpnEnabled (bool): 是否启用每个VPN的RD步长设置，默认为True。\n\n    CustomerRdStepPerVpn (str): 每个VPN的RD步长值，默认为'1:0'。\n\n    CustomerRdStepPerCeEnabled (bool): 是否启用每个CE的RD步长设置，默认为False。\n\n    CustomerRdStepPerCe (str): 每个CE的RD步长值，默认为'0:0'。\n\nReturns:\n\n    bool: 表示操作是否成功。如果失败，则抛出ContinuableFailure异常，提示当前函数执行失败。\n\nExamples:\n    .. code:: RobotFramework\n\n        | Edit Mpls Vpn Customer Parameters | Wizard=${Wizard} | CeProtocol=RIP |",
  "TesterLibrary.Wizard.mpls.edit_mpls_vpn_provider_parameters": "配置MPLS VPN提供商侧参数\n\n该函数用于通过指定的向导(Wizard)对象配置MPLS VPN提供商侧的相关参数。它是一个封装函数，将实际的配置操作委托给向导对象的 `edit_vpn_provider_parameters` 方法完成。\n\nArgs:\n    Wizard (:obj:`WizardConfig`): 向导配置对象，必须提供 `edit_vpn_provider_parameters` 方法来处理实际的参数编辑操作。\n\nKeyword Args (可选参数及其默认值):\n    ProviderDisSel (str): 提供商分发选择器，默认值：'VPNsPerPE'，取值范围包括:\n\n        'VPNsPerPE' —— 每个PE设备分配一个VPN\n\n        'PEsPerVPN' —— 每个VPN分配多个PE设备\n\n    ProviderDisSelCount (int): 分发选择器计数，默认值：1\n\n    ProviderMeshed (bool): 是否启用全互联(meshed)模式，默认值：False\n\n    ProviderRdStart (str): 路由区分符(RD)起始值，默认值：'1:0'\n\n    ProviderRdStepPerVpnEnabled (bool): 是否启用每VPN的RD步进，默认值：True\n\n    ProviderRdStepPerVpn (str): 每VPN的RD步进值，默认值：'1:0'\n\n    ProviderRdStepPerCeEnabled (bool): 是否启用每CE的RD步进，默认值：False\n\n    ProviderRdStepPerCe (str): 每CE的RD步进值，默认值：'0:0'\n\nReturns:\n    bool: 表示操作是否成功的布尔值。若返回 False，则会抛出一个可继续执行的异常(ContinuableFailure)。\n\nRaises:\n    ContinuableFailure: 当底层实现返回 False 时抛出，表示操作失败但测试可以继续执行。\n\nExamples:\n    .. code:: RobotFramework\n\n        | Edit Mpls Vpn Provider Parameters | Wizard=${Wizard} | ProviderMeshed=True |",
  "TesterLibrary.Wizard.mpls.edit_mpls_vpn_as_number": "编辑MPLS VPN的AS（自治系统）编号配置。\n\n该函数用于通过提供的向导对象（Wizard）来编辑MPLS VPN的自治系统（AS）编号，支持客户侧和提供商侧的多种配置选项，包括传统2字节和扩展4字节AS编号的设置。此功能通常用于网络测试或自动化配置中，以便在测试执行期间动态修改网络设备的AS编号参数。\n\n参数：\n----------\nWizard : WizardConfig object\n    一个包含向导配置信息的对象，必须提供 `edit_vpn_as_number` 方法用于实际修改AS编号配置。\n\n**kwargs : dict\n    支持以下关键字参数进行详细配置：\n\n    CustomerEnable4ByteAsNumber (bool): 客户侧是否启用4字节AS编号，默认值：False\n\n    CustomerCeAsNumberStart (int): 客户侧CE的起始AS编号，默认值：1\n\n    CustomerCeAsNumberStepPerVpnEnabled (bool): 客户侧是否为每个VPN启用步长，默认值：True\n\n    CustomerCeAsNumberStepPerVpn (str): 客户侧每个VPN的AS编号步长，默认值：\"1\"\n\n    CustomerCeAsNumberStepPerCeEnabled (bool): 客户侧是否为每个CE启用步长，默认值：False\n\n    CustomerCeAsNumberStepPerCe (int): 客户侧每个CE的AS编号步长，默认值：1\n\n    CustomerCe4ByteAsNumberStart (int): 客户侧4字节CE的起始AS编号，默认值：1:1\n\n    CustomerCe4ByteAsNumberStepPerVpnEnabled (bool): 客户侧是否为每个VPN启用4字节AS编号步长，默认值：True\n\n    CustomerCe4ByteAsNumberStepPerVpn (str): 客户侧每个VPN的4字节AS编号步长，默认值：\"1\"\n\n    CustomerCe4ByteAsNumberStepPerCeEnabled (bool): 客户侧是否为每个CE启用4字节AS编号步长，默认值：False\n\n    CustomerCe4ByteAsNumberStepPerCe (str): 客户侧每个CE的4字节AS编号步长，默认值：\"1\"\n\n    ProviderAppendCeAsToPath (str): 提供商侧是否将CE的AS编号追加到路径中，默认值：\"False\"\n\n    ProviderEnable4ByteAsNumber (int): 提供商侧是否启用4字节AS编号，默认值：False\n\n    ProviderCeAsNumberStart (int): 提供商侧CE的起始AS编号，默认值：1\n\n    ProviderCeAsNumberStepPerVpnEnabled (bool): 提供商侧是否为每个VPN启用AS编号步长，默认值：False\n\n    ProviderCeAsNumberStepPerVpn (int): 提供商侧每个VPN的AS编号步长，默认值：1\n\n    ProviderCeAsNumberStepPerCeEnabled (bool): 提供商侧是否为每个CE启用AS编号步长，默认值：False\n\n    ProviderCeAsNumberStepPerCe (int): 提供商侧每个CE的AS编号步长，默认值：1\n\n    ProviderCe4ByteAsNumberStart (int): 提供商侧4字节CE的起始AS编号，默认值：\"1:1\"\n\n    ProviderCe4ByteAsNumberStepPerVpnEnabled (bool): 提供商侧是否为每个VPN启用4字节AS编号步长，默认值：False\n\n    ProviderCe4ByteAsNumberStepPerVpn (int): 提供商侧每个VPN的4字节AS编号步长，默认值：1\n\n    ProviderCe4ByteAsNumberStepPerCeEnabled (bool): 提供商侧是否为每个CE启用4字节AS编号步长，默认值：False\n\n    ProviderCe4ByteAsNumberStepPerCe (int): 提供商侧每个CE的4字节AS编号步长，默认值：1\n\n返回值：\n--------\nbool\n    如果操作成功则返回 True，否则返回 False。\n\n示例：\n-------\n.. code:: RobotFramework\n\n    | Edit Mpls Vpn As Number | Wizard=${Wizard} | CustomerEnable4ByteAsNumber=True |",
  "TesterLibrary.Wizard.mpls.edit_mpls_vpn_ipv4_route_customer_parameters": "编辑MPLS VPN客户端侧IPv4路由参数，用于配置客户特定的路由属性。\n\n该函数通过传入的Wizard对象调用其底层方法 `edit_vpn_ipv4_route_customer_parameters` 来修改MPLS VPN中客户侧的IPv4路由参数。支持动态传递任意关键字参数，便于灵活设置配置。\n\n参数:\n    Wizard (WizardConfig): 一个向导配置对象，提供 `edit_vpn_ipv4_route_customer_parameters` 方法用于实际执行配置更改。\n\n关键字参数:\n    CustomerStartRoute (str, optional): 客户侧起始路由地址，默认值: '10.1.1.0'。\n    \n    CustomerRouteStep (str, optional): 客户侧路由步长（每次递增的IP间隔），默认值: '0.0.1.0'。\n    \n    CustomerPrefixLength (int, optional): 客户侧路由前缀长度，默认值: 24。\n    \n    CustomerRoutesPerCe (int, optional): 每个CE设备上的客户路由数量，默认值: 1。\n    \n    CustomerOverlapRoutes (bool, optional): 是否启用客户侧重叠路由，默认值: False。\n    \n    CustomerRouteType (str, optional): 路由类型，可选值: 'Internal' 或 'External'，默认值: 'Internal'。\n\n返回值:\n    bool: 如果配置成功返回True，否则抛出异常ContinuableFailure并返回False。\n\n示例:\n    .. code:: RobotFramework\n\n        | Edit Mpls Vpn Ipv4 Route Customer Parameters | Wizard=${Wizard} | CustomerStartRoute=1.1.1.1 |",
  "TesterLibrary.Wizard.mpls.edit_mpls_vpn_ipv4_route_provider_parameters": "配置MPLS VPN IPv4路由的提供商端侧参数。\n\n该函数用于编辑MPLS VPN IPv4路由的提供商（Provider）侧参数，通过传递的`Wizard`对象调用其底层方法`edit_vpn_ipv4_route_provider_parameters`来实际执行配置修改操作。本函数作为封装接口，简化了对向导对象的操作，并支持传递任意关键字参数以配置具体参数值。\n\n---\n\n**参数说明**\n\n- `Wizard` (:obj:`WizardConfig`)  \n  向导配置对象，必须具备`edit_vpn_ipv4_route_provider_parameters`方法，用于承载实际的配置逻辑。\n\n- `**kwargs` (dict)  \n  支持以下可选关键字参数：\n\n  - `ProviderStartRoute` (str)  \n    提供商侧起始路由地址，默认值：`110.1.1.0`\n\n  - `ProviderRouteStep` (str)  \n    提供商侧路由递增步长，默认值：`0.0.1.0`\n\n  - `ProviderPrefixLength` (int)  \n    提供商侧路由前缀长度（即子网掩码位数），默认值：`24`\n\n  - `ProviderRoutesPerCe` (int)  \n    每个CE（Customer Edge）设备所连接的路由数量，默认值：`1`\n\n  - `ProviderOverlapRoutes` (bool)  \n    是否启用重叠路由，True表示启用，False表示不启用，默认值：`False`\n\n  - `ProviderLabelType` (str)  \n    MPLS标签分配类型，取值为：\n    - `LabelPerSite`（每个站点一个标签）\n    - `LabelPerRoute`（每条路由一个标签）  \n    默认值：`LabelPerSite`\n\n  - `ProviderStartLabel` (int)  \n    MPLS起始标签值，默认值：`16`\n\n---\n\n**返回值**\n\n- `bool`  \n  返回布尔值，表示配置是否成功：\n  - `True`：配置成功\n  - `False`：配置失败（将抛出`ContinuableFailure`异常）\n\n---\n\n**示例**\n\n```robotframework\n| Edit Mpls Vpn Ipv4 Route Provider Parameters | Wizard=${Wizard} | ProviderStartRoute=1.1.1.0 | ProviderPrefixLength=28 |\n```\n\n此示例中，配置了起始路由为`1.1.1.0`，前缀长度为`28`，其余参数使用默认值。\n\n---\n\n**注意事项**\n\n- 若底层调用返回`False`，函数会抛出`ContinuableFailure`异常，表示操作失败但测试可以继续执行。\n- 所有参数均可自定义，未指定时使用默认值。\n- 函数本身不执行实际配置，仅转发请求至传入的`Wizard`对象。",
  "TesterLibrary.Wizard.mpls.edit_mpls_vpn_ipv6_route_customer_parameters": "配置MPLS VPN路由客户端侧IPv6参数\n\n该函数用于通过提供的Wizard对象配置MPLS VPN中客户端侧的IPv6路由参数。它将传入的关键字参数转发给Wizard实例的`edit_vpn_ipv6_route_customer_parameters`方法，以完成实际的参数设置操作。\n\nArgs:\n\n    Wizard (:obj:`WizardConfig`): 一个Wizard配置对象，该对象必须包含`edit_vpn_ipv6_route_customer_parameters`方法，用于具体执行IPv6路由参数的编辑。\n\nKeyword Args:\n\n    CustomerStartRoute (str): 客户侧起始IPv6地址，默认值为 '2000::'。\n    \n    CustomerRouteStep (str): IPv6地址步长增量，默认值为 '0:0:0:1::'。\n    \n    CustomerPrefixLength (int): IPv6前缀长度，默认值为 64。\n    \n    CustomerRoutesPerCe (int): 每个CE（Customer Edge）设备中的路由数量，默认值为 1。\n    \n    CustomerOverlapRoutes (bool): 是否启用重叠路由，控制是否生成重叠的路由条目，默认值为 False。\n    \n    CustomerRouteType (str): 路由类型，可选值为 'Internal' 或 'External'，默认值为 'Internal'。\n\nReturns:\n\n    bool: 若操作成功返回 True，否则返回 False。\n\nRaises:\n\n    ContinuableFailure: 如果底层调用失败（即返回 False），则抛出可继续执行的失败异常，包含详细的错误信息。\n\nExamples:\n    .. code:: RobotFramework\n\n        | Edit Mpls Vpn Ipv6 Route Customer Parameters | Wizard=${Wizard} | CustomerStartRoute=2001:: | CustomerPrefixLength=128 | CustomerRoutesPerCe=5 | CustomerOverlapRoutes=True | CustomerRouteType=External |",
  "TesterLibrary.Wizard.mpls.edit_mpls_vpn_ipv6_route_provider_parameters": "配置MPLS VPN路由提供商端侧IPv6参数\n\n该函数用于配置MPLS VPN中提供商侧的IPv6路由参数，通过传入的Wizard对象调用其内部方法进行参数设置。该函数封装了对`edit_vpn_ipv6_route_provider_parameters`方法的调用，适用于测试自动化或网络配置场景中修改MPLS VPN的IPv6路由提供商设置。\n\nArgs:\n    Wizard (:obj:`WizardConfig`): 一个Wizard配置对象，必须支持`edit_vpn_ipv6_route_provider_parameters`方法，用于实际执行参数编辑操作。\n\nKeyword Args:\n    ProviderStartRoute (str): IPv6起始路由地址，默认值：'2001::'\n\n    ProviderRouteStep (str): IPv6路由地址递增步长，默认值：'0:0:0:1::'\n\n    ProviderPrefixLength (int): IPv6前缀长度，默认值：64\n\n    ProviderRoutesPerCe (int): 每个CE设备对应的路由数量，默认值：1\n\n    ProviderOverlapRoutes (bool): 是否启用重叠路由，默认值：False\n\n    ProviderLabelType (str): MPLS标签分配类型，可选值：\n\n        LabelPerSite (每个站点分配一个标签)\n\n        LabelPerRoute (每个路由分配一个标签)\n\n    ProviderStartLabel (int): MPLS起始标签值，默认值：16\n\nReturns:\n    bool: 如果参数配置成功则返回True，否则抛出ContinuableFailure异常。\n\nExamples:\n    .. code:: RobotFramework\n\n        | Edit Mpls Vpn Ipv6 Route Provider Parameters | Wizard=${Wizard} | ProviderStartRoute=2002:: | ProviderPrefixLength=128 |",
  "TesterLibrary.Wizard.mpls.edit_mpls_host": "配置MPLS向导中的Host参数，用于定义和修改MPLS网络中主机的配置。\n\n该函数通过传入的Wizard对象调用底层`edit_host`方法，用于编辑MPLS测试中的主机设置。支持多种与Host相关的参数配置，如MAC地址、VLAN设置、分配策略等，适用于MPLS网络仿真和测试场景。\n\nArgs:\n    Wizard (:obj:`WizardConfig`): 向导配置对象，必须提供`edit_host`方法用于执行实际的编辑操作。\n\nKeyword Args:\n    HostMacStart (str): Host MAC地址起始值，默认值：00:00:01:00:00:01\n    HostMacStep (str): 每次递增的MAC地址步长，默认值：00:00:00:00:00:01\n    EnableOverlapHosts (bool): 是否启用重叠路由，默认值：True\n    EnableHostVlan (bool): 是否启用Host VLAN，默认值：True\n    NumberOfCustomerSideVlanHeaders (int): 客户侧VLAN头数量，默认值：1，取值范围：0-2\n    NumberOfProviderSideVlanHeaders (int): 提供商侧VLAN头数量，默认值：1，取值范围：0-2\n    VlanIdStart (int): VLAN ID起始值，默认值：100\n    VlanIdStepPerVpls (int): 每个VPLS的VLAN ID步长，默认值：1\n    VlanIdStepPerHost (int): 每个Host的VLAN ID步长，默认值：1\n    HostAssignmentVpls (int): Host分配模式，默认值：HostsOrMacsPerCe，可选值：\n        HostsOrMacsPerCe\n        HostsOrMacsPerVpls\n        TotalHostsOrMacs\n    HostsPerCustomerCe (int): 每个客户CE的Host数量，默认值：1\n    HostsPerProviderCe (int): 每个提供商CE的Host数量，默认值：1\n    HostsPerVpls (int): 每个VPLS的Host数量，默认值：100\n    CustomerHostPercent (int): 客户侧Host占比百分比，默认值：50\n    ProviderHostPercent (int): 提供商侧Host占比百分比，默认值：50\n\nReturns:\n    bool: 如果配置成功返回True，失败则抛出ContinuableFailure异常并返回False。\n\nExamples:\n    .. code:: RobotFramework\n\n        | Edit Mpls Host | Wizard=${Wizard} | VlanIdStart=10 |",
  "TesterLibrary.Wizard.mpls.edit_mpls_fec128": "编辑MPLS FEC（转发等价类）类型128的配置，通常用于测试和自动化场景中调整MPLS相关设置。\n\n参数:\n    Wizard (:obj:`WizardConfig`): 一个封装了MPLS FEC 128编辑逻辑的向导配置对象。\n\n    **kwargs : dict\n        可变关键字参数，直接传递给Wizard对象的`edit_fec128`方法。这些参数可能包括FEC地址、掩码、下一跳信息，\n        或者其他与MPLS相关的设置，具体取决于Wizard的实现。\n\n返回值:\n    bool: 如果配置成功则返回True，否则返回False。\n\n描述:\n    该函数通过调用底层Wizard对象的`edit_fec128`方法来简化MPLS FEC 128条目的编辑过程。\n    它利用`**kwargs`支持灵活的参数传递方式，从而适应不同的使用场景而无需硬编码特定字段。\n    此外，在调用失败时会抛出ContinuableFailure异常以支持测试框架中的错误处理机制。\n\n示例:\n    .. code:: RobotFramework\n\n        | Edit Mpls Fec128 | Wizard=${Wizard} | StartVcId=10 |",
  "TesterLibrary.Wizard.mpls.edit_mpls_fec129": "编辑MPLS FEC 129配置参数，用于设置与MPLS流量工程相关的FEC（转发等价类）属性。\n\nArgs:\n    Wizard (:obj:`WizardConfig`): 向导配置对象，用于承载具体的配置上下文和操作方法。\n\nKeyword Args:\n    Agi (str): 应用网关标识符（AGI），默认值：100:1。\n    AgiIncrement (str): AGI递增值，格式同上，默认值：0:1。\n    Saii (str): 源应用接口标识符（SAII），默认值：10.0.0.2。\n    SaiiIncrement (str): SAII递增值，格式同上，默认值：0.0.0.1。\n    Taii (str): 目标应用接口标识符（TAII），默认值：10.0.0.1。\n    TaiiIncrement (str): TAII递增值，格式同上，默认值：0.0.0.0。\n    EnableBgpAutoDiscovery (bool): 是否启用BGP自动发现功能，默认值：False。\n    DutAsNumber (int): 被测设备的自治系统编号，默认值：1。\n    RdAssignment (str): 路由区分符（RD）分配方式，可选值包括：\n        UseRT: 使用RT值自动生成RD。\n        Manual: 手动指定RD。\n        默认值：UseRT。\n    AgiAssignment (str): AGI分配方式，可选值包括：\n        UseRT: 使用RT值自动生成AGI。\n        Manual: 手动指定AGI。\n        默认值：UseRT。\n    Rt (str): 路由目标（RT）值，用于控制路由导入导出策略，默认值：'1:0'。\n    RtIncrement (str): RT递增值，格式同上，默认值：'0:1'。\n    Rd (str): 路由区分符（RD）值，仅在RdAssignment为Manual时生效，默认值：'1:0'。\n    RdIncrement (str): RD递增值，格式同上，默认值：'0:1'。\n\nReturns:\n    bool: 操作结果，成功返回True，失败抛出ContinuableFailure异常并返回False。\n\nExamples:\n    .. code:: RobotFramework\n\n        | Edit Mpls Fec129 | Wizard=${Wizard} | Saii=1.1.1.1 |",
  "TesterLibrary.Wizard.mpls.edit_bgp_vpls": "编辑BGP VPLS（Virtual Private LAN Service）配置，使用提供的Wizard对象和关键字参数进行MPLS BGP VPLS参数设置。\n\n此函数作为封装调用，将传入的关键字参数传递给Wizard对象的`edit_bgp_vpls`方法。通常用于在网络测试或仿真环境中修改现有的BGP VPLS配置。\n\n参数:\n- Wizard (:obj:`WizardConfig`): 向导配置对象，该对象包含实际执行BGP VPLS配置修改的方法。\n- **kwargs (dict): 任意关键字参数，表示用于编辑BGP VPLS的配置选项。包括以下可选参数：\n\n    - NumberOfVpls (int): 配置的VPLS实例数量，默认值：1\n    - RdAssignment (str): 路由区分符(RD)分配方式，可选值为UseRT或Manual，默认值：UseRT\n    - RouteTargetStart (str): RT起始值，默认值：'1:0'\n    - RouteTartStep (str): RT步长，默认值：'1:0'\n    - Mtu (int): VPLS MTU值，默认值：1500\n    - VplsAssignment (str): VPLS分配策略，可选值RoundRobin或Sequential，默认值：RoundRobin\n    - CustomerRdStart (str): 客户侧路由标识起始值，默认值：'1:0'\n    - CustomerVeIdStart (int): 客户侧VE ID起始值，默认值：0\n    - CustomerStepPerVplsEnabled (bool): 是否启用客户侧每个VPLS的路由标识步进，默认值：True\n    - CustomerRdStepPerVpls (str): 客户侧每个VPLS的路由标识步长，默认值：'1:0'\n    - CustomerStepPerCeEnabled (bool): 是否启用客户侧每个CE的路由标识步进，默认值：False\n    - CustomerRdStepPerCe (str): 客户侧每个CE的路由标识步长，默认值：'0:0'\n    - CustomerVeIdStepPerCe (int): 客户侧每个CE的VE ID步长，默认值：1\n    - CustomerOverlapEnabled (bool): 是否允许客户侧在不同VPLS上重叠VE ID，默认值：False\n    - ProviderDistributionSelector (str): 提供商侧分布模式，可选值为VPLSsPerPE或PEsPerVPLS，默认值：VPLSsPerPE\n    - ProviderDistributionSelectorCount (int): 提供商侧分布模式数量，默认值：1\n    - ProviderMeshed (bool): 是否启用提供商侧全互联模式，默认值：True\n    - ProviderRdStart (str): 提供商侧路由标识起始值，默认值：'1:0'\n    - ProviderVeIdStart (int): 提供商侧VE ID起始值，默认值：1\n    - ProviderStepPerVplsEnabled (bool): 是否启用提供商侧每个VPLS的路由标识步进，默认值：True\n    - ProviderRdStepPerVpls (str): 提供商侧每个VPLS的路由标识步长，默认值：'1:0'\n    - ProviderStepPerCeEnabled (bool): 是否启用提供商侧每个CE的路由标识步进，默认值：False\n    - ProviderRdStepPerCe (str): 提供商侧每个CE的路由标识步长，默认值：'1:0'\n    - ProviderVeIdStepPerCe (int): 提供商侧每个CE的VE ID步长，默认值：1\n    - ProviderOverlapEnabled (bool): 是否允许提供商侧在不同VPLS上重叠CE ID，默认值：False\n\n返回值:\n    bool: 操作是否成功，返回True表示成功，False表示失败。\n\n示例:\n    .. code:: RobotFramework\n\n        | Edit Mpls Vpls Basic Parameters | Wizard=${Wizard} | Mtu=1518 |",
  "TesterLibrary.Wizard.mpls.edit_mpls_vpls_basic_parameters": "编辑MPLS VPLS基本参数配置。\n\n该函数用于通过提供的 Wizard 对象编辑 MPLS VPLS（Virtual Private LAN Service）的基本参数配置。它是一个封装函数，内部调用了 Wizard 对象的 `edit_vpls_basic_parameters` 方法，并将所有关键字参数传递给该方法。\n\n参数：\n---------\n- Wizard (:obj:`WizardConfig`)  \n  提供 `edit_vpls_basic_parameters` 方法的配置向导对象，用于实际执行 VPLS 参数的修改操作。\n\n- **kwargs : dict  \n  可变关键字参数，用于指定具体的 VPLS 配置参数及其值。支持的关键字参数及其默认值如下：\n\n    - NumberOfVpls (int): 要创建的 VPLS 实例数量，默认值：1\n    - Mtu (int): 最大传输单元（MTU），默认值：1500\n    - GroupId (int): VPLS 组 ID，用于逻辑分组，默认值：0\n    - EnableCBit (bool): 是否启用 C-Bit 标志位，默认值：False\n    - IncludeStatusTlv (bool): 是否包含状态 TLV（Type-Length-Value）信息，默认值：False\n    - StatusCode (list): 状态码列表，默认值：['PseudowireNotForwarding']，可选值包括：\n        - PseudowireNotForwarding\n        - LocalAttachmentCircuitReceiveFault\n        - LocalAttachmentCircuitTransmitFault\n        - LocalPsnFacingPwIngressReceiveFault\n        - LocalPsnFacingPwEgressTransmitFault\n    - EnableOverrideEncapsulation (bool): 是否启用自定义封装类型，默认值：False\n    - Encapsulation (str): 封装类型，默认值：'EthernetVlan'，可选值包括：\n        - EthernetVlan\n        - Ethernet\n        - EthernetVpls\n    - VplsAssignment (str): VPLS 分配策略，默认值：'RoundRobin'，可选值包括：\n        - RoundRobin（轮询分配）\n        - Sequential（顺序分配）\n    - ProviderDistributionSelector (str): 供应商侧分布选择器，默认值：'VPLSsPerPE'，可选值包括：\n        - VPLSsPerPE（每个 PE 一个 VPLS）\n        - PEsPerVPLS（每个 VPLS 多个 PE）\n    - ProviderDistributionSelectorCount (int): 供应商侧分布选择器的数量，默认值：1\n    - ProviderEnableAll (bool): 是否启用所有供应商侧配置，默认值：True\n    - EnableCreateProviderHostsForUnusedVpls (bool): 是否为未使用的 VPLS 创建供应商侧 Host，默认值：False\n    - FecType (str): FEC（转发等价类）类型，默认值：'FEC128'，可选值包括：\n        - FEC128\n        - FEC129\n\n返回值：\n-------\n- bool: 返回操作结果的状态。如果配置成功，则返回 True；否则返回 False。\n\n描述：\n-----\n该函数提供了一种灵活的方式来编辑 MPLS 网络中 VPLS 的基础配置参数。通过关键字参数机制，可以动态地设置所需参数，而不必显式声明所有可能的参数。这使得接口易于扩展和复用。函数内部调用了底层 API (`renix.edit_mpls_vpls_basic_parameters`) 来执行实际配置操作，并在失败时抛出异常以支持自动化测试中的可继续失败处理。\n\n示例：\n-----\n.. code:: RobotFramework\n\n    | Edit Mpls Vpls Basic Parameters | Wizard=${Wizard} | Mtu=1518 | NumberOfVpls=2 | Encapsulation=Ethernet |",
  "TesterLibrary.Wizard.mpls.edit_mpls_pwe_basic_parameters": "配置MPLS Pseudowire Emulation (PWE)的基本参数。\n\n该函数用于通过提供的Wizard对象配置或修改MPLS PWE的基本参数设置。它通常用于测试自动化或网络配置场景中，以调整与MPLS PWE相关的核心配置选项。该函数封装了底层`edit_pwe_basic_parameters`方法的调用，并将所有关键字参数直接传递给该方法。\n\nArgs:\n\n    Wizard (:obj:`WizardConfig`): 一个包含`edit_pwe_basic_parameters`方法的向导配置对象，用于执行实际的参数配置操作。\n\nKeyword Args:\n\n    NumberOfPseudoWire (int): 伪线的数量，默认值：1\n\n    Mtu (int): 最大传输单元（MTU）大小，默认值：1500\n\n    GroupId (int): 组ID，用于对伪线进行分组，默认值：0\n\n    EnableCBit (bool): 是否启用C-Bit（控制位），默认值：False\n\n    IncludeStatusTlv (bool): 是否包含状态TLV（Type-Length-Value），默认值：False\n\n    StatusCode (list): 状态码列表，默认值：['PseudowireNotForwarding']，可选值包括：\n\n        PseudowireNotForwarding\n\n        LocalAttachmentCircuitReceiveFault\n\n        LocalAttachmentCircuitTransmitFault\n\n        LocalPsnFacingPwIngressReceiveFault\n\n        LocalPsnFacingPwEgressTransmitFault\n\n    EnableOverrideEncapsulation (bool): 是否覆盖封装类型，默认值：False\n\n    Encapsulation (str): 封装类型，默认值：EthernetVlan，可选值包括：\n\n        EthernetVlan\n\n        Ethernet\n\n        EthernetVpls\n\n    EnableOverlapVcidsOnDifferentPes (bool): 是否在不同的PE设备上重叠VC ID，默认值：False\n\n    EnableCreateProviderHostsForUnusedVpls (bool): 是否为未使用的VPLS创建提供商侧主机，默认值：False\n\n    FecType (str): FEC（转发等价类）类型，默认值：FEC128，可选值包括：\n\n        FEC128\n\n        FEC129\n\nReturns:\n\n    bool: 操作结果，成功返回True，失败返回False。若操作失败，会抛出ContinuableFailure异常。\n\nExamples:\n    .. code:: RobotFramework\n\n        | Edit Mpls Pwe Basic Parameters | Wizard=${Wizard} | Mtu=1518 |",
  "TesterLibrary.Wizard.ospfv2_lsa.create_ospfv2_lsa_wizard": "创建OSPFv2 LSA（链路状态通告）向导实例，用于为指定的会话管理并生成OSPFv2 LSA。\n\n参数：\n    Sessions (list, set, tuple, 或单个 session 对象):\n        一个会话或多个会话的集合，用于创建OSPFv2 LSA向导。\n        如果传入的是单个会话对象，将会自动将其封装为列表。\n    **kwargs (可选):\n        可选的关键字参数，用于配置OSPFv2 LSA向导的其他属性。\n\n返回值：\n    Ospfv2LsaWizard:\n        初始化后的Ospfv2LsaWizard对象实例，用于后续对OSPFv2 LSA的操作和配置。\n\n描述：\n    该函数用于初始化并返回一个Ospfv2LsaWizard对象，该对象可用于管理和生成对应一个或多个会话的OSPFv2 LSA。\n    函数确保'Sessions'参数始终以可迭代形式处理，如果传入的是单个会话，则自动转换为列表。\n\n示例：\n    .. code:: RobotFramework\n\n        | Create Ospfv2 Lsa Wizard | Sessions=@{sessions} |",
  "TesterLibrary.Wizard.ospfv2_lsa.config_ospfv2_lsa_wizard_ospfv2_topo": "Configures the OSPFv2 topology for one or more LSA (Link State Advertisement) wizards.\n\nThis function is used to apply a specific OSPFv2 topology configuration to each wizard provided in the input. It supports passing multiple wizards and delegates the actual configuration to each wizard's `config_ospfv2_topo` method with the given parameters.\n\n### Purpose\nThe purpose of this function is to uniformly configure OSPFv2 topology settings across multiple LSA wizards, abstracting away the looping logic and ensuring consistent handling of both single and multiple wizard inputs.\n\n### Parameters\n\n- **Wizards** (`object` or iterable of `object`s):  \n  A single wizard object or an iterable (list, set, or tuple) of wizard objects. Each wizard must have a `config_ospfv2_topo` method that accepts `Type` and additional keyword arguments.\n\n- **Type** (`str` or `int`):  \n  The type of OSPFv2 topology to configure. This could be a string identifier or integer code, depending on the expected input of the underlying `config_ospfv2_topo` method.  \n  Default: `TREE`  \n  Valid values:\n  - `NONE`\n  - `TREE`\n  - `GRID`\n  - `FULLMESH`\n  - `RING`\n  - `HUBSPOKE`\n\n- `**kwargs`:  \n  Arbitrary keyword arguments that will be passed directly to the `config_ospfv2_topo` method of each wizard. These are used to provide additional configuration options specific to the selected topology type.\n\n#### Topology-Specific Parameters\n\n##### Tree Topology (`TREE`)\n- `SimulatedRoutersCount` (`int`, default: 50, range: 1–10000): Number of simulated routers.\n- `InterfaceType` (`str`, default: `P2P`, valid: `BROADCAST`, `P2P`): Interface type.\n- `RouterMaxInterfaceCount` (`int`, default: 4, range: 1–100): Maximum number of interfaces per router.\n- `TransitNetworkMaxRouterCount` (`int`, default: 5, range: 2–10000): Maximum number of routers per transit network.\n\n##### Grid Topology (`GRID`)\n- `UneditableSimulatedRoutersCount` (`int`, default: 16, range: 0–10000): Number of uneditable simulated routers.\n- `EmulatedRouterPossessSimulatedRouterCount` (`int`, default: 16, range: 0–10000): Number of simulated routers per emulated router.\n- `RowCount` (`int`, default: 4, range: 1–10000): Number of rows in the grid.\n- `ColumnCount` (`int`, default: 4, range: 1–10000): Number of columns in the grid.\n- `GridEmulatedRouterPosition` (`str`, default: `ATTACHEDTOGRID`, valid: `ATTACHEDTOGRID`, `MEMBEROFGRID`): Position of the emulated router relative to the grid.\n- `EmulatedRouterAttachRowIndex` (`int`, default: 1, range: 1–10000): Row index where the emulated router is attached.\n- `EmulatedRouterAttachColumnIndex` (`int`, default: 1, range: 1–10000): Column index where the emulated router is attached.\n\n##### Full Mesh Topology (`FULLMESH`)\n- `MeshRouterCount` (`int`, default: 10, range: 1–100): Total number of routers in the mesh.\n- `MeshEmulatedRouterPosition` (`str`, default: `ATTACHEDTOMESH`, valid: `ATTACHEDTOMESH`, `MEMBEROFMESH`): Position of the emulated router in the mesh.\n\n##### Ring Topology (`RING`)\n- `RingRouterCount` (`int`, default: 10, range: 1–10000): Total number of routers in the ring.\n- `RingEmulatedRouterPosition` (`str`, default: `ATTACHEDTORING`, valid: `ATTACHEDTORING`, `MEMBEROFRING`): Position of the emulated router in the ring.\n\n##### Hub-and-Spoke (Star) Topology (`HUBSPOKE`)\n- `HubSpokeRouterCount` (`int`, default: 10, range: 1–100): Total number of routers in the star topology.\n- `HubSpokeEmulatedRouterPosition` (`str`, default: `ATTACHEDTOHUB`, valid: `ATTACHEDTOHUB`, `ATTACHEDTOSPOKE`, `MEMBERASHUB`, `MEMBERASSPOKE`): Position of the emulated router in the star topology.\n\n### Returns\n- If multiple wizards are provided: returns a list of results from calling `config_ospfv2_topo` on each wizard.\n- If only one wizard is provided: returns the result of its `config_ospfv2_topo` call directly.\n\n### Raises\n- `ContinuableFailure`: If the internal call to `renix.config_ospfv2_lsa_wizard_ospfv2_topo` returns `False`.\n\n### Example Usage\n```robotframework\n| Config Ospfv2 Lsa Wizard Ospfv2 Topo | Wizards=@{wizard} | Type=TREE |\n```",
  "TesterLibrary.Wizard.ospfv2_lsa.config_ospfv2_lsa_wizard_ospfv2": "Configures OSPFv2 LSA (Link-State Advertisement) settings using one or more wizard objects.\n\n    This function accepts a single wizard object or a collection of wizard objects, and applies\n    the OSPFv2 configuration to each by calling their respective `config_ospfv2` method with the\n    provided keyword arguments. It ensures consistent configuration across multiple wizards\n    and returns the results in a list or as a single result if only one wizard is provided.\n\n    Parameters:\n        Wizards (object or iterable): A single wizard object or an iterable (list, set, tuple)\n                                      containing multiple wizard objects. Each wizard must have\n                                      a `config_ospfv2` method that accepts keyword arguments.\n        **kwargs: Arbitrary keyword arguments that are passed directly to the `config_ospfv2`\n                  method of each wizard. These should correspond to valid configuration parameters\n                  for OSPFv2 LSA settings.\n\n    Returns:\n        list or object: If multiple wizards are provided, returns a list of the return values from\n                        each wizard's `config_ospfv2` method. If only one wizard is provided,\n                        returns the single result directly.\n\n    Description:\n        The function first checks whether `Wizards` is a single object or an iterable. If it's a single\n        object, it wraps it into a list. Then, it iterates through all wizard objects, invoking\n        `config_ospfv2(**kwargs)` on each. The collected results are returned either as a list or\n        unpacked depending on the number of wizards processed.\n\n    Example:\n        >>> wizard1 = Ospfv2Wizard(...)\n        >>> wizard2 = Ospfv2Wizard(...)\n        >>> api.config_ospfv2_lsa_wizard_ospfv2([wizard1, wizard2], area_id=0, router_id='1.1.1.1')\n        [<config_result1>, <config_result2>]",
  "TesterLibrary.Wizard.ospfv2_lsa.config_ospfv2_lsa_wizard_ospfv2_te_option": "Configures the OSPFv2 Traffic Engineering (TE) option for one or more LSA wizards.\n\n    This function allows configuration of OSPFv2 TE parameters on one or more wizard objects.\n    Each wizard is expected to have a method `config_ospfv2_te_option` which will be called\n    with the provided keyword arguments. The function supports both single and multiple\n    wizard inputs, returning results accordingly.\n\nArgs:\n    Wizards (object or iterable of objects): A single wizard object or an iterable (list, set, tuple)\n                                             of wizard objects for which the OSPFv2 TE option will be configured.\n                                             Each wizard must implement the `config_ospfv2_te_option` method.\n\nKeyword Args:\n    EnableLocalIp (bool): Enables inclusion of a local IPv4 address. Default: False.\n    LocalIp (str): The local IPv4 address to use if enabled. Must be a valid IPv4 address. Default: '0.0.0.0'.\n    EnableRemoteIp (bool): Enables inclusion of a remote (neighbor) IPv4 address. Default: False.\n    RemoteIp (int): Neighbor IPv4 address. Expected as an integer representation of an IP. Default: 10.\n    EnableLocalIpv6 (bool): Enables inclusion of a local IPv6 address. Default: False.\n    LocalIpv6 (str): The local IPv6 address to use if enabled. Must be a valid IPv6 address. Default: '2000::1'.\n    EnableRemoteIpv6 (bool): Enables inclusion of a neighbor IPv6 address. Default: False.\n    RemoteIpv6 (str): Neighbor IPv6 address. Must be a valid IPv6 address. Default: '2000::1'.\n    EnableGroup (bool): Enables group configuration. Default: False.\n    Group (int): Group identifier, in range 0-4294967295. Default: 1.\n    EnableMaxBandwidth (bool): Enables maximum bandwidth configuration. Default: False.\n    MaximunLink (int): Maximum link bandwidth in bytes per second, range 0-4294967295. Default: 1000.\n    EnableResBandwidth (bool): Enables reserved bandwidth configuration. Default: False.\n    MaximumReservableLink (int): Maximum reservable link bandwidth in bytes per second, range 0-4294967295. Default: 1000.\n    EnableUnresBandwidth (bool): Enables configuration of unreserved bandwidth values by priority. Default: False.\n    UnreservedBandwidth0 (int): Unreserved bandwidth value for priority 0, range 0-4294967295. Default: 0.\n    UnreservedBandwidth1 (int): Unreserved bandwidth value for priority 1, range 0-4294967295. Default: 0.\n    UnreservedBandwidth2 (int): Unreserved bandwidth value for priority 2, range 0-4294967295. Default: 0.\n    UnreservedBandwidth3 (int): Unreserved bandwidth value for priority 3, range 0-4294967295. Default: 0.\n    UnreservedBandwidth4 (int): Unreserved bandwidth value for priority 4, range 0-4294967295. Default: 0.\n    UnreservedBandwidth5 (int): Unreserved bandwidth value for priority 5, range 0-4294967295. Default: 0.\n    UnreservedBandwidth6 (int): Unreserved bandwidth value for priority 6, range 0-4294967295. Default: 0.\n    UnreservedBandwidth7 (int): Unreserved bandwidth value for priority 7, range 0-4294967295. Default: 0.\n\nReturns:\n    list or :obj:`TrafficEngineeringConfig`: If multiple wizard objects are provided, returns a list of the results from each\n                                           wizard's `config_ospfv2_te_option` call. If only one wizard is provided,\n                                           returns the result of its configuration directly.\n\nDescription:\n    The function first checks if the input 'Wizards' is a single object or an iterable. If it's a single object,\n    it converts it into a list for uniform processing. Then, for each wizard in the list, it calls the\n    `config_ospfv2_te_option` method with the provided keyword arguments and collects the results.\n    Finally, it returns the collected results, either as a list or a single value depending on the input size.\n\nExample:\n    .. code:: RobotFramework\n\n        | Config Ospfv2 Lsa Wizard Ospfv2 Te Option | Wizards=@{wizard} | EnableLocalIp=True | LocalIp=192.168.1.1 | EnableMaxBandwidth=True | MaximunLink=1000000 |",
  "TesterLibrary.Wizard.ospfv2_lsa.config_ospfv2_lsa_wizard_ospfv2_sr": "Configure OSPFv2 SR (Segment Routing) settings on one or more LSA wizards.\n\n    This function allows for batch configuration of OSPFv2 SR parameters across multiple\n    Ospfv2LsaWizard instances. If a single wizard is provided, it will be internally treated\n    as a list to ensure consistent handling. The actual configuration is performed by the\n    `config_ospfv2_sr` method of each wizard object, with all additional keyword arguments\n    passed through directly.\n\n    Parameters:\n        Wizards (object or iterable of objects): A single Ospfv2LsaWizard object or an iterable\n            (list, set, tuple) containing multiple Ospfv2LsaWizard objects. Each wizard must\n            implement the `config_ospfv2_sr` method.\n        **kwargs: Arbitrary keyword arguments representing SR configuration parameters.\n            These are forwarded to the `config_ospfv2_sr` method of each wizard and should\n            match valid configuration options for that method.\n\n    Returns:\n        list or object: If multiple wizards are provided, returns a list containing the result\n            of each individual configuration call. If only one wizard is provided, returns\n            the result of its configuration directly.\n\n    Description:\n        This function simplifies the process of applying identical SR configurations to\n        multiple Ospfv2 LSA wizards. It abstracts away the need to manually iterate over\n        wizard objects and ensures consistent data type handling (e.g., converting a single\n        wizard to a list internally). It provides a streamlined interface for bulk\n        configuration tasks related to OSPFv2 Segment Routing.\n\n    Example:\n        >>> wizard1 = Ospfv2LsaWizard(...)\n        >>> wizard2 = Ospfv2LsaWizard(...)\n        >>> result = config_ospfv2_lsa_wizard_ospfv2_sr([wizard1, wizard2], SidLabelType='BIT32', NodeSidIndexLabel=200)\n        # Applies the same SR configuration to both wizards",
  "TesterLibrary.Wizard.ospfv2_lsa.config_ospfv2_lsa_wizard_ospfv2_stub_network": "Configures the OSPFv2 stub network settings using one or more LSA wizards.\n\n    Purpose:\n        This function is used to configure OSPFv2 stub network parameters via one or more LSA wizard objects.\n        It acts as a wrapper to invoke the `config_ospfv2_stub_network` method on each provided wizard object,\n        allowing for consistent configuration across single or multiple wizards with support for various\n        stub network options such as route emulation, simulated routers, prefix ranges, and metric settings.\n\n    Parameters:\n        Wizards (object or iterable of objects): \n            A single wizard object or an iterable (list, set, or tuple) of wizard objects \n            that will be used to configure the OSPFv2 stub network. Each wizard must have \n            a method named `config_ospfv2_stub_network` that accepts the provided keyword arguments.\n\n        **kwargs: \n            Arbitrary keyword arguments that are passed directly to each wizard's \n            `config_ospfv2_stub_network` method. These are used to specify configuration \n            parameters for the OSPFv2 stub network. Available options include:\n\n            - StubEmulated (str): Emulated Routers. Default: 'ALL'. Options: 'NONE', 'ALL', 'EDGE'.\n            - StubSimulated (str): Simulated Routers. Default: 'NONE'. Options: 'NONE', 'ALL', 'EDGE'.\n            - StubRoutesCount (int): Number of routes to create. Default: 0.\n            - StubOverride (bool): Enable override. Default: False.\n            - StubStartingIpPrefix (str): Starting IP prefix. Default: '1.0.0.0'. Must be a valid IPv4 address.\n            - StubEndingIpPrefix (str): Ending IP prefix. Default: '223.255.255.255'. Must be a valid IPv4 address.\n            - StubDistributionType (str): Prefix distribution type. Default: 'FIXED'. Options: 'FIXED', 'LINEAR', 'INTERNET', 'CUSTOM'.\n            - StubStartPrefixLength (int): Start prefix length. Default: 24. Range: 1–32.\n            - StubEndPrefixLength (int): End prefix length. Default: 24. Range: 1–32.\n            - StubInternetPrefixLength (list): Internet distribution prefix lengths. Must be a list of 32 elements summing to 100.0.\n            - StubCustomPrefixLength (list): Custom distribution prefix lengths. Must be a list of 32 elements summing to 100.0.\n            - StubPrimaryMetric (int): Metric value for routes. Default: 1. Range: 1–16777215.\n\n    Returns:\n        list or object:\n            If multiple wizard objects are provided, returns a list of configuration results,\n            with each result corresponding to the output of each wizard's `config_ospfv2_stub_network` method.\n            If only one wizard is provided, returns the configuration result of that wizard directly.\n\n    Raises:\n        ContinuableFailure: If the underlying configuration call fails (returns False), an exception is raised\n                            to indicate configuration failure, but execution may continue depending on context.\n\n    Description:\n        The function ensures consistent handling of both single and multiple wizard inputs by converting\n        non-iterable inputs into a list. It then iterates through the provided wizards, calling their respective\n        configuration methods with the given keyword arguments. The return value depends on the number of input\n        wizards: a list is returned if there are multiple results, otherwise the single result is returned directly.\n\n    Note:\n        The `@abnormal_check()` decorator applied to the backend suggests that some form of error or abnormal\n        condition checking is performed before or during execution, though the exact behavior of that decorator\n        is not described here.",
  "TesterLibrary.Wizard.ospfv2_lsa.config_ospfv2_lsa_wizard_ospfv2_summary_route": "Configures OSPFv2 summary routes using one or more LSA wizards.\n\n    This function allows for batch configuration of summary routes across one or more OSPFv2 LSA wizard objects.\n    It wraps the `config_ospfv2_summary_route` method of individual wizard objects, ensuring consistent application\n    of the provided configuration parameters across all specified wizards.\n\n    Args:\n        Wizards (object or list of objects): One or more wizard objects that manage OSPFv2 LSA configurations.\n            Each wizard must have a `config_ospfv2_summary_route` method. If a single wizard is provided, it can be\n            passed directly without wrapping in a list.\n\n    Keyword Args:\n        SummaryEmulated (str): Specifies which emulated routers should originate the summary route.\n            Valid values: 'NONE', 'ALL', 'EDGE'. Default: 'ALL'.\n        SummarySimulated (str): Specifies which simulated routers should originate the summary route.\n            Valid values: 'NONE', 'ALL', 'EDGE'. Default: 'NONE'.\n        SummaryRoutesCount (int): Number of summary routes to create. Default: 0.\n        SummaryOverride (bool): Enables overriding existing route settings. Default: False.\n        SummaryStartingIpPrefix (str): Starting IPv4 prefix for the summary route. Default: '1.0.0.0'.\n            Must be a valid IPv4 address.\n        SummaryEndingIpPrefix (str): Ending IPv4 prefix for the summary route. Default: '223.255.255.255'.\n            Must be a valid IPv4 address.\n        SummaryDistributionType (str): Distribution type for prefix lengths. Valid values:\n            'FIXED', 'LINEAR', 'INTERNET', 'CUSTOM'. Default: 'FIXED'.\n        SummaryStartPrefixLength (int): Starting prefix length (inclusive range: 1-32). Default: 24.\n        SummaryEndPrefixLength (int): Ending prefix length (inclusive range: 1-32). Default: 24.\n        SummaryInternetPrefixLength (list): List of 32 floating-point values representing distribution\n            percentages for each prefix length when using 'INTERNET' distribution type. Total must sum to 100.0.\n        SummaryCustomPrefixLength (list): List of 32 floating-point values representing custom distribution\n            percentages for each prefix length when using 'CUSTOM' distribution type. Total must sum to 100.0.\n        SummaryPrimaryMetric (int): Metric value assigned to the summary route. Valid range: 1-16777215. Default: 1.\n\n    Returns:\n        list or object: A list containing return values from each wizard's `config_ospfv2_summary_route` call\n            if multiple wizards are provided. If only one wizard is used, returns the result directly\n            (not wrapped in a list).\n\n    Raises:\n        ContinuableFailure: If the underlying configuration call fails (returns False), an exception is raised.\n\n    Description:\n        The function first checks whether the input 'Wizards' is an iterable; if not, it wraps it in a list.\n        Then, it iterates over each wizard and calls its `config_ospfv2_summary_route` method with the provided\n        keyword arguments. The results from each configuration are collected and returned appropriately.",
  "TesterLibrary.Wizard.ospfv2_lsa.config_ospfv2_lsa_wizard_ospfv2_external_route": "配置OSPFv2 LSA向导中的OSPFv2外部路由设置。\n\n该函数用于对一个或多个OSPFv2 LSA向导对象进行OSPFv2外部路由的配置。通过传入向导对象（或对象集合）以及一系列关键字参数，可以为每个向导应用相同的OSPFv2外部路由配置。所有配置参数均通过`**kwargs`传递，并调用每个向导对象的`config_ospfv2_external_route`方法来完成具体配置操作。\n\n参数:\n    Wizards (object 或 iterable of objects): 一个单独的向导对象，或者包含多个向导对象的可迭代对象（如列表、集合、元组），用于配置OSPFv2外部路由。\n\n关键字参数:\n    ExternalEmulated (str): 指定模拟的路由器类型，默认值：ALL，可选值包括：\n        NONE - 不模拟任何路由器\n        ALL - 模拟所有类型的路由器\n        EDGE - 仅模拟边缘路由器\n\n    ExternalSimulated (str): 指定模拟的路由器类型，默认值：NONE，可选值包括：\n        NONE - 不模拟任何路由器\n        ALL - 模拟所有类型的路由器\n        EDGE - 仅模拟边缘路由器\n\n    ExternalRoutesCount (int): 需要创建的外部路由数量，默认值：0\n\n    ExternalOverride (bool): 是否启用覆盖模式，默认值：False\n\n    ExternalStartingIpPrefix (str): 起始IP前缀地址，默认值：1.0.0.0，必须是有效的IPv4地址\n\n    ExternalEndingIpPrefix (str): 结束IP前缀地址，默认值：223.255.255.255，必须是有效的IPv4地址\n\n    ExternalDistributionType (str): 前缀分布类型，默认值：FIXED，可选值包括：\n        FIXED - 固定长度\n        LINEAR - 线性增长\n        INTERNET - 模拟互联网前缀分布\n        CUSTOM - 自定义分布\n\n    ExternalStartPrefixLength (int): 起始前缀长度，默认值：24，取值范围：1-32\n\n    ExternalEndPrefixLength (int): 结束前缀长度，默认值：24，取值范围：1-32\n\n    ExternalInternetPrefixLength (list): Internet类型下各前缀长度分布比例，要求是一个长度为32的浮点数列表，总和为100.0\n\n    ExternalCustomPrefixLength (list): Custom类型下各前缀长度分布比例，要求是一个长度为32的浮点数列表，总和为100.0\n\n    ExternalPrimaryMetric (int): 外部路由的度量值，默认值：1，取值范围：1-16777215\n\n返回值:\n    如果传入多个向导对象，则返回一个包含每个向导配置结果的列表；如果只传入一个向导对象，则直接返回该向导的配置结果。\n\n说明:\n    该函数确保在所有传入的向导对象上统一执行OSPFv2外部路由配置，遍历所有向导并调用其各自的`config_ospfv2_external_route`方法，使用相同的关键字参数进行配置。返回值的形式与输入形式保持一致，即单个对象返回单个结果，多个对象返回结果列表。",
  "TesterLibrary.Wizard.ospfv2_lsa.expand_ospfv2_lsa_wizard": "Expands the OSPFv2 LSA (Link State Advertisement) wizard configuration.\n\nThis function is used to expand one or more Ospfv2 LSA wizard objects. It accepts either a single wizard object or an iterable (such as a list, set, or tuple) of wizard objects. Internally, if a single object is provided, it is converted into a list for uniform processing. The function then calls the `expand` method on each wizard to perform the expansion.\n\nParameters:\n-----------\nWizards : object or iterable of objects\n    A single Ospfv2 LSA wizard object or a collection (list, set, tuple) of such wizard objects to be expanded.\n\nReturns:\n--------\nbool\n    Returns True if all wizards are successfully expanded.\n    If the expansion fails, returns False and raises a `ContinuableFailure` exception with a descriptive error message.\n\nRaises:\n-------\nContinuableFailure\n    If the expansion operation fails (i.e., the result is False), this exception is raised to indicate failure while allowing test execution to continue.\n\nNotes:\n------\n- Each wizard must have an `expand()` method implemented; otherwise, the underlying operation may fail.\n- This function is typically used in a RobotFramework environment as part of a testing framework for network configurations.\n\nExample Usage:\n--------------\n.. code:: RobotFramework\n\n    | Expand Ospfv2 Lsa Wizard | Wizards=@{Wizards} |",
  "TesterLibrary.Wizard.ospfv3_lsa.create_ospfv3_lsa_wizard": "创建并返回一个 Ospfv3LsaWizard 实例，用于配置 OSPFv3 LSA（链路状态通告）设置。\n\n参数:\n    Sessions (list, set, tuple, 或单个对象): 一个会话或多个会话的集合，与 OSPFv3 LSA 向导相关联。\n        如果提供的是单个会话，则会将其转换为包含该会话的列表。\n    **kwargs: 任意的关键字参数，用于配置 OSPFv3 LSA 向导。这些参数可能包括：\n        LSA 类型、通告设置、定时器或其他协议特定的配置。\n\n返回值:\n    Wizard (:obj:`Ospfv3LsaWizard`): 使用提供的会话和配置选项初始化的 Ospfv3LsaWizard 实例。\n\n描述:\n    该函数初始化一个 OSPFv3 LSA 配置向导，允许用户定义和管理一个或多个会话的链路状态通告。\n    它封装了向导的创建过程，并支持灵活的会话输入类型和可选的配置参数。\n\n示例:\n    .. code:: RobotFramework\n\n        | Create Ospfv3 Lsa Wizard | Sessions=@{sessions} | LSA_Type=1 | Advertisement_Interval=5 |",
  "TesterLibrary.Wizard.ospfv3_lsa.config_ospfv3_lsa_wizard_ospfv3_topo": "Configures the OSPFv3 topology for one or more LSA (Link State Advertisement) wizards.\n\nThis function is used to apply a specific OSPFv3 topology configuration to a list of wizard objects.\nEach wizard is expected to have a method called `config_ospfv3_topo` that performs the actual configuration.\nThe function supports passing additional configuration parameters via keyword arguments.\n\nParameters:\n    Wizards (object or iterable of objects): A single wizard object or an iterable (list, set, tuple)\n                                             containing multiple wizard objects. Each wizard must\n                                             implement the `config_ospfv3_topo` method.\n    Type (str or int): The type of OSPFv3 topology to configure. This typically corresponds to a specific\n                       LSA type or topology identifier recognized by the underlying implementation.\n    **kwargs: Arbitrary keyword arguments that are passed directly to the `config_ospfv3_topo` method\n              of each wizard. These are used to specify detailed configuration options depending on\n              the topology type.\n\nReturns:\n    list or object: If multiple wizards are provided, returns a list of configuration results from\n                    each wizard's `config_ospfv3_topo` method. If only one wizard is provided, returns\n                    the result directly from that single configuration call.\n\nDescription:\n    The function first ensures that the input `Wizards` is treated as an iterable. If a single object\n    is passed, it is wrapped into a list. Then, for each wizard in the collection, the function calls\n    its `config_ospfv3_topo` method with the provided `Type` and any additional keyword arguments.\n    The results of these calls are collected and returned either as a list (if multiple configurations\n    were performed) or directly as a single result.\n\nExample:\n    >>> result = api.config_ospfv3_lsa_wizard_ospfv3_topo(wizard1, 'P2P', metric=10, interface_id=1)\n    >>> # or\n    >>> results = api.config_ospfv3_lsa_wizard_ospfv3_topo([wizard1, wizard2], 'BROADCAST', priority=5)",
  "TesterLibrary.Wizard.ospfv3_lsa.config_ospfv3_lsa_wizard_ospfv3": "Configures OSPFv3 LSA (Link-State Advertisement) settings using a wizard-based approach for one or more wizard objects.\n\nThis function accepts a single wizard object or a collection of wizard objects and applies the OSPFv3 configuration to each by invoking their respective `config_ospfv3` method with the provided keyword arguments. The results are collected and returned, either as a list if multiple configurations are applied or as a single result if only one wizard is processed.\n\nParameters:\n    Wizards (object or iterable): A single wizard object or an iterable (list, set, tuple) of wizard objects.\n                                  Each wizard must have a `config_ospfv3` method that takes keyword arguments for OSPFv3 configuration.\n    **kwargs: Arbitrary keyword arguments that define the OSPFv3 configuration parameters. These will be passed directly\n              to the `config_ospfv3` method of each wizard. Supported keys include:\n\n        StartingPrefixRange (str): Starting IPv6 prefix for the configuration. Default: '2000::1'. Must be a valid IPv6 address.\n\n        EndingPrefixRange (str): Ending IPv6 prefix for the configuration. Default: '3ffe::1'. Must be a valid IPv6 address.\n\n        AreaType (str): Type of the OSPF area. Default: 'REGULAR'. Valid values are:\n\n            REGULAR\n\n            STUB\n\n            STUBNOSUMMARY\n\n            NSSA\n\n            NSSANOSUMMARY\n\n        StartingRouterId (str): Starting Router ID (IPv4 format). Default: '1.0.0.1'. Must be a valid IPv4 address.\n\n        RouterIdStep (str): Step increment for Router IDs (IPv4 format). Default: '0.0.0.1'. Must be a valid IPv4 address.\n\nReturns:\n    list or object: If multiple wizards are provided, returns a list containing the result of each `config_ospfv3` call.\n                    If only one wizard is provided, returns the result of its `config_ospfv3` call directly (not as a list).\n\nRaises:\n    ContinuableFailure: If the underlying configuration call fails (returns False), this function raises a `ContinuableFailure`.\n\nDescription:\n    The function first checks whether the input `Wizards` is an iterable; if not, it wraps it in a list for uniform processing.\n    Then, it iterates through each wizard and invokes the `config_ospfv3` method with the provided configuration arguments.\n    The return value is adapted based on the number of wizards to simplify usage when only a single configuration is made.\n\nExamples:\n    .. code:: RobotFramework\n\n        | Config Ospfv3 Lsa Wizard Ospfv3 | Wizards=@{wizard} | StartingPrefixRange=2001::1 | EndingPrefixRange=3fff::1 | AreaType=NSSA | StartingRouterId=1.1.1.1 | RouterIdStep=0.0.0.2 |",
  "TesterLibrary.Wizard.ospfv3_lsa.config_ospfv3_lsa_wizard_ospfv3_intra_area_route": "配置OSPFv3 LSA向导中的OSPFv3区域内（intra-area）路由。\n\n该函数用于在一个或多个OSPFv3 LSA向导对象上配置OSPFv3 intra-area路由。它接受一个向导对象或对象列表作为输入，并支持通过关键字参数传递所有相关的配置参数。这些参数将直接传递给底层LSA向导的`config_ospfv3_intra_area_route`方法。\n\n参数:\n    Wizards (list or object): 一个或多个OSPFv3 LSA向导对象。如果传入单个对象，它将被自动封装为列表以便统一处理。\n\n关键字参数:\n    IntraAreaEmulated (str, optional): 指定模拟的路由器类型，默认值：'NONE'。可选值包括：\n        'NONE' - 不模拟\n        'ALL' - 所有边缘和内部路由器\n        'EDGE' - 仅边缘路由器\n\n    IntraAreaSimulated (str, optional): 指定模拟的路由器类型，默认值：'ALL'。可选值包括：\n        'NONE' - 不模拟\n        'ALL' - 所有边缘和内部路由器\n        'EDGE' - 仅边缘路由器\n\n    IntraAreaRoutesCount (int, optional): 要创建的路由数量，默认值：0。\n\n    IntraAreaOverride (bool, optional): 是否启用覆盖模式，默认值：False。\n\n    IntraAreaStartingIpPrefix (str, optional): 路由的起始IPv6前缀，默认值：'2000::'。必须是有效的IPv6地址。\n\n    IntraAreaEndingIpPrefix (str, optional): 路由的结束IPv6前缀，默认值：'3ffe::1'。必须是有效的IPv6地址。\n\n    IntraAreaDistributionType (str, optional): 前缀分布类型，默认值：'FIXED'。可选值包括：\n        'FIXED' - 固定长度前缀\n        'LINEAR' - 线性递增分布\n        'INTERNET' - 模拟互联网前缀分布\n        'CUSTOM' - 自定义分布\n\n    IntraAreaStartPrefixLength (int, optional): 起始前缀长度，默认值：64。取值范围：1 到 128。\n\n    IntraAreaEndPrefixLength (int, optional): 结束前缀长度，默认值：64。取值范围：1 到 128。\n\n    IntraAreaInternetPrefixLength (list, optional): Internet分布类型的前缀长度分布，是一个长度为128的浮点数列表，总和应为100.0。\n\n    IntraAreaCustomPrefixLength (list, optional): Custom分布类型的前缀长度分布，是一个长度为128的浮点数列表，总和应为100.0。\n\n    IntraAreaPrimaryMetric (int, optional): 路由度量值（metric），默认值：1。取值范围：1 到 65535。\n\n返回值:\n    返回配置后的向导对象或对象列表。如果传入了多个向导，则返回一个包含每个向导配置结果的列表；如果只传入了一个向导，则直接返回该向导的配置结果。\n\n示例:\n    .. code:: RobotFramework\n\n        | Config Ospfv3 Lsa Wizard Ospfv3 Intra Area Route | Wizards=@{wizard} | IntraAreaRoutesCount=10 | IntraAreaPrimaryMetric=5 | IntraAreaDistributionType=LINEAR |\n\n说明:\n    该函数内部确保输入的一致性，将非迭代对象转换为列表进行统一处理。然后遍历每个向导对象并调用其`config_ospfv3_intra_area_route`方法，使用提供的配置参数进行设置。结果按需以单个对象或列表形式返回。",
  "TesterLibrary.Wizard.ospfv3_lsa.config_ospfv3_lsa_wizard_ospfv3_inter_area_route": "Configure OSPFv3 inter-area route settings using one or more LSA wizards.\n\nThis function allows the configuration of OSPFv3 inter-area route parameters across one or more Ospfv3LsaWizard objects. It wraps the individual `config_ospfv3_inter_area_route` method of each wizard, enabling batch configuration. If multiple wizards are provided, the function returns a list of results; if only one wizard is provided, it returns the single result directly.\n\n### Parameters\n\n- **Wizards** (`object` or `iterable of objects`):  \n  A single wizard object or a collection of wizard objects that support the `config_ospfv3_inter_area_route` method. This is typically an instance or list of `Ospfv3LsaWizard` objects.\n\n- **kwargs** (`dict`):  \n  Arbitrary keyword arguments that define the specific configuration parameters for the OSPFv3 inter-area route. These include:\n\n  - **InterAreaEmulated** (`str`, default: `'NONE'`):  \n    Specifies which emulated routers to apply the configuration to. Valid values are:\n    - `'NONE'`\n    - `'ALL'`\n    - `'EDGE'`\n\n  - **InterAreaSimulated** (`str`, default: `'ALL'`):  \n    Specifies which simulated routers to apply the configuration to. Valid values are:\n    - `'NONE'`\n    - `'ALL'`\n    - `'EDGE'`\n\n  - **InterAreaRoutesCount** (`int`, default: `0`):  \n    Number of inter-area routes to create.\n\n  - **InterAreaOverride** (`bool`, default: `False`):  \n    Whether to enable override behavior for the routes.\n\n  - **InterAreaStartingIpPrefix** (`str`, default: `'2000::'`):  \n    Starting IPv6 prefix for route generation. Must be a valid IPv6 address.\n\n  - **InterAreaEndingIpPrefix** (`str`, default: `'3ffe::1'`):  \n    Ending IPv6 prefix for route generation. Must be a valid IPv6 address.\n\n  - **InterAreaDistributionType** (`str`, default: `'FIXED'`):  \n    Distribution type for prefixes. Valid values are:\n    - `'FIXED'`\n    - `'LINEAR'`\n    - `'INTERNET'`\n    - `'CUSTOM'`\n\n  - **InterAreaStartPrefixLength** (`int`, default: `64`):  \n    Start prefix length (valid range: 1–128).\n\n  - **InterAreaEndPrefixLength** (`int`, default: `64`):  \n    End prefix length (valid range: 1–128).\n\n  - **InterAreaInternetPrefixLength** (`list` of 128 floats):  \n    Custom prefix lengths for 'INTERNET' distribution type. The total sum must equal 100.0.\n\n  - **InterAreaCustomPrefixLength** (`list` of 128 floats):  \n    Custom prefix lengths for 'CUSTOM' distribution type. The total sum must equal 100.0.\n\n  - **InterAreaPrimaryMetric** (`int`, default: `100`):  \n    Primary metric value for the route (valid range: 1–65535).\n\n### Returns\n\n- `list` or `object`:  \n  A list of return values from calling `config_ospfv3_inter_area_route` on each wizard.  \n  If only one wizard is provided, returns the single result directly instead of a list.\n\n### Description\n\nThe function first checks whether the input `Wizards` is an iterable. If not, it wraps it into a list for uniform processing. Then, it iterates through each wizard and invokes its internal `config_ospfv3_inter_area_route` method with the provided configuration parameters. The results from each invocation are collected. If there is more than one wizard, the function returns all results in a list; otherwise, it returns the single result directly.\n\n### Example Usage\n\n```python\n>>> wizard1 = Ospfv3LsaWizard(...)\n>>> wizard2 = Ospfv3LsaWizard(...)\n>>> result = api.config_ospfv3_lsa_wizard_ospfv3_inter_area_route(\n...     [wizard1, wizard2],\n...     InterAreaStartingIpPrefix='2001:db8::/64',\n...     InterAreaPrimaryMetric=10\n... )\n# result will be [result1, result2]\n```\n\nIn RobotFramework:\n\n```robotframework\n| Config Ospfv3 Lsa Wizard Ospfv3 Inter Area Route | Wizards=@{wizards} |\n| ...                                              | InterAreaStartingIpPrefix=2001:db8::/64 |\n| ...                                              | InterAreaPrimaryMetric=10 |\n```",
  "TesterLibrary.Wizard.ospfv3_lsa.config_ospfv3_lsa_wizard_ospfv3_external_route": "Configure OSPFv3 external route settings using one or more LSA wizards.\n\n    Purpose:\n        This function enables the configuration of OSPFv3 external routes through LSA wizard objects. It allows setting various\n        properties related to external route generation, such as prefix ranges, distribution type, metric values, and router types.\n\n    Parameters:\n        Wizards (object or iterable of objects): A single wizard object or an iterable (list, set, tuple)\n                                                 containing wizard objects that support the `config_ospfv3_external_route`\n                                                 method. Each wizard is used to configure OSPFv3 external route settings.\n\n        **kwargs: Arbitrary keyword arguments representing OSPFv3 external route configuration options.\n                  Valid options include:\n\n            - ExternalEmulated (str): Emulated Routers selection for external routes. Default: 'NONE'.\n                                      Options: 'NONE', 'ALL', 'EDGE'.\n\n            - ExternalSimulated (str): Simulated Routers selection for external routes. Default: 'ALL'.\n                                       Options: 'NONE', 'ALL', 'EDGE'.\n\n            - ExternalRoutesCount (int): Number of external routes to generate. Default: 0.\n\n            - ExternalOverride (bool): Enable override mode. Default: False.\n\n            - ExternalStartingIpPrefix (str): Starting IPv6 prefix for route generation. Default: '2000::'.\n\n            - ExternalEndingIpPrefix (str): Ending IPv6 prefix for route generation. Default: '3ffe::1'.\n\n            - ExternalDistributionType (str): Distribution method for prefixes. Default: 'FIXED'.\n                                            Options: 'FIXED', 'LINEAR', 'INTERNET', 'CUSTOM'.\n\n            - ExternalStartPrefixLength (int): Start prefix length for range. Default: 64. Range: 1-128.\n\n            - ExternalEndPrefixLength (int): End prefix length for range. Default: 64. Range: 1-128.\n\n            - ExternalInternetPrefixLength (list): Prefix length distribution for 'INTERNET' type.\n                                                  List of 128 elements with total sum equal to 100.0.\n\n            - ExternalCustomPrefixLength (list): Prefix length distribution for 'CUSTOM' type.\n                                                List of 128 elements with total sum equal to 100.0.\n\n            - ExternalPrimaryMetric (int): Metric value for external routes. Default: 1000. Range: 1-65535.\n\n    Behavior:\n        If a single wizard is provided, it is internally wrapped into a list. The function iterates over all wizards\n        and invokes their `config_ospfv3_external_route` method with the provided keyword arguments. The results from\n        each configuration are collected. If only one wizard is processed, the single result is returned directly;\n        otherwise, a list of results is returned.\n\n    Returns:\n        list or object: A list of configuration results if multiple wizards are used, or a single result object if only\n                        one wizard is used. Each result corresponds to the output from the individual wizard's\n                        `config_ospfv3_external_route` method.\n\n    Example:\n        .. code:: RobotFramework\n\n            | Config Ospfv3 Lsa Wizard Ospfv3 External Route | Wizards=@{wizard} |\n            | Config Ospfv3 Lsa Wizard Ospfv3 External Route | Wizards=${wizard} | ExternalRoutesCount=100 | ExternalStartingIpPrefix=2001:: | ExternalEndingIpPrefix=200f::ffff |",
  "TesterLibrary.Wizard.ospfv3_lsa.expand_ospfv3_lsa_wizard": "Expands one or more OSPFv3 LSA (Link-State Advertisement) wizard objects by invoking their expansion logic.\n\nThis function supports both single wizard objects and collections of wizards. If a single wizard is provided, it is internally converted into a list for uniform processing. Each wizard is expected to have an `expand()` method that defines the specific expansion behavior.\n\nParameters:\n-----------\nWizards : object or iterable\n    A single wizard object or an iterable (such as a list, set, or tuple) containing multiple wizard objects.\n    Each wizard must implement an `expand()` method that performs the actual expansion operation.\n\nReturns:\n--------\nbool\n    Returns True if all wizards are expanded successfully. If any wizard fails to expand, a `ContinuableFailure` exception is raised.\n\nRaises:\n-------\nContinuableFailure\n    If the internal call to `renix.expand_ospfv3_lsa_wizard` returns False, indicating a failure in the expansion process.\n\nDescription:\n------------\nThis function serves as a user interface for triggering the expansion of OSPFv3 LSA wizards, typically used to generate or update LSA data based on current wizard configurations. The function includes error handling via the `ContinuableFailure` exception to allow test frameworks to handle failures gracefully without abrupt termination.\n\nExample:\n--------\n.. code:: RobotFramework\n\n    | Expand Ospfv3 Lsa Wizard | Wizards=@{Wizards} |",
  "TesterLibrary.Wizard.rip_route.create_rip_route_wizard": "创建并返回一个配置好的 RipRouteWizard 实例，用于配置或管理 RIP 路由设置。\n\n该函数用于在网络测试或模拟环境中初始化一个 RipRouteWizard 对象。RipRouteWizard 可以基于提供的会话对象（Sessions）进行操作，并支持通过关键字参数传递额外的配置选项。\n\n参数：\n- Sessions (session-like 或 session-like 的列表、集合、元组)：一个单独的会话对象或者多个会话对象的集合，这些会话将被传递给 RipRouteWizard 构造函数。如果传入的是非可迭代对象，它会被自动包装成列表。\n- **kwargs：任意关键字参数，用于向 RipRouteWizard 构造函数传递额外的配置选项。\n\n返回值：\n- RipRouteWizard：一个根据提供的会话和配置初始化的 RipRouteWizard 实例。\n\n示例：\n.. code:: RobotFramework\n\n    | Create Rip Route Wizard | Sessions=@{sessions} |",
  "TesterLibrary.Wizard.rip_route.config_rip_route_wizard_ipv4": "Configures IPv4 routing for RIP (Routing Information Protocol) using one or more route wizards.\n\n    This function accepts a single wizard object or a collection of wizard objects, and applies\n    the provided configuration parameters to each wizard's `config_ipv4_route` method. The results\n    of these configurations are collected and returned appropriately.\n\n    Parameters:\n        Wizards (object or iterable): A single wizard object or an iterable (list, set, tuple)\n                                      containing multiple wizard objects. Each wizard is expected\n                                      to have a `config_ipv4_route` method that handles the actual\n                                      IPv4 route configuration.\n\n    Keyword Args:\n        Ipv4TotalNumberOfRoutes (int): Total number of routes to create. Default: 20. Range: 0-10,000,000.\n\n        Ipv4StartRoutesPrefix (str): Starting route prefix (IPv4 address). Default: '2.0.0.0'. Must be a valid IPv4 address.\n\n        Ipv4EndRoutesPrefix (str): Ending route prefix (IPv4 address). Default: '255.255.255.255'. Must be a valid IPv4 address.\n\n        Ipv4RoutesNoneSeq (bool): If True, prevents route aggregation. Default: False.\n\n        Ipv4RoutesPrefixLenType (str): Distribution type for route prefix lengths. Default: 'FIXED'. Options:\n                                       'FIXED' (all prefixes have same length), 'LINEAR' (prefix lengths vary linearly).\n\n        Ipv4RoutesPrefixLenStart (int): Start value for prefix length. Default: 16. Range: 1-32.\n\n        Ipv4RoutesPrefixLenEnd (int): End value for prefix length. Default: 16. Range: 1-32.\n\n        Ipv4Metric (int): Metric (cost) for the route. Default: 1. Range: 1-16.\n\n    Returns:\n        list or object: If multiple wizards are provided, returns a list of configuration results,\n                        one for each wizard. If only one wizard is processed, returns the result\n                        of its configuration directly (i.e., not wrapped in a list).\n\n    Raises:\n        ContinuableFailure: If the configuration fails (returns False), an exception is raised with a failure message.\n\n    Description:\n        This function first checks if the input `Wizards` is an iterable. If not, it wraps it in a list\n        to ensure uniform processing. Then, it iterates over each wizard and invokes the\n        `config_ipv4_route` method with the provided `**kwargs`. The return values from these calls\n        are collected into a list. If there is more than one result, the list is returned; otherwise,\n        the single result is returned directly.\n\n    Example:\n        >>> wizard1 = RipRouteWizard(...)\n        >>> wizard2 = RipRouteWizard(...)\n        >>> api.config_rip_route_wizard_ipv4([wizard1, wizard2], Ipv4TotalNumberOfRoutes=100, Ipv4Metric=3)\n        [result1, result2]",
  "TesterLibrary.Wizard.rip_route.config_rip_route_wizard_ipv6": "Configures IPv6 RIP route settings using the provided wizard(s) and additional configuration parameters.\n\nThis function accepts one or more wizard objects and applies IPv6 RIP route configurations by invoking the `config_ipv6_route` method on each wizard with the provided keyword arguments. It ensures uniform processing of wizards and returns configuration results either as a single object or a list, depending on the number of input wizards.\n\nArgs:\n\n    Wizards (object or iterable): A single wizard object or an iterable (e.g., list, set, tuple) of wizard objects.\n                                  Each wizard must implement a `config_ipv6_route` method that performs the actual\n                                  IPv6 route configuration.\n\nKeyword Args:\n\n    Ipv6TotalNumberOfRoutes (int): Total number of routes to create. Default: 20. Range: 0–10,000,000.\n\n    Ipv6StartRoutesPrefix (str): Starting IPv6 prefix for route generation. Default: \"3000::\". Must be a valid IPv6 address.\n\n    Ipv6EndRoutesPrefix (str): Ending IPv6 prefix for route generation. Default: \"3ffe::\". Must be a valid IPv6 address.\n\n    Ipv6RoutesNoneSeq (bool): If True, prevents route aggregation. Default: False.\n\n    Ipv6RoutesPrefixLenType (str): Distribution type for route prefix lengths. Default: \"FIXED\". Allowed values:\n                                 - FIXED: All prefixes use the same length.\n                                 - LINEAR: Prefix lengths increase linearly from start to end.\n\n    Ipv6RoutesPrefixLenStart (int): Starting prefix length. Default: 64. Range: 1–128.\n\n    Ipv6RoutesPrefixLenEnd (int): Ending prefix length. Default: 64. Range: 1–128.\n\n    Ipv6Metric (int): Route metric value. Default: 1. Range: 1–16.\n\nReturns:\n\n    object or list: Configuration result from the wizard(s). Returns a single result if one wizard is provided,\n                    or a list of results if multiple wizards are provided.\n\nRaises:\n\n    ContinuableFailure: If the configuration fails (i.e., returns False), an exception is raised with a relevant error message.\n\nExamples:\n\n    .. code:: RobotFramework\n\n        | Config Rip Route Wizard Ipv6 | Wizards=@{wizard} | Ipv6TotalNumberOfRoutes=100 | Ipv6Metric=2 |",
  "TesterLibrary.Wizard.rip_route.expand_rip_route_wizard": "Expands the RIP route configuration wizard(s) provided.\n\n    This function accepts a single wizard or a collection of wizards (list, set, or tuple).\n    If a single wizard is passed, it is converted into a list internally. Each wizard in the\n    collection is then expanded by calling its `expand()` method.\n\n    Parameters:\n    -----------\n    Wizards : object or iterable\n        A single wizard object or an iterable (list, set, tuple) containing multiple wizard objects.\n        Each wizard is expected to have an `expand()` method that performs the actual expansion logic.\n\n    Returns:\n    --------\n    bool\n        Always returns True, indicating that all provided wizards were processed successfully.\n\n    Raises:\n    -------\n    AttributeError\n        If any of the wizard objects does not have an `expand()` method.\n    TypeError\n        If the input is not a wizard object or an iterable of wizard objects.",
  "TesterLibrary.Wizard.tsn.create_tsn_wizard": "创建TSN向导\n\n该函数用于创建一个与时间敏感网络（TSN）相关的配置向导对象。根据指定的类型，返回不同的向导实例，如 TsnAvbWizard、TsnQcrWizard、BgpVpls 或 Pwe。如果提供的类型未知，则创建失败并抛出异常。\n\n参数:\n    Type (str): 指定向导的类型，不区分大小写。支持以下值：\n        - 'avb' : 返回 TsnAvbWizard 实例\n        - 'qcr' : 返回 TsnQcrWizard 实例\n        - 'frame_pre_emption' : 返回 BgpVpls 实例\n        - 'cb' : 返回 Pwe 实例\n\n    **kwargs (关键字参数): 可选参数，用于传递特定于所选类型的配置参数。例如，当选择 'avb' 类型时，可传入以下参数：\n        - TalkerPort (:obj:`Port`): AVB 发送端口\n        - ListenerPort (:obj:`Port`): AVB 接收端口\n        - NonAvbPort (:obj:`Port`): 非 AVB 端口\n        - IsAppended (bool): 是否追加模式\n\n返回值:\n    向导对象 (:obj:`WizardConfig`): 根据 `Type` 参数返回相应的配置向导对象。\n    如果提供的 `Type` 无效或不支持，则抛出 `ContinuableFailure` 异常。\n\n示例:\n    .. code:: RobotFramework\n\n        | Create Tsn Wizard | Type=avb | TalkerPort=port1 | ListenerPort=port2 | NonAvbPort=port3 | IsAppended=True |",
  "TesterLibrary.Wizard.tsn.config_tsn_avb_qav": "Configures the TSN AVB Qav settings for one or more Wizard objects.\n\nThis function accepts a single Wizard object or a collection (list, set, tuple) of Wizard objects,\nand applies the Qav configuration to each using the provided keyword arguments. If any exception\noccurs during configuration, it catches the exception, sets the result to False, and returns it.\nOtherwise, it returns True indicating successful configuration.\n\nParameters:\n    Wizards (Wizard or iterable of Wizard objects): The Wizard instance or collection of instances\n        whose Qav settings need to be configured.\n    **kwargs: Arbitrary keyword arguments that represent the configuration parameters to be passed\n        to the `config_qav` method of each Wizard object.\n\nReturns:\n    bool: True if the configuration was successfully applied to all Wizards; False if an exception\n        occurred during configuration of any Wizard.",
  "TesterLibrary.Wizard.tsn.config_tsn_avb_gptp": "配置一个或多个向导对象的TSN/AVB gPTP（gPTP）设置。\n\n该函数接受单个向导对象或一组向导对象，并使用提供的关键字参数应用gPTP配置。如果在配置过程中发生任何异常，则会捕获该异常并返回False。\n\n参数:\n    Wizards (object 或 iterable): 要配置的一个向导对象或包含多个向导对象的可迭代对象（如列表、集合、元组）。\n\n关键字参数:\n    Priority1 (int): 优先级1的帧长。\n    Priority2 (int): 优先级2的帧长。\n    ClockAccuracy (str): 时钟精度类型，支持以下值：\n        CLOCK_ACCURACY_0, CLOCK_ACCURACY_20, CLOCK_ACCURACY_21, CLOCK_ACCURACY_22,\n        CLOCK_ACCURACY_23, CLOCK_ACCURACY_24, CLOCK_ACCURACY_25, CLOCK_ACCURACY_26,\n        CLOCK_ACCURACY_27, CLOCK_ACCURACY_28, CLOCK_ACCURACY_29, CLOCK_ACCURACY_2A,\n        CLOCK_ACCURACY_2B, CLOCK_ACCURACY_2C, CLOCK_ACCURACY_2D, CLOCK_ACCURACY_2E,\n        CLOCK_ACCURACY_2F, CLOCK_ACCURACY_30, CLOCK_ACCURACY_31\n    LogAnnounceInterval (int): 发送announce消息的时间间隔，取值范围：-10到10。\n    LogSyncInterval (int): 同步消息发送间隔，取值范围：-10到10。\n    AnnounceReceiptTimeout (int): announce消息超时时间，取值范围：3到255。\n    PropogationDelay (int): 传播延迟的帧长。\n\n返回值:\n    bool: 如果所有向导对象的配置均成功应用，则返回True；如果配置过程中发生异常，则返回False。\n\n示例:\n    .. code:: RobotFramework\n\n        | Configure TSN AVB gPTP | Wizards=${tsn_wizard} | Priority1=1518 | Priority2=1518 |\n          ClockAccuracy=CLOCK_ACCURACY_20 | LogAnnounceInterval=-3 | LogSyncInterval=-4 |\n          AnnounceReceiptTimeout=10 | PropogationDelay=1000 |",
  "TesterLibrary.Wizard.tsn.config_tsn_avb_non_stream": "测试仪表配置TSN/AVB非流设置\n\n该函数用于对一个或多个TSN向导对象进行非流模式的配置，包括帧大小、负载率和流数量等参数。\n\nArgs:\n\n    Wizards (object or iterable of objects): 单个向导对象或向导对象的可迭代集合（如列表、集合、元组）。\n        每个向导对象必须包含 `config_non_stream` 方法，用于应用传入的配置参数。\n\nKeyword Args:\n\n    NonAvbFrameSize (int): 非AVB帧长度，取值范围：60-16383 字节\n\n    LoadRate (int): 负载速率，表示为百分比，取值范围：0-100 %\n\n    StreamNumber (int): 流的数量，取值范围：0-256\n\nReturns:\n\n    bool: 如果所有向导对象都成功完成配置返回 True；如果在配置过程中发生异常则返回 False 并抛出 ContinuableFailure 异常。\n\nRaises:\n\n    ContinuableFailure: 当配置失败时抛出，但不会中断整体执行流程。\n\nExamples:\n    .. code:: RobotFramework\n\n        | Create Tsn Wizard | Type=avb |\n        \nNotes:\n    - 该函数内部调用底层 `renix.config_tsn_avb_non_stream` 方法来执行实际的配置逻辑。\n    - 如果传入单个向导对象而非可迭代类型，函数会自动将其转换为列表处理。\n    - 所有异常都会被捕获，并通过日志记录错误信息，确保程序继续运行。",
  "TesterLibrary.Wizard.tsn.create_tsn_qcr_stream": "创建TSN（时间敏感网络）QCR（快速配置流）流的测试仪表向导函数。\n\n该函数用于通过指定的向导对象（Wizard）配置并创建一个TSN流，适用于流量测试或网络配置场景。它封装了`create_qcr_stream`方法，并支持多种可选参数来定义流的行为和特性。如果传入多个向导对象，则仅使用第一个。\n\nParameters:\n-----------\nWizard : object or iterable\n    一个向导对象（或包含向导对象的可迭代结构，如列表、元组等），该对象必须提供 `create_qcr_stream` 方法用于创建TSN流。\n    如果传入的是可迭代对象，则使用其中的第一个元素。\n\nTalkerPort : any, optional\n    流的发送端口（Talker）配置，默认为 None。\n\nListenerPortList : list, optional\n    流的接收端口（Listener）列表配置，默认为 None。\n\nPriority : int, optional\n    流的优先级值，通常用于区分不同类型的流量，默认为 None。\n\nLoadUnit : str, optional\n    负载单位，例如 'Mbps' 或 'Percent'，默认为 None。\n\nLoad : float, optional\n    在给定负载单位下的负载值，默认为 None。\n\nFrameLengthType : str, optional\n    帧长度类型，例如：\n\n        Fixed: 固定帧长度\n\n        Increment: 增量变化\n\n        Random: 随机变化\n\n    默认为 None。\n\nFixedFrameSize : int, optional\n    当 FrameLengthType 为 'Fixed' 时使用的固定帧大小（字节），默认为 None。\n\nMinFrameSize : int, optional\n    当 FrameLengthType 为 'Increment' 或 'Random' 时使用的最小帧大小（字节），默认为 None。\n\nMaxFrameSize : int, optional\n    当 FrameLengthType 为 'Increment' 或 'Random' 时使用的最大帧大小（字节），默认为 None。\n\nStepFrameSize : int, optional\n    当 FrameLengthType 为 'Increment' 时使用的帧大小步进值（字节），默认为 None。\n\n**kwargs : dict\n    其他关键字参数，将直接传递给底层 `create_qcr_stream` 方法。\n\nReturns:\n--------\nany\n    返回底层 `Wizard.create_qcr_stream()` 方法的结果，通常是表示已创建流或其配置的对象。\n\nRaises:\n-------\nException\n    如果底层 `create_qcr_stream` 方法调用失败，则抛出异常。\n\nExamples:\n---------\n.. code:: RobotFramework\n\n    | Create Tsn Qcr Stream | Wizard=${wizard} | TalkerPort=port1 | ListenerPortList=[port2] | Priority=3 | LoadUnit=Mbps | Load=100 | FrameLengthType=Fixed | FixedFrameSize=1500 |",
  "TesterLibrary.Wizard.tsn.config_tsn_qcr_stream_identification_function": "配置TSN（时间敏感网络）QCR（队列与信用协调）流识别功能。\n\n此函数用于为一个或多个配置对象配置TSN QCR流识别功能。它封装了配置过程，并在多个配置实例上应用相同的设置。\n\n参数：\n-----------\n- Configs : object 或可迭代的对象，可选\n    一个配置对象或包含多个配置对象的可迭代对象（如 list, set, tuple），用于在其上应用配置。\n    如果不是可迭代类型，则会被转换为只包含一个元素的列表。\n\n- StreamIdentificationFunction : str 或 object，可选\n    要配置的流识别功能。可以是表示功能名称的字符串，也可以是定义功能逻辑的对象，具体取决于实现方式。\n\n- SourceMacAddress : str，可选\n    流识别所使用的源MAC地址。格式应为合法的MAC地址字符串，例如 '00:11:22:33:44:55'。\n\n- DestinationMacAddress : str，可选\n    流识别所使用的目地MAC地址。格式应为合法的MAC地址字符串，例如 '00:11:22:33:44:55'。\n\n- VlanId : int，可选\n    与流相关的VLAN ID。必须是一个介于0到4095之间的整数。\n\n- AddUdpHeader : bool，可选\n    是否在流识别中包含UDP头部。True 表示启用，False 表示禁用。\n\n- SourcePort : int，可选\n    用于识别流的源端口号。有效范围通常是0到65535。\n\n- DestinationPort : int，可选\n    用于识别流的目的端口号。有效范围通常是0到65535。\n\n- AddIpHeader : bool，可选\n    是否在流识别中包含IP头部。True 表示启用，False 表示禁用。\n\n- SourceIpAddress : str，可选\n    用于识别流的源IPv4或IPv6地址。\n\n- DestinationIpAddress : str，可选\n    用于识别流的目标IPv4或IPv6地址。\n\n- IpDscp : int，可选\n    IP头中的DSCP（差分服务代码点）值，用于服务质量（QoS）标识。\n\n- IpNextProtocol : int，可选\n    IP头中的下一个协议字段（例如 TCP=6, UDP=17），用于进一步限定数据包类型。\n\n- **kwargs : dict，可选\n    其他关键字参数，可能用于特定实现或扩展。\n\n返回值：\n--------\n- bool\n    始终返回 True 表示配置成功应用。\n\n描述：\n------------\n该函数是一个封装方法，用于配置TSN QCR流识别功能的参数。它将给定的配置选项应用于Configs中的每一个配置对象，通过调用底层配置方法`TsnQcrWizard.config_stream_identification_function`完成。该方法确保了对单一和多个配置输入的一致处理。\n\n注意：\n- 此函数假设传入的Configs是系统认可的有效配置对象，不对它们进行有效性校验。",
  "TesterLibrary.Wizard.tsn.expand_tsn_wizard": "生成TSN向导的展开配置，调用底层RENYX库的`expand_wizard`方法对给定的向导对象进行扩展操作。\n\n参数:\n    Wizard (object 或 list): 表示TSN向导的对象或对象列表，该对象需具备`expand`方法并已初始化。在多数情况下，它是一个包含向导结构的复杂对象或句柄。\n\n返回值:\n    bool 或任意类型: 返回值取决于底层`expand_wizard`函数及Wizard对象自身`expand`方法的实现。通常表示操作是否成功（True/False），也可能返回扩展后的数据或状态信息。\n\n异常处理:\n    该函数受`@abnormal_check()`装饰器保护，会在执行前进行异常条件检查和预处理，确保传入的Wizard合法。\n    \n行为说明:\n    - 若`renix.expand_wizard(Wizard=Wizard)`返回False，表示向导展开失败，抛出可继续执行的异常`ContinuableFailure`，带有当前函数名作为错误信息的一部分。\n    - 否则将返回`expand_wizard`的实际结果，可能是True或其他有意义的结果值。\n\n示例:\n    .. code:: RobotFramework\n\n        | Expand Isis Lsp Wizard | Wizards=@{Wizards} |"
}