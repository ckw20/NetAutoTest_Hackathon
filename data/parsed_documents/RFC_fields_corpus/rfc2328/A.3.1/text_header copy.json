{
  "protocol_header": {
    "name": "OSPF Packet Header",
    "version": "2",
    "description": "The standard 24-byte header for OSPF packets, containing information necessary to determine whether the packet should be accepted for further processing.",
    "fields": [
      {1
        "name": "Version #",
        "description": "The OSPF version number. This specification documents version 2 of the protocol.",
        "size_bits": 8,
        "constraints": [
          "Value must be 2 for OSPF version 2."
        ]
      },
      {2
        "name": "Type",
        "description": "The OSPF packet type, indicating the purpose of the packet.",
        "size_bits": 8,
        "constraints": [
          "Valid values are: 1 (Hello), 2 (Database Description), 3 (Link State Request), 4 (Link State Update), 5 (Link State Acknowledgment).",
          "Packets with type Hello are processed by the Hello Protocol, while all other types are sent/received only on adjacencies and must match an active neighbor."
        ]
      },
      {3
        "name": "Packet length",
        "description": "The length of the OSPF protocol packet in bytes, including the standard OSPF header.",
        "size_bits": 16,
        "constraints": [
          "Must be at least 24 bytes (the size of the OSPF header).",
          "The length must accurately reflect the total size of the OSPF packet, including headers and payload, for proper verification during processing."
        ]
      },
      {4
        "name": "Router ID",
        "description": "The Router ID of the packet's source, uniquely identifying the router within the OSPF domain.",
        "size_bits": 32,
        "constraints": [
          "Must be a valid 32-bit IPv4 address.",
          "For virtual links, the Router ID must match the other end of a configured virtual link when the packet is associated with the backbone area."
        ]
      },
      {5
        "name": "Area ID",
        "description": "A 32-bit number identifying the area that this packet belongs to. All OSPF packets are associated with a single area.",
        "size_bits": 32,
        "constraints": [
          "For virtual links, the value must be 0.0.0.0 (backbone Area ID).",
          "Must be a valid 32-bit IPv4 address.",
          "The Area ID must either match the receiving interface's Area ID (indicating a single-hop packet) or indicate the backbone (for virtual links). If matching the receiving interface's Area ID, the packet's IP source address must belong to the same network as the receiving interface, verified by masking both addresses with the interface mask. This check is not performed on point-to-point networks."
        ]
      },
      {6
        "name": "Checksum",
        "description": "The standard IP checksum of the entire contents of the packet, starting with the OSPF packet header but excluding the 64-bit authentication field.",
        "size_bits": 16,
        "constraints": [
          "Calculated as the 16-bit one's complement of the one's complement sum of all the 16-bit words in the packet, excluding the authentication field.",
          "If the packet length is not an integral number of 16-bit words, it is padded with a byte of zero before checksumming.",
          "May be omitted for certain authentication types.",
          "The checksum must be verified at the IP level before the packet is passed to OSPF for further processing."
        ]
      },
      {7
        "name": "AuType",
        "description": "Identifies the authentication procedure to be used for the packet.",
        "size_bits": 16,
        "constraints": [
          "Refer to Appendix D for a list of currently defined authentication types.",
          "The AuType specified in the packet must match the AuType configured for the associated area, and the packet must be authenticated using the corresponding authentication procedure.",
          "Valid values for AuType are: 0 (Null authentication), 1 (Simple password), 2 (Cryptographic authentication). All other values are reserved for assignment by the IANA.",
          "The AuType is configurable on a per-interface or per-network/subnet basis, and additional authentication data is also configurable on a per-interface basis."
        ]
      },
      {8
        "name": "Authentication",
        "description": "A 64-bit field for use by the authentication scheme.",
        "size_bits": 64,
        "constraints": [
          "Refer to Appendix D for details on usage and format.",
          "The authentication procedure may involve verifying the checksum field in the OSPF packet header, which is excluded from the checksum calculation itself.",
          "The Authentication field contains 64 bits of data specific to the authentication scheme determined by the AuType field. For Null authentication (AuType 0), this field is unused. For Simple password (AuType 1), it contains a plaintext password. For Cryptographic authentication (AuType 2), it contains cryptographic data such as a key ID and message digest."
        ]
      },
      {
        "name": "Network Mask",
        "description": "The network mask associated with this interface, used to identify the subnetting configuration of the network.",
        "size_bits": 32,
        "constraints": [
          "The network mask must be a valid 32-bit value representing the subnet mask for the interface.",
          "For example, if the interface is part of a class B network where the third byte is used for subnetting, the network mask would be 0xffffff00.",
          "All routers connected to the same network must agree on the Network Mask value; otherwise, neighbor relationships cannot be established."
        ]
      },
      {
        "name": "HelloInterval",
        "description": "The number of seconds between this router's Hello packets, determining how frequently Hello packets are sent.",
        "size_bits": 16,
        "constraints": [
          "Must be a positive integer value representing the interval in seconds.",
          "All routers on the same network must agree on the HelloInterval value; otherwise, neighbor relationships cannot be formed."
        ]
      },
      {
        "name": "Options",
        "description": "The optional capabilities supported by the router, as documented in Section A.2.",
        "size_bits": 8,
        "constraints": [
          "The Options field is composed of individual bits, each representing a specific capability supported by the router.",
          "Refer to Section A.2 for a detailed description of each bit's meaning and its implications for OSPF operation.",
          "The Options field must accurately reflect the router's capabilities during the Database Exchange process, as mismatches can lead to incorrect adjacency formation or database synchronization."
        ]
      },
      {
        "name": "Rtr Pri",
        "description": "This router's Router Priority, used in the election of the Designated Router and Backup Designated Router.",
        "size_bits": 8,
        "constraints": [
          "Must be an integer value between 0 and 255, inclusive.",
          "A value of 0 indicates that the router is ineligible to become the Designated Router or Backup Designated Router.",
          "Routers with higher Router Priority values are preferred in the election process."
        ]
      },
      {
        "name": "RouterDeadInterval",
        "description": "The number of seconds before declaring a silent router down, used to detect failed neighbors.",
        "size_bits": 32,
        "constraints": [
          "Must be a positive integer value representing the interval in seconds.",
          "All routers on the same network must agree on the RouterDeadInterval value; otherwise, neighbor relationships cannot be formed.",
          "Typically, the RouterDeadInterval is a multiple of the HelloInterval."
        ]
      },
      {
        "name": "Designated Router",
        "description": "The identity of the Designated Router for this network, identified by its IP interface address.",
        "size_bits": 32,
        "constraints": [
          "Must be a valid 32-bit IPv4 address.",
          "Set to 0.0.0.0 if there is no Designated Router for the network.",
          "The Designated Router is elected based on Router Priority and Router ID, with higher priority values being preferred."
        ]
      },
      {
        "name": "Backup Designated Router",
        "description": "The identity of the Backup Designated Router for this network, identified by its IP interface address.",
        "size_bits": 32,
        "constraints": [
          "Must be a valid 32-bit IPv4 address.",
          "Set to 0.0.0.0 if there is no Backup Designated Router for the network.",
          "The Backup Designated Router is elected similarly to the Designated Router, with priority given to higher Router Priority values and Router IDs."
        ]
      },
      {
        "name": "Neighbor",
        "description": "The Router IDs of each router from whom valid Hello packets have been seen recently on the network.",
        "size_bits": 32,
        "constraints": [
          "Each Neighbor field must contain a valid 32-bit Router ID.",
          "The list of Neighbors includes all routers from which valid Hello packets have been received within the last RouterDeadInterval seconds.",
          "Neighbor relationships are dynamically discovered through multicast Hello packets on broadcast or multicast-capable networks."
        ]
      },
      {
        "name": "Interface MTU",
        "description": "The size in bytes of the largest IP datagram that can be sent out the associated interface, without fragmentation.",
        "size_bits": 16,
        "constraints": [
          "Must be a positive integer value representing the maximum transmission unit (MTU) in bytes.",
          "The Interface MTU must match the MTU of the sending interface, as mismatches can lead to packet fragmentation or loss.",
          "For virtual links, the Interface MTU should be set to 0, as virtual links do not correspond to physical interfaces."
        ]
      },
      {
        "name": "I-bit",
        "description": "The Init bit. When set to 1, this packet is the first in the sequence of Database Description Packets.",
        "size_bits": 1,
        "constraints": [
          "Must be either 0 or 1.",
          "When set to 1, it indicates that this packet is the initial packet in the Database Description exchange process.",
          "The I-bit must be cleared (set to 0) in all subsequent Database Description Packets during the exchange process."
        ]
      },
      {
        "name": "M-bit",
        "description": "The More bit. When set to 1, it indicates that more Database Description Packets are to follow.",
        "size_bits": 1,
        "constraints": [
          "Must be either 0 or 1.",
          "When set to 1, it indicates that additional Database Description Packets will be sent to complete the database description.",
          "The M-bit must be cleared (set to 0) in the final Database Description Packet of the exchange process."
        ]
      },
      {
        "name": "MS-bit",
        "description": "The Master/Slave bit. When set to 1, it indicates that the router is the master during the Database Exchange process.",
        "size_bits": 1,
        "constraints": [
          "Must be either 0 or 1.",
          "When set to 1, it indicates that the router is the master and controls the sequencing of Database Description Packets.",
          "When set to 0, it indicates that the router is the slave and must respond to the master's polls with acknowledgments."
        ]
      },
      {
        "name": "DD sequence number",
        "description": "Used to sequence the collection of Database Description Packets.",
        "size_bits": 32,
        "constraints": [
          "Must be a unique 32-bit integer value when the Init bit (I-bit) is set to 1.",
          "The DD sequence number must increment monotonically until the complete database description has been sent.",
          "The sequence number ensures proper ordering and acknowledgment of Database Description Packets during the exchange process."
        ]
      },
      {
        "name": "LS type",
        "description": "The type of the Link State Advertisement being requested.",
        "size_bits": 32,
        "constraints": [
          "Specifies the type of LSA being requested, which must be one of the valid OSPF LSA types (e.g., Router-LSA, Network-LSA, Summary-LSA, etc.).",
          "The LS type must be consistent with the OSPF specification and must uniquely identify the type of LSA being requested."
        ]
      },
      {
        "name": "Link State ID",
        "description": "An identifier for the piece of the link-state database being requested.",
        "size_bits": 32,
        "constraints": [
          "Together with the LS type and Advertising Router, this field uniquely identifies the LSA being requested.",
          "The Link State ID must be a valid 32-bit value representing the specific instance of the LSA in the database."
        ]
      },
      {
        "name": "Advertising Router",
        "description": "The Router ID of the router that originated the LSA being requested.",
        "size_bits": 32,
        "constraints": [
          "Must be a valid 32-bit IPv4 address representing the Router ID of the originating router.",
          "Together with the LS type and Link State ID, this field uniquely identifies the LSA being requested, though not its specific instance."
        ]
      },
      {
        "name": "# LSAs",
        "description": "The number of LSAs included in this update.",
        "size_bits": 32,
        "constraints": [
          "Represents the count of LSAs carried in the Link State Update packet, which can range from 0 to the maximum number of LSAs that fit within the packet length limit.",
          "The value must accurately reflect the number of LSAs present in the packet body, ensuring proper parsing and processing of the LSAs.",
          "The size of the packet, including the header and all LSAs, must not exceed the maximum allowable OSPF packet length."
        ]
      }
    ]
  },
  "comments": "This JSON template describes the structure of a protocol header specification. The 'protocol_header' object contains metadata about the protocol (name, version, description) and an array of field definitions. Each field has properties for name, description, bit size (int, null if variable), and constraints (e.g., valid values/ranges) (a list of strings). Use this template to document network protocol headers."
}