{
    "states": [
        "Down",
        "Attempt",
        "Init",
        "2-Way",
        "ExStart",
        "Exchange",
        "Loading",
        "Full"
    ],
    "init_state": "Down",
    "events": [
        "HelloReceived",
        "Start",
        "2-WayReceived",
        "NegotiationDone",
        "ExchangeDone",
        "BadLSReq",
        "LoadingDone",
        "AdjOK?",
        "SeqNumberMismatch",
        "1-WayReceived",
        "KillNbr",
        "InactivityTimer",
        "LLDown"
    ],
    "transitions": [
        {1
            "from_state": "Down",
            "to_state": "Attempt",
            "event": "Start",
            "actions": [
                "Send an Hello Packet to the neighbor (this neighbor is always associated with an NBMA network)",
                "Start the Inactivity Timer for the neighbor"
            ],
            "constraints": [
                "network_type == 'NBMA'"
            ]
        },
        {2
            "from_state": "Attempt",
            "to_state": "Init",
            "event": "HelloReceived",
            "actions": [
                "Restart the Inactivity Timer for the neighbor"
            ],
            "constraints": []
        },
        {3
            "from_state": "Down",
            "to_state": "Init",
            "event": "HelloReceived",
            "actions": [
                "Start the Inactivity Timer for the neighbor"
            ],
            "constraints": []
        },
        {4
            "from_state": "Init",
            "to_state": "2-Way",
            "event": "2-WayReceived",
            "actions": [
                "Determine whether an adjacency should be established with the neighbor",
                "If not, remain in 2-Way state",
                "Otherwise, increment DD sequence number, declare master, and start sending Database Description Packets"
            ],
            "constraints": []
        },
        {
            "from_state": "ExStart",
            "to_state": "Exchange",
            "event": "NegotiationDone",
            "actions": [
                "List contents of area link state database in neighbor Database summary list",
                "Send Database Description packets"
            ],
            "constraints": []
        },
        {
            "from_state": "Exchange",
            "to_state": "Loading",
            "event": "ExchangeDone",
            "actions": [
                "If Link state request list is not empty, start sending Link State Request packets"
            ],
            "constraints": []
        },
        {
            "from_state": "Exchange",
            "to_state": "Full",
            "event": "ExchangeDone",
            "actions": [
                "No action required"
            ],
            "constraints": [
                "Link state request list is empty"
            ]
        },
        {
            "from_state": "Loading",
            "to_state": "Full",
            "event": "LoadingDone",
            "actions": [
                "No action required"
            ],
            "constraints": []
        },
        {
            "from_state": "2-Way",
            "to_state": "ExStart",
            "event": "AdjOK?",
            "actions": [
                "Determine whether an adjacency should be formed",
                "If yes, transition to ExStart and perform actions for 2-WayReceived event"
            ],
            "constraints": []
        },
        {
            "from_state": "ExStart",
            "to_state": "2-Way",
            "event": "AdjOK?",
            "actions": [
                "Clear Link state retransmission list, Database summary list, and Link state request list"
            ],
            "constraints": [
                "Adjacency no longer needed"
            ]
        },
        {
            "from_state": "Exchange",
            "to_state": "ExStart",
            "event": "SeqNumberMismatch",
            "actions": [
                "Clear Link state retransmission list, Database summary list, and Link state request list",
                "Increment DD sequence number, declare master, and start sending Database Description Packets"
            ],
            "constraints": []
        },
        {
            "from_state": "Exchange",
            "to_state": "ExStart",
            "event": "BadLSReq",
            "actions": [
                "Clear Link state retransmission list, Database summary list, and Link state request list",
                "Increment DD sequence number, declare master, and start sending Database Description Packets"
            ],
            "constraints": []
        },
        {
            "from_state": "*",
            "to_state": "Down",
            "event": "KillNbr",
            "actions": [
                "Clear Link state retransmission list, Database summary list, and Link state request list",
                "Disable Inactivity Timer"
            ],
            "constraints": []
        },
        {
            "from_state": "*",
            "to_state": "Down",
            "event": "LLDown",
            "actions": [
                "Clear Link state retransmission list, Database summary list, and Link state request list",
                "Disable Inactivity Timer"
            ],
            "constraints": []
        },
        {
            "from_state": "*",
            "to_state": "Down",
            "event": "InactivityTimer",
            "actions": [
                "Clear Link state retransmission list, Database summary list, and Link state request list"
            ],
            "constraints": []
        },
        {
            "from_state": "2-Way",
            "to_state": "Init",
            "event": "1-WayReceived",
            "actions": [
                "Clear Link state retransmission list, Database summary list, and Link state request list"
            ],
            "constraints": []
        }
    ]
}



State(s):  Init or greater

Event:  HelloReceived

New state:  No state change.

Action:  Restart the Inactivity Timer for the neighbor, since
        the neighbor has again been heard from.



State(s):  2-Way

Event:  AdjOK?

New state:  Depends upon action routine.

Action:  Determine whether an adjacency should be formed with
        the neighboring router (see Section 10.4).  If not,
        the neighbor state remains at 2-Way.  Otherwise,
        transition the neighbor state to ExStart and perform
        the actions associated with the above state machine
        entry for state Init and event 2-WayReceived.