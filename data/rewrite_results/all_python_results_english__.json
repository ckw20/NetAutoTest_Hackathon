[
  {
    "path": "/root/NetAutoTest/data/ref_projects/Examples/Python/Port/Interface/create_interface.py",
    "intent": "=================================================================================\n Objective   \t:   测试目的 : 检查仪表创建接口正常\n\n Step\t\t\t:\t测试步骤1: 预约两个自环端口Port_1、Port_2;\n                   测试步骤2: 两个端口分别创建各种类型接口;\n\n Criteria    \t:   预期结果1: 步骤2中所有接口创建成功;\n\n Created by   \t:  \tTester-001\n\n Bugs   \t    :  \tNone\n =================================================================================",
    "intent_en": "=================================================================================\nObjective: Purpose: To verify that the instrument's interface creation functions properly.\n\nStep 1: Reserve two loopback ports, Port_1 and Port_2.\nStep 2: Create various types of interfaces on each port.\n\nCriteria: Expected Result 1: All interfaces in step 2 are created successfully.\n\nCreated by: Tester-001\n\nBugs: None\n=================================================================================",
    "code": "from TesterLibrary.base import *\n\nlocations = ['//10.0.11.191/1/15', '//10.0.11.191/1/16'] if len(sys.argv) < 2 else sys.argv[1].split(' ')\nProduct = 'DarYu' if len(sys.argv) < 3 else sys.argv[2].split(' ')\n\nverdict = 'pass'\nerrInfo = ''\ntry:\n    # 初始化仪表，执行仪表平台为DarYu\n    init_tester(Product=Product)\n\n    # 创建端口，并预约端口\n    Port_UP, Port_Down = reserve_port(Locations=locations, Debug=True)\n\n    # 创建接口\n    # ------------------------------------------------------------------------------\n    # 链路层: eth,  网络层: None\n    interface = create_interface(Port=Port_UP, Layers='eth')\n    # 等价写法, 先使用create_interface创建接口，再使用edit_interface_stack修改接口结构\n    interface = create_interface(Port=Port_Down)\n    edit_interface_stack(Interfaces=interface, Layers='eth')\n\n    # 链路层: eth,  网络层: ipv4\n    interface = create_interface(Port=Port_UP, Layers='eth', Tops='ipv4')\n    # 等价写法\n    interface = create_interface(Port=Port_Down)\n    edit_interface_stack(Interfaces=interface, Layers='eth', Tops='ipv4')\n\n    # 链路层: eth,  网络层: ipv6\n    interface = create_interface(Port=Port_UP, Layers='eth', Tops='ipv6')\n    # 等价写法\n    interface = create_interface(Port=Port_Down)\n    edit_interface_stack(Interfaces=interface, Layers='eth', Tops='ipv6')\n\n    # 链路层: eth,  网络层: ipv4, ipv6\n    interface = create_interface(Port=Port_UP, Layers='eth', Tops=['ipv4', 'ipv6'])\n    # 等价写法\n    interface = create_interface(Port=Port_Down)\n    edit_interface_stack(Interfaces=interface, Layers='eth', Tops=['ipv4', 'ipv6'])\n\n    # -------------------------------------单层vlan-----------------------------------------\n    # 链路层: eth, vlan  网络层: None\n    interface = create_interface(Port=Port_UP, Layers=['eth', 'vlan'])\n    # 等价写法\n    interface = create_interface(Port=Port_Down)\n    edit_interface_stack(Interfaces=interface, Layers=['eth', 'vlan'])\n\n    # 链路层: eth, vlan  网络层: ipv4\n    interface = create_interface(Port=Port_UP, Layers=['eth', 'vlan'], Tops='ipv4')\n    # 等价写法\n    interface = create_interface(Port=Port_Down)\n    edit_interface_stack(Interfaces=interface, Layers=['eth', 'vlan'], Tops='ipv4')\n\n    # 链路层: eth, vlan  网络层: ipv6\n    interface = create_interface(Port=Port_UP, Layers=['eth', 'vlan'], Tops='ipv6')\n    # 等价写法\n    interface = create_interface(Port=Port_Down)\n    edit_interface_stack(Interfaces=interface, Layers=['eth', 'vlan'], Tops='ipv6')\n\n    # 链路层: eth, vlan  网络层: ipv4, ipv6\n    interface = create_interface(Port=Port_UP, Layers=['eth', 'vlan'], Tops=['ipv4', 'ipv6'])\n    # 等价写法\n    interface = create_interface(Port=Port_Down)\n    edit_interface_stack(Interfaces=interface, Layers=['eth', 'vlan'], Tops=['ipv4', 'ipv6'])\n\n    # -------------------------------------双层vlan-----------------------------------------\n    # 链路层: eth, vlan, vlan  网络层: None\n    interface = create_interface(Port=Port_UP, Layers=['eth', 'vlan', 'vlan'])\n    # 等价写法\n    interface = create_interface(Port=Port_Down)\n    edit_interface_stack(Interfaces=interface, Layers=['eth', 'vlan', 'vlan'])\n\n    # 链路层: eth, vlan, vlan  网络层: ipv4\n    interface = create_interface(Port=Port_UP, Layers=['eth', 'vlan', 'vlan'], Tops='ipv4')\n    # 等价写法\n    interface = create_interface(Port=Port_Down)\n    edit_interface_stack(Interfaces=interface, Layers=['eth', 'vlan', 'vlan'], Tops='ipv4')\n\n    # 链路层: eth, vlan, vlan  网络层: ipv6\n    interface = create_interface(Port=Port_UP, Layers=['eth', 'vlan', 'vlan'], Tops='ipv6')\n    # 等价写法\n    interface = create_interface(Port=Port_Down)\n    edit_interface_stack(Interfaces=interface, Layers=['eth', 'vlan', 'vlan'], Tops='ipv6')\n\n    # 链路层: eth, vlan, vlan  网络层: ipv4, ipv6\n    interface = create_interface(Port=Port_UP, Layers=['eth', 'vlan', 'vlan'], Tops=['ipv4', 'ipv6'])\n    # 等价写法\n    interface = create_interface(Port=Port_Down)\n    edit_interface_stack(Interfaces=interface, Layers=['eth', 'vlan', 'vlan'], Tops=['ipv4', 'ipv6'])\n\n    # -------------------------------------pppoe-----------------------------------------\n    # 链路层: eth, pppoe  网络层: None\n    interface = create_interface(Port=Port_UP, Layers=['eth', 'pppoe'])\n    # 等价写法\n    interface = create_interface(Port=Port_Down)\n    edit_interface_stack(Interfaces=interface, Layers=['eth', 'pppoe'])\n\n    # 链路层: eth, pppoe  网络层: ipv4\n    interface = create_interface(Port=Port_UP, Layers=['eth', 'pppoe'], Tops='ipv4')\n    # 等价写法\n    interface = create_interface(Port=Port_Down)\n    edit_interface_stack(Interfaces=interface, Layers=['eth', 'pppoe'], Tops='ipv4')\n\n    # 链路层: eth, pppoe  网络层: ipv6\n    interface = create_interface(Port=Port_UP, Layers=['eth', 'pppoe'], Tops='ipv6')\n    # 等价写法\n    interface = create_interface(Port=Port_Down)\n    edit_interface_stack(Interfaces=interface, Layers=['eth', 'pppoe'], Tops='ipv6')\n\n    # 链路层: eth, pppoe  网络层: ipv4, ipv6\n    interface = create_interface(Port=Port_UP, Layers=['eth', 'pppoe'], Tops=['ipv4', 'ipv6'])\n    # 等价写法\n    interface = create_interface(Port=Port_Down)\n    edit_interface_stack(Interfaces=interface, Layers=['eth', 'pppoe'], Tops=['ipv4', 'ipv6'])\n\n    # 链路层: eth, vlan, pppoe  网络层: ipv4, ipv6\n    interface = create_interface(Port=Port_UP, Layers=['eth', 'vlan', 'pppoe'], Tops=['ipv4', 'ipv6'])\n    # 等价写法\n    interface = create_interface(Port=Port_Down)\n    edit_interface_stack(Interfaces=interface, Layers=['eth', 'vlan', 'pppoe'], Tops=['ipv4', 'ipv6'])\n\n    # 链路层: eth, vlan, vlan, pppoe  网络层: ipv4, ipv6\n    interface = create_interface(Port=Port_UP, Layers=['eth', 'vlan', 'vlan', 'pppoe'], Tops=['ipv4', 'ipv6'])\n    # 等价写法\n    interface = create_interface(Port=Port_Down)\n    edit_interface_stack(Interfaces=interface, Layers=['eth', 'vlan', 'vlan', 'pppoe'], Tops=['ipv4', 'ipv6'])\n\n    # -------------------------------------l2tp-----------------------------------------\n    # 链路层: eth, l2tp 网络层: ipv4\n    interface = create_interface(Port=Port_UP, Layers=['eth', 'l2tp'], Tops='ipv4')\n    # 等价写法\n    interface = create_interface(Port=Port_Down)\n    edit_interface_stack(Interfaces=interface, Layers=['eth', 'l2tp'], Tops='ipv4')\n    # 链路层: eth, l2tp 网络层: ipv6\n    interface = create_interface(Port=Port_UP, Layers=['eth', 'l2tp'], Tops='ipv6')\n    # 等价写法\n    interface = create_interface(Port=Port_Down)\n    edit_interface_stack(Interfaces=interface, Layers=['eth', 'l2tp'], Tops='ipv6')\n\n    # 链路层: eth, l2tp, ipv4 网络层: ipv4\n    interface = create_interface(Port=Port_UP, Layers=['eth', 'l2tp', 'ipv4'], Tops='ipv4')\n    # 等价写法\n    interface = create_interface(Port=Port_Down)\n    edit_interface_stack(Interfaces=interface, Layers=['eth', 'l2tp', 'ipv4'], Tops='ipv4')\n    # 链路层: eth, l2tp, ipv4 网络层: ipv6\n    interface = create_interface(Port=Port_UP, Layers=['eth', 'l2tp', 'ipv4'], Tops='ipv6')\n    # 等价写法\n    interface = create_interface(Port=Port_Down)\n    edit_interface_stack(Interfaces=interface, Layers=['eth', 'l2tp', 'ipv4'], Tops='ipv6')\n\n    # 链路层: eth, l2tp, ipv6 网络层: ipv4\n    interface = create_interface(Port=Port_UP, Layers=['eth', 'l2tp', 'ipv6'], Tops='ipv4')\n    # 等价写法\n    interface = create_interface(Port=Port_Down)\n    edit_interface_stack(Interfaces=interface, Layers=['eth', 'l2tp', 'ipv6'], Tops='ipv4')\n    # 链路层: eth, l2tp, ipv4 网络层: ipv6\n    interface = create_interface(Port=Port_UP, Layers=['eth', 'l2tp', 'ipv6'], Tops='ipv6')\n    # 等价写法\n    interface = create_interface(Port=Port_Down)\n    edit_interface_stack(Interfaces=interface, Layers=['eth', 'l2tp', 'ipv6'], Tops='ipv6')\n\n    # 链路层: eth, l2tp, ipv4/ipv6 网络层: ipv4\n    interface = create_interface(Port=Port_UP, Layers=['eth', 'l2tp', 'ipv4', 'ipv6'], Tops='ipv4')\n    # 等价写法\n    interface = create_interface(Port=Port_Down)\n    edit_interface_stack(Interfaces=interface, Layers=['eth', 'l2tp', 'ipv4', 'ipv6'], Tops='ipv4')\n    # 链路层: eth, l2tp, ipv4/ipv6 网络层: ipv6\n    interface = create_interface(Port=Port_UP, Layers=['eth', 'l2tp', 'ipv4', 'ipv6'], Tops='ipv6')\n    # 等价写法\n    interface = create_interface(Port=Port_Down)\n    edit_interface_stack(Interfaces=interface, Layers=['eth', 'l2tp', 'ipv4', 'ipv6'], Tops='ipv6')\n\n    # 链路层: eth, vlan, l2tp, ipv4/ipv6 网络层: ipv4\n    interface = create_interface(Port=Port_UP, Layers=['eth', 'vlan', 'l2tp', 'ipv4', 'ipv6'], Tops='ipv4')\n    # 等价写法\n    interface = create_interface(Port=Port_Down)\n    edit_interface_stack(Interfaces=interface, Layers=['eth', 'vlan', 'l2tp', 'ipv4', 'ipv6'], Tops='ipv4')\n    # 链路层: eth, vlan, l2tp, ipv4/ipv6 网络层: ipv6\n    interface = create_interface(Port=Port_UP, Layers=['eth', 'vlan', 'l2tp', 'ipv4', 'ipv6'], Tops='ipv6')\n    # 等价写法\n    interface = create_interface(Port=Port_Down)\n    edit_interface_stack(Interfaces=interface, Layers=['eth', 'vlan', 'l2tp', 'ipv4', 'ipv6'], Tops='ipv6')\n\n    # 链路层: eth, vlan, vlan, l2tp, ipv4/ipv6 网络层: ipv4\n    interface = create_interface(Port=Port_UP, Layers=['eth', 'vlan', 'vlan', 'l2tp', 'ipv4', 'ipv6'], Tops='ipv4')\n    # 等价写法\n    interface = create_interface(Port=Port_Down)\n    edit_interface_stack(Interfaces=interface, Layers=['eth', 'vlan', 'vlan', 'l2tp', 'ipv4', 'ipv6'], Tops='ipv4')\n    # 链路层: eth, vlan, vlan, l2tp, ipv4/ipv6 网络层: ipv6\n    interface = create_interface(Port=Port_UP, Layers=['eth', 'vlan', 'vlan', 'l2tp', 'ipv4', 'ipv6'], Tops='ipv6')\n    # 等价写法\n    interface = create_interface(Port=Port_Down)\n    edit_interface_stack(Interfaces=interface, Layers=['eth', 'vlan', 'vlan', 'l2tp', 'ipv4', 'ipv6'], Tops='ipv6')\n\n    # 保存配置文件\n    dirname, tempfilename = os.path.split(os.path.abspath(__file__))\n    filename, extension = os.path.splitext(tempfilename)\n    save_case(Path=f'{dirname}/xcfg/{filename}.xcfg')\n\nexcept Exception as e:\n    verdict = 'fail'\n    errInfo = repr(e)\nfinally:\n    print(f'errInfo:\\n{errInfo}')\n    print(f'verdict:{verdict}')",
    "functions": [
      "init_tester:初始化测试仪表",
      "save_case:测试仪表保存配置文件",
      "reserve_port:预约测试仪表的端口",
      "create_interface:在指定端口上創建接口",
      "edit_interface_stack:修改测试仪表接口的结构"
    ],
    "rewrite_intent": "{\n  \"Subtask 1\": \"Initialize the tester with specified product (default 'DarYu') using init_tester API.\",\n  \"Subtask 2\": \"Reserve two ports (Port_UP and Port_Down) from provided locations using reserve_port API.\",\n  \"Subtask 3\": \"For each port, create interfaces with Ethernet layer only and verify successful creation using create_interface API.\",\n  \"Subtask 4\": \"For each port, create interfaces with Ethernet+IPv4 layers using both create_interface with parameters and create_interface+edit_interface_stack methods, verifying success after each operation.\",\n  \"Subtask 5\": \"For each port, create interfaces with Ethernet+IPv6 layers using both direct creation and stack editing methods, verifying success after each operation.\",\n  \"Subtask 6\": \"For each port, create interfaces with Ethernet+IPv4+IPv6 layers using both creation approaches, verifying success after each operation.\",\n  \"Subtask 7\": \"For each port, create interfaces with Ethernet+VLAN layers (single/double VLAN) and various network layers (none/IPv4/IPv6/dual-stack) using both creation methods, verifying success after each operation.\",\n  \"Subtask 8\": \"For each port, create interfaces with Ethernet+PPPoE layers and various network layers using both creation methods, verifying success after each operation.\",\n  \"Subtask 9\": \"For each port, create interfaces with Ethernet+VLAN+PPPoE layers (single/double VLAN) and dual-stack network layers using both creation methods, verifying success after each operation.\",\n  \"Subtask 10\": \"For each port, create interfaces with Ethernet+L2TP layers and various inner IP configurations (none/IPv4/IPv6/dual-stack) using both creation methods, verifying success after each operation.\",\n  \"Subtask 11\": \"For each port, create interfaces with Ethernet+VLAN+L2TP layers and various inner IP configurations using both creation methods, verifying success after each operation.\",\n  \"Subtask 12\": \"Save the test configuration to file using save_case API for traceability.\"\n}",
    "prompt": "You are a senior network testing expert, skilled at breaking down complex natural language test intents into executable fine-grained action steps.\n\nYou will receive the following inputs:\n\nTask Intent: A description in natural language of the goals and steps of a network testing case.  \nCode Snippet: The test script code.  \nAPI Functions: A list of available API interfaces used to generate the test script.\n\n---\n\nYour task is:\n\nBased on the above inputs, rewrite the Task Intent into a standardized and fine-grained list of subtasks to guide automated test script generation.\n\nEach subtask must satisfy the following critical requirements:\n1. Follow the logical execution order, reflecting the actual sequence of network testing steps;\n2. Be clearly and precisely described to facilitate semantic matching with API Functions;\n3. Ensure no key testing intent or condition is omitted (e.g., configurations, validations, expected outcomes);\n4. Maintain contextual consistency across tasks so that each subtask smoothly connects with the output of the previous one.\n\n---\n\n## Input:\n- Task Intent: \n  =================================================================================\nObjective: Purpose: To verify that the instrument's interface creation functions properly.\n\nStep 1: Reserve two loopback ports, Port_1 and Port_2.\nStep 2: Create various types of interfaces on each port.\n\nCriteria: Expected Result 1: All interfaces in step 2 are created successfully.\n\nCreated by: Tester-001\n\nBugs: None\n=================================================================================\n- Code Snippet: \n  ```python\n  from TesterLibrary.base import *\n\nlocations = ['//10.0.11.191/1/15', '//10.0.11.191/1/16'] if len(sys.argv) < 2 else sys.argv[1].split(' ')\nProduct = 'DarYu' if len(sys.argv) < 3 else sys.argv[2].split(' ')\n\nverdict = 'pass'\nerrInfo = ''\ntry:\n    # 初始化仪表，执行仪表平台为DarYu\n    init_tester(Product=Product)\n\n    # 创建端口，并预约端口\n    Port_UP, Port_Down = reserve_port(Locations=locations, Debug=True)\n\n    # 创建接口\n    # ------------------------------------------------------------------------------\n    # 链路层: eth,  网络层: None\n    interface = create_interface(Port=Port_UP, Layers='eth')\n    # 等价写法, 先使用create_interface创建接口，再使用edit_interface_stack修改接口结构\n    interface = create_interface(Port=Port_Down)\n    edit_interface_stack(Interfaces=interface, Layers='eth')\n\n    # 链路层: eth,  网络层: ipv4\n    interface = create_interface(Port=Port_UP, Layers='eth', Tops='ipv4')\n    # 等价写法\n    interface = create_interface(Port=Port_Down)\n    edit_interface_stack(Interfaces=interface, Layers='eth', Tops='ipv4')\n\n    # 链路层: eth,  网络层: ipv6\n    interface = create_interface(Port=Port_UP, Layers='eth', Tops='ipv6')\n    # 等价写法\n    interface = create_interface(Port=Port_Down)\n    edit_interface_stack(Interfaces=interface, Layers='eth', Tops='ipv6')\n\n    # 链路层: eth,  网络层: ipv4, ipv6\n    interface = create_interface(Port=Port_UP, Layers='eth', Tops=['ipv4', 'ipv6'])\n    # 等价写法\n    interface = create_interface(Port=Port_Down)\n    edit_interface_stack(Interfaces=interface, Layers='eth', Tops=['ipv4', 'ipv6'])\n\n    # -------------------------------------单层vlan-----------------------------------------\n    # 链路层: eth, vlan  网络层: None\n    interface = create_interface(Port=Port_UP, Layers=['eth', 'vlan'])\n    # 等价写法\n    interface = create_interface(Port=Port_Down)\n    edit_interface_stack(Interfaces=interface, Layers=['eth', 'vlan'])\n\n    # 链路层: eth, vlan  网络层: ipv4\n    interface = create_interface(Port=Port_UP, Layers=['eth', 'vlan'], Tops='ipv4')\n    # 等价写法\n    interface = create_interface(Port=Port_Down)\n    edit_interface_stack(Interfaces=interface, Layers=['eth', 'vlan'], Tops='ipv4')\n\n    # 链路层: eth, vlan  网络层: ipv6\n    interface = create_interface(Port=Port_UP, Layers=['eth', 'vlan'], Tops='ipv6')\n    # 等价写法\n    interface = create_interface(Port=Port_Down)\n    edit_interface_stack(Interfaces=interface, Layers=['eth', 'vlan'], Tops='ipv6')\n\n    # 链路层: eth, vlan  网络层: ipv4, ipv6\n    interface = create_interface(Port=Port_UP, Layers=['eth', 'vlan'], Tops=['ipv4', 'ipv6'])\n    # 等价写法\n    interface = create_interface(Port=Port_Down)\n    edit_interface_stack(Interfaces=interface, Layers=['eth', 'vlan'], Tops=['ipv4', 'ipv6'])\n\n    # -------------------------------------双层vlan-----------------------------------------\n    # 链路层: eth, vlan, vlan  网络层: None\n    interface = create_interface(Port=Port_UP, Layers=['eth', 'vlan', 'vlan'])\n    # 等价写法\n    interface = create_interface(Port=Port_Down)\n    edit_interface_stack(Interfaces=interface, Layers=['eth', 'vlan', 'vlan'])\n\n    # 链路层: eth, vlan, vlan  网络层: ipv4\n    interface = create_interface(Port=Port_UP, Layers=['eth', 'vlan', 'vlan'], Tops='ipv4')\n    # 等价写法\n    interface = create_interface(Port=Port_Down)\n    edit_interface_stack(Interfaces=interface, Layers=['eth', 'vlan', 'vlan'], Tops='ipv4')\n\n    # 链路层: eth, vlan, vlan  网络层: ipv6\n    interface = create_interface(Port=Port_UP, Layers=['eth', 'vlan', 'vlan'], Tops='ipv6')\n    # 等价写法\n    interface = create_interface(Port=Port_Down)\n    edit_interface_stack(Interfaces=interface, Layers=['eth', 'vlan', 'vlan'], Tops='ipv6')\n\n    # 链路层: eth, vlan, vlan  网络层: ipv4, ipv6\n    interface = create_interface(Port=Port_UP, Layers=['eth', 'vlan', 'vlan'], Tops=['ipv4', 'ipv6'])\n    # 等价写法\n    interface = create_interface(Port=Port_Down)\n    edit_interface_stack(Interfaces=interface, Layers=['eth', 'vlan', 'vlan'], Tops=['ipv4', 'ipv6'])\n\n    # -------------------------------------pppoe-----------------------------------------\n    # 链路层: eth, pppoe  网络层: None\n    interface = create_interface(Port=Port_UP, Layers=['eth', 'pppoe'])\n    # 等价写法\n    interface = create_interface(Port=Port_Down)\n    edit_interface_stack(Interfaces=interface, Layers=['eth', 'pppoe'])\n\n    # 链路层: eth, pppoe  网络层: ipv4\n    interface = create_interface(Port=Port_UP, Layers=['eth', 'pppoe'], Tops='ipv4')\n    # 等价写法\n    interface = create_interface(Port=Port_Down)\n    edit_interface_stack(Interfaces=interface, Layers=['eth', 'pppoe'], Tops='ipv4')\n\n    # 链路层: eth, pppoe  网络层: ipv6\n    interface = create_interface(Port=Port_UP, Layers=['eth', 'pppoe'], Tops='ipv6')\n    # 等价写法\n    interface = create_interface(Port=Port_Down)\n    edit_interface_stack(Interfaces=interface, Layers=['eth', 'pppoe'], Tops='ipv6')\n\n    # 链路层: eth, pppoe  网络层: ipv4, ipv6\n    interface = create_interface(Port=Port_UP, Layers=['eth', 'pppoe'], Tops=['ipv4', 'ipv6'])\n    # 等价写法\n    interface = create_interface(Port=Port_Down)\n    edit_interface_stack(Interfaces=interface, Layers=['eth', 'pppoe'], Tops=['ipv4', 'ipv6'])\n\n    # 链路层: eth, vlan, pppoe  网络层: ipv4, ipv6\n    interface = create_interface(Port=Port_UP, Layers=['eth', 'vlan', 'pppoe'], Tops=['ipv4', 'ipv6'])\n    # 等价写法\n    interface = create_interface(Port=Port_Down)\n    edit_interface_stack(Interfaces=interface, Layers=['eth', 'vlan', 'pppoe'], Tops=['ipv4', 'ipv6'])\n\n    # 链路层: eth, vlan, vlan, pppoe  网络层: ipv4, ipv6\n    interface = create_interface(Port=Port_UP, Layers=['eth', 'vlan', 'vlan', 'pppoe'], Tops=['ipv4', 'ipv6'])\n    # 等价写法\n    interface = create_interface(Port=Port_Down)\n    edit_interface_stack(Interfaces=interface, Layers=['eth', 'vlan', 'vlan', 'pppoe'], Tops=['ipv4', 'ipv6'])\n\n    # -------------------------------------l2tp-----------------------------------------\n    # 链路层: eth, l2tp 网络层: ipv4\n    interface = create_interface(Port=Port_UP, Layers=['eth', 'l2tp'], Tops='ipv4')\n    # 等价写法\n    interface = create_interface(Port=Port_Down)\n    edit_interface_stack(Interfaces=interface, Layers=['eth', 'l2tp'], Tops='ipv4')\n    # 链路层: eth, l2tp 网络层: ipv6\n    interface = create_interface(Port=Port_UP, Layers=['eth', 'l2tp'], Tops='ipv6')\n    # 等价写法\n    interface = create_interface(Port=Port_Down)\n    edit_interface_stack(Interfaces=interface, Layers=['eth', 'l2tp'], Tops='ipv6')\n\n    # 链路层: eth, l2tp, ipv4 网络层: ipv4\n    interface = create_interface(Port=Port_UP, Layers=['eth', 'l2tp', 'ipv4'], Tops='ipv4')\n    # 等价写法\n    interface = create_interface(Port=Port_Down)\n    edit_interface_stack(Interfaces=interface, Layers=['eth', 'l2tp', 'ipv4'], Tops='ipv4')\n    # 链路层: eth, l2tp, ipv4 网络层: ipv6\n    interface = create_interface(Port=Port_UP, Layers=['eth', 'l2tp', 'ipv4'], Tops='ipv6')\n    # 等价写法\n    interface = create_interface(Port=Port_Down)\n    edit_interface_stack(Interfaces=interface, Layers=['eth', 'l2tp', 'ipv4'], Tops='ipv6')\n\n    # 链路层: eth, l2tp, ipv6 网络层: ipv4\n    interface = create_interface(Port=Port_UP, Layers=['eth', 'l2tp', 'ipv6'], Tops='ipv4')\n    # 等价写法\n    interface = create_interface(Port=Port_Down)\n    edit_interface_stack(Interfaces=interface, Layers=['eth', 'l2tp', 'ipv6'], Tops='ipv4')\n    # 链路层: eth, l2tp, ipv4 网络层: ipv6\n    interface = create_interface(Port=Port_UP, Layers=['eth', 'l2tp', 'ipv6'], Tops='ipv6')\n    # 等价写法\n    interface = create_interface(Port=Port_Down)\n    edit_interface_stack(Interfaces=interface, Layers=['eth', 'l2tp', 'ipv6'], Tops='ipv6')\n\n    # 链路层: eth, l2tp, ipv4/ipv6 网络层: ipv4\n    interface = create_interface(Port=Port_UP, Layers=['eth', 'l2tp', 'ipv4', 'ipv6'], Tops='ipv4')\n    # 等价写法\n    interface = create_interface(Port=Port_Down)\n    edit_interface_stack(Interfaces=interface, Layers=['eth', 'l2tp', 'ipv4', 'ipv6'], Tops='ipv4')\n    # 链路层: eth, l2tp, ipv4/ipv6 网络层: ipv6\n    interface = create_interface(Port=Port_UP, Layers=['eth', 'l2tp', 'ipv4', 'ipv6'], Tops='ipv6')\n    # 等价写法\n    interface = create_interface(Port=Port_Down)\n    edit_interface_stack(Interfaces=interface, Layers=['eth', 'l2tp', 'ipv4', 'ipv6'], Tops='ipv6')\n\n    # 链路层: eth, vlan, l2tp, ipv4/ipv6 网络层: ipv4\n    interface = create_interface(Port=Port_UP, Layers=['eth', 'vlan', 'l2tp', 'ipv4', 'ipv6'], Tops='ipv4')\n    # 等价写法\n    interface = create_interface(Port=Port_Down)\n    edit_interface_stack(Interfaces=interface, Layers=['eth', 'vlan', 'l2tp', 'ipv4', 'ipv6'], Tops='ipv4')\n    # 链路层: eth, vlan, l2tp, ipv4/ipv6 网络层: ipv6\n    interface = create_interface(Port=Port_UP, Layers=['eth', 'vlan', 'l2tp', 'ipv4', 'ipv6'], Tops='ipv6')\n    # 等价写法\n    interface = create_interface(Port=Port_Down)\n    edit_interface_stack(Interfaces=interface, Layers=['eth', 'vlan', 'l2tp', 'ipv4', 'ipv6'], Tops='ipv6')\n\n    # 链路层: eth, vlan, vlan, l2tp, ipv4/ipv6 网络层: ipv4\n    interface = create_interface(Port=Port_UP, Layers=['eth', 'vlan', 'vlan', 'l2tp', 'ipv4', 'ipv6'], Tops='ipv4')\n    # 等价写法\n    interface = create_interface(Port=Port_Down)\n    edit_interface_stack(Interfaces=interface, Layers=['eth', 'vlan', 'vlan', 'l2tp', 'ipv4', 'ipv6'], Tops='ipv4')\n    # 链路层: eth, vlan, vlan, l2tp, ipv4/ipv6 网络层: ipv6\n    interface = create_interface(Port=Port_UP, Layers=['eth', 'vlan', 'vlan', 'l2tp', 'ipv4', 'ipv6'], Tops='ipv6')\n    # 等价写法\n    interface = create_interface(Port=Port_Down)\n    edit_interface_stack(Interfaces=interface, Layers=['eth', 'vlan', 'vlan', 'l2tp', 'ipv4', 'ipv6'], Tops='ipv6')\n\n    # 保存配置文件\n    dirname, tempfilename = os.path.split(os.path.abspath(__file__))\n    filename, extension = os.path.splitext(tempfilename)\n    save_case(Path=f'{dirname}/xcfg/{filename}.xcfg')\n\nexcept Exception as e:\n    verdict = 'fail'\n    errInfo = repr(e)\nfinally:\n    print(f'errInfo:\\n{errInfo}')\n    print(f'verdict:{verdict}')\n  ```\n- API Functions: \n  init_tester:初始化测试仪表;\nsave_case:测试仪表保存配置文件;\nreserve_port:预约测试仪表的端口;\ncreate_interface:在指定端口上創建接口;\nedit_interface_stack:修改测试仪表接口的结构\n\n### Output format requirement:\n\nPlease return the result in JSON format. Use keys like `\"Subtask 1\"`, `\"Subtask 2\"`, etc., and values as detailed task descriptions. Do not include any additional content. For example:\n{\n  \"Subtask 1\": \"Configure switch port eth1 to connect with the tester and set it to full-duplex mode.\",\n  \"Subtask 2\": \"Use the API to create a traffic stream with a frame length of 64 bytes and a test duration of 60 seconds.\",\n  \"Subtask 3\": \"Start the traffic transmission and record the packet loss and throughput during the test.\",\n  \"Subtask 4\": \"Verify whether the test results meet expectations: throughput reaches 100%.\"\n}\n"
  }
]